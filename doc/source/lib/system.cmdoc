library System
{
    description
    {
        The System library is the run-time library for Cmajor programs.
        The System library is built on top of the "\href[page=1]{./Support.pdf}{Support}" library that
        contains the run-time support for Cmajor language implementation 
        (primarily support for exception handling).
        The Support library in turn is built on top of the "\href[page=1]{./Os.pdf}{Os}" library that
        provides interface to operating system services.
        The Os library is built on top of the C run-time library for the platform.
        In Windows this is the C run-time library of the "\textbf{mingw\_w64's gcc}" compiler and
        in Linux this the C run-time library of the "\textbf{GNU/Linux gcc}" compiler.
        Figure "\ref{fig:libraries}" illustrates the layered architecture of Cmajor.
        
        "\begin{figure}[htb]\caption{Libraries}\label{fig:libraries}"
        "\framebox[\textwidth][c]{system}\\"
        "\framebox[\textwidth][c]{support}\\"
        "\framebox[\textwidth][c]{os}\\"
        "\framebox[\textwidth][c]{C run-time}\\"
        "\end{figure}"
        
        "\vspace{1cm}"
        Note: You may want to enable Previous View and Next View commands in the PDF viewer for comfortable browsing experience in this document.
    }
    copyright
    {
        ========================================================================
        Copyright (c) 2012-2015 Seppo Laakko
        http://sourceforge.net/projects/cmajor/
        
        Distributed under the GNU General Public License, version 3 (GPLv3).
        (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)
        
        ========================================================================
    }
    copyright
    {
        * Copyright (c) 1994
        * Hewlett-Packard Company
        *
        * Permission to use, copy, modify, distribute and sell this software
        * and its documentation for any purpose is hereby granted without fee,
        * provided that the above copyright notice appear in all copies and
        * that both that copyright notice and this permission notice appear
        * in supporting documentation.  Hewlett-Packard Company makes no
        * representations about the suitability of this software for any
        * purpose.  It is provided "as is" without express or implied warranty.
        *
        *
        * Copyright (c) 1996,1997
        * Silicon Graphics Computer Systems, Inc.
        *
        * Permission to use, copy, modify, distribute and sell this software
        * and its documentation for any purpose is hereby granted without fee,
        * provided that the above copyright notice appear in all copies and
        * that both that copyright notice and this permission notice appear
        * in supporting documentation.  Silicon Graphics makes no
        * representations about the suitability of this software for any
        * purpose.  It is provided "as is" without express or implied warranty.
        *
    }
    copyright
    {
        Copyright (c) 2009 Alexander Stepanov and Paul McJones
        
        Permission to use, copy, modify, distribute and sell this software
        and its documentation for any purpose is hereby granted without
        fee, provided that the above copyright notice appear in all copies
        and that both that copyright notice and this permission notice
        appear in supporting documentation. The authors make no
        representations about the suitability of this software for any
        purpose. It is provided "as is" without express or implied
        warranty.
    }
    namespace 
    {
        description
        {
            The global namespace contains intrinsic concepts.
        }
        concept Common.T.U
        {
            description
            {
                Sets a requirement that types T and U have a common type.
                The common type is exposed as type parameter CommonType.
            }
            remarks
            {
                For example common type for "\textbf{int}" and "\textbf{double}" is 
                "\textbf{double}" because "\textbf{int}" can be implicitly converted 
                to "\textbf{double}".
            }
        }
        concept Convertible.T.U
        {
            description
            {
                Sets a requirement that type T is implicitly convertible to type U.
            }
            remarks
            {
                For example "\textbf{int}" is implicitly convertible to 
                "\textbf{double}" but not vice versa.
                More generally: conversions that do not lose information are
                implicit in Cmajor.
            }
        }
        concept Derived.T.U
        {
            description
            {
                Sets a requirement that types T type and U are class types and 
                class T is derived from type class U.
            }
        }
        concept ExplicitlyConvertible.T.U
        {
            description
            {
                Sets a requirement that type T is explicitly convertible to type U.
            }
            remarks
            {
                For example "\textbf{double}" is explicitly convertible to "\textbf{int}".
                Explicit conversions need a "\textbf{cast}".
            }
        }
        concept Same.T.U
        {
            description
            {
                Sets a requirement that type T is exatly the same type as U.
            }
        }
    }
    namespace System
    {
        description
        {
            Contains fundamental classes, functions and type definitions.
        }
        diagram(class, systemclasses1, "Basic Classes");
        diagram(class, systemclasses2, "Function Objects");
        class System.BackInsertIterator.C
        {
            description
            {
                An output iterator that inserts elements to the end of a back insertion sequence.
            }
            remarks
            {
                System.BackInserter.C.R.C.where.C.is.BackInsertionSequence is a helper function that
                returns a System.BackInsertIterator.C for a back insertion sequence.
            }
            example <examples/System.BackInsertIterator.cm>;
            typedef System.BackInsertIterator.C.PointerType
            {
                description
                {
                    Pointer to implementation defined proxy type.
                }
            }
            typedef System.BackInsertIterator.C.ReferenceType
            {
                description
                {
                    Reference to implementation defined proxy type.
                }
            }
            typedef System.BackInsertIterator.C.ValueType
            {
                description
                {
                    Implementation defined proxy type.
                }
            }
            function System.BackInsertIterator.C.constructor.P.System.BackInsertIterator.C
            {
                description
                {
                    Constructor. Default constructs a back insert iterator.
                }
            }
            function System.BackInsertIterator.C.constructor.P.System.BackInsertIterator.C.C.R.System.BackInsertIterator.C
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BackInsertIterator.C.constructor.P.System.BackInsertIterator.C.C.R.System.BackInsertIterator.C.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BackInsertIterator.C.operator.assign.P.System.BackInsertIterator.C.C.R.System.BackInsertIterator.C
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BackInsertIterator.C.operator.assign.P.System.BackInsertIterator.C.C.R.System.BackInsertIterator.C.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BackInsertIterator.C.constructor.P.System.BackInsertIterator.C.RR.System.BackInsertIterator.C
            {
                description
                {
                    Move constructor.
                }
                parameter System.BackInsertIterator.C.constructor.P.System.BackInsertIterator.C.RR.System.BackInsertIterator.C.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BackInsertIterator.C.operator.assign.P.System.BackInsertIterator.C.RR.System.BackInsertIterator.C
            {
                description
                {
                    Move assignment.
                }
                parameter System.BackInsertIterator.C.operator.assign.P.System.BackInsertIterator.C.RR.System.BackInsertIterator.C.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.BackInsertIterator.C.constructor.P.System.BackInsertIterator.C.R.C
            {
                description
                {
                    Constructor. Constructs a back insert iterator with a container.
                }
                parameter System.BackInsertIterator.C.constructor.P.System.BackInsertIterator.C.R.C.c
                {
                    description
                    {
                        A container to which to insert elements.
                    }
                }
            }
            function System.BackInsertIterator.C.operator.times.P.System.BackInsertIterator.C
            {
                description
                {
                    Returns a reference to a proxy object that inserts values to the end of a container.
                }
                returns System.BackInsertIterator.C.operator.times.P.System.BackInsertIterator.C.returnValue
                {
                    description
                    {
                        Returns a reference to a proxy object that inserts values to the end of a container.
                    }
                }
            }
            function System.BackInsertIterator.C.operator.increment.P.System.BackInsertIterator.C
            {
                description
                {
                    Advances the iterator to the next element.
                }
                returns System.BackInsertIterator.C.operator.increment.P.System.BackInsertIterator.C.returnValue
                {
                    description
                    {
                        Returns a reference to the iterator.
                    }
                }
            }
            function System.BackInsertIterator.C.operator.pointer.P.System.BackInsertIterator.C
            {
                description
                {
                    Returns a pointer to a proxy object that inserts values to the end of a container.
                }
                returns System.BackInsertIterator.C.operator.pointer.P.System.BackInsertIterator.C.returnValue
                {
                    description
                    {
                        Returns a pointer to a proxy object that inserts values to the end of a container.
                    }
                }
            }
            modelof System.Concepts.OutputIterator.T;
        }
        class System.BackInsertProxy.C
        {
            description
            {
                Implementation detail.
            }
            function System.BackInsertProxy.C.constructor.P.System.BackInsertProxy.C
            {
                description
                {
                }
            }
            function System.BackInsertProxy.C.constructor.P.System.BackInsertProxy.C.C.R.System.BackInsertProxy.C
            {
                description
                {
                }
                parameter System.BackInsertProxy.C.constructor.P.System.BackInsertProxy.C.C.R.System.BackInsertProxy.C.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.BackInsertProxy.C.operator.assign.P.System.BackInsertProxy.C.C.R.System.BackInsertProxy.C
            {
                description
                {
                }
                parameter System.BackInsertProxy.C.operator.assign.P.System.BackInsertProxy.C.C.R.System.BackInsertProxy.C.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.BackInsertProxy.C.constructor.P.System.BackInsertProxy.C.RR.System.BackInsertProxy.C
            {
                description
                {
                    Move constructor.
                }
                parameter System.BackInsertProxy.C.constructor.P.System.BackInsertProxy.C.RR.System.BackInsertProxy.C.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BackInsertProxy.C.operator.assign.P.System.BackInsertProxy.C.RR.System.BackInsertProxy.C
            {
                description
                {
                    Move assignment.
                }
                parameter System.BackInsertProxy.C.operator.assign.P.System.BackInsertProxy.C.RR.System.BackInsertProxy.C.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.BackInsertProxy.C.constructor.P.System.BackInsertProxy.C.P.C
            {
                description
                {
                }
                parameter System.BackInsertProxy.C.constructor.P.System.BackInsertProxy.C.P.C.c_
                {
                    description
                    {
                    }
                }
            }
            function System.BackInsertProxy.C.operator.assign.P.System.BackInsertProxy.C.C.R.ValueType
            {
                description
                {
                }
                parameter System.BackInsertProxy.C.operator.assign.P.System.BackInsertProxy.C.C.R.ValueType.value
                {
                    description
                    {
                    }
                }
            }
        }
        class System.BinaryFun.Argument1.Argument2.Result
        {
            description
            {
                A base class for binary function objects.
            }
            remarks
            {
                A derived binary function inherits the type definitions of
                this base class and provides an implementation for the "\emph{operator()(FirstArgumentType, SecondArgumentType)}"
                function.
            }
            typedef System.BinaryFun.Argument1.Argument2.Result.FirstArgumentType
            {
                description
                {
                    The type of the first argument of the binary function.
                }
            }
            typedef System.BinaryFun.Argument1.Argument2.Result.ResultType
            {
                description
                {
                    The type of the result of the binary function.
                }
            }
            typedef System.BinaryFun.Argument1.Argument2.Result.SecondArgumentType
            {
                description
                {
                    The type of the second argument of the binary function.
                }
            }
            function System.BinaryFun.Argument1.Argument2.Result.constructor.P.System.BinaryFun.Argument1.Argument2.Result
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryFun.Argument1.Argument2.Result.constructor.P.System.BinaryFun.Argument1.Argument2.Result.C.R.System.BinaryFun.Argument1.Argument2.Result
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryFun.Argument1.Argument2.Result.constructor.P.System.BinaryFun.Argument1.Argument2.Result.C.R.System.BinaryFun.Argument1.Argument2.Result.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryFun.Argument1.Argument2.Result.operator.assign.P.System.BinaryFun.Argument1.Argument2.Result.C.R.System.BinaryFun.Argument1.Argument2.Result
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryFun.Argument1.Argument2.Result.operator.assign.P.System.BinaryFun.Argument1.Argument2.Result.C.R.System.BinaryFun.Argument1.Argument2.Result.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryFun.Argument1.Argument2.Result.constructor.P.System.BinaryFun.Argument1.Argument2.Result.RR.System.BinaryFun.Argument1.Argument2.Result
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryFun.Argument1.Argument2.Result.constructor.P.System.BinaryFun.Argument1.Argument2.Result.RR.System.BinaryFun.Argument1.Argument2.Result.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryFun.Argument1.Argument2.Result.operator.assign.P.System.BinaryFun.Argument1.Argument2.Result.RR.System.BinaryFun.Argument1.Argument2.Result
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryFun.Argument1.Argument2.Result.operator.assign.P.System.BinaryFun.Argument1.Argument2.Result.RR.System.BinaryFun.Argument1.Argument2.Result.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.BinaryPred.Argument1.Argument2
        {
            description
            {
                A base class for binary predicates.
            }
            remarks
            {
                A binary predicate is a binary function whose application operator returns a truth value.
            }
            function System.BinaryPred.Argument1.Argument2.constructor.P.System.BinaryPred.Argument1.Argument2
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryPred.Argument1.Argument2.constructor.P.System.BinaryPred.Argument1.Argument2.C.R.System.BinaryPred.Argument1.Argument2
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryPred.Argument1.Argument2.constructor.P.System.BinaryPred.Argument1.Argument2.C.R.System.BinaryPred.Argument1.Argument2.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryPred.Argument1.Argument2.operator.assign.P.System.BinaryPred.Argument1.Argument2.C.R.System.BinaryPred.Argument1.Argument2
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryPred.Argument1.Argument2.operator.assign.P.System.BinaryPred.Argument1.Argument2.C.R.System.BinaryPred.Argument1.Argument2.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryPred.Argument1.Argument2.constructor.P.System.BinaryPred.Argument1.Argument2.RR.System.BinaryPred.Argument1.Argument2
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryPred.Argument1.Argument2.constructor.P.System.BinaryPred.Argument1.Argument2.RR.System.BinaryPred.Argument1.Argument2.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryPred.Argument1.Argument2.operator.assign.P.System.BinaryPred.Argument1.Argument2.RR.System.BinaryPred.Argument1.Argument2
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryPred.Argument1.Argument2.operator.assign.P.System.BinaryPred.Argument1.Argument2.RR.System.BinaryPred.Argument1.Argument2.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            modelof System.Concepts.BinaryPredicate.T;
        }
        class System.CharClassTable
        {
            description
            {
            }
            function System.CharClassTable.GetCharacterClass.char
            {
                description
                {
                }
                parameter System.CharClassTable.GetCharacterClass.char.c
                {
                    description
                    {
                    }
                }
                returns System.CharClassTable.GetCharacterClass.char.returnValue
                {
                    description
                    {
                    }
                }
            }
        }
        class System.Console
        {
            description
            {
                A static class that contains console input and output functions.
            }
            remarks
            {
                By default System.Console reads from the standard input stream and
                writes to the standard output stream of the process.
                It also contains an error stream that by default refers to the
                standard error stream of the process.
                
                The input, output and error streams that the System.Console class uses
                can be set with the System.Console.SetIn.RR.System.UniquePtr.System.IO.InputStream,
                System.Console.SetOut.RR.System.UniquePtr.System.IO.OutputStream and
                System.Console.SetError.RR.System.UniquePtr.System.IO.OutputStream functions.
            }
            example <examples/System.Console.cm>;
            function System.Console.Error
            {
                description
                {
                    Returns a reference to the console error stream.
                }
                returns System.Console.Error.returnValue
                {
                    description
                    {
                        Returns a reference to the console error stream.
                    }
                }
            }
            function System.Console.In
            {
                description
                {
                    Returns a reference to the console input stream.
                }
                returns System.Console.In.returnValue
                {
                    description
                    {
                        Returns a reference to the console input stream.
                    }
                }
            }
            function System.Console.Out
            {
                description
                {
                    Returns a reference to the console output stream.
                }
                returns System.Console.Out.returnValue
                {
                    description
                    {
                        Returns a reference to the console output stream.
                    }
                }
            }
            function System.Console.ReadLine
            {
                description
                {
                    Reads a line of text from the console input stream and returns it.
                }
                returns System.Console.ReadLine.returnValue
                {
                    description
                    {
                        Returns a line of text read from the console input stream.
                    }
                }
            }
            function System.Console.ReadToEnd
            {
                description
                {
                    Returns a string that contains the rest of input of the console input stream.
                }
                returns System.Console.ReadToEnd.returnValue
                {
                    description
                    {
                        Returns a string that contains the rest of input of the console input stream.
                    }
                }
            }
            function System.Console.SetError.RR.System.UniquePtr.System.IO.OutputStream
            {
                description
                {
                    Sets the error stream the System.Console class uses.
                }
                parameter System.Console.SetError.RR.System.UniquePtr.System.IO.OutputStream.err_
                {
                    description
                    {
                        A unique pointer to an output stream.
                    }
                }
            }
            function System.Console.SetIn.RR.System.UniquePtr.System.IO.InputStream
            {
                description
                {
                    Sets the input stream the System.Console class uses.
                }
                parameter System.Console.SetIn.RR.System.UniquePtr.System.IO.InputStream.in_
                {
                    description
                    {
                        A unique pointer to an input stream.
                    }
                }
            }
            function System.Console.SetOut.RR.System.UniquePtr.System.IO.OutputStream
            {
                description
                {
                    Sets the output stream the System.Console class uses.
                }
                example <examples/System.Console.SetOut.cm>;
                parameter System.Console.SetOut.RR.System.UniquePtr.System.IO.OutputStream.out_
                {
                    description
                    {
                        A unique pointer to an output stream.
                    }
                }
            }
            function System.Console.Write.bool
            {
                description
                {
                    Writes a Boolean value to the console output stream.
                }
                parameter System.Console.Write.bool.b
                {
                    description
                    {
                        A Boolean value to write.
                    }
                }
            }
            function System.Console.Write.byte
            {
                description
                {
                    Writes a byte to the console output stream.
                }
                parameter System.Console.Write.byte.b
                {
                    description
                    {
                        A byte to write.
                    }
                }
            }
            function System.Console.Write.char
            {
                description
                {
                    Writes a character to the console output stream.
                }
                parameter System.Console.Write.char.c
                {
                    description
                    {
                        A character to write.
                    }
                }
            }
            function System.Console.Write.C.R.System.String
            {
                description
                {
                    Writes a string to the console output stream.
                }
                parameter System.Console.Write.C.R.System.String.s
                {
                    description
                    {
                        A string to write.
                    }
                }
            }
            function System.Console.Write.C.P.char
            {
                description
                {
                    Writes a C-style string to the console output stream.
                }
                parameter System.Console.Write.C.P.char.s
                {
                    description
                    {
                        A C-style string to write.
                    }
                }
            }
            function System.Console.Write.double
            {
                description
                {
                    Writes a double value to the console output stream.
                }
                parameter System.Console.Write.double.d
                {
                    description
                    {
                        A double value to write.
                    }
                }
            }
            function System.Console.Write.float
            {
                description
                {
                    Writes a float value to the console output stream.
                }
                parameter System.Console.Write.float.f
                {
                    description
                    {
                        A float value to write.
                    }
                }
            }
            function System.Console.Write.int
            {
                description
                {
                    Writes an int value to the console output stream.
                }
                parameter System.Console.Write.int.i
                {
                    description
                    {
                        An int value to write.
                    }
                }
            }
            function System.Console.Write.long
            {
                description
                {
                    Writes a long value to the console output stream.
                }
                parameter System.Console.Write.long.l
                {
                    description
                    {
                        A long to write.
                    }
                }
            }
            function System.Console.Write.sbyte
            {
                description
                {
                    Writes a signed byte to the console output stream.
                }
                parameter System.Console.Write.sbyte.s
                {
                    description
                    {
                        A signed byte to write.
                    }
                }
            }
            function System.Console.Write.short
            {
                description
                {
                    Writes a short value to the console output stream
                }
                parameter System.Console.Write.short.s
                {
                    description
                    {
                        A short value to write.
                    }
                }
            }
            function System.Console.Write.uint
            {
                description
                {
                    Writes an unsigned int to the console output stream.
                }
                parameter System.Console.Write.uint.u
                {
                    description
                    {
                        An unsigned int to write.
                    }
                }
            }
            function System.Console.Write.ulong
            {
                description
                {
                    Writes an unsigned long to the console output stream.
                }
                parameter System.Console.Write.ulong.u
                {
                    description
                    {
                        An unsigned long to write.
                    }
                }
            }
            function System.Console.Write.ushort
            {
                description
                {
                    Writes an unsigned short to the console output stream.
                }
                parameter System.Console.Write.ushort.u
                {
                    description
                    {
                        An unsigned short to write.
                    }
                }
            }
            function System.Console.WriteLine
            {
                description
                {
                    Writes a newline to the console output stream.
                }
            }
            function System.Console.WriteLine.bool
            {
                description
                {
                    Writes a Boolean value followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.bool.b
                {
                    description
                    {
                        A Boolean value to write.
                    }
                }
            }
            function System.Console.WriteLine.byte
            {
                description
                {
                    Writes a byte followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.byte.b
                {
                    description
                    {
                        A byte to write.
                    }
                }
            }
            function System.Console.WriteLine.char
            {
                description
                {
                    Writes a character followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.char.c
                {
                    description
                    {
                        A character to write.
                    }
                }
            }
            function System.Console.WriteLine.C.R.System.String
            {
                description
                {
                    Writes a string followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.C.R.System.String.s
                {
                    description
                    {
                        A string to write.
                    }
                }
            }
            function System.Console.WriteLine.C.P.char
            {
                description
                {
                    Writes a C-style string followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.C.P.char.s
                {
                    description
                    {
                        A C-style string to write.
                    }
                }
            }
            function System.Console.WriteLine.double
            {
                description
                {
                    Writes a double value followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.double.d
                {
                    description
                    {
                        A double value to write.
                    }
                }
            }
            function System.Console.WriteLine.float
            {
                description
                {
                    Writes a float value followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.float.f
                {
                    description
                    {
                        A float value to write.
                    }
                }
            }
            function System.Console.WriteLine.int
            {
                description
                {
                    Writes an int value followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.int.i
                {
                    description
                    {
                        An int value to write.
                    }
                }
            }
            function System.Console.WriteLine.long
            {
                description
                {
                    Writes a long value followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.long.l
                {
                    description
                    {
                        A long value to write.
                    }
                }
            }
            function System.Console.WriteLine.sbyte
            {
                description
                {
                    Writes a signed byte followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.sbyte.s
                {
                    description
                    {
                        A signed byte to write.
                    }
                }
            }
            function System.Console.WriteLine.short
            {
                description
                {
                    Writes a short value followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.short.s
                {
                    description
                    {
                        A short value to write.
                    }
                }
            }
            function System.Console.WriteLine.uint
            {
                description
                {
                    Writes a unsigned int followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.uint.u
                {
                    description
                    {
                        An unsigned int to write.
                    }
                }
            }
            function System.Console.WriteLine.ulong
            {
                description
                {
                    Writes an unsigned long followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.ulong.u
                {
                    description
                    {
                        An unsigned long to write.
                    }
                }
            }
            function System.Console.WriteLine.ushort
            {
                description
                {
                    Writes an unsigned short followed by a newline to the console output stream.
                }
                parameter System.Console.WriteLine.ushort.u
                {
                    description
                    {
                        An unsigned short to write.
                    }
                }
            }
        }
        class System.ConversionException
        {
            description
            {
                An exception thrown when a conversion function fails.
            }
            remarks
            {
                Conversion functions that throw System.ConversionException are:
                System.ParseBool.C.R.System.String,
                System.ParseDate.C.R.System.String,
                System.ParseDouble.C.R.System.String
                System.ParseHex.C.R.System.String,
                System.ParseHexUHuge.C.R.System.String,
                System.ParseInt.C.R.System.String,
                System.ParseUInt.C.R.System.String,
                System.ParseUHuge.C.R.System.String and
                System.ParseULong.C.R.System.String.
            }
            example <examples/System.ConversionException.cm>;
            function System.ConversionException.constructor.P.System.ConversionException
            {
                description
                {
                    Default constructor.
                }
            }
            function System.ConversionException.constructor.P.System.ConversionException.C.R.System.ConversionException
            {
                description
                {
                    Copy constructor.
                }
                parameter System.ConversionException.constructor.P.System.ConversionException.C.R.System.ConversionException.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.ConversionException.operator.assign.P.System.ConversionException.C.R.System.ConversionException
            {
                description
                {
                    Copy assignment.
                }
                parameter System.ConversionException.operator.assign.P.System.ConversionException.C.R.System.ConversionException.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.ConversionException.constructor.P.System.ConversionException.RR.System.ConversionException
            {
                description
                {
                    Move constructor.
                }
                parameter System.ConversionException.constructor.P.System.ConversionException.RR.System.ConversionException.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.ConversionException.operator.assign.P.System.ConversionException.RR.System.ConversionException
            {
                description
                {
                    Move assignment.
                }
                parameter System.ConversionException.operator.assign.P.System.ConversionException.RR.System.ConversionException.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.ConversionException.constructor.P.System.ConversionException.C.R.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.ConversionException.constructor.P.System.ConversionException.C.R.System.String.message_
                {
                    description
                    {
                        A conversion exception to copy.
                    }
                }
            }
            function System.ConversionException.destructor.P.System.ConversionException
            {
                description
                {
                }
            }
        }
        class System.Counter.T
        {
            description
            {
                A counter class that stores a pointer to the counted object.
            }
            remarks
            {
                Base class for System.SharedCount.T and System.WeakCount.T.
            }
            function System.Counter.T.constructor.P.System.Counter.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Counter.T.constructor.P.System.Counter.T.P.T
            {
                description
                {
                    Constructor. Stores a pointer to counted object.
                }
                parameter System.Counter.T.constructor.P.System.Counter.T.P.T.ptr_
                {
                    description
                    {
                        A pointer to counted object.
                    }
                }
            }
            function System.Counter.T.Dispose.P.System.Counter.T
            {
                description
                {
                    Overridden. Deletes the counted object.
                }
            }
        }
        class System.CounterBase
        {
            description
            {
                An abstract base class for System.SharedCount.T and System.WeakCount.T
                that keeps track of use count and weak count.
            }
            function System.CounterBase.constructor.P.System.CounterBase
            {
                description
                {
                    Constructor. Sets use count and weak count to one.
                }
            }
            function System.CounterBase.AddReference.P.System.CounterBase
            {
                description
                {
                    Increments use count and weak count.
                }
            }
            function System.CounterBase.Destruct.P.System.CounterBase
            {
                description
                {
                    Deletes this counter.
                }
            }
            function System.CounterBase.Dispose.P.System.CounterBase
            {
                description
                {
                    Abstract disposing function overridden in System.Counter.T class.
                }
            }
            function System.CounterBase.GetUseCount.C.P.System.CounterBase
            {
                description
                {
                    Returns the use count.
                }
                returns System.CounterBase.GetUseCount.C.P.System.CounterBase.returnValue
                {
                    description
                    {
                        Returns the use count.
                    }
                }
            }
            function System.CounterBase.Release.P.System.CounterBase
            {
                description
                {
                    Decrements use count and weak count.
                }
                remarks
                {
                    If use count has gone to zero,
                    deletes the counted object by calling System.CounterBase.Dispose function.
                    If the weak count also has gone to zero,
                    deletes the counter object.
                }
            }
            function System.CounterBase.WeakAddReference.P.System.CounterBase
            {
                description
                {
                    Increments weak count.
                }
            }
            function System.CounterBase.WeakRelease.P.System.CounterBase
            {
                description
                {
                    Decrements weak count.
                }
                remarks
                {
                    If weak count has gone to zero,
                    calls System.CounterBase.Destruct to delete this counter object.
                }
            }
            function System.CounterBase.destructor.P.System.CounterBase
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.Date
        {
            description
            {
                A class for representing a date.
            }
            remarks
            {
                System.CurrentDate function returns current date.
            }
            function System.Date.constructor.P.System.Date
            {
                description
                {
                    Default constructor. Constructs a date 1.1.1.
                }
            }
            function System.Date.constructor.P.System.Date.C.R.System.Date
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Date.constructor.P.System.Date.C.R.System.Date.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Date.operator.assign.P.System.Date.C.R.System.Date
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Date.operator.assign.P.System.Date.C.R.System.Date.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Date.constructor.P.System.Date.RR.System.Date
            {
                description
                {
                    Move constructor.
                }
                parameter System.Date.constructor.P.System.Date.RR.System.Date.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Date.operator.assign.P.System.Date.RR.System.Date
            {
                description
                {
                    Move assignment.
                }
                parameter System.Date.operator.assign.P.System.Date.RR.System.Date.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Date.constructor.P.System.Date.ushort.byte.byte
            {
                description
                {
                    Constructor. Initializes a date with given year, month and day.
                }
                parameter System.Date.constructor.P.System.Date.ushort.byte.byte.day_
                {
                    description
                    {
                        Day.
                    }
                }
                parameter System.Date.constructor.P.System.Date.ushort.byte.byte.month_
                {
                    description
                    {
                        Month.
                    }
                }
                parameter System.Date.constructor.P.System.Date.ushort.byte.byte.year_
                {
                    description
                    {
                        Year.
                    }
                }
            }
            function System.Date.Day.C.P.System.Date
            {
                description
                {
                    Returns the day part of the date.
                }
                returns System.Date.Day.C.P.System.Date.returnValue
                {
                    description
                    {
                        Returns the day part of the date.
                    }
                }
            }
            function System.Date.Month.C.P.System.Date
            {
                description
                {
                    Returns the month part of the date.
                }
                returns System.Date.Month.C.P.System.Date.returnValue
                {
                    description
                    {
                        Returns the month part of the date.
                    }
                }
            }
            function System.Date.Year.C.P.System.Date
            {
                description
                {
                    Returns the year part of the date.
                }
                returns System.Date.Year.C.P.System.Date.returnValue
                {
                    description
                    {
                        Returns the year part of the date.
                    }
                }
            }
        }
        class System.Divides.T
        {
            description
            {
                Division binary function object.
            }
            example <examples/System.Divides.cm>;
            function System.Divides.T.constructor.P.System.Divides.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Divides.T.constructor.P.System.Divides.T.C.R.System.Divides.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Divides.T.constructor.P.System.Divides.T.C.R.System.Divides.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Divides.T.operator.assign.P.System.Divides.T.C.R.System.Divides.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Divides.T.operator.assign.P.System.Divides.T.C.R.System.Divides.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Divides.T.constructor.P.System.Divides.T.RR.System.Divides.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Divides.T.constructor.P.System.Divides.T.RR.System.Divides.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Divides.T.operator.assign.P.System.Divides.T.RR.System.Divides.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Divides.T.operator.assign.P.System.Divides.T.RR.System.Divides.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Divides.T.operator.apply.C.P.System.Divides.T.C.R.T.C.R.T
            {
                description
                {
                    Returns the first argument divided by the second argument.
                }
                parameter System.Divides.T.operator.apply.C.P.System.Divides.T.C.R.T.C.R.T.a
                {
                    description
                    {
                        Dividend.
                    }
                }
                parameter System.Divides.T.operator.apply.C.P.System.Divides.T.C.R.T.C.R.T.b
                {
                    description
                    {
                        Divisor.
                    }
                }
                returns System.Divides.T.operator.apply.C.P.System.Divides.T.C.R.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$a / b$".
                    }
                }
            }
            modelof System.Concepts.BinaryOperation.T;
        }
        class System.Duration
        {
            description
            {
                Represents a duration in nanoseconds.
            }
            function System.Duration.constructor.P.System.Duration
            {
                description
                {
                    Default constructor. Initializes the duration to zero nanoseconds.
                }
            }
            function System.Duration.constructor.P.System.Duration.C.R.System.Duration
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Duration.constructor.P.System.Duration.C.R.System.Duration.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Duration.operator.assign.P.System.Duration.C.R.System.Duration
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Duration.operator.assign.P.System.Duration.C.R.System.Duration.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Duration.constructor.P.System.Duration.RR.System.Duration
            {
                description
                {
                    Move constructor.
                }
                parameter System.Duration.constructor.P.System.Duration.RR.System.Duration.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Duration.operator.assign.P.System.Duration.RR.System.Duration
            {
                description
                {
                    Move assignment.
                }
                parameter System.Duration.operator.assign.P.System.Duration.RR.System.Duration.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Duration.constructor.P.System.Duration.long
            {
                description
                {
                    Constructor. Initializes the duration to specified number of nanoseconds.
                }
                parameter System.Duration.constructor.P.System.Duration.long.nanosecs_
                {
                    description
                    {
                        Nanoseconds.
                    }
                }
            }
            function System.Duration.FromHours.long
            {
                description
                {
                    Returns a duration of specified number of hours.
                }
                parameter System.Duration.FromHours.long.hours
                {
                    description
                    {
                        Hours.
                    }
                }
                returns System.Duration.FromHours.long.returnValue
                {
                    description
                    {
                        Returns a duration of specified number of hours.
                    }
                }
            }
            function System.Duration.FromMicroseconds.long
            {
                description
                {
                    Returns duration of specified number of microseconds.
                }
                parameter System.Duration.FromMicroseconds.long.microseconds
                {
                    description
                    {
                        Microseconds.
                    }
                }
                returns System.Duration.FromMicroseconds.long.returnValue
                {
                    description
                    {
                        Returns duration of specified number of microseconds.
                    }
                }
            }
            function System.Duration.FromMilliseconds.long
            {
                description
                {
                    Returns duration of specified number of millseconds.
                }
                parameter System.Duration.FromMilliseconds.long.milliseconds
                {
                    description
                    {
                        Milliseconds.
                    }
                }
                returns System.Duration.FromMilliseconds.long.returnValue
                {
                    description
                    {
                        Returns duration of specified number of milliseconds.
                    }
                }
            }
            function System.Duration.FromMinutes.long
            {
                description
                {
                    Returns duration of specified number of minutes.
                }
                parameter System.Duration.FromMinutes.long.minutes
                {
                    description
                    {
                        Minutes.
                    }
                }
                returns System.Duration.FromMinutes.long.returnValue
                {
                    description
                    {
                        Returns duration of specified number of minutes.
                    }
                }
            }
            function System.Duration.FromNanoseconds.long
            {
                description
                {
                    Returns duration of specified number of nanoseconds.
                }
                parameter System.Duration.FromNanoseconds.long.nanoseconds
                {
                    description
                    {
                        Nanoseconds.
                    }
                }
                returns System.Duration.FromNanoseconds.long.returnValue
                {
                    description
                    {
                        Returns duration of specified number of nanoseconds.
                    }
                }
            }
            function System.Duration.FromSeconds.long
            {
                description
                {
                    Returns duration of specified number of seconds.
                }
                parameter System.Duration.FromSeconds.long.seconds
                {
                    description
                    {
                        Seconds.
                    }
                }
                returns System.Duration.FromSeconds.long.returnValue
                {
                    description
                    {
                        Returns duration of specified number of seconds.
                    }
                }
            }
            function System.Duration.Hours.C.P.System.Duration
            {
                description
                {
                    Returns total hours elapsed.
                }
                returns System.Duration.Hours.C.P.System.Duration.returnValue
                {
                    description
                    {
                        Returns total hours elapsed.
                    }
                }
            }
            function System.Duration.Microseconds.C.P.System.Duration
            {
                description
                {
                    Returns total microseconds elapsed.
                }
                returns System.Duration.Microseconds.C.P.System.Duration.returnValue
                {
                    description
                    {
                        Returns total microseconds elapsed.
                    }
                }
            }
            function System.Duration.Milliseconds.C.P.System.Duration
            {
                description
                {
                    Returns total milliseconds elapsed.
                }
                returns System.Duration.Milliseconds.C.P.System.Duration.returnValue
                {
                    description
                    {
                        Returns total milliseconds elapsed.
                    }
                }
            }
            function System.Duration.Minutes.C.P.System.Duration
            {
                description
                {
                    Returns total minutes elapsed.
                }
                returns System.Duration.Minutes.C.P.System.Duration.returnValue
                {
                    description
                    {
                        Returns total minutes elapsed.
                    }
                }
            }
            function System.Duration.Nanoseconds.C.P.System.Duration
            {
                description
                {
                    Returns total nanoseconds elapsed.
                }
                returns System.Duration.Nanoseconds.C.P.System.Duration.returnValue
                {
                    description
                    {
                        Returns total nanoseconds elapsed.
                    }
                }
            }
            function System.Duration.Rep.C.P.System.Duration
            {
                description
                {
                    Returns total nanoseconds elapsed.
                }
                returns System.Duration.Rep.C.P.System.Duration.returnValue
                {
                    description
                    {
                        Returns total nanoseconds elapsed.
                    }
                }
            }
            function System.Duration.Seconds.C.P.System.Duration
            {
                description
                {
                    Returns total seconds elapsed.
                }
                returns System.Duration.Seconds.C.P.System.Duration.returnValue
                {
                    description
                    {
                        Returns total seconds elapsed.
                    }
                }
            }
        }
        class System.EmptyStrHolder
        {
            description
            {
            }
            function System.EmptyStrHolder.staticConstructor
            {
                description
                {
                }
            }
            function System.EmptyStrHolder.GetEmptyStr
            {
                description
                {
                }
                returns System.EmptyStrHolder.GetEmptyStr.returnValue
                {
                    description
                    {
                    }
                }
            }
        }
        class System.EndLine
        {
            description
            {
                Represents an end of line character.
            }
            remarks
            {
                System.endl function returns this for dispatching to System.IO.operator.shiftLeft.R.System.IO.OutputStream.System.EndLine function.
            }
            function System.EndLine.constructor.P.System.EndLine
            {
                description
                {
                    Default constructor.
                }
            }
            function System.EndLine.constructor.P.System.EndLine.C.R.System.EndLine
            {
                description
                {
                    Copy constructor.
                }
                parameter System.EndLine.constructor.P.System.EndLine.C.R.System.EndLine.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.EndLine.constructor.P.System.EndLine.C.R.System.EndLine
            {
                description
                {
                    Copy constructor.
                }
                parameter System.EndLine.constructor.P.System.EndLine.C.R.System.EndLine.that
                {
                    description
                    {
                        Argument to copy from.
                    }
                }
            }
        }
        class System.EqualTo2.T.U
        {
            description
            {
                An "\emph{equal to}" binary predicate.
            }
            remarks
            {
                T and U are possibly different types, but can be compared for equality.
            }
            function System.EqualTo2.T.U.constructor.P.System.EqualTo2.T.U
            {
                description
                {
                    Default constructor.
                }
            }
            function System.EqualTo2.T.U.constructor.P.System.EqualTo2.T.U.C.R.System.EqualTo2.T.U
            {
                description
                {
                    Copy constructor.
                }
                parameter System.EqualTo2.T.U.constructor.P.System.EqualTo2.T.U.C.R.System.EqualTo2.T.U.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.EqualTo2.T.U.operator.assign.P.System.EqualTo2.T.U.C.R.System.EqualTo2.T.U
            {
                description
                {
                    Copy assignment.
                }
                parameter System.EqualTo2.T.U.operator.assign.P.System.EqualTo2.T.U.C.R.System.EqualTo2.T.U.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.EqualTo2.T.U.constructor.P.System.EqualTo2.T.U.RR.System.EqualTo2.T.U
            {
                description
                {
                    Move constructor.
                }
                parameter System.EqualTo2.T.U.constructor.P.System.EqualTo2.T.U.RR.System.EqualTo2.T.U.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.EqualTo2.T.U.operator.assign.P.System.EqualTo2.T.U.RR.System.EqualTo2.T.U
            {
                description
                {
                    Move assignment.
                }
                parameter System.EqualTo2.T.U.operator.assign.P.System.EqualTo2.T.U.RR.System.EqualTo2.T.U.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.EqualTo2.T.U.operator.apply.C.P.System.EqualTo2.T.U.C.R.T.C.R.U
            {
                description
                {
                    Returns true if the first argument is equal to the second argument, false otherwise.
                }
                parameter System.EqualTo2.T.U.operator.apply.C.P.System.EqualTo2.T.U.C.R.T.C.R.U.left
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.EqualTo2.T.U.operator.apply.C.P.System.EqualTo2.T.U.C.R.T.C.R.U.right
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.EqualTo2.T.U.operator.apply.C.P.System.EqualTo2.T.U.C.R.T.C.R.U.returnValue
                {
                    description
                    {
                        Returns "$left == right$".
                    }
                }
            }
            modelof System.Concepts.Relation.T.U.V;
        }
        class System.EqualTo.T
        {
            description
            {
                An "\emph{equal to}" relation.
            }
            function System.EqualTo.T.constructor.P.System.EqualTo.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.EqualTo.T.constructor.P.System.EqualTo.T.C.R.System.EqualTo.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.EqualTo.T.constructor.P.System.EqualTo.T.C.R.System.EqualTo.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.EqualTo.T.operator.assign.P.System.EqualTo.T.C.R.System.EqualTo.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.EqualTo.T.operator.assign.P.System.EqualTo.T.C.R.System.EqualTo.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.EqualTo.T.constructor.P.System.EqualTo.T.RR.System.EqualTo.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.EqualTo.T.constructor.P.System.EqualTo.T.RR.System.EqualTo.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.EqualTo.T.operator.assign.P.System.EqualTo.T.RR.System.EqualTo.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.EqualTo.T.operator.assign.P.System.EqualTo.T.RR.System.EqualTo.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.EqualTo.T.operator.apply.C.P.System.EqualTo.T.C.R.T.C.R.T
            {
                description
                {
                    Returns true if the first argument is equal to the second argument, false otherwise.
                }
                parameter System.EqualTo.T.operator.apply.C.P.System.EqualTo.T.C.R.T.C.R.T.left
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.EqualTo.T.operator.apply.C.P.System.EqualTo.T.C.R.T.C.R.T.right
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.EqualTo.T.operator.apply.C.P.System.EqualTo.T.C.R.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$left == right$".
                    }
                }
            }
            modelof System.Concepts.Relation.T;
        }
        class System.Exception
        {
            description
            {
                A base class for all exception classes.
            }
            remarks
            {
                All possible Cmajor exceptions can be catched by catching System.Exception class.
            }
            example <examples/System.Exception.cm>;
            function System.Exception.constructor.P.System.Exception
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Exception.constructor.P.System.Exception.C.R.System.Exception
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Exception.constructor.P.System.Exception.C.R.System.Exception.that
                {
                    description
                    {
                        An exception to copy from.
                    }
                }
            }
            function System.Exception.operator.assign.P.System.Exception.C.R.System.Exception
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Exception.operator.assign.P.System.Exception.C.R.System.Exception.that
                {
                    description
                    {
                        An exception to assign from.
                    }
                }
            }
            function System.Exception.constructor.P.System.Exception.RR.System.Exception
            {
                description
                {
                    Move constructor.
                }
                parameter System.Exception.constructor.P.System.Exception.RR.System.Exception.__parameter0
                {
                    description
                    {
                        An exception to move from.
                    }
                }
            }
            function System.Exception.operator.assign.P.System.Exception.RR.System.Exception
            {
                description
                {
                    Move assignment.
                }
                parameter System.Exception.operator.assign.P.System.Exception.RR.System.Exception.__parameter0
                {
                    description
                    {
                        An exception to move from.
                    }
                }
            }
            function System.Exception.constructor.P.System.Exception.C.R.System.String
            {
                description
                {
                    Constructor. Constructs an exception with an error message.
                }
                parameter System.Exception.constructor.P.System.Exception.C.R.System.String.message_
                {
                    description
                    {
                        An error message.
                    }
                }
            }
            function System.Exception.ExceptionType.C.P.System.Exception
            {
                description
                {
                    Returns the dynamic class name of the exception.
                }
                returns System.Exception.ExceptionType.C.P.System.Exception.returnValue
                {
                    description
                    {
                        Returns the dynamic class name of the exception.
                    }
                }
            }
            function System.Exception.File.C.P.System.Exception
            {
                description
                {
                    Returns the path to the source file where the exception was thrown.
                }
                returns System.Exception.File.C.P.System.Exception.returnValue
                {
                    description
                    {
                        Returns the path to the source file where the exception was thrown.
                    }
                }
            }
            function System.Exception.Line.C.P.System.Exception
            {
                description
                {
                    Returns the source line number where the exception was thrown.
                }
                returns System.Exception.Line.C.P.System.Exception.returnValue
                {
                    description
                    {
                        Returns the source line number where the exception was thrown.
                    }
                }
            }
            function System.Exception.Message.C.P.System.Exception
            {
                description
                {
                    Returns the error message.
                }
                returns System.Exception.Message.C.P.System.Exception.returnValue
                {
                    description
                    {
                        Returns the error message.
                    }
                }
            }
            function System.Exception.SetCallStack.P.System.Exception.C.R.System.String
            {
                description
                {
                    Sets the call stack string.
                }
                parameter System.Exception.SetCallStack.P.System.Exception.C.R.System.String.callStack_
                {
                    description
                    {
                        A call stack string.
                    }
                }
            }
            function System.Exception.SetExceptionType.P.System.Exception.C.R.System.String
            {
                description
                {
                    Sets the dynamic class name.
                }
                parameter System.Exception.SetExceptionType.P.System.Exception.C.R.System.String.exceptionType_
                {
                    description
                    {
                        A dynamic class name.
                    }
                }
            }
            function System.Exception.SetFile.P.System.Exception.C.R.System.String
            {
                description
                {
                    Sets the source file.
                }
                parameter System.Exception.SetFile.P.System.Exception.C.R.System.String.file_
                {
                    description
                    {
                        A path to the source file.
                    }
                }
            }
            function System.Exception.SetLine.P.System.Exception.int
            {
                description
                {
                    Sets the source line number.
                }
                parameter System.Exception.SetLine.P.System.Exception.int.line_
                {
                    description
                    {
                        A source line number.
                    }
                }
            }
            function System.Exception.ToString.C.P.System.Exception
            {
                description
                {
                    Returns the error message with the full name of the thrown exception class, and source file path and source line number where the exception was thrown.
                }
                returns System.Exception.ToString.C.P.System.Exception.returnValue
                {
                    description
                    {
                        Returns the error message with the full name of the thrown exception class, and source file path and source line number where the exception was thrown.
                    }
                }
            }
            function System.Exception.destructor.P.System.Exception
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.FrontInsertIterator.C
        {
            description
            {
                An output iterator that inserts elements to the front of a container.
            }
            remarks
            {
                System.FrontInserter.C.C.is.FrontInsertionSequence.C.ref is a helper function that
                returns a System.FrontInsertIterator.C for a container.
            }
            example <examples/System.FrontInsertIterator.cm>;
            typedef System.FrontInsertIterator.C.PointerType
            {
                description
                {
                    Pointer to implementation defined proxy type.
                }
            }
            typedef System.FrontInsertIterator.C.ReferenceType
            {
                description
                {
                    Reference to implementation defined proxy type.
                }
            }
            typedef System.FrontInsertIterator.C.ValueType
            {
                description
                {
                    Implementation defined proxy type.
                }
            }
            function System.FrontInsertIterator.C.constructor.P.System.FrontInsertIterator.C
            {
                description
                {
                    Constructor. Default constructs a front insert iterator.
                }
            }
            function System.FrontInsertIterator.C.constructor.P.System.FrontInsertIterator.C.C.R.System.FrontInsertIterator.C
            {
                description
                {
                    Copy constructor.
                }
                parameter System.FrontInsertIterator.C.constructor.P.System.FrontInsertIterator.C.C.R.System.FrontInsertIterator.C.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.FrontInsertIterator.C.operator.assign.P.System.FrontInsertIterator.C.C.R.System.FrontInsertIterator.C
            {
                description
                {
                    Copy assignment.
                }
                parameter System.FrontInsertIterator.C.operator.assign.P.System.FrontInsertIterator.C.C.R.System.FrontInsertIterator.C.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.FrontInsertIterator.C.constructor.P.System.FrontInsertIterator.C.RR.System.FrontInsertIterator.C
            {
                description
                {
                    Move constructor.
                }
                parameter System.FrontInsertIterator.C.constructor.P.System.FrontInsertIterator.C.RR.System.FrontInsertIterator.C.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.FrontInsertIterator.C.operator.assign.P.System.FrontInsertIterator.C.RR.System.FrontInsertIterator.C
            {
                description
                {
                    Move assignment.
                }
                parameter System.FrontInsertIterator.C.operator.assign.P.System.FrontInsertIterator.C.RR.System.FrontInsertIterator.C.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.FrontInsertIterator.C.constructor.P.System.FrontInsertIterator.C.R.C
            {
                description
                {
                    Copy constructor.
                }
                parameter System.FrontInsertIterator.C.constructor.P.System.FrontInsertIterator.C.R.C.c
                {
                    description
                    {
                        A front insert iterator to copy.
                    }
                }
            }
            function System.FrontInsertIterator.C.operator.times.P.System.FrontInsertIterator.C
            {
                description
                {
                    Returns a reference to a proxy object that inserts values at the beginning of a container.
                }
                returns System.FrontInsertIterator.C.operator.times.P.System.FrontInsertIterator.C.returnValue
                {
                    description
                    {
                        Returns a reference to a proxy object that inserts values at the beginning of a container.
                    }
                }
            }
            function System.FrontInsertIterator.C.operator.increment.P.System.FrontInsertIterator.C
            {
                description
                {
                    Advances the iterator to the next element.
                }
                returns System.FrontInsertIterator.C.operator.increment.P.System.FrontInsertIterator.C.returnValue
                {
                    description
                    {
                        Returns a reference to the iterator.
                    }
                }
            }
            function System.FrontInsertIterator.C.operator.pointer.P.System.FrontInsertIterator.C
            {
                description
                {
                    Returns a pointer to a proxy object that inserts values at the beginning of a container.
                }
                returns System.FrontInsertIterator.C.operator.pointer.P.System.FrontInsertIterator.C.returnValue
                {
                    description
                    {
                        Returns a pointer to a proxy object that inserts values at the beginning of a container.
                    }
                }
            }
            modelof System.Concepts.OutputIterator.T;
        }
        class System.FrontInsertProxy.C
        {
            description
            {
                Implementation detail.
            }
            function System.FrontInsertProxy.C.constructor.P.System.FrontInsertProxy.C
            {
                description
                {
                }
            }
            function System.FrontInsertProxy.C.constructor.P.System.FrontInsertProxy.C.C.R.System.FrontInsertProxy.C
            {
                description
                {
                }
                parameter System.FrontInsertProxy.C.constructor.P.System.FrontInsertProxy.C.C.R.System.FrontInsertProxy.C.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.FrontInsertProxy.C.operator.assign.P.System.FrontInsertProxy.C.C.R.System.FrontInsertProxy.C
            {
                description
                {
                }
                parameter System.FrontInsertProxy.C.operator.assign.P.System.FrontInsertProxy.C.C.R.System.FrontInsertProxy.C.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.FrontInsertProxy.C.constructor.P.System.FrontInsertProxy.C.RR.System.FrontInsertProxy.C
            {
                description
                {
                    Move constructor.
                }
                parameter System.FrontInsertProxy.C.constructor.P.System.FrontInsertProxy.C.RR.System.FrontInsertProxy.C.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.FrontInsertProxy.C.operator.assign.P.System.FrontInsertProxy.C.RR.System.FrontInsertProxy.C
            {
                description
                {
                    Move assignment.
                }
                parameter System.FrontInsertProxy.C.operator.assign.P.System.FrontInsertProxy.C.RR.System.FrontInsertProxy.C.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.FrontInsertProxy.C.constructor.P.System.FrontInsertProxy.C.P.C
            {
                description
                {
                }
                parameter System.FrontInsertProxy.C.constructor.P.System.FrontInsertProxy.C.P.C.c_
                {
                    description
                    {
                    }
                }
            }
            function System.FrontInsertProxy.C.operator.assign.P.System.FrontInsertProxy.C.C.R.ValueType
            {
                description
                {
                }
                parameter System.FrontInsertProxy.C.operator.assign.P.System.FrontInsertProxy.C.C.R.ValueType.value
                {
                    description
                    {
                    }
                }
            }
        }
        class System.Greater2.T.U
        {
            description
            {
                A "\emph{greater than}" binary predicate.
            }
            remarks
            {
                T and U are possibly different types, but can be compared for less than relationship.
            }
            function System.Greater2.T.U.constructor.P.System.Greater2.T.U
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Greater2.T.U.constructor.P.System.Greater2.T.U.C.R.System.Greater2.T.U
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Greater2.T.U.constructor.P.System.Greater2.T.U.C.R.System.Greater2.T.U.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Greater2.T.U.operator.assign.P.System.Greater2.T.U.C.R.System.Greater2.T.U
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Greater2.T.U.operator.assign.P.System.Greater2.T.U.C.R.System.Greater2.T.U.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Greater2.T.U.constructor.P.System.Greater2.T.U.RR.System.Greater2.T.U
            {
                description
                {
                    Move constructor.
                }
                parameter System.Greater2.T.U.constructor.P.System.Greater2.T.U.RR.System.Greater2.T.U.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Greater2.T.U.operator.assign.P.System.Greater2.T.U.RR.System.Greater2.T.U
            {
                description
                {
                    Move assignment.
                }
                parameter System.Greater2.T.U.operator.assign.P.System.Greater2.T.U.RR.System.Greater2.T.U.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Greater2.T.U.operator.apply.C.P.System.Greater2.T.U.C.R.T.C.R.U
            {
                description
                {
                    Returns true if the first argument is greater than the second argument, false otherwise.
                }
                parameter System.Greater2.T.U.operator.apply.C.P.System.Greater2.T.U.C.R.T.C.R.U.left
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.Greater2.T.U.operator.apply.C.P.System.Greater2.T.U.C.R.T.C.R.U.right
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.Greater2.T.U.operator.apply.C.P.System.Greater2.T.U.C.R.T.C.R.U.returnValue
                {
                    description
                    {
                        Returns "$left > right$".
                    }
                }
            }
            modelof System.Concepts.Relation.T.U.V;
        }
        class System.Greater.T
        {
            description
            {
                A "\emph{greater than}" relation.
            }
            example <examples/System.Greater.cm>;
            example <examples/System.GreaterA.cm>;
            function System.Greater.T.constructor.P.System.Greater.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Greater.T.constructor.P.System.Greater.T.C.R.System.Greater.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Greater.T.constructor.P.System.Greater.T.C.R.System.Greater.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Greater.T.operator.assign.P.System.Greater.T.C.R.System.Greater.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Greater.T.operator.assign.P.System.Greater.T.C.R.System.Greater.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Greater.T.constructor.P.System.Greater.T.RR.System.Greater.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Greater.T.constructor.P.System.Greater.T.RR.System.Greater.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Greater.T.operator.assign.P.System.Greater.T.RR.System.Greater.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Greater.T.operator.assign.P.System.Greater.T.RR.System.Greater.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Greater.T.operator.apply.C.P.System.Greater.T.C.R.T.C.R.T
            {
                description
                {
                    Returns true if the first argument is greater than the second argument, false otherwise.
                }
                parameter System.Greater.T.operator.apply.C.P.System.Greater.T.C.R.T.C.R.T.left
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.Greater.T.operator.apply.C.P.System.Greater.T.C.R.T.C.R.T.right
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.Greater.T.operator.apply.C.P.System.Greater.T.C.R.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$left > right$".
                    }
                }
            }
            modelof System.Concepts.Relation.T;
        }
        class System.GreaterOrEqualTo2.T.U
        {
            description
            {
                A "\emph{greater than or equal to}" binary predicate.
            }
            remarks
            {
                T and U are possible different types, but can be compared for less than relationship.
            }
            function System.GreaterOrEqualTo2.T.U.constructor.P.System.GreaterOrEqualTo2.T.U
            {
                description
                {
                    Default constructor.
                }
            }
            function System.GreaterOrEqualTo2.T.U.constructor.P.System.GreaterOrEqualTo2.T.U.C.R.System.GreaterOrEqualTo2.T.U
            {
                description
                {
                    Copy constructor.
                }
                parameter System.GreaterOrEqualTo2.T.U.constructor.P.System.GreaterOrEqualTo2.T.U.C.R.System.GreaterOrEqualTo2.T.U.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.GreaterOrEqualTo2.T.U.operator.assign.P.System.GreaterOrEqualTo2.T.U.C.R.System.GreaterOrEqualTo2.T.U
            {
                description
                {
                    Copy assignment.
                }
                parameter System.GreaterOrEqualTo2.T.U.operator.assign.P.System.GreaterOrEqualTo2.T.U.C.R.System.GreaterOrEqualTo2.T.U.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.GreaterOrEqualTo2.T.U.constructor.P.System.GreaterOrEqualTo2.T.U.RR.System.GreaterOrEqualTo2.T.U
            {
                description
                {
                    Move constructor.
                }
                parameter System.GreaterOrEqualTo2.T.U.constructor.P.System.GreaterOrEqualTo2.T.U.RR.System.GreaterOrEqualTo2.T.U.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.GreaterOrEqualTo2.T.U.operator.assign.P.System.GreaterOrEqualTo2.T.U.RR.System.GreaterOrEqualTo2.T.U
            {
                description
                {
                    Move assignment.
                }
                parameter System.GreaterOrEqualTo2.T.U.operator.assign.P.System.GreaterOrEqualTo2.T.U.RR.System.GreaterOrEqualTo2.T.U.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.GreaterOrEqualTo2.T.U.operator.apply.C.P.System.GreaterOrEqualTo2.T.U.C.R.T.C.R.U
            {
                description
                {
                    Returns true if the first argument is greater than or equal to the second argument, false otherwise.
                }
                parameter System.GreaterOrEqualTo2.T.U.operator.apply.C.P.System.GreaterOrEqualTo2.T.U.C.R.T.C.R.U.left
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.GreaterOrEqualTo2.T.U.operator.apply.C.P.System.GreaterOrEqualTo2.T.U.C.R.T.C.R.U.right
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.GreaterOrEqualTo2.T.U.operator.apply.C.P.System.GreaterOrEqualTo2.T.U.C.R.T.C.R.U.returnValue
                {
                    description
                    {
                        Returns "$left >= right$".
                    }
                }
            }
            modelof System.Concepts.Relation.T.U.V;
        }
        class System.GreaterOrEqualTo.T
        {
            description
            {
                A "\emph{greater than or equal to}" relation.
            }
            function System.GreaterOrEqualTo.T.constructor.P.System.GreaterOrEqualTo.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.GreaterOrEqualTo.T.constructor.P.System.GreaterOrEqualTo.T.C.R.System.GreaterOrEqualTo.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.GreaterOrEqualTo.T.constructor.P.System.GreaterOrEqualTo.T.C.R.System.GreaterOrEqualTo.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.GreaterOrEqualTo.T.operator.assign.P.System.GreaterOrEqualTo.T.C.R.System.GreaterOrEqualTo.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.GreaterOrEqualTo.T.operator.assign.P.System.GreaterOrEqualTo.T.C.R.System.GreaterOrEqualTo.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.GreaterOrEqualTo.T.constructor.P.System.GreaterOrEqualTo.T.RR.System.GreaterOrEqualTo.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.GreaterOrEqualTo.T.constructor.P.System.GreaterOrEqualTo.T.RR.System.GreaterOrEqualTo.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.GreaterOrEqualTo.T.operator.assign.P.System.GreaterOrEqualTo.T.RR.System.GreaterOrEqualTo.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.GreaterOrEqualTo.T.operator.assign.P.System.GreaterOrEqualTo.T.RR.System.GreaterOrEqualTo.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.GreaterOrEqualTo.T.operator.apply.C.P.System.GreaterOrEqualTo.T.C.R.T.C.R.T
            {
                description
                {
                    Returns true if the first argument is greater than or equal to the second argument, false otherwise.
                }
                parameter System.GreaterOrEqualTo.T.operator.apply.C.P.System.GreaterOrEqualTo.T.C.R.T.C.R.T.left
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.GreaterOrEqualTo.T.operator.apply.C.P.System.GreaterOrEqualTo.T.C.R.T.C.R.T.right
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.GreaterOrEqualTo.T.operator.apply.C.P.System.GreaterOrEqualTo.T.C.R.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$left >= right$".
                    }
                }
            }
            modelof System.Concepts.Relation.T;
        }
        class System.Identity.T
        {
            description
            {
                An identity unary function object.
            }
            function System.Identity.T.constructor.P.System.Identity.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Identity.T.constructor.P.System.Identity.T.C.R.System.Identity.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Identity.T.constructor.P.System.Identity.T.C.R.System.Identity.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Identity.T.operator.assign.P.System.Identity.T.C.R.System.Identity.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Identity.T.operator.assign.P.System.Identity.T.C.R.System.Identity.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Identity.T.constructor.P.System.Identity.T.RR.System.Identity.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Identity.T.constructor.P.System.Identity.T.RR.System.Identity.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Identity.T.operator.assign.P.System.Identity.T.RR.System.Identity.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Identity.T.operator.assign.P.System.Identity.T.RR.System.Identity.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Identity.T.operator.apply.C.P.System.Identity.T.C.R.T
            {
                description
                {
                    Returns the argument.
                }
                parameter System.Identity.T.operator.apply.C.P.System.Identity.T.C.R.T.x
                {
                    description
                    {
                        An argument.
                    }
                }
                returns System.Identity.T.operator.apply.C.P.System.Identity.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$x$".
                    }
                }
            }
            modelof System.Concepts.UnaryOperation.T;
        }
        class System.InsertIterator.C
        {
            description
            {
                An output iterator that inserts elements to given position of a container.
            }
            remarks
            {
                System.Inserter.C.I.C.is.InsertionSequence.I.is.C.Iterator.C.ref.I is a helper function that
                returns a System.InsertIterator.C for a container and position.
            }
            example <examples/System.InsertIterator.cm>;
            typedef System.InsertIterator.C.PointerType
            {
                description
                {
                    Pointer to an implementation defined proxy type.
                }
            }
            typedef System.InsertIterator.C.ReferenceType
            {
                description
                {
                    Reference to an implementation defined proxy type.
                }
            }
            typedef System.InsertIterator.C.ValueType
            {
                description
                {
                    An implementation defined proxy type.
                }
            }
            function System.InsertIterator.C.constructor.P.System.InsertIterator.C
            {
                description
                {
                    Constructor. Default constructs an insert iterator.
                }
            }
            function System.InsertIterator.C.constructor.P.System.InsertIterator.C.C.R.System.InsertIterator.C
            {
                description
                {
                    Copy constructor.
                }
                parameter System.InsertIterator.C.constructor.P.System.InsertIterator.C.C.R.System.InsertIterator.C.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.InsertIterator.C.operator.assign.P.System.InsertIterator.C.C.R.System.InsertIterator.C
            {
                description
                {
                    Copy assignment.
                }
                parameter System.InsertIterator.C.operator.assign.P.System.InsertIterator.C.C.R.System.InsertIterator.C.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.InsertIterator.C.constructor.P.System.InsertIterator.C.RR.System.InsertIterator.C
            {
                description
                {
                    Move constructor.
                }
                parameter System.InsertIterator.C.constructor.P.System.InsertIterator.C.RR.System.InsertIterator.C.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.InsertIterator.C.operator.assign.P.System.InsertIterator.C.RR.System.InsertIterator.C
            {
                description
                {
                    Move assignment.
                }
                parameter System.InsertIterator.C.operator.assign.P.System.InsertIterator.C.RR.System.InsertIterator.C.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.InsertIterator.C.constructor.P.System.InsertIterator.C.R.C.Iterator
            {
                description
                {
                }
                parameter System.InsertIterator.C.constructor.P.System.InsertIterator.C.R.C.Iterator.c
                {
                    description
                    {
                    }
                }
                parameter System.InsertIterator.C.constructor.P.System.InsertIterator.C.R.C.Iterator.i
                {
                    description
                    {
                    }
                }
            }
            function System.InsertIterator.C.operator.times.P.System.InsertIterator.C
            {
                description
                {
                    Returns a reference to a proxy type that inserts values to the container.
                }
                returns System.InsertIterator.C.operator.times.P.System.InsertIterator.C.returnValue
                {
                    description
                    {
                        Returns a reference to a proxy type that inserts values to the container.
                    }
                }
            }
            function System.InsertIterator.C.operator.increment.P.System.InsertIterator.C
            {
                description
                {
                    Advances the insert iterator to the next element.
                }
                returns System.InsertIterator.C.operator.increment.P.System.InsertIterator.C.returnValue
                {
                    description
                    {
                        Returns a reference to the iterator.
                    }
                }
            }
            function System.InsertIterator.C.operator.pointer.P.System.InsertIterator.C
            {
                description
                {
                    Returns a pointer to a proxy type that inserts values to the container.
                }
                returns System.InsertIterator.C.operator.pointer.P.System.InsertIterator.C.returnValue
                {
                    description
                    {
                        Returns a pointer to a proxy type that inserts values to the container.
                    }
                }
            }
            modelof System.Concepts.OutputIterator.T;
        }
        class System.InsertProxy.C
        {
            description
            {
                Implementation detail.
            }
            function System.InsertProxy.C.constructor.P.System.InsertProxy.C
            {
                description
                {
                }
            }
            function System.InsertProxy.C.constructor.P.System.InsertProxy.C.C.R.System.InsertProxy.C
            {
                description
                {
                }
                parameter System.InsertProxy.C.constructor.P.System.InsertProxy.C.C.R.System.InsertProxy.C.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.InsertProxy.C.operator.assign.P.System.InsertProxy.C.C.R.System.InsertProxy.C
            {
                description
                {
                }
                parameter System.InsertProxy.C.operator.assign.P.System.InsertProxy.C.C.R.System.InsertProxy.C.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.InsertProxy.C.constructor.P.System.InsertProxy.C.RR.System.InsertProxy.C
            {
                description
                {
                    Move constructor.
                }
                parameter System.InsertProxy.C.constructor.P.System.InsertProxy.C.RR.System.InsertProxy.C.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.InsertProxy.C.operator.assign.P.System.InsertProxy.C.RR.System.InsertProxy.C
            {
                description
                {
                    Move assignment.
                }
                parameter System.InsertProxy.C.operator.assign.P.System.InsertProxy.C.RR.System.InsertProxy.C.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.InsertProxy.C.constructor.P.System.InsertProxy.C.P.C.Iterator
            {
                description
                {
                }
                parameter System.InsertProxy.C.constructor.P.System.InsertProxy.C.P.C.Iterator.c_
                {
                    description
                    {
                    }
                }
                parameter System.InsertProxy.C.constructor.P.System.InsertProxy.C.P.C.Iterator.i_
                {
                    description
                    {
                    }
                }
            }
            function System.InsertProxy.C.operator.assign.P.System.InsertProxy.C.C.R.ValueType
            {
                description
                {
                }
                parameter System.InsertProxy.C.operator.assign.P.System.InsertProxy.C.C.R.ValueType.value
                {
                    description
                    {
                    }
                }
            }
            function System.InsertProxy.C.destructor.P.System.InsertProxy.C
            {
                description
                {
                }
            }
        }
        class System.Less2.T.U
        {
            description
            {
                A "\emph{less than}" binary predicate.
            }
            remarks
            {
                T and U are possibly different types, but can be compared for less than relationship.
            }
            function System.Less2.T.U.constructor.P.System.Less2.T.U
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Less2.T.U.constructor.P.System.Less2.T.U.C.R.System.Less2.T.U
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Less2.T.U.constructor.P.System.Less2.T.U.C.R.System.Less2.T.U.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Less2.T.U.operator.assign.P.System.Less2.T.U.C.R.System.Less2.T.U
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Less2.T.U.operator.assign.P.System.Less2.T.U.C.R.System.Less2.T.U.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Less2.T.U.constructor.P.System.Less2.T.U.RR.System.Less2.T.U
            {
                description
                {
                    Move constructor.
                }
                parameter System.Less2.T.U.constructor.P.System.Less2.T.U.RR.System.Less2.T.U.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Less2.T.U.operator.assign.P.System.Less2.T.U.RR.System.Less2.T.U
            {
                description
                {
                    Move assignment.
                }
                parameter System.Less2.T.U.operator.assign.P.System.Less2.T.U.RR.System.Less2.T.U.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Less2.T.U.operator.apply.C.P.System.Less2.T.U.C.R.T.C.R.U
            {
                description
                {
                    Returns true if the first argument is less than the second argument.
                }
                parameter System.Less2.T.U.operator.apply.C.P.System.Less2.T.U.C.R.T.C.R.U.left
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.Less2.T.U.operator.apply.C.P.System.Less2.T.U.C.R.T.C.R.U.right
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.Less2.T.U.operator.apply.C.P.System.Less2.T.U.C.R.T.C.R.U.returnValue
                {
                    description
                    {
                        Returns "$left < right$".
                    }
                }
            }
            modelof System.Concepts.Relation.T.U.V;
        }
        class System.Less.T
        {
            description
            {
                A "\emph{less than}" relation.
            }
            example <examples/System.Less.cm>;
            example <examples/System.LessA.cm>;
            function System.Less.T.constructor.P.System.Less.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Less.T.constructor.P.System.Less.T.C.R.System.Less.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Less.T.constructor.P.System.Less.T.C.R.System.Less.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Less.T.operator.assign.P.System.Less.T.C.R.System.Less.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Less.T.operator.assign.P.System.Less.T.C.R.System.Less.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Less.T.constructor.P.System.Less.T.RR.System.Less.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Less.T.constructor.P.System.Less.T.RR.System.Less.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Less.T.operator.assign.P.System.Less.T.RR.System.Less.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Less.T.operator.assign.P.System.Less.T.RR.System.Less.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Less.T.operator.apply.C.P.System.Less.T.C.R.T.C.R.T
            {
                description
                {
                    Returns true if the first argument is less than the second argument, false otherwise.
                }
                parameter System.Less.T.operator.apply.C.P.System.Less.T.C.R.T.C.R.T.left
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.Less.T.operator.apply.C.P.System.Less.T.C.R.T.C.R.T.right
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.Less.T.operator.apply.C.P.System.Less.T.C.R.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$left < right$".
                    }
                }
            }
            modelof System.Concepts.Relation.T;
        }
        class System.LessOrEqualTo2.T.U
        {
            description
            {
                A "\emph{less than or equal to}" binary predicate.
            }
            remarks
            {
                T and U are possibly different types, but can be compared for less than relationship.
            }
            function System.LessOrEqualTo2.T.U.constructor.P.System.LessOrEqualTo2.T.U
            {
                description
                {
                    Default constructor.
                }
            }
            function System.LessOrEqualTo2.T.U.constructor.P.System.LessOrEqualTo2.T.U.C.R.System.LessOrEqualTo2.T.U
            {
                description
                {
                    Copy constructor.
                }
                parameter System.LessOrEqualTo2.T.U.constructor.P.System.LessOrEqualTo2.T.U.C.R.System.LessOrEqualTo2.T.U.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.LessOrEqualTo2.T.U.operator.assign.P.System.LessOrEqualTo2.T.U.C.R.System.LessOrEqualTo2.T.U
            {
                description
                {
                    Copy assignment.
                }
                parameter System.LessOrEqualTo2.T.U.operator.assign.P.System.LessOrEqualTo2.T.U.C.R.System.LessOrEqualTo2.T.U.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.LessOrEqualTo2.T.U.constructor.P.System.LessOrEqualTo2.T.U.RR.System.LessOrEqualTo2.T.U
            {
                description
                {
                    Move constructor.
                }
                parameter System.LessOrEqualTo2.T.U.constructor.P.System.LessOrEqualTo2.T.U.RR.System.LessOrEqualTo2.T.U.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.LessOrEqualTo2.T.U.operator.assign.P.System.LessOrEqualTo2.T.U.RR.System.LessOrEqualTo2.T.U
            {
                description
                {
                    Move assignment.
                }
                parameter System.LessOrEqualTo2.T.U.operator.assign.P.System.LessOrEqualTo2.T.U.RR.System.LessOrEqualTo2.T.U.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.LessOrEqualTo2.T.U.operator.apply.C.P.System.LessOrEqualTo2.T.U.C.R.T.C.R.U
            {
                description
                {
                    Returns true if the first argument is less than or equal to the second argument, false otherwise.
                }
                parameter System.LessOrEqualTo2.T.U.operator.apply.C.P.System.LessOrEqualTo2.T.U.C.R.T.C.R.U.left
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.LessOrEqualTo2.T.U.operator.apply.C.P.System.LessOrEqualTo2.T.U.C.R.T.C.R.U.right
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.LessOrEqualTo2.T.U.operator.apply.C.P.System.LessOrEqualTo2.T.U.C.R.T.C.R.U.returnValue
                {
                    description
                    {
                        Returns "$left <= right$".
                    }
                }
            }
            modelof System.Concepts.Relation.T.U.V;
        }
        class System.LessOrEqualTo.T
        {
            description
            {
                A "\emph{less than or equal to}" relation.
            }
            function System.LessOrEqualTo.T.constructor.P.System.LessOrEqualTo.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.LessOrEqualTo.T.constructor.P.System.LessOrEqualTo.T.C.R.System.LessOrEqualTo.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.LessOrEqualTo.T.constructor.P.System.LessOrEqualTo.T.C.R.System.LessOrEqualTo.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.LessOrEqualTo.T.operator.assign.P.System.LessOrEqualTo.T.C.R.System.LessOrEqualTo.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.LessOrEqualTo.T.operator.assign.P.System.LessOrEqualTo.T.C.R.System.LessOrEqualTo.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.LessOrEqualTo.T.constructor.P.System.LessOrEqualTo.T.RR.System.LessOrEqualTo.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.LessOrEqualTo.T.constructor.P.System.LessOrEqualTo.T.RR.System.LessOrEqualTo.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.LessOrEqualTo.T.operator.assign.P.System.LessOrEqualTo.T.RR.System.LessOrEqualTo.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.LessOrEqualTo.T.operator.assign.P.System.LessOrEqualTo.T.RR.System.LessOrEqualTo.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.LessOrEqualTo.T.operator.apply.C.P.System.LessOrEqualTo.T.C.R.T.C.R.T
            {
                description
                {
                    Returns true if the first argument is less than or equal to the second argument, false otherwise.
                }
                parameter System.LessOrEqualTo.T.operator.apply.C.P.System.LessOrEqualTo.T.C.R.T.C.R.T.left
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.LessOrEqualTo.T.operator.apply.C.P.System.LessOrEqualTo.T.C.R.T.C.R.T.right
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.LessOrEqualTo.T.operator.apply.C.P.System.LessOrEqualTo.T.C.R.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$left <= right$".
                    }
                }
            }
            modelof System.Concepts.Relation.T;
        }
        class System.MT
        {
            description
            {
                Mersenne Twister pseudorandom number generator.
            }
            remarks
            {
                System.Rand function returns a pseudorandom number in range 0..System.MaxValue.uint inclusive.
            }
            function System.MT.GenRand
            {
                description
                {
                    Generates a pseudorandom number in range 0..System.MaxValue.uint and returns it.
                }
                returns System.MT.GenRand.returnValue
                {
                    description
                    {
                        Generates a pseudorandom number in range 0..System.MaxValue.uint and returns it.
                    }
                }
            }
            function System.MT.Init.uint
            {
                description
                {
                    Initializes the pseudorandom number generator with the given seed.
                }
                remarks
                {
                    In general the System.MT.Init.uint function need not be called because the 
                    static constructor initializes the generator with random seed returned by the system.
                }
                parameter System.MT.Init.uint.seed
                {
                    description
                    {
                        A seed value.
                    }
                }
            }
            function System.MT.InitWithRandomSeed
            {
                description
                {
                    Initializes the pseudorandom number generator with a random seed returned by the system.
                }
            }
        }
        class System.Minus.T
        {
            description
            {
                A subtraction binary function object.
            }
            function System.Minus.T.constructor.P.System.Minus.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Minus.T.constructor.P.System.Minus.T.C.R.System.Minus.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Minus.T.constructor.P.System.Minus.T.C.R.System.Minus.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Minus.T.operator.assign.P.System.Minus.T.C.R.System.Minus.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Minus.T.operator.assign.P.System.Minus.T.C.R.System.Minus.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Minus.T.constructor.P.System.Minus.T.RR.System.Minus.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Minus.T.constructor.P.System.Minus.T.RR.System.Minus.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Minus.T.operator.assign.P.System.Minus.T.RR.System.Minus.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Minus.T.operator.assign.P.System.Minus.T.RR.System.Minus.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Minus.T.operator.apply.C.P.System.Minus.T.C.R.T.C.R.T
            {
                description
                {
                    Returns the difference of the the first and second argument.
                }
                parameter System.Minus.T.operator.apply.C.P.System.Minus.T.C.R.T.C.R.T.a
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.Minus.T.operator.apply.C.P.System.Minus.T.C.R.T.C.R.T.b
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.Minus.T.operator.apply.C.P.System.Minus.T.C.R.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$a - b$".
                    }
                }
            }
            modelof System.Concepts.BinaryFunction.T;
        }
        class System.Multiplies.T
        {
            description
            {
                A multiplication binary function object.
            }
            example <examples/System.Multiplies.cm>;
            function System.Multiplies.T.constructor.P.System.Multiplies.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Multiplies.T.constructor.P.System.Multiplies.T.C.R.System.Multiplies.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Multiplies.T.constructor.P.System.Multiplies.T.C.R.System.Multiplies.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Multiplies.T.operator.assign.P.System.Multiplies.T.C.R.System.Multiplies.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Multiplies.T.operator.assign.P.System.Multiplies.T.C.R.System.Multiplies.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Multiplies.T.constructor.P.System.Multiplies.T.RR.System.Multiplies.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Multiplies.T.constructor.P.System.Multiplies.T.RR.System.Multiplies.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Multiplies.T.operator.assign.P.System.Multiplies.T.RR.System.Multiplies.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Multiplies.T.operator.assign.P.System.Multiplies.T.RR.System.Multiplies.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Multiplies.T.operator.apply.C.P.System.Multiplies.T.C.R.T.C.R.T
            {
                description
                {
                    Returns the first argument multiplied with the second argument.
                }
                parameter System.Multiplies.T.operator.apply.C.P.System.Multiplies.T.C.R.T.C.R.T.a
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.Multiplies.T.operator.apply.C.P.System.Multiplies.T.C.R.T.C.R.T.b
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.Multiplies.T.operator.apply.C.P.System.Multiplies.T.C.R.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$a * b$".
                    }
                }
            }
            modelof System.Concepts.BinaryOperation.T;
        }
        class System.Negate.T
        {
            description
            {
                A negation unary operation.
            }
            function System.Negate.T.constructor.P.System.Negate.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Negate.T.constructor.P.System.Negate.T.C.R.System.Negate.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Negate.T.constructor.P.System.Negate.T.C.R.System.Negate.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Negate.T.operator.assign.P.System.Negate.T.C.R.System.Negate.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Negate.T.operator.assign.P.System.Negate.T.C.R.System.Negate.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Negate.T.constructor.P.System.Negate.T.RR.System.Negate.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Negate.T.constructor.P.System.Negate.T.RR.System.Negate.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Negate.T.operator.assign.P.System.Negate.T.RR.System.Negate.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Negate.T.operator.assign.P.System.Negate.T.RR.System.Negate.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Negate.T.operator.apply.C.P.System.Negate.T.C.R.T
            {
                description
                {
                    Returns the negation of its argument.
                }
                parameter System.Negate.T.operator.apply.C.P.System.Negate.T.C.R.T.a
                {
                    description
                    {
                        The argument.
                    }
                }
                returns System.Negate.T.operator.apply.C.P.System.Negate.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$-a$".
                    }
                }
            }
            modelof System.Concepts.UnaryOperation.T;
        }
        class System.NotEqualTo2.T.U
        {
            description
            {
                A "\emph{not equal to}" binary predicate.
            }
            remarks
            {
                T and U are possibly different types, but can be compared for equality.
            }
            function System.NotEqualTo2.T.U.constructor.P.System.NotEqualTo2.T.U
            {
                description
                {
                    Default constructor.
                }
            }
            function System.NotEqualTo2.T.U.constructor.P.System.NotEqualTo2.T.U.C.R.System.NotEqualTo2.T.U
            {
                description
                {
                    Copy constructor.
                }
                parameter System.NotEqualTo2.T.U.constructor.P.System.NotEqualTo2.T.U.C.R.System.NotEqualTo2.T.U.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.NotEqualTo2.T.U.operator.assign.P.System.NotEqualTo2.T.U.C.R.System.NotEqualTo2.T.U
            {
                description
                {
                    Copy assignment.
                }
                parameter System.NotEqualTo2.T.U.operator.assign.P.System.NotEqualTo2.T.U.C.R.System.NotEqualTo2.T.U.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.NotEqualTo2.T.U.constructor.P.System.NotEqualTo2.T.U.RR.System.NotEqualTo2.T.U
            {
                description
                {
                    Move constructor.
                }
                parameter System.NotEqualTo2.T.U.constructor.P.System.NotEqualTo2.T.U.RR.System.NotEqualTo2.T.U.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.NotEqualTo2.T.U.operator.assign.P.System.NotEqualTo2.T.U.RR.System.NotEqualTo2.T.U
            {
                description
                {
                    Move assignment.
                }
                parameter System.NotEqualTo2.T.U.operator.assign.P.System.NotEqualTo2.T.U.RR.System.NotEqualTo2.T.U.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.NotEqualTo2.T.U.operator.apply.C.P.System.NotEqualTo2.T.U.C.R.T.C.R.U
            {
                description
                {
                    Returns true if the first argument is not equal to the second argument, false otherwise.
                }
                parameter System.NotEqualTo2.T.U.operator.apply.C.P.System.NotEqualTo2.T.U.C.R.T.C.R.U.left
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.NotEqualTo2.T.U.operator.apply.C.P.System.NotEqualTo2.T.U.C.R.T.C.R.U.right
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.NotEqualTo2.T.U.operator.apply.C.P.System.NotEqualTo2.T.U.C.R.T.C.R.U.returnValue
                {
                    description
                    {
                        Returns "$left$ != $right$".
                    }
                }
            }
            modelof System.Concepts.Relation.T.U.V;
        }
        class System.NotEqualTo.T
        {
            description
            {
                An "\emph{not equal to}" relation.
            }
            function System.NotEqualTo.T.constructor.P.System.NotEqualTo.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.NotEqualTo.T.constructor.P.System.NotEqualTo.T.C.R.System.NotEqualTo.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.NotEqualTo.T.constructor.P.System.NotEqualTo.T.C.R.System.NotEqualTo.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.NotEqualTo.T.operator.assign.P.System.NotEqualTo.T.C.R.System.NotEqualTo.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.NotEqualTo.T.operator.assign.P.System.NotEqualTo.T.C.R.System.NotEqualTo.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.NotEqualTo.T.constructor.P.System.NotEqualTo.T.RR.System.NotEqualTo.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.NotEqualTo.T.constructor.P.System.NotEqualTo.T.RR.System.NotEqualTo.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.NotEqualTo.T.operator.assign.P.System.NotEqualTo.T.RR.System.NotEqualTo.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.NotEqualTo.T.operator.assign.P.System.NotEqualTo.T.RR.System.NotEqualTo.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.NotEqualTo.T.operator.apply.C.P.System.NotEqualTo.T.C.R.T.C.R.T
            {
                description
                {
                    Returns true if the first argument is not equal to the second argument, false otherwise.
                }
                parameter System.NotEqualTo.T.operator.apply.C.P.System.NotEqualTo.T.C.R.T.C.R.T.left
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.NotEqualTo.T.operator.apply.C.P.System.NotEqualTo.T.C.R.T.C.R.T.right
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.NotEqualTo.T.operator.apply.C.P.System.NotEqualTo.T.C.R.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$left$ != $right$".
                    }
                }
            }
            modelof System.Concepts.Relation.T;
        }
        class System.Pair.T.U
        {
            description
            {
                A pair of values.
            }
            remarks
            {
                The System.Pair.T.U class is used for example in the system library algorithm 
                System.EqualRange.I.T.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.I.I.T.const.ref to return a pair of iterators,
                and in the system library System.Collections.Map.Key.Value.KeyCompare class to compose a value type from a key type and a 
                mapped type.
            }
            function System.Pair.T.U.constructor.P.System.Pair.T.U
            {
                description
                {
                    Constructor. Constructs a pair with default values.
                }
            }
            function System.Pair.T.U.constructor.P.System.Pair.T.U.C.R.System.Pair.T.U
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.T.U.constructor.P.System.Pair.T.U.C.R.System.Pair.T.U.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.T.U.operator.assign.P.System.Pair.T.U.C.R.System.Pair.T.U
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.T.U.operator.assign.P.System.Pair.T.U.C.R.System.Pair.T.U.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.T.U.constructor.P.System.Pair.T.U.RR.System.Pair.T.U
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.T.U.constructor.P.System.Pair.T.U.RR.System.Pair.T.U.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.T.U.operator.assign.P.System.Pair.T.U.RR.System.Pair.T.U
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.T.U.operator.assign.P.System.Pair.T.U.RR.System.Pair.T.U.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Pair.T.U.constructor.P.System.Pair.T.U.C.R.T.C.R.U
            {
                description
                {
                    Constructor. Constructs a pair with specified values.
                }
                parameter System.Pair.T.U.constructor.P.System.Pair.T.U.C.R.T.C.R.U.first_
                {
                    description
                    {
                        The first value.
                    }
                }
                parameter System.Pair.T.U.constructor.P.System.Pair.T.U.C.R.T.C.R.U.second_
                {
                    description
                    {
                        The second value.
                    }
                }
            }
        }
        class System.Plus.T
        {
            description
            {
                An addition binary function object.
            }
            example <examples/System.Accumulate.cm>;
            function System.Plus.T.constructor.P.System.Plus.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Plus.T.constructor.P.System.Plus.T.C.R.System.Plus.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Plus.T.constructor.P.System.Plus.T.C.R.System.Plus.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Plus.T.operator.assign.P.System.Plus.T.C.R.System.Plus.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Plus.T.operator.assign.P.System.Plus.T.C.R.System.Plus.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Plus.T.constructor.P.System.Plus.T.RR.System.Plus.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Plus.T.constructor.P.System.Plus.T.RR.System.Plus.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Plus.T.operator.assign.P.System.Plus.T.RR.System.Plus.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Plus.T.operator.assign.P.System.Plus.T.RR.System.Plus.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Plus.T.operator.apply.C.P.System.Plus.T.C.R.T.C.R.T
            {
                description
                {
                    Returns the sum of the first argument and the second argument.
                }
                parameter System.Plus.T.operator.apply.C.P.System.Plus.T.C.R.T.C.R.T.a
                {
                    description
                    {
                        the first argument.
                    }
                }
                parameter System.Plus.T.operator.apply.C.P.System.Plus.T.C.R.T.C.R.T.b
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.Plus.T.operator.apply.C.P.System.Plus.T.C.R.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$a + b$".
                    }
                }
            }
            modelof System.Concepts.BinaryOperation.T;
        }
        class System.RandomAccessIter.T.R.P
        {
            description
            {
                A random access iterator that contains a pointer to elements.
            }
            remarks
            {
                System.Collections.List.T and System.String classes implement their
                iterator types using the System.RandomAccessIter.T.R.P class.
            }
            typedef System.RandomAccessIter.T.R.P.PointerType
            {
                description
                {
                    A pointer to an element.
                }
            }
            typedef System.RandomAccessIter.T.R.P.ReferenceType
            {
                description
                {
                    A reference to an element.
                }
            }
            typedef System.RandomAccessIter.T.R.P.ValueType
            {
                description
                {
                    The type of an element.
                }
            }
            function System.RandomAccessIter.T.R.P.constructor.P.System.RandomAccessIter.T.R.P
            {
                description
                {
                    Constructor. Default constructs a random access iterator.
                }
            }
            function System.RandomAccessIter.T.R.P.constructor.P.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.T.R.P.constructor.P.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.T.R.P.operator.assign.P.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.T.R.P.operator.assign.P.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.T.R.P.constructor.P.System.RandomAccessIter.T.R.P.RR.System.RandomAccessIter.T.R.P
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.T.R.P.constructor.P.System.RandomAccessIter.T.R.P.RR.System.RandomAccessIter.T.R.P.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.T.R.P.operator.assign.P.System.RandomAccessIter.T.R.P.RR.System.RandomAccessIter.T.R.P
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.T.R.P.operator.assign.P.System.RandomAccessIter.T.R.P.RR.System.RandomAccessIter.T.R.P.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.RandomAccessIter.T.R.P.GetPtr.C.P.System.RandomAccessIter.T.R.P
            {
                description
                {
                    Returns the contained pointer.
                }
                returns System.RandomAccessIter.T.R.P.GetPtr.C.P.System.RandomAccessIter.T.R.P.returnValue
                {
                    description
                    {
                        Returns "$ptr$", where "$ptr$" is the contained pointer.
                    }
                }
            }
            function System.RandomAccessIter.T.R.P.constructor.P.System.RandomAccessIter.T.R.P.P
            {
                description
                {
                    Constructor. Constructs a random access iterator with a pointer to elements.
                }
                parameter System.RandomAccessIter.T.R.P.constructor.P.System.RandomAccessIter.T.R.P.P.ptr_
                {
                    description
                    {
                        A pointer to elements.
                    }
                }
            }
            function System.RandomAccessIter.T.R.P.operator.times.C.P.System.RandomAccessIter.T.R.P
            {
                description
                {
                    Returns a reference to the element currently pointed to.
                }
                returns System.RandomAccessIter.T.R.P.operator.times.C.P.System.RandomAccessIter.T.R.P.returnValue
                {
                    description
                    {
                        Returns "$*ptr$", where "$ptr$" is the contained pointer.
                    }
                }
            }
            function System.RandomAccessIter.T.R.P.operator.increment.P.System.RandomAccessIter.T.R.P
            {
                description
                {
                    Advances the random access iterator to point to the succeeding element.
                }
                returns System.RandomAccessIter.T.R.P.operator.increment.P.System.RandomAccessIter.T.R.P.returnValue
                {
                    description
                    {
                        Returns a reference to the random access iterator.
                    }
                }
            }
            function System.RandomAccessIter.T.R.P.operator.decrement.P.System.RandomAccessIter.T.R.P
            {
                description
                {
                    Backs the random access iterator to point to the preceding element.
                }
                returns System.RandomAccessIter.T.R.P.operator.decrement.P.System.RandomAccessIter.T.R.P.returnValue
                {
                    description
                    {
                        Returns a reference to the random access iterator.
                    }
                }
            }
            function System.RandomAccessIter.T.R.P.operator.pointer.C.P.System.RandomAccessIter.T.R.P
            {
                description
                {
                    Returns a pointer to the element currently pointed to.
                }
                returns System.RandomAccessIter.T.R.P.operator.pointer.C.P.System.RandomAccessIter.T.R.P.returnValue
                {
                    description
                    {
                        Returns "$ptr$", where "$ptr$" is the contained pointer.
                    }
                }
            }
            function System.RandomAccessIter.T.R.P.operator.index.C.P.System.RandomAccessIter.T.R.P.int
            {
                description
                {
                    Returns a reference to an element with a given index.
                }
                parameter System.RandomAccessIter.T.R.P.operator.index.C.P.System.RandomAccessIter.T.R.P.int.index
                {
                    description
                    {
                        An index.
                    }
                }
                returns System.RandomAccessIter.T.R.P.operator.index.C.P.System.RandomAccessIter.T.R.P.int.returnValue
                {
                    description
                    {
                        Returns "$ptr[index]$" where "$ptr$" is the contained pointer to elements.
                    }
                }
            }
            modelof System.Concepts.RandomAccessIterator.T;
        }
        class System.Rel.Argument
        {
            description
            {
                A base class for relation function objects.
            }
            remarks
            {
                System.EqualTo.T, System.NotEqualTo.T, System.Less.T, System.Greater.T, System.LessOrEqualTo.T and 
                System.GreaterOrEqualTo.T classes derive from the System.Rel.Argument class.
            }
            typedef System.Rel.Argument.Domain
            {
                description
                {
                    The domain i.e. the type of the argument of the relation.
                }
            }
            function System.Rel.Argument.constructor.P.System.Rel.Argument
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Rel.Argument.constructor.P.System.Rel.Argument.C.R.System.Rel.Argument
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Rel.Argument.constructor.P.System.Rel.Argument.C.R.System.Rel.Argument.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Rel.Argument.operator.assign.P.System.Rel.Argument.C.R.System.Rel.Argument
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Rel.Argument.operator.assign.P.System.Rel.Argument.C.R.System.Rel.Argument.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Rel.Argument.constructor.P.System.Rel.Argument.RR.System.Rel.Argument
            {
                description
                {
                    Move constructor.
                }
                parameter System.Rel.Argument.constructor.P.System.Rel.Argument.RR.System.Rel.Argument.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Rel.Argument.operator.assign.P.System.Rel.Argument.RR.System.Rel.Argument
            {
                description
                {
                    Move assignment.
                }
                parameter System.Rel.Argument.operator.assign.P.System.Rel.Argument.RR.System.Rel.Argument.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            modelof System.Concepts.Relation.T;
        }
        class System.Remainder.T
        {
            description
            {
                A remainder function object.
            }
            function System.Remainder.T.constructor.P.System.Remainder.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Remainder.T.constructor.P.System.Remainder.T.C.R.System.Remainder.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Remainder.T.constructor.P.System.Remainder.T.C.R.System.Remainder.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Remainder.T.operator.assign.P.System.Remainder.T.C.R.System.Remainder.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Remainder.T.operator.assign.P.System.Remainder.T.C.R.System.Remainder.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Remainder.T.constructor.P.System.Remainder.T.RR.System.Remainder.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Remainder.T.constructor.P.System.Remainder.T.RR.System.Remainder.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Remainder.T.operator.assign.P.System.Remainder.T.RR.System.Remainder.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Remainder.T.operator.assign.P.System.Remainder.T.RR.System.Remainder.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Remainder.T.operator.apply.C.P.System.Remainder.T.C.R.T.C.R.T
            {
                description
                {
                    Returns the remainder of division of the first argument and the second argument.
                }
                parameter System.Remainder.T.operator.apply.C.P.System.Remainder.T.C.R.T.C.R.T.a
                {
                    description
                    {
                        The first argument.
                    }
                }
                parameter System.Remainder.T.operator.apply.C.P.System.Remainder.T.C.R.T.C.R.T.b
                {
                    description
                    {
                        The second argument.
                    }
                }
                returns System.Remainder.T.operator.apply.C.P.System.Remainder.T.C.R.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns "$a\ \%\ b$".
                    }
                }
            }
            modelof System.Concepts.BinaryFunction.T;
        }
        class System.SelectFirst.T.U
        {
            description
            {
                A function object for returning the first component of a pair.
            }
            function System.SelectFirst.T.U.constructor.P.System.SelectFirst.T.U
            {
                description
                {
                    Default constructor.
                }
            }
            function System.SelectFirst.T.U.constructor.P.System.SelectFirst.T.U.C.R.System.SelectFirst.T.U
            {
                description
                {
                    Copy constructor.
                }
                parameter System.SelectFirst.T.U.constructor.P.System.SelectFirst.T.U.C.R.System.SelectFirst.T.U.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.SelectFirst.T.U.operator.assign.P.System.SelectFirst.T.U.C.R.System.SelectFirst.T.U
            {
                description
                {
                    Copy assignment.
                }
                parameter System.SelectFirst.T.U.operator.assign.P.System.SelectFirst.T.U.C.R.System.SelectFirst.T.U.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.SelectFirst.T.U.constructor.P.System.SelectFirst.T.U.RR.System.SelectFirst.T.U
            {
                description
                {
                    Move constructor.
                }
                parameter System.SelectFirst.T.U.constructor.P.System.SelectFirst.T.U.RR.System.SelectFirst.T.U.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.SelectFirst.T.U.operator.assign.P.System.SelectFirst.T.U.RR.System.SelectFirst.T.U
            {
                description
                {
                    Move assignment.
                }
                parameter System.SelectFirst.T.U.operator.assign.P.System.SelectFirst.T.U.RR.System.SelectFirst.T.U.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.SelectFirst.T.U.operator.apply.C.P.System.SelectFirst.T.U.C.R.System.Pair.T.U
            {
                description
                {
                    Returns the first component of the given pair.
                }
                parameter System.SelectFirst.T.U.operator.apply.C.P.System.SelectFirst.T.U.C.R.System.Pair.T.U.p
                {
                    description
                    {
                        A pair of values.
                    }
                }
                returns System.SelectFirst.T.U.operator.apply.C.P.System.SelectFirst.T.U.C.R.System.Pair.T.U.returnValue
                {
                    description
                    {
                        Returns the first component of "$p$".
                    }
                }
            }
        }
        class System.SelectSecond.T.U
        {
            description
            {
                A function object for returning the second component of a pair.
            }
            function System.SelectSecond.T.U.constructor.P.System.SelectSecond.T.U
            {
                description
                {
                    Default constructor.
                }
            }
            function System.SelectSecond.T.U.constructor.P.System.SelectSecond.T.U.C.R.System.SelectSecond.T.U
            {
                description
                {
                    Copy constructor.
                }
                parameter System.SelectSecond.T.U.constructor.P.System.SelectSecond.T.U.C.R.System.SelectSecond.T.U.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.SelectSecond.T.U.operator.assign.P.System.SelectSecond.T.U.C.R.System.SelectSecond.T.U
            {
                description
                {
                    Copy assignment.
                }
                parameter System.SelectSecond.T.U.operator.assign.P.System.SelectSecond.T.U.C.R.System.SelectSecond.T.U.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.SelectSecond.T.U.constructor.P.System.SelectSecond.T.U.RR.System.SelectSecond.T.U
            {
                description
                {
                    Move constructor.
                }
                parameter System.SelectSecond.T.U.constructor.P.System.SelectSecond.T.U.RR.System.SelectSecond.T.U.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.SelectSecond.T.U.operator.assign.P.System.SelectSecond.T.U.RR.System.SelectSecond.T.U
            {
                description
                {
                    Move assignment.
                }
                parameter System.SelectSecond.T.U.operator.assign.P.System.SelectSecond.T.U.RR.System.SelectSecond.T.U.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.SelectSecond.T.U.operator.apply.C.P.System.SelectSecond.T.U.C.R.System.Pair.T.U
            {
                description
                {
                    Returns the second component of the given pair.
                }
                parameter System.SelectSecond.T.U.operator.apply.C.P.System.SelectSecond.T.U.C.R.System.Pair.T.U.p
                {
                    description
                    {
                        A pair of values.
                    }
                }
                returns System.SelectSecond.T.U.operator.apply.C.P.System.SelectSecond.T.U.C.R.System.Pair.T.U.returnValue
                {
                    description
                    {
                        Returns the second component of "$p$".
                    }
                }
            }
        }
        class System.ShareableFromThis.T
        {
            description
            {
                A class that implements the "``shared from this''" idiom.
            }
            remarks
            {
                By deriving a class from System.ShareableFromThis.T 
                with itself as the template argument,
                you can obtain a shared pointer to the class in its member functions
                (other that constructors) provided that there is a "``living''" 
                System.SharedPtr.T to the object.
            }
            example <examples/System.ShareableFromThis.cm>;
            function System.ShareableFromThis.T.constructor.P.System.ShareableFromThis.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.ShareableFromThis.T.constructor.P.System.ShareableFromThis.T.C.R.System.ShareableFromThis.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.ShareableFromThis.T.constructor.P.System.ShareableFromThis.T.C.R.System.ShareableFromThis.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.ShareableFromThis.T.operator.assign.P.System.ShareableFromThis.T.C.R.System.ShareableFromThis.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.ShareableFromThis.T.operator.assign.P.System.ShareableFromThis.T.C.R.System.ShareableFromThis.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.ShareableFromThis.T.constructor.P.System.ShareableFromThis.T.RR.System.ShareableFromThis.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.ShareableFromThis.T.constructor.P.System.ShareableFromThis.T.RR.System.ShareableFromThis.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.ShareableFromThis.T.operator.assign.P.System.ShareableFromThis.T.RR.System.ShareableFromThis.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.ShareableFromThis.T.operator.assign.P.System.ShareableFromThis.T.RR.System.ShareableFromThis.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.ShareableFromThis.T.GetSharedFromThis.C.P.System.ShareableFromThis.T
            {
                description
                {
                    Returns a shared pointer to the class object.
                }
                returns System.ShareableFromThis.T.GetSharedFromThis.C.P.System.ShareableFromThis.T.returnValue
                {
                    description
                    {
                        Returns a shared pointer to the class object.
                    }
                }
            }
            function System.ShareableFromThis.T.GetWeakThis.P.System.ShareableFromThis.T
            {
                description
                {
                    Returns the contained weak pointer to the class object.
                }
                returns System.ShareableFromThis.T.GetWeakThis.P.System.ShareableFromThis.T.returnValue
                {
                    description
                    {
                        Returns the contained weak pointer to the class object.
                    }
                }
            }
        }
        class System.SharedCount.T
        {
            description
            {
                A handle to a System.Counter.T that maintains the use count portion of the counter.
            }
            function System.SharedCount.T.constructor.P.System.SharedCount.T
            {
                description
                {
                    Constructor. Initializes an empty shared count.
                }
            }
            function System.SharedCount.T.constructor.P.System.SharedCount.T.C.R.System.SharedCount.T
            {
                description
                {
                    Constructor. Implementation detail.
                }
                parameter System.SharedCount.T.constructor.P.System.SharedCount.T.C.R.System.SharedCount.T.that
                {
                    description
                    {
                        Pointer to the counter.
                    }
                }
            }
            function System.SharedCount.T.constructor.P.System.SharedCount.T.C.R.System.SharedCount.T
            {
                description
                {
                    Constructor. Implementation detail.
                }
                parameter System.SharedCount.T.constructor.P.System.SharedCount.T.C.R.System.SharedCount.T.that
                {
                    description
                    {
                        Pointer to the counter.
                    }
                }
            }
            function System.SharedCount.T.operator.assign.P.System.SharedCount.T.C.R.System.SharedCount.T
            {
                description
                {
                    Copy assignment. Decrements the use count of the old counter and increments the use count of the copied counter.
                }
                parameter System.SharedCount.T.operator.assign.P.System.SharedCount.T.C.R.System.SharedCount.T.that
                {
                    description
                    {
                        A shared count to assign.
                    }
                }
            }
            function System.SharedCount.T.operator.assign.P.System.SharedCount.T.C.R.System.SharedCount.T
            {
                description
                {
                    Copy assignment. Decrements the use count of the old counter and increments the use count of the copied counter.
                }
                parameter System.SharedCount.T.operator.assign.P.System.SharedCount.T.C.R.System.SharedCount.T.that
                {
                    description
                    {
                        A shared count to assign.
                    }
                }
            }
            function System.SharedCount.T.GetCounter.C.P.System.SharedCount.T
            {
                description
                {
                    Returns the contained pointer to a counter.
                }
                returns System.SharedCount.T.GetCounter.C.P.System.SharedCount.T.returnValue
                {
                    description
                    {
                        Returns the contained pointer to a counter.
                    }
                }
            }
            function System.SharedCount.T.GetUseCount.C.P.System.SharedCount.T
            {
                description
                {
                    Returns the use count of the counter.
                }
                returns System.SharedCount.T.GetUseCount.C.P.System.SharedCount.T.returnValue
                {
                    description
                    {
                        Returns the use count of the counter.
                    }
                }
            }
            function System.SharedCount.T.IsUnique.C.P.System.SharedCount.T
            {
                description
                {
                    Returns true if there is exactly one System.SharedPtr.T to an object.
                }
                returns System.SharedCount.T.IsUnique.C.P.System.SharedCount.T.returnValue
                {
                    description
                    {
                        Returns true if there is exactly one System.SharedPtr.T to an object.
                    }
                }
            }
            function System.SharedCount.T.constructor.P.System.SharedCount.T.P.System.Counter.T
            {
                description
                {
                    Copy constructor. Increments the use count.
                }
                parameter System.SharedCount.T.constructor.P.System.SharedCount.T.P.System.Counter.T.counter_
                {
                    description
                    {
                        A shared count to copy.
                    }
                }
            }
            function System.SharedCount.T.constructor.P.System.SharedCount.T.P.T
            {
                description
                {
                    Constructor. Initializes the counter to contain a pointer to a counted object.
                }
                parameter System.SharedCount.T.constructor.P.System.SharedCount.T.P.T.ptr_
                {
                    description
                    {
                        A pointer to a counted object.
                    }
                }
            }
            function System.SharedCount.T.constructor.P.System.SharedCount.T.C.R.System.WeakCount.T
            {
                description
                {
                    Constructor. Gets the counter from a System.WeakCount.T.
                }
                parameter System.SharedCount.T.constructor.P.System.SharedCount.T.C.R.System.WeakCount.T.that
                {
                    description
                    {
                        A weak count.
                    }
                }
            }
            function System.SharedCount.T.Swap.P.System.SharedCount.T.R.System.SharedCount.T
            {
                description
                {
                    Exchanges the contents with another shared count.
                }
                parameter System.SharedCount.T.Swap.P.System.SharedCount.T.R.System.SharedCount.T.that
                {
                    description
                    {
                        A shared count to exchange contents with.
                    }
                }
            }
            function System.SharedCount.T.destructor.P.System.SharedCount.T
            {
                description
                {
                    Destructor. Decrements the use count.
                }
            }
        }
        class System.SharedPtr.T
        {
            description
            {
                A shared pointer to an object.
            }
            example <examples/System.SharedPtr.cm>;
            function System.SharedPtr.T.constructor.P.System.SharedPtr.T
            {
                description
                {
                    Constructor. Constructs a null shared pointer.
                }
            }
            function System.SharedPtr.T.constructor.P.System.SharedPtr.T.C.R.System.SharedPtr.T
            {
                description
                {
                    Copy constructor. Increments the use count.
                }
                parameter System.SharedPtr.T.constructor.P.System.SharedPtr.T.C.R.System.SharedPtr.T.that
                {
                    description
                    {
                        A shared pointer to copy.
                    }
                }
            }
            function System.SharedPtr.T.constructor.P.System.SharedPtr.T.C.R.System.SharedPtr.T
            {
                description
                {
                    Copy constructor. Increments the use count.
                }
                parameter System.SharedPtr.T.constructor.P.System.SharedPtr.T.C.R.System.SharedPtr.T.that
                {
                    description
                    {
                        A shared pointer to copy.
                    }
                }
            }
            function System.SharedPtr.T.operator.assign.P.System.SharedPtr.T.C.R.System.SharedPtr.T
            {
                description
                {
                    Copy assignment. Assigns another shared pointer.
                }
                parameter System.SharedPtr.T.operator.assign.P.System.SharedPtr.T.C.R.System.SharedPtr.T.that
                {
                    description
                    {
                        A shared pointer to assign.
                    }
                }
            }
            function System.SharedPtr.T.operator.assign.P.System.SharedPtr.T.C.R.System.SharedPtr.T
            {
                description
                {
                    Copy assignment. Assigns another shared pointer.
                }
                parameter System.SharedPtr.T.operator.assign.P.System.SharedPtr.T.C.R.System.SharedPtr.T.that
                {
                    description
                    {
                        A shared pointer to assign.
                    }
                }
            }
            function System.SharedPtr.T.GetCount.C.P.System.SharedPtr.T
            {
                description
                {
                    Returns the contained System.SharedCount.T.
                }
                returns System.SharedPtr.T.GetCount.C.P.System.SharedPtr.T.returnValue
                {
                    description
                    {
                        Returns the contained shared count.
                    }
                }
            }
            function System.SharedPtr.T.GetPtr.C.P.System.SharedPtr.T
            {
                description
                {
                    Returns the contained pointer to the counted object.
                }
                returns System.SharedPtr.T.GetPtr.C.P.System.SharedPtr.T.returnValue
                {
                    description
                    {
                        Returns the contained pointer to the counted object.
                    }
                }
            }
            function System.SharedPtr.T.GetUseCount.C.P.System.SharedPtr.T
            {
                description
                {
                    Returns the use count.
                }
                returns System.SharedPtr.T.GetUseCount.C.P.System.SharedPtr.T.returnValue
                {
                    description
                    {
                        Returns the use count.
                    }
                }
            }
            function System.SharedPtr.T.IsNull.C.P.System.SharedPtr.T
            {
                description
                {
                    Returns true if the contained pointer is null, false otherwise.
                }
                returns System.SharedPtr.T.IsNull.C.P.System.SharedPtr.T.returnValue
                {
                    description
                    {
                        Returns true if the contained pointer is null, false otherwise.
                    }
                }
            }
            function System.SharedPtr.T.IsUnique.C.P.System.SharedPtr.T
            {
                description
                {
                    Returns true if there is exactly one System.SharedPtr.T to an object.
                }
                returns System.SharedPtr.T.IsUnique.C.P.System.SharedPtr.T.returnValue
                {
                    description
                    {
                        Returns true if there is exactly one System.SharedPtr.T to an object.
                    }
                }
            }
            function System.SharedPtr.T.Reset.P.System.SharedPtr.T
            {
                description
                {
                    Resets the shared pointer to null.
                }
            }
            function System.SharedPtr.T.Reset.P.System.SharedPtr.T.P.T
            {
                description
                {
                    Resets the shared pointer to contain a pointer to another counted object.
                }
                parameter System.SharedPtr.T.Reset.P.System.SharedPtr.T.P.T.ptr_
                {
                    description
                    {
                        A pointer to another counted object.
                    }
                }
            }
            function System.SharedPtr.T.constructor.P.System.SharedPtr.T.P.T
            {
                description
                {
                    Constructor. Constructs a shared pointer to the given object.
                }
                parameter System.SharedPtr.T.constructor.P.System.SharedPtr.T.P.T.ptr_
                {
                    description
                    {
                        A pointer to an object.
                    }
                }
            }
            function System.SharedPtr.T.constructor.P.System.SharedPtr.T.P.T.C.R.System.SharedCount.T
            {
                description
                {
                    Constructor. Implementation detail to support System.PtrCast.U.T.System.SharedPtr.T.const.ref function.
                }
                parameter System.SharedPtr.T.constructor.P.System.SharedPtr.T.P.T.C.R.System.SharedCount.T.count_
                {
                    description
                    {
                        A shared count.
                    }
                }
                parameter System.SharedPtr.T.constructor.P.System.SharedPtr.T.P.T.C.R.System.SharedCount.T.ptr_
                {
                    description
                    {
                        A pointer to counted object.
                    }
                }
            }
            function System.SharedPtr.T.constructor.P.System.SharedPtr.T.C.R.System.WeakPtr.T
            {
                description
                {
                    Constructor. Constructs a shared pointer from a weak pointer.
                }
                parameter System.SharedPtr.T.constructor.P.System.SharedPtr.T.C.R.System.WeakPtr.T.that
                {
                    description
                    {
                        A weak pointer to an object.
                    }
                }
            }
            function System.SharedPtr.T.Swap.P.System.SharedPtr.T.R.System.SharedPtr.T
            {
                description
                {
                    Exchanges the contents with another shared pointer.
                }
                parameter System.SharedPtr.T.Swap.P.System.SharedPtr.T.R.System.SharedPtr.T.that
                {
                    description
                    {
                        A shared pointer to exchange contents with.
                    }
                }
            }
            function System.SharedPtr.T.operator.times.C.P.System.SharedPtr.T
            {
                description
                {
                    Returns a reference to the counted object.
                }
                returns System.SharedPtr.T.operator.times.C.P.System.SharedPtr.T.returnValue
                {
                    description
                    {
                        Returns a reference to the counted object.
                    }
                }
            }
            function System.SharedPtr.T.operator.pointer.C.P.System.SharedPtr.T
            {
                description
                {
                    Returns the contained pointer to the counted object.
                }
                returns System.SharedPtr.T.operator.pointer.C.P.System.SharedPtr.T.returnValue
                {
                    description
                    {
                        Returns the contained pointer to the counted object.
                    }
                }
            }
            function System.SharedPtr.T.destructor.P.System.SharedPtr.T
            {
                description
                {
                    Destructor. Decrements the use count.
                }
                remarks
                {
                    If the use count has gone to zero, destroyes the counted object.
                }
            }
            modelof System.Concepts.TotallyOrdered.T;
        }
        class System.String
        {
            description
            {
                A string of ASCII characters.
            }
            typedef System.String.ConstIterator
            {
                description
                {
                    A constant iterator type.
                }
            }
            typedef System.String.Iterator
            {
                description
                {
                    An iterator type.
                }
            }
            function System.String.constructor.P.System.String
            {
                description
                {
                    Constructor. Constructs an empty string.
                }
            }
            function System.String.constructor.P.System.String.C.R.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.String.constructor.P.System.String.C.R.System.String.that
                {
                    description
                    {
                        A string to copy.
                    }
                }
            }
            function System.String.operator.assign.P.System.String.C.R.System.String
            {
                description
                {
                    Copy assignment.
                }
                example <examples/System.String.@operator.assign.System.String.const.ref.cm>;
                parameter System.String.operator.assign.P.System.String.C.R.System.String.that
                {
                    description
                    {
                        A string to assign.
                    }
                }
            }
            function System.String.constructor.P.System.String.RR.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.String.constructor.P.System.String.RR.System.String.that
                {
                    description
                    {
                        A string to move from.
                    }
                }
            }
            function System.String.operator.assign.P.System.String.RR.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.String.operator.assign.P.System.String.RR.System.String.that
                {
                    description
                    {
                        A string to move from.
                    }
                }
            }
            function System.String.Append.P.System.String.char
            {
                description
                {
                    Appends the given chacter to the end of this string.
                }
                parameter System.String.Append.P.System.String.char.c
                {
                    description
                    {
                        A character to append.
                    }
                }
                returns System.String.Append.P.System.String.char.returnValue
                {
                    description
                    {
                        Returns a reference to the this string.
                    }
                }
            }
            function System.String.Append.P.System.String.C.R.System.String
            {
                description
                {
                    Appends the specified C-style string to the end of this string.
                }
                parameter System.String.Append.P.System.String.C.R.System.String.that
                {
                    description
                    {
                        A C-style string to append.
                    }
                }
                returns System.String.Append.P.System.String.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns a reference to the this string.
                    }
                }
            }
            function System.String.Append.P.System.String.C.P.char
            {
                description
                {
                    Appends the specified string to the end of this string.
                }
                example <examples/System.String.Append.System.String.const.ref.cm>;
                parameter System.String.Append.P.System.String.C.P.char.that
                {
                    description
                    {
                        A string to append.
                    }
                }
                returns System.String.Append.P.System.String.C.P.char.returnValue
                {
                    description
                    {
                        Returns a reference to the this string.
                    }
                }
            }
            function System.String.Append.P.System.String.C.P.char.int
            {
                description
                {
                    Appends the given number of characters from a C-style string to the end of this string.
                }
                parameter System.String.Append.P.System.String.C.P.char.int.count
                {
                    description
                    {
                        The maximum number of characters to append.
                    }
                }
                parameter System.String.Append.P.System.String.C.P.char.int.that
                {
                    description
                    {
                        A C-style string.
                    }
                }
                returns System.String.Append.P.System.String.C.P.char.int.returnValue
                {
                    description
                    {
                        Returns a reference to the this string.
                    }
                }
            }
            function System.String.Begin.P.System.String
            {
                description
                {
                    Returns an iterator to the beginning of the string.
                }
                returns System.String.Begin.P.System.String.returnValue
                {
                    description
                    {
                        Returns an iterator to the beginning of the string.
                    }
                }
            }
            function System.String.Begin.C.P.System.String
            {
                description
                {
                    Returns a constant iterator to the beginning of the string.
                }
                returns System.String.Begin.C.P.System.String.returnValue
                {
                    description
                    {
                        Returns a constant iterator to the beginning of the string.
                    }
                }
            }
            function System.String.CBegin.C.P.System.String
            {
                description
                {
                    Returns a constant iterator to the beginning of the string.
                }
                returns System.String.CBegin.C.P.System.String.returnValue
                {
                    description
                    {
                        Returns a constant iterator to the beginning of the string.
                    }
                }
            }
            function System.String.CEnd.C.P.System.String
            {
                description
                {
                    Returns a constant iterator one past the end of the string.
                }
                returns System.String.CEnd.C.P.System.String.returnValue
                {
                    description
                    {
                        Returns a constant iterator one past the end of the string.
                    }
                }
            }
            function System.String.Capacity.C.P.System.String
            {
                description
                {
                    Returns the number of characters that the string can hold without allocating more memory for it.
                }
                returns System.String.Capacity.C.P.System.String.returnValue
                {
                    description
                    {
                        Returns the number of characters that the string can hold without allocating more memory for it.
                    }
                }
            }
            function System.String.Chars.C.P.System.String
            {
                description
                {
                    Returns the string as a C-syle string.
                }
                returns System.String.Chars.C.P.System.String.returnValue
                {
                    description
                    {
                        Returns the string as a C-syle string.
                    }
                }
            }
            function System.String.Clear.P.System.String
            {
                description
                {
                    Makes the string empty.
                }
            }
            function System.String.End.P.System.String
            {
                description
                {
                    Returns an iterator to one past the end of the string.
                }
                returns System.String.End.P.System.String.returnValue
                {
                    description
                    {
                        Returns an iterator to one past the end of the string.
                    }
                }
            }
            function System.String.End.C.P.System.String
            {
                description
                {
                    Returns a constant iterator to one past the end of the string.
                }
                returns System.String.End.C.P.System.String.returnValue
                {
                    description
                    {
                        Returns a constant iterator to one past the end of the string.
                    }
                }
            }
            function System.String.EndsWith.C.P.System.String.C.R.System.String
            {
                description
                {
                    Returns true, if the string ends with the specified substring, false otherwise.
                }
                remarks
                {
                    The comparison is case sensitive.
                }
                example <examples/System.String.EndsWith.System.String.const.ref.const.cm>;
                parameter System.String.EndsWith.C.P.System.String.C.R.System.String.suffix
                {
                    description
                    {
                        A suffix to test.
                    }
                }
                returns System.String.EndsWith.C.P.System.String.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns true, if the string ends with the specified substring, false otherwise.
                    }
                }
            }
            function System.String.Find.C.P.System.String.char
            {
                description
                {
                    Returns the index of the first occurrence of the given character within this string,
                    or -1 if the specified character does not occur in this string.
                }
                example <examples/System.String.Find.char.const.cm>;
                parameter System.String.Find.C.P.System.String.char.x
                {
                    description
                    {
                        A character to search.
                    }
                }
                returns System.String.Find.C.P.System.String.char.returnValue
                {
                    description
                    {
                        Returns the index of the first occurrence of the given character within this string,
                        or -1 if the specified character does not occur in this string.
                    }
                }
            }
            function System.String.Find.C.P.System.String.char.int
            {
                description
                {
                    Returns the index of the first occurrence of the given character within this string,
                    or -1 if the specified character does not occur in this string.
                    The search starts with the specified index.
                }
                example <examples/System.String.Find.char.int.const.cm>;
                parameter System.String.Find.C.P.System.String.char.int.start
                {
                    description
                    {
                        A search start index.
                    }
                }
                parameter System.String.Find.C.P.System.String.char.int.x
                {
                    description
                    {
                        A character to search.
                    }
                }
                returns System.String.Find.C.P.System.String.char.int.returnValue
                {
                    description
                    {
                        Returns the index of the first occurrence of the given character within this string,
                        or -1 if the specified character does not occur in this string.
                        The search starts with the specified index.
                    }
                }
            }
            function System.String.Find.C.P.System.String.C.R.System.String
            {
                description
                {
                    Returns the starting index of the first occurrence of the specified substring within this string,
                    or -1 is the specified string does not occur within this string.
                }
                example <examples/System.String.Find.System.String.const.ref.const.cm>;
                parameter System.String.Find.C.P.System.String.C.R.System.String.s
                {
                    description
                    {
                        A substring to search.
                    }
                }
                returns System.String.Find.C.P.System.String.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns the starting index of the first occurrence of the specified substring within this string,
                        or -1 is the specified string does not occur within this string.
                    }
                }
            }
            function System.String.Find.C.P.System.String.C.R.System.String.int
            {
                description
                {
                    Returns the starting index of the first occurrence of the specified substring within this string,
                    or -1 is the specified string does not occur within this string.
                    The search starts with the specified index.
                }
                example <examples/System.String.Find.System.String.const.ref.int.const.cm>;
                parameter System.String.Find.C.P.System.String.C.R.System.String.int.s
                {
                    description
                    {
                        A substring to search.
                    }
                }
                parameter System.String.Find.C.P.System.String.C.R.System.String.int.start
                {
                    description
                    {
                        A search start index.
                    }
                }
                returns System.String.Find.C.P.System.String.C.R.System.String.int.returnValue
                {
                    description
                    {
                        Returns the starting index of the first occurrence of the specified substring within this string,
                        or -1 is the specified string does not occur within this string.
                        The search starts with the specified index.
                    }
                }
            }
            function System.String.IsEmpty.C.P.System.String
            {
                description
                {
                    Returns true if the string is empty, false otherwise.
                }
                returns System.String.IsEmpty.C.P.System.String.returnValue
                {
                    description
                    {
                        Returns true if the string is empty, false otherwise.
                    }
                }
            }
            function System.String.Length.C.P.System.String
            {
                description
                {
                    Returns the length of the string.
                }
                returns System.String.Length.C.P.System.String.returnValue
                {
                    description
                    {
                        Returns the length of the string.
                    }
                }
            }
            function System.String.RFind.C.P.System.String.char
            {
                description
                {
                    Returns the index of the last occurrence of the given character within this string,
                    or -1 if the specified character does not occur in this string.
                }
                example <examples/System.String.RFind.char.const.cm>;
                parameter System.String.RFind.C.P.System.String.char.x
                {
                    description
                    {
                        A character to search.
                    }
                }
                returns System.String.RFind.C.P.System.String.char.returnValue
                {
                    description
                    {
                        Returns the index of the last occurrence of the given character within this string,
                        or -1 if the specified character does not occur in this string.
                    }
                }
            }
            function System.String.RFind.C.P.System.String.char.int
            {
                description
                {
                    Returns the index of the last occurrence of the given character within this string,
                    or -1 if the specified character does not occur in this string.
                    The search starts with the specified index.
                }
                example <examples/System.String.RFind.char.int.const.cm>;
                parameter System.String.RFind.C.P.System.String.char.int.start
                {
                    description
                    {
                        A search start index.
                    }
                }
                parameter System.String.RFind.C.P.System.String.char.int.x
                {
                    description
                    {
                        A character to search.
                    }
                }
                returns System.String.RFind.C.P.System.String.char.int.returnValue
                {
                    description
                    {
                        Returns the index of the last occurrence of the given character within this string,
                        or -1 if the specified character does not occur in this string.
                        The search starts with the specified index.
                    }
                }
            }
            function System.String.RFind.C.P.System.String.C.R.System.String
            {
                description
                {
                    Returns the starting index of the last occurrence of the specified substring within this string,
                    or -1 is the specified string does not occur within this string.
                }
                example <examples/System.String.RFind.System.String.const.ref.const.cm>;
                parameter System.String.RFind.C.P.System.String.C.R.System.String.s
                {
                    description
                    {
                        A substring to search.
                    }
                }
                returns System.String.RFind.C.P.System.String.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns the starting index of the last occurrence of the specified substring within this string,
                        or -1 is the specified string does not occur within this string.
                    }
                }
            }
            function System.String.RFind.C.P.System.String.C.R.System.String.int
            {
                description
                {
                    Returns the starting index of the last occurrence of the specified substring within this string,
                    or -1 is the specified string does not occur within this string.
                    The search starts with the specified index.
                }
                example <examples/System.String.RFind.System.String.const.ref.int.const.cm>;
                parameter System.String.RFind.C.P.System.String.C.R.System.String.int.s
                {
                    description
                    {
                        A substring to search.
                    }
                }
                parameter System.String.RFind.C.P.System.String.C.R.System.String.int.start
                {
                    description
                    {
                        A search start index.
                    }
                }
                returns System.String.RFind.C.P.System.String.C.R.System.String.int.returnValue
                {
                    description
                    {
                        Returns the starting index of the last occurrence of the specified substring within this string,
                        or -1 is the specified string does not occur within this string.
                        The search starts with the specified index.
                    }
                }
            }
            function System.String.Replace.P.System.String.char.char
            {
                description
                {
                    Replaces every occurrence of the given character with another character.
                }
                example <examples/System.String.Replace.char.char.cm>;
                parameter System.String.Replace.P.System.String.char.char.newChar
                {
                    description
                    {
                        The replacement character.
                    }
                }
                parameter System.String.Replace.P.System.String.char.char.oldChar
                {
                    description
                    {
                        A character to replace.
                    }
                }
            }
            function System.String.Reserve.P.System.String.int
            {
                description
                {
                    Reserves room for a string with the given number of characters.
                }
                parameter System.String.Reserve.P.System.String.int.minLen
                {
                    description
                    {
                        The minimum number of characters that the string can hold without a memory allocation.
                    }
                }
            }
            function System.String.Split.P.System.String.char
            {
                description
                {
                    Returns a list of substrings separated by the given character.
                }
                example <examples/System.String.Split.char.cm>;
                parameter System.String.Split.P.System.String.char.c
                {
                    description
                    {
                        A separator character.
                    }
                }
                returns System.String.Split.P.System.String.char.returnValue
                {
                    description
                    {
                        Returns a list of substrings separated by the given character.
                    }
                }
            }
            function System.String.StartsWith.C.P.System.String.C.R.System.String
            {
                description
                {
                    Returns true if the string starts with the given substring, false otherwise.
                }
                parameter System.String.StartsWith.C.P.System.String.C.R.System.String.prefix
                {
                    description
                    {
                        A prefix to test.
                    }
                }
                returns System.String.StartsWith.C.P.System.String.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns true if the string starts with the given substring, false otherwise.
                    }
                }
            }
            function System.String.constructor.P.System.String.char
            {
                description
                {
                    Constructor. Constructs a string that has the given character.
                }
                parameter System.String.constructor.P.System.String.char.c
                {
                    description
                    {
                        A character.
                    }
                }
            }
            function System.String.constructor.P.System.String.char.int
            {
                description
                {
                    Constructor. Constructs a string that has given number of the specified character.
                }
                example <examples/System.String.@constructor.char.int.cm>;
                parameter System.String.constructor.P.System.String.char.int.c
                {
                    description
                    {
                        A character.
                    }
                }
                parameter System.String.constructor.P.System.String.char.int.n
                {
                    description
                    {
                        Number of characters.
                    }
                }
            }
            function System.String.constructor.P.System.String.C.P.char
            {
                description
                {
                    Constructor. Constructs a string from a C-style string.
                }
                parameter System.String.constructor.P.System.String.C.P.char.chars_
                {
                    description
                    {
                        A C-style string.
                    }
                }
            }
            function System.String.constructor.P.System.String.C.P.char.int
            {
                description
                {
                    Constructor. Constructs a string from given number of characters of a C-style string.
                }
                example <examples/System.String.@constructor.char.const.ptr.int.cm>;
                parameter System.String.constructor.P.System.String.C.P.char.int.chars_
                {
                    description
                    {
                        A C-style string.
                    }
                }
                parameter System.String.constructor.P.System.String.C.P.char.int.length_
                {
                    description
                    {
                        Maximum number of characters to copy.
                    }
                }
            }
            function System.String.Substring.C.P.System.String.int
            {
                description
                {
                    Returns a substring starting from the given index.
                }
                example <examples/System.String.Substring.int.const.cm>;
                parameter System.String.Substring.C.P.System.String.int.start
                {
                    description
                    {
                        A starting index of the substring.
                    }
                }
                returns System.String.Substring.C.P.System.String.int.returnValue
                {
                    description
                    {
                        Returns a substring starting from the given index.
                    }
                }
            }
            function System.String.Substring.C.P.System.String.int.int
            {
                description
                {
                    Returns a substring starting from the given index whose length is at most given number of characters.
                }
                example <examples/System.String.Substring.int.int.const.cm>;
                parameter System.String.Substring.C.P.System.String.int.int.length
                {
                    description
                    {
                        The maximum number of characters in the substring.
                    }
                }
                parameter System.String.Substring.C.P.System.String.int.int.start
                {
                    description
                    {
                        A starting index of the substring.
                    }
                }
                returns System.String.Substring.C.P.System.String.int.int.returnValue
                {
                    description
                    {
                        Returns a substring starting from the given index whose length is at most given number of characters.
                    }
                }
            }
            function System.String.operator.less.C.P.System.String.C.R.System.String
            {
                description
                {
                    Compares a string for less than relationship with another string.
                }
                remarks
                {
                    The comparison is case sensitive and done with the ASCII code values of the characters.
                }
                parameter System.String.operator.less.C.P.System.String.C.R.System.String.that
                {
                    description
                    {
                        A string to compare with.
                    }
                }
                returns System.String.operator.less.C.P.System.String.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns true if this string comes lexicographically before the specified string,
                        false otherwise.
                    }
                }
            }
            function System.String.operator.equal.C.P.System.String.C.R.System.String
            {
                description
                {
                    Compares a string for equality with another string.
                }
                remarks
                {
                    The comparison is case sensitive.
                }
                parameter System.String.operator.equal.C.P.System.String.C.R.System.String.that
                {
                    description
                    {
                        A string to compare with.
                    }
                }
                returns System.String.operator.equal.C.P.System.String.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns true if this string has the same number of characters than
                        the given string, and the characters are pairwise equal, false otherwise.
                    }
                }
            }
            function System.String.operator.index.P.System.String.int
            {
                description
                {
                    Returns a reference to the character with the specified index.
                }
                example <examples/System.String.@operator.index.int.cm>;
                parameter System.String.operator.index.P.System.String.int.index
                {
                    description
                    {
                        An index.
                    }
                }
                returns System.String.operator.index.P.System.String.int.returnValue
                {
                    description
                    {
                        Returns a reference to the character with the specified index.
                    }
                }
            }
            function System.String.operator.index.C.P.System.String.int
            {
                description
                {
                    Returns a character with the specified index.
                }
                parameter System.String.operator.index.C.P.System.String.int.index
                {
                    description
                    {
                        An index.
                    }
                }
                returns System.String.operator.index.C.P.System.String.int.returnValue
                {
                    description
                    {
                        Returns a character with the specified index.
                    }
                }
            }
            function System.String.destructor.P.System.String
            {
                description
                {
                    Destructor. Releases the memory occupied by the string.
                }
            }
        }
        class System.TimeError
        {
            description
            {
                An exception thrown when a time function fails.
            }
            function System.TimeError.constructor.P.System.TimeError
            {
                description
                {
                    Default constructor.
                }
            }
            function System.TimeError.constructor.P.System.TimeError.C.R.System.TimeError
            {
                description
                {
                    Copy constructor.
                }
                parameter System.TimeError.constructor.P.System.TimeError.C.R.System.TimeError.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.TimeError.operator.assign.P.System.TimeError.C.R.System.TimeError
            {
                description
                {
                    Copy assignment.
                }
                parameter System.TimeError.operator.assign.P.System.TimeError.C.R.System.TimeError.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.TimeError.constructor.P.System.TimeError.RR.System.TimeError
            {
                description
                {
                    Move constructor.
                }
                parameter System.TimeError.constructor.P.System.TimeError.RR.System.TimeError.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.TimeError.operator.assign.P.System.TimeError.RR.System.TimeError
            {
                description
                {
                    Move assignment.
                }
                parameter System.TimeError.operator.assign.P.System.TimeError.RR.System.TimeError.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.TimeError.constructor.P.System.TimeError.C.R.System.String.C.R.System.String
            {
                description
                {
                    Constructor. Initializes the time error with specified operation description and failure reason.
                }
                parameter System.TimeError.constructor.P.System.TimeError.C.R.System.String.C.R.System.String.operation
                {
                    description
                    {
                        Description of operation.
                    }
                }
                parameter System.TimeError.constructor.P.System.TimeError.C.R.System.String.C.R.System.String.reason
                {
                    description
                    {
                        Failure reason.
                    }
                }
            }
            function System.TimeError.destructor.P.System.TimeError
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.TimePoint
        {
            description
            {
                Represents a point in time as specified nanoseconds elapsed since epoch.
            }
            remarks
            {
                Epoch is midnight 1.1.1970.
            }
            function System.TimePoint.constructor.P.System.TimePoint
            {
                description
                {
                    Constructor. Initializes the time point to zero nanoseconds elapsed since epoch.
                }
            }
            function System.TimePoint.constructor.P.System.TimePoint.C.R.System.TimePoint
            {
                description
                {
                    Copy constructor.
                }
                parameter System.TimePoint.constructor.P.System.TimePoint.C.R.System.TimePoint.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.TimePoint.operator.assign.P.System.TimePoint.C.R.System.TimePoint
            {
                description
                {
                    Copy assignment.
                }
                parameter System.TimePoint.operator.assign.P.System.TimePoint.C.R.System.TimePoint.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.TimePoint.constructor.P.System.TimePoint.RR.System.TimePoint
            {
                description
                {
                    Move constructor.
                }
                parameter System.TimePoint.constructor.P.System.TimePoint.RR.System.TimePoint.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.TimePoint.operator.assign.P.System.TimePoint.RR.System.TimePoint
            {
                description
                {
                    Move assignment.
                }
                parameter System.TimePoint.operator.assign.P.System.TimePoint.RR.System.TimePoint.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.TimePoint.Rep.C.P.System.TimePoint
            {
                description
                {
                    Returns the number of nanoseconds elapsed since epoch.
                }
                returns System.TimePoint.Rep.C.P.System.TimePoint.returnValue
                {
                    description
                    {
                        Returns the number of nanoseconds elapsed since epoch.
                    }
                }
            }
            function System.TimePoint.constructor.P.System.TimePoint.long
            {
                description
                {
                    Constructor. Initializes the time point with the given number of nanoseconds elapsed since epoch.
                }
                parameter System.TimePoint.constructor.P.System.TimePoint.long.nanosecs_
                {
                    description
                    {
                        Number of nanoseconds.
                    }
                }
            }
        }
        class System.TracedFun
        {
            description
            {
                Function tracer.
            }
            function System.TracedFun.constructor.P.System.TracedFun
            {
                description
                {
                    Default constructor.
                }
            }
            function System.TracedFun.constructor.P.System.TracedFun.C.P.char.C.P.char.int
            {
                description
                {
                    Writes "$>$" followed by the given function name, file and line to stardard error stream.
                }
                parameter System.TracedFun.constructor.P.System.TracedFun.C.P.char.C.P.char.int.file_
                {
                    description
                    {
                        Source file name.
                    }
                }
                parameter System.TracedFun.constructor.P.System.TracedFun.C.P.char.C.P.char.int.fun_
                {
                    description
                    {
                        A name of a function.
                    }
                }
                parameter System.TracedFun.constructor.P.System.TracedFun.C.P.char.C.P.char.int.line_
                {
                    description
                    {
                        Source line number.
                    }
                }
            }
            function System.TracedFun.destructor.P.System.TracedFun
            {
                description
                {
                    Writes "$<$" followed by the function name, file and line to stardard error stream.
                }
            }
        }
        class System.Tracer
        {
            description
            {
                A utility class for tracing entry and exit of some operation.
            }
            function System.Tracer.constructor.P.System.Tracer
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Tracer.constructor.P.System.Tracer.C.R.System.String
            {
                description
                {
                    Constructor. Writes the specified string to standard error stream.
                }
                parameter System.Tracer.constructor.P.System.Tracer.C.R.System.String.s_
                {
                    description
                    {
                        String to write.
                    }
                }
            }
            function System.Tracer.destructor.P.System.Tracer
            {
                description
                {
                    Destructor. Writes "$\sim$" and a string specified in constructor to standard error stream.
                }
            }
        }
        class System.UnaryFun.Argument.Result
        {
            description
            {
                A base class for unary function objects.
            }
            remarks
            {
                A derived unary function inherits the type definitions of
                this base class and provides an implementation for the "\emph{operator()(ArgumentType)}"
                function.
            }
            typedef System.UnaryFun.Argument.Result.ArgumentType
            {
                description
                {
                    The type of the argument of the unary function.
                }
            }
            typedef System.UnaryFun.Argument.Result.ResultType
            {
                description
                {
                    The type of the result of the unary function.
                }
            }
            function System.UnaryFun.Argument.Result.constructor.P.System.UnaryFun.Argument.Result
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.Argument.Result.constructor.P.System.UnaryFun.Argument.Result.C.R.System.UnaryFun.Argument.Result
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.Argument.Result.constructor.P.System.UnaryFun.Argument.Result.C.R.System.UnaryFun.Argument.Result.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.Argument.Result.operator.assign.P.System.UnaryFun.Argument.Result.C.R.System.UnaryFun.Argument.Result
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.Argument.Result.operator.assign.P.System.UnaryFun.Argument.Result.C.R.System.UnaryFun.Argument.Result.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.Argument.Result.constructor.P.System.UnaryFun.Argument.Result.RR.System.UnaryFun.Argument.Result
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.Argument.Result.constructor.P.System.UnaryFun.Argument.Result.RR.System.UnaryFun.Argument.Result.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.Argument.Result.operator.assign.P.System.UnaryFun.Argument.Result.RR.System.UnaryFun.Argument.Result
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.Argument.Result.operator.assign.P.System.UnaryFun.Argument.Result.RR.System.UnaryFun.Argument.Result.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryPred.Argument
        {
            description
            {
                A base class for unary predicates.
            }
            remarks
            {
                A unary predicate is an unary function whose application operator returns a truth value.
            }
            function System.UnaryPred.Argument.constructor.P.System.UnaryPred.Argument
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryPred.Argument.constructor.P.System.UnaryPred.Argument.C.R.System.UnaryPred.Argument
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryPred.Argument.constructor.P.System.UnaryPred.Argument.C.R.System.UnaryPred.Argument.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryPred.Argument.operator.assign.P.System.UnaryPred.Argument.C.R.System.UnaryPred.Argument
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryPred.Argument.operator.assign.P.System.UnaryPred.Argument.C.R.System.UnaryPred.Argument.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryPred.Argument.constructor.P.System.UnaryPred.Argument.RR.System.UnaryPred.Argument
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryPred.Argument.constructor.P.System.UnaryPred.Argument.RR.System.UnaryPred.Argument.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryPred.Argument.operator.assign.P.System.UnaryPred.Argument.RR.System.UnaryPred.Argument
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryPred.Argument.operator.assign.P.System.UnaryPred.Argument.RR.System.UnaryPred.Argument.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            modelof System.Concepts.UnaryPredicate.T;
        }
        class System.UniquePtr.T
        {
            description
            {
                A unique pointer to an object.
            }
            remarks
            {
                The unique pointer destroys the object it owns in its destructor.
                The copy constructor and copy assignment operator are suppressed,
                but unique pointer has move constructor and move assignment operator,
                so it can be moved to containers.
            }
            example <examples/System.UniquePtr.cm>;
            function System.UniquePtr.T.constructor.P.System.UniquePtr.T
            {
                description
                {
                    Constructor. Constructs a null unique pointer.
                }
            }
            function System.UniquePtr.T.constructor.P.System.UniquePtr.T.RR.System.UniquePtr.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.T.constructor.P.System.UniquePtr.T.RR.System.UniquePtr.T.that
                {
                    description
                    {
                        A unique pointer to move from.
                    }
                }
            }
            function System.UniquePtr.T.operator.assign.P.System.UniquePtr.T.RR.System.UniquePtr.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.T.operator.assign.P.System.UniquePtr.T.RR.System.UniquePtr.T.that
                {
                    description
                    {
                        A unique pointer to move from.
                    }
                }
            }
            function System.UniquePtr.T.GetPtr.C.P.System.UniquePtr.T
            {
                description
                {
                    Returns the contained pointer to the owned object.
                }
                returns System.UniquePtr.T.GetPtr.C.P.System.UniquePtr.T.returnValue
                {
                    description
                    {
                        Returns the contained pointer to the owned object.
                    }
                }
            }
            function System.UniquePtr.T.IsNull.C.P.System.UniquePtr.T
            {
                description
                {
                    Returns true if the contained pointer is null, false otherwise.
                }
                returns System.UniquePtr.T.IsNull.C.P.System.UniquePtr.T.returnValue
                {
                    description
                    {
                        Returns true if the contained pointer is null, false otherwise.
                    }
                }
            }
            function System.UniquePtr.T.Release.P.System.UniquePtr.T
            {
                description
                {
                    Releases the ownership of the owned object
                    and sets the unique pointer to null.
                }
                returns System.UniquePtr.T.Release.P.System.UniquePtr.T.returnValue
                {
                    description
                    {
                        Returns the contained pointer.
                    }
                }
            }
            function System.UniquePtr.T.Reset.P.System.UniquePtr.T
            {
                description
                {
                    Resets the unique ptr to null.
                }
                remarks
                {
                    Destroys the owned object.
                }
            }
            function System.UniquePtr.T.Reset.P.System.UniquePtr.T.P.T
            {
                description
                {
                    Resets the contained pointer to point to a new object.
                }
                remarks
                {
                    If the unique pointer owns an object before the operation,
                    destroys the owned object before the operation.
                    Then acquires the ownership of the new object.
                }
                parameter System.UniquePtr.T.Reset.P.System.UniquePtr.T.P.T.ptr_
                {
                    description
                    {
                        A pointer to an object.
                    }
                }
            }
            function System.UniquePtr.T.Swap.P.System.UniquePtr.T.R.System.UniquePtr.T
            {
                description
                {
                    Exchanges the contents of the unique pointer with another unique pointer.
                }
                parameter System.UniquePtr.T.Swap.P.System.UniquePtr.T.R.System.UniquePtr.T.that
                {
                    description
                    {
                        A unique pointer to exchange contents with.
                    }
                }
            }
            function System.UniquePtr.T.constructor.P.System.UniquePtr.T.P.T
            {
                description
                {
                    Constructor. Constructs a unique pointer to the given object.
                }
                parameter System.UniquePtr.T.constructor.P.System.UniquePtr.T.P.T.ptr_
                {
                    description
                    {
                        A pointer to an object.
                    }
                }
            }
            function System.UniquePtr.T.operator.times.C.P.System.UniquePtr.T
            {
                description
                {
                    Returns a reference to the pointed object.
                }
                returns System.UniquePtr.T.operator.times.C.P.System.UniquePtr.T.returnValue
                {
                    description
                    {
                        Returns a reference to the pointed object.
                    }
                }
            }
            function System.UniquePtr.T.operator.pointer.C.P.System.UniquePtr.T
            {
                description
                {
                    Returns the contained pointer to the pointed object.
                }
                returns System.UniquePtr.T.operator.pointer.C.P.System.UniquePtr.T.returnValue
                {
                    description
                    {
                        Returns the contained pointer to the pointed object.
                    }
                }
            }
            function System.UniquePtr.T.operator.assign.P.System.UniquePtr.T.P.T
            {
                description
                {
                    Assigns a new object to the unique pointer.
                }
                remarks
                {
                    If the unique pointer is not null before the assignment, 
                    destroys the old object before the assignment.
                    Then acquires the ownership of the new object.
                }
                parameter System.UniquePtr.T.operator.assign.P.System.UniquePtr.T.P.T.ptr_
                {
                    description
                    {
                        A pointer to an object.
                    }
                }
            }
            function System.UniquePtr.T.destructor.P.System.UniquePtr.T
            {
                description
                {
                    Destructor. Destroys the owned object.
                }
            }
            modelof System.Concepts.DefaultConstructible.T;
            modelof System.Concepts.Movable.T;
        }
        class System.WeakCount.T
        {
            description
            {
                A handle to a System.Counter.T that maintains the weak count portion of the counter.
            }
            function System.WeakCount.T.constructor.P.System.WeakCount.T
            {
                description
                {
                    Constructor. Initializes an empty weak count.
                }
            }
            function System.WeakCount.T.constructor.P.System.WeakCount.T.C.R.System.WeakCount.T
            {
                description
                {
                    Copy constructor. Increments weak count.
                }
                parameter System.WeakCount.T.constructor.P.System.WeakCount.T.C.R.System.WeakCount.T.that
                {
                    description
                    {
                        A weak count to copy.
                    }
                }
            }
            function System.WeakCount.T.constructor.P.System.WeakCount.T.C.R.System.WeakCount.T
            {
                description
                {
                    Copy constructor. Increments weak count.
                }
                parameter System.WeakCount.T.constructor.P.System.WeakCount.T.C.R.System.WeakCount.T.that
                {
                    description
                    {
                        A weak count to copy.
                    }
                }
            }
            function System.WeakCount.T.operator.assign.P.System.WeakCount.T.C.R.System.WeakCount.T
            {
                description
                {
                    Copy assignment. Decrements the weak count of the old counter and increments the weak count of the copied counter.
                }
                parameter System.WeakCount.T.operator.assign.P.System.WeakCount.T.C.R.System.WeakCount.T.that
                {
                    description
                    {
                        A weak count to assign.
                    }
                }
            }
            function System.WeakCount.T.operator.assign.P.System.WeakCount.T.C.R.System.WeakCount.T
            {
                description
                {
                    Copy assignment. Decrements the weak count of the old counter and increments the weak count of the copied counter.
                }
                parameter System.WeakCount.T.operator.assign.P.System.WeakCount.T.C.R.System.WeakCount.T.that
                {
                    description
                    {
                        A weak count to assign.
                    }
                }
            }
            function System.WeakCount.T.GetCounter.C.P.System.WeakCount.T
            {
                description
                {
                    Returns the contained pointer to a counter.
                }
                returns System.WeakCount.T.GetCounter.C.P.System.WeakCount.T.returnValue
                {
                    description
                    {
                        Returns the contained pointer to a counter.
                    }
                }
            }
            function System.WeakCount.T.GetUseCount.C.P.System.WeakCount.T
            {
                description
                {
                    Returns the use count.
                }
                returns System.WeakCount.T.GetUseCount.C.P.System.WeakCount.T.returnValue
                {
                    description
                    {
                        Returns the use count.
                    }
                }
            }
            function System.WeakCount.T.Swap.P.System.WeakCount.T.R.System.WeakCount.T
            {
                description
                {
                    Exchanges the contents of the weak count with another weak count.
                }
                parameter System.WeakCount.T.Swap.P.System.WeakCount.T.R.System.WeakCount.T.that
                {
                    description
                    {
                        A weak count to exchange contents with.
                    }
                }
            }
            function System.WeakCount.T.constructor.P.System.WeakCount.T.C.R.System.SharedCount.T
            {
                description
                {
                    Constructor. Constructs a weak count from a shared count.
                }
                parameter System.WeakCount.T.constructor.P.System.WeakCount.T.C.R.System.SharedCount.T.that
                {
                    description
                    {
                        A shared count.
                    }
                }
            }
            function System.WeakCount.T.operator.assign.P.System.WeakCount.T.C.R.System.SharedCount.T
            {
                description
                {
                    Assignment. Decrements the weak count of the old counter and increments the weak count of the copied counter.
                }
                parameter System.WeakCount.T.operator.assign.P.System.WeakCount.T.C.R.System.SharedCount.T.that
                {
                    description
                    {
                        A shared count to assign.
                    }
                }
            }
            function System.WeakCount.T.destructor.P.System.WeakCount.T
            {
                description
                {
                    Destructor. Decrements the weak count.
                }
            }
        }
        class System.WeakPtr.T
        {
            description
            {
                Used to break cycles in shared ownership.
            }
            remarks
            {
                If objects contain shared pointers to each other thus forming a cycle,
                the use count will never go to zero, and the destructors of the 
                objects will not be called.
                Replacing one of the shared pointers with a weak pointer 
                breaks the cycle and the objects will be released.
            }
            example <examples/System.WeakPtr.cm>;
            function System.WeakPtr.T.constructor.P.System.WeakPtr.T
            {
                description
                {
                    Constructor. Constructs null weak pointer.
                }
            }
            function System.WeakPtr.T.constructor.P.System.WeakPtr.T.C.R.System.WeakPtr.T
            {
                description
                {
                    Copy constructor. Increments weak count.
                }
                parameter System.WeakPtr.T.constructor.P.System.WeakPtr.T.C.R.System.WeakPtr.T.that
                {
                    description
                    {
                        A weak pointer to copy.
                    }
                }
            }
            function System.WeakPtr.T.constructor.P.System.WeakPtr.T.C.R.System.WeakPtr.T
            {
                description
                {
                    Copy constructor. Increments weak count.
                }
                parameter System.WeakPtr.T.constructor.P.System.WeakPtr.T.C.R.System.WeakPtr.T.that
                {
                    description
                    {
                        A weak pointer to copy.
                    }
                }
            }
            function System.WeakPtr.T.operator.assign.P.System.WeakPtr.T.C.R.System.WeakPtr.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.WeakPtr.T.operator.assign.P.System.WeakPtr.T.C.R.System.WeakPtr.T.that
                {
                    description
                    {
                        A weak pointer to assign.
                    }
                }
            }
            function System.WeakPtr.T.operator.assign.P.System.WeakPtr.T.C.R.System.WeakPtr.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.WeakPtr.T.operator.assign.P.System.WeakPtr.T.C.R.System.WeakPtr.T.that
                {
                    description
                    {
                        A weak pointer to assign.
                    }
                }
            }
            function System.WeakPtr.T.Assign.P.System.WeakPtr.T.P.T.C.R.System.SharedCount.T
            {
                description
                {
                    Implementation detail to support System.EnableSharedFromThis.T.U.System.ShareableFromThis.T.ptr.U.ptr.System.SharedCount.U.const.ref function.
                }
                parameter System.WeakPtr.T.Assign.P.System.WeakPtr.T.P.T.C.R.System.SharedCount.T.count_
                {
                    description
                    {
                        A shared count.
                    }
                }
                parameter System.WeakPtr.T.Assign.P.System.WeakPtr.T.P.T.C.R.System.SharedCount.T.ptr_
                {
                    description
                    {
                        A pointer to counted object.
                    }
                }
            }
            function System.WeakPtr.T.GetCount.C.P.System.WeakPtr.T
            {
                description
                {
                    Returns the weak count.
                }
                returns System.WeakPtr.T.GetCount.C.P.System.WeakPtr.T.returnValue
                {
                    description
                    {
                        Returns the weak count.
                    }
                }
            }
            function System.WeakPtr.T.GetPtr.C.P.System.WeakPtr.T
            {
                description
                {
                    Returns a pointer to the counted object.
                }
                returns System.WeakPtr.T.GetPtr.C.P.System.WeakPtr.T.returnValue
                {
                    description
                    {
                        Returns a pointer to the counted object.
                    }
                }
            }
            function System.WeakPtr.T.GetUseCount.C.P.System.WeakPtr.T
            {
                description
                {
                    Returns the use count of the counted object.
                }
                returns System.WeakPtr.T.GetUseCount.C.P.System.WeakPtr.T.returnValue
                {
                    description
                    {
                        Returns the use count of the counted object.
                    }
                }
            }
            function System.WeakPtr.T.IsExpired.C.P.System.WeakPtr.T
            {
                description
                {
                    Returns true if the use count has gone to zero and the counted object has been destroyed.
                }
                returns System.WeakPtr.T.IsExpired.C.P.System.WeakPtr.T.returnValue
                {
                    description
                    {
                        Returns true if the use count has gone to zero and the counted object has been destroyed.
                    }
                }
            }
            function System.WeakPtr.T.Lock.C.P.System.WeakPtr.T
            {
                description
                {
                    If the weak pointer has not been expired, returns a shared pointer to the counted object;
                    otherwise returns null shared pointer.
                }
                returns System.WeakPtr.T.Lock.C.P.System.WeakPtr.T.returnValue
                {
                    description
                    {
                        If the weak pointer has not been expired, returns a shared pointer to the counted object;
                        otherwise returns null shared pointer.
                    }
                }
            }
            function System.WeakPtr.T.Reset.P.System.WeakPtr.T
            {
                description
                {
                    Resets the weak pointer to null.
                }
            }
            function System.WeakPtr.T.Swap.P.System.WeakPtr.T.R.System.WeakPtr.T
            {
                description
                {
                    Exchanges the contents of this weak pointer with another.
                }
                parameter System.WeakPtr.T.Swap.P.System.WeakPtr.T.R.System.WeakPtr.T.that
                {
                    description
                    {
                        A weak pointer to exchange contents with.
                    }
                }
            }
            function System.WeakPtr.T.constructor.P.System.WeakPtr.T.C.R.System.SharedPtr.T
            {
                description
                {
                    Constructor. Constructs a weak pointer from a shared pointer.
                }
                parameter System.WeakPtr.T.constructor.P.System.WeakPtr.T.C.R.System.SharedPtr.T.that
                {
                    description
                    {
                        A shared pointer.
                    }
                }
            }
            function System.WeakPtr.T.operator.assign.P.System.WeakPtr.T.C.R.System.SharedPtr.T
            {
                description
                {
                    Assignment. Assigns a weak pointer from a shared pointer.
                }
                parameter System.WeakPtr.T.operator.assign.P.System.WeakPtr.T.C.R.System.SharedPtr.T.that
                {
                    description
                    {
                        A shared pointer to assign.
                    }
                }
            }
            function System.WeakPtr.T.destructor.P.System.WeakPtr.T
            {
                description
                {
                    Destructor. Decrements weak count.
                }
            }
        }
        class System.uhuge
        {
            description
            {
                128-bit unsigned integer type.
            }
            function System.uhuge.constructor.P.System.uhuge
            {
                description
                {
                    Constructor. Initializes the value to zero.
                }
            }
            function System.uhuge.constructor.P.System.uhuge.C.R.System.uhuge
            {
                description
                {
                    Copy constructor.
                }
                parameter System.uhuge.constructor.P.System.uhuge.C.R.System.uhuge.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.uhuge.operator.assign.P.System.uhuge.C.R.System.uhuge
            {
                description
                {
                    Copy assignment.
                }
                parameter System.uhuge.operator.assign.P.System.uhuge.C.R.System.uhuge.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.uhuge.constructor.P.System.uhuge.RR.System.uhuge
            {
                description
                {
                    Move constructor.
                }
                parameter System.uhuge.constructor.P.System.uhuge.RR.System.uhuge.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.uhuge.operator.assign.P.System.uhuge.RR.System.uhuge
            {
                description
                {
                    Move assignment.
                }
                parameter System.uhuge.operator.assign.P.System.uhuge.RR.System.uhuge.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.uhuge.operator.increment.P.System.uhuge
            {
                description
                {
                    Increments the value by one.
                }
                returns System.uhuge.operator.increment.P.System.uhuge.returnValue
                {
                    description
                    {
                        Returns the value.
                    }
                }
            }
            function System.uhuge.operator.decrement.P.System.uhuge
            {
                description
                {
                    Decrements the value by one.
                }
                returns System.uhuge.operator.decrement.P.System.uhuge.returnValue
                {
                    description
                    {
                        Returns the value.
                    }
                }
            }
            function System.uhuge.constructor.P.System.uhuge.ulong
            {
                description
                {
                    Constructor. Initializes the value to specified 64-bit value.
                }
                parameter System.uhuge.constructor.P.System.uhuge.ulong.l_
                {
                    description
                    {
                        An unsigned 64-bit value.
                    }
                }
            }
            function System.uhuge.constructor.P.System.uhuge.ulong.ulong
            {
                description
                {
                    Constructor. Initializes the value to "$2^{64}h\_ + l\_$".
                }
                parameter System.uhuge.constructor.P.System.uhuge.ulong.ulong.h_
                {
                    description
                    {
                        High part.
                    }
                }
                parameter System.uhuge.constructor.P.System.uhuge.ulong.ulong.l_
                {
                    description
                    {
                        Low part.
                    }
                }
            }
        }
        typedef System.string
        {
            description
            {
                An alias for System.String class.
            }
        }
        function System.Abs.T.C.R.T.where.T.is.OrderedAdditiveGroup
        {
            description
            {
                Returns the absolute value of the argument.
            }
            example <examples/System.Abs.T.T.is.OrderedAdditiveGroup.T.const.ref.cm>;
            parameter System.Abs.T.C.R.T.where.T.is.OrderedAdditiveGroup.x
            {
                description
                {
                    A value.
                }
            }
            returns System.Abs.T.C.R.T.where.T.is.OrderedAdditiveGroup.returnValue
            {
                description
                {
                    if "$x < T(0)$" returns "$-x$", else returns "$x$".
                }
            }
        }
        function System.Accumulate.I.T.Op.I.I.T.Op.where.I.is.InputIterator.and.T.is.Semiregular.and.Op.is.BinaryOperation.and.Op.FirstArgumentType.is.T.and.Op.SecondArgumentType.is.I.ValueType
        {
            description
            {
                Accumulates a sequence with respect to a binary operation.
            }
            remarks
            {
                When the binary operation is System.Plus.T and "\emph{init}" is zero calculates the sum of a sequence.
                When the binary operation is System.Multiplies.T and "\emph{init}" is one calculates the product of a sequence.
            }
            example <examples/System.Accumulate.cm>;
            parameter System.Accumulate.I.T.Op.I.I.T.Op.where.I.is.InputIterator.and.T.is.Semiregular.and.Op.is.BinaryOperation.and.Op.FirstArgumentType.is.T.and.Op.SecondArgumentType.is.I.ValueType.begin
            {
                description
                {
                    An input iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.Accumulate.I.T.Op.I.I.T.Op.where.I.is.InputIterator.and.T.is.Semiregular.and.Op.is.BinaryOperation.and.Op.FirstArgumentType.is.T.and.Op.SecondArgumentType.is.I.ValueType.end
            {
                description
                {
                    An input iterator pointing one past the end of a sequence.
                }
            }
            parameter System.Accumulate.I.T.Op.I.I.T.Op.where.I.is.InputIterator.and.T.is.Semiregular.and.Op.is.BinaryOperation.and.Op.FirstArgumentType.is.T.and.Op.SecondArgumentType.is.I.ValueType.init
            {
                description
                {
                    Initial value.
                }
            }
            parameter System.Accumulate.I.T.Op.I.I.T.Op.where.I.is.InputIterator.and.T.is.Semiregular.and.Op.is.BinaryOperation.and.Op.FirstArgumentType.is.T.and.Op.SecondArgumentType.is.I.ValueType.op
            {
                description
                {
                    A binary operation.
                }
            }
            returns System.Accumulate.I.T.Op.I.I.T.Op.where.I.is.InputIterator.and.T.is.Semiregular.and.Op.is.BinaryOperation.and.Op.FirstArgumentType.is.T.and.Op.SecondArgumentType.is.I.ValueType.returnValue
            {
                description
                {
                    Returns accumulated result.
                }
            }
            source <../src/algorithm.pdf>(8, 8);
        }
        function System.BackInserter.C.R.C.where.C.is.BackInsertionSequence
        {
            description
            {
                Returns a System.BackInsertIterator.C for a back insertion sequence.
            }
            remarks
            {
                A System.BackInsertIterator.C is an output iterator that inserts elements to the end of a back insertion sequence.
            }
            example <examples/System.BackInsertIterator.cm>;
            parameter System.BackInserter.C.R.C.where.C.is.BackInsertionSequence.c
            {
                description
                {
                    A back insertion sequence.
                }
            }
            returns System.BackInserter.C.R.C.where.C.is.BackInsertionSequence.returnValue
            {
                description
                {
                    Returns a System.BackInsertIterator.C for a back insertion sequence.
                }
            }
        }
        function System.Copy.I.O.I.I.O.where.I.is.InputIterator.and.O.is.OutputIterator.and.CopyAssignable.O.ValueType.I.ValueType
        {
            description
            {
                Copies a sequence.
            }
            remarks
            {
                The source and target sequences may overlap, but then the iterator pointing to the beginning of the target sequence must point to an object coming
                before the object pointed by the beginning iterator of the source sequence.
            }
            example <examples/System.Copy.I.O.I.is.InputIterator.O.is.OutputIterator.Assignable.O.ValueType.I.ValueType.I.I.O.cm>;
            parameter System.Copy.I.O.I.I.O.where.I.is.InputIterator.and.O.is.OutputIterator.and.CopyAssignable.O.ValueType.I.ValueType.begin
            {
                description
                {
                    An input iterator pointing to the beginning of a the source sequence.
                }
            }
            parameter System.Copy.I.O.I.I.O.where.I.is.InputIterator.and.O.is.OutputIterator.and.CopyAssignable.O.ValueType.I.ValueType.end
            {
                description
                {
                    An input iterator pointing one past the end of a source sequence.
                }
            }
            parameter System.Copy.I.O.I.I.O.where.I.is.InputIterator.and.O.is.OutputIterator.and.CopyAssignable.O.ValueType.I.ValueType.to
            {
                description
                {
                    An output iterator pointing to the beginning of the target sequence.
                }
            }
            returns System.Copy.I.O.I.I.O.where.I.is.InputIterator.and.O.is.OutputIterator.and.CopyAssignable.O.ValueType.I.ValueType.returnValue
            {
                description
                {
                    Returns an output iterator pointing one past the end of the copied sequence.
                }
            }
            source <../src/algorithm.pdf>(2, 2);
        }
        function System.CopyBackward.I.O.I.I.O.where.I.is.BidirectionalIterator.and.O.is.BidirectionalIterator.and.CopyAssignable.O.ValueType.I.ValueType
        {
            description
            {
                Copies a source sequence to a target sequence starting from the end of the source sequence.
            }
            remarks
            {
                The source and target sequences may overlap, but then the end iterator of the target sequence must point to an element coming after the element pointed by end iterator of the source sequence.
            }
            example <examples/System.CopyBackward.I.O.I.is.BidirectionalIterator.O.is.BidirectionalIterator.Assignable.O.ValueType.I.ValueType.I.I.O.cm>;
            parameter System.CopyBackward.I.O.I.I.O.where.I.is.BidirectionalIterator.and.O.is.BidirectionalIterator.and.CopyAssignable.O.ValueType.I.ValueType.begin
            {
                description
                {
                    A bidirectional iterator pointing to the beginning of the source sequence.
                }
            }
            parameter System.CopyBackward.I.O.I.I.O.where.I.is.BidirectionalIterator.and.O.is.BidirectionalIterator.and.CopyAssignable.O.ValueType.I.ValueType.end
            {
                description
                {
                    A bidirectional iterator pointing one past the end of the source sequence.
                }
            }
            parameter System.CopyBackward.I.O.I.I.O.where.I.is.BidirectionalIterator.and.O.is.BidirectionalIterator.and.CopyAssignable.O.ValueType.I.ValueType.to
            {
                description
                {
                    A bidirectional iterator pointing one past the end of the target sequence.
                }
            }
            returns System.CopyBackward.I.O.I.I.O.where.I.is.BidirectionalIterator.and.O.is.BidirectionalIterator.and.CopyAssignable.O.ValueType.I.ValueType.returnValue
            {
                description
                {
                    Returns a birectional iterator pointing to the beginning of the target sequence.
                }
            }
            source <../src/algorithm.pdf>(2, 2);
        }
        function System.Count.I.P.I.I.P.where.I.is.InputIterator.and.P.is.UnaryPredicate.and.P.ArgumentType.is.I.ValueType
        {
            description
            {
                Counts the number of elements in a sequence that satisfy a predicate.
            }
            example <examples/System.Count.I.P.I.is.InputIterator.P.is.UnaryPredicate.P.ArgumentType.is.I.ValueType.I.I.P.cm>;
            parameter System.Count.I.P.I.I.P.where.I.is.InputIterator.and.P.is.UnaryPredicate.and.P.ArgumentType.is.I.ValueType.begin
            {
                description
                {
                    An input iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.Count.I.P.I.I.P.where.I.is.InputIterator.and.P.is.UnaryPredicate.and.P.ArgumentType.is.I.ValueType.end
            {
                description
                {
                    An input iterator pointing one past the end of a sequence.
                }
            }
            parameter System.Count.I.P.I.I.P.where.I.is.InputIterator.and.P.is.UnaryPredicate.and.P.ArgumentType.is.I.ValueType.p
            {
                description
                {
                    A unary predicate.
                }
            }
            returns System.Count.I.P.I.I.P.where.I.is.InputIterator.and.P.is.UnaryPredicate.and.P.ArgumentType.is.I.ValueType.returnValue
            {
                description
                {
                    Returns the number of elements that satisfy "\emph{p}".
                }
            }
            source <../src/algorithm.pdf>(7, 7);
        }
        function System.Count.I.T.I.I.C.R.T.where.I.is.InputIterator.and.T.is.Semiregular.and.EqualityComparable.T.I.ValueType
        {
            description
            {
                Counts the number of elements in a sequence that are equal to the given value.
            }
            example <examples/System.Count.I.T.I.is.InputIterator.T.is.Semiregular.EqualityComparable.T.I.ValueType.I.I.T.const.ref.cm>;
            parameter System.Count.I.T.I.I.C.R.T.where.I.is.InputIterator.and.T.is.Semiregular.and.EqualityComparable.T.I.ValueType.begin
            {
                description
                {
                    An input iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.Count.I.T.I.I.C.R.T.where.I.is.InputIterator.and.T.is.Semiregular.and.EqualityComparable.T.I.ValueType.end
            {
                description
                {
                    An input iterator pointing one past the end of a sequence.
                }
            }
            parameter System.Count.I.T.I.I.C.R.T.where.I.is.InputIterator.and.T.is.Semiregular.and.EqualityComparable.T.I.ValueType.value
            {
                description
                {
                    A value.
                }
            }
            returns System.Count.I.T.I.I.C.R.T.where.I.is.InputIterator.and.T.is.Semiregular.and.EqualityComparable.T.I.ValueType.returnValue
            {
                description
                {
                    Returns the number of elements equal to "\emph{value}".
                }
            }
            source <../src/algorithm.pdf>(7, 7);
        }
        function System.CurrentDate
        {
            description
            {
                Returns current date as System.Date value.
            }
            returns System.CurrentDate.returnValue
            {
                description
                {
                    Returns current date as System.Date value.
                }
            }
        }
        function System.Distance.I.I.I.where.I.is.ForwardIterator
        {
            description
            {
                Returns the distance between two forward iterators.
            }
            remarks
            {
                The "\emph{last}" iterator must be reachable from the "\emph{first}" iterator.
            }
            parameter System.Distance.I.I.I.where.I.is.ForwardIterator.first
            {
                description
                {
                    The first forward iterator.
                }
            }
            parameter System.Distance.I.I.I.where.I.is.ForwardIterator.last
            {
                description
                {
                    The second forward iterator reachable from the first forward iterator.
                }
            }
            returns System.Distance.I.I.I.where.I.is.ForwardIterator.returnValue
            {
                description
                {
                    Returns the number of steps that the "\emph{first}" iterator must be incremented to reach the "\emph{last}" iterator.
                }
            }
            source <../src/algorithm.pdf>(3, 3);
        }
        function System.Distance.I.I.I.where.I.is.RandomAccessIterator
        {
            description
            {
                Returns the distance between two random access iterators.
            }
            example <examples/System.Distance.I.I.is.RandomAccessIterator.I.I.cm>;
            parameter System.Distance.I.I.I.where.I.is.RandomAccessIterator.first
            {
                description
                {
                    The  first random access iterator.
                }
            }
            parameter System.Distance.I.I.I.where.I.is.RandomAccessIterator.last
            {
                description
                {
                    The second random access iterator.
                }
            }
            returns System.Distance.I.I.I.where.I.is.RandomAccessIterator.returnValue
            {
                description
                {
                    Returns "$last - first$".
                }
            }
            source <../src/algorithm.pdf>(3, 3);
        }
        function System.EnableSharedFromThis.T.U.P.System.ShareableFromThis.T.P.U.C.R.System.SharedCount.U
        {
            description
            {
                A function that enables the "\emph{shared from this}" idiom. Implementation detail.
            }
            parameter System.EnableSharedFromThis.T.U.P.System.ShareableFromThis.T.P.U.C.R.System.SharedCount.U.count
            {
                description
                {
                    A shared count.
                }
            }
            parameter System.EnableSharedFromThis.T.U.P.System.ShareableFromThis.T.P.U.C.R.System.SharedCount.U.left
            {
                description
                {
                    A pointer to a class derived from System.ShareableFromThis.T.
                }
            }
            parameter System.EnableSharedFromThis.T.U.P.System.ShareableFromThis.T.P.U.C.R.System.SharedCount.U.right
            {
                description
                {
                    A pointer to class derived from System.ShareableFromThis.T.
                }
            }
        }
        function System.EnableSharedFromThis.T.P.void.P.void.C.R.System.SharedCount.T
        {
            description
            {
                An empty function that catches classes that are not shareable from this. Implementation detail.
            }
            parameter System.EnableSharedFromThis.T.P.void.P.void.C.R.System.SharedCount.T.__parameter0
            {
                description
                {
                    Pointer to any object.
                }
            }
            parameter System.EnableSharedFromThis.T.P.void.P.void.C.R.System.SharedCount.T.__parameter1
            {
                description
                {
                    Pointer to any object.
                }
            }
            parameter System.EnableSharedFromThis.T.P.void.P.void.C.R.System.SharedCount.T.__parameter2
            {
                description
                {
                    A shared count.
                }
            }
        }
        function System.Equal.I1.I2.I1.I1.I2.I2.where.I1.is.InputIterator.and.I2.is.InputIterator.and.EqualityComparable.I1.ValueType.I2.ValueType
        {
            description
            {
                Compares two sequences for equality.
            }
            remarks
            {
                Two sequences are equal if they contain the same number of elements that compare pairwise equal.
                Uses the System.EqualTo2.T.U binary predicate to compare the elements of the sequences.
            }
            example <examples/System.Equal.cm>;
            parameter System.Equal.I1.I2.I1.I1.I2.I2.where.I1.is.InputIterator.and.I2.is.InputIterator.and.EqualityComparable.I1.ValueType.I2.ValueType.first1
            {
                description
                {
                    An input iterator pointing to the beginning of the first sequence.
                }
            }
            parameter System.Equal.I1.I2.I1.I1.I2.I2.where.I1.is.InputIterator.and.I2.is.InputIterator.and.EqualityComparable.I1.ValueType.I2.ValueType.first2
            {
                description
                {
                    An input iterator pointing to the beginning of the second sequence.
                }
            }
            parameter System.Equal.I1.I2.I1.I1.I2.I2.where.I1.is.InputIterator.and.I2.is.InputIterator.and.EqualityComparable.I1.ValueType.I2.ValueType.last1
            {
                description
                {
                    An input iterator pointer one past the end of the first sequence.
                }
            }
            parameter System.Equal.I1.I2.I1.I1.I2.I2.where.I1.is.InputIterator.and.I2.is.InputIterator.and.EqualityComparable.I1.ValueType.I2.ValueType.last2
            {
                description
                {
                    An input iterator pointing one past the end of the second sequence.
                }
            }
            returns System.Equal.I1.I2.I1.I1.I2.I2.where.I1.is.InputIterator.and.I2.is.InputIterator.and.EqualityComparable.I1.ValueType.I2.ValueType.returnValue
            {
                description
                {
                    Returns true if the first sequence is equal to the second sequence, false otherwise.
                }
            }
            source <../src/algorithm.pdf>(13, 13);
        }
        function System.Equal.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Relation.R.I1.ValueType.I2.ValueType
        {
            description
            {
                Compares two sequences for equality using the given equality relation.
            }
            example <examples/System.Equal.I1.I2.R.I1.is.InputIterator.I2.is.InputIterator.Relation.R.I1.ValueType.I2.ValueType.I1.I1.I2.I2.R.cm>;
            parameter System.Equal.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Relation.R.I1.ValueType.I2.ValueType.first1
            {
                description
                {
                    An input iterator pointing to the beginning of the first sequence.
                }
            }
            parameter System.Equal.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Relation.R.I1.ValueType.I2.ValueType.first2
            {
                description
                {
                    An input iterator pointing to the beginning of the second sequence.
                }
            }
            parameter System.Equal.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Relation.R.I1.ValueType.I2.ValueType.last1
            {
                description
                {
                    An input iterator pointing one past the end of the first sequence.
                }
            }
            parameter System.Equal.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Relation.R.I1.ValueType.I2.ValueType.last2
            {
                description
                {
                    An input iterator pointing one past the end of the second sequence.
                }
            }
            parameter System.Equal.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Relation.R.I1.ValueType.I2.ValueType.r
            {
                description
                {
                    An equality relation.
                }
            }
            returns System.Equal.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Relation.R.I1.ValueType.I2.ValueType.returnValue
            {
                description
                {
                    Returns true if the first sequence is equal to the second sequence according to the given equality relation.
                }
            }
            source <../src/algorithm.pdf>(12, 12);
        }
        function System.EqualRange.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType
        {
            description
            {
                Returns a pair of iterators that form a range of values equal to the given value in a sorted sequence.
            }
            remarks
            {
                If the value is not found in the sorted sequence, returns a pair of iterators that form an empty range
                (that is: a range with two equal iterators.) 
                The iterators point to the position where the given value would be if it were in the sorted sequence.
            }
            example <examples/System.EqualRange.I.T.I.is.ForwardIterator.TotallyOrdered.T.I.ValueType.I.I.T.const.ref.cm>;
            example <examples/System.EqualRange.I.T.I.is.ForwardIterator.TotallyOrdered.T.I.ValueType.I.I.T.const.ref.2.cm>;
            parameter System.EqualRange.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.first
            {
                description
                {
                    A forward iterator that points to the beginning of a sorted sequence.
                }
            }
            parameter System.EqualRange.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.last
            {
                description
                {
                    A forward iterator that points to one past the end of a sorted sequence.
                }
            }
            parameter System.EqualRange.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.value
            {
                description
                {
                    A value.
                }
            }
            returns System.EqualRange.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.returnValue
            {
                description
                {
                    Returns a pair of iterators that form a range of values equal to the given value in a sorted sequence.
                }
            }
            source <../src/algorithm.pdf>(5, 5);
        }
        function System.EqualRange.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
                Returns a pair of iterators that form a range of values equal to the given value in a sorted sequence.
                Uses the given ordering relation to infer equality.
            }
            remarks
            {
                If the value is not found in the sorted sequence, returns a pair of iterators that form an empty range
                (that is: a range with two equal iterators.) 
                The iterators point to the position where the given value would be if it were in the sorted sequence.
            }
            example <examples/System.EqualRange.I.T.R.I.is.ForwardIterator.T.is.I.ValueType.R.is.Relation.R.Domain.is.I.ValueType.I.I.T.const.ref.R.cm>;
            parameter System.EqualRange.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.first
            {
                description
                {
                    A forward iterator that points to the beginning of a sorted sequence.
                }
            }
            parameter System.EqualRange.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.last
            {
                description
                {
                    A forward iterator that points to one past the end of a sorted sequence.
                }
            }
            parameter System.EqualRange.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                    An ordering relation.
                }
            }
            parameter System.EqualRange.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.value
            {
                description
                {
                    A value.
                }
            }
            returns System.EqualRange.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.returnValue
            {
                description
                {
                    Returns a pair of iterators that form a range of values equal to the given value in a sorted sequence.
                }
            }
            source <../src/algorithm.pdf>(6, 6);
        }
        function System.Factorial.U.U.where.U.is.UnsignedInteger
        {
            description
            {
                Returns a factorial of the argument.
            }
            example <examples/System.Factorial.U.U.is.UnsignedInteger.U.cm>;
            parameter System.Factorial.U.U.where.U.is.UnsignedInteger.n
            {
                description
                {
                    An unsigned integer value.
                }
            }
            returns System.Factorial.U.U.where.U.is.UnsignedInteger.returnValue
            {
                description
                {
                    Returns "$n!$".
                }
            }
            source <../src/algorithm.pdf>(15, 15);
        }
        function System.Find.I.P.I.I.P.where.I.is.InputIterator.and.P.is.UnaryPredicate.and.P.ArgumentType.is.I.ValueType
        {
            description
            {
                Searches the first occurrence of a value from a sequence that matches a predicate.
            }
            example <examples/System.Find.I.P.I.is.InputIterator.P.is.UnaryPredicate.P.ArgumentType.is.I.ValueType.I.I.P.cm>;
            parameter System.Find.I.P.I.I.P.where.I.is.InputIterator.and.P.is.UnaryPredicate.and.P.ArgumentType.is.I.ValueType.begin
            {
                description
                {
                    An input iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.Find.I.P.I.I.P.where.I.is.InputIterator.and.P.is.UnaryPredicate.and.P.ArgumentType.is.I.ValueType.end
            {
                description
                {
                    An input iterator pointing one past the end of a sequence.
                }
            }
            parameter System.Find.I.P.I.I.P.where.I.is.InputIterator.and.P.is.UnaryPredicate.and.P.ArgumentType.is.I.ValueType.p
            {
                description
                {
                    A unary predicate.
                }
            }
            returns System.Find.I.P.I.I.P.where.I.is.InputIterator.and.P.is.UnaryPredicate.and.P.ArgumentType.is.I.ValueType.returnValue
            {
                description
                {
                    Returns an iterator pointing to the found value, or "$end$" if no value satisfied "$p$".
                }
            }
            source <../src/algorithm.pdf>(7, 7);
        }
        function System.Find.I.T.I.I.C.R.T.where.I.is.InputIterator.and.T.is.Semiregular.and.EqualityComparable.T.I.ValueType
        {
            description
            {
                Searches a value from a sequence.
            }
            example <examples/System.Find.I.T.I.is.InputIterator.T.is.Semiregular.EqualityComparable.T.I.ValueType.I.I.T.const.ref.cm>;
            parameter System.Find.I.T.I.I.C.R.T.where.I.is.InputIterator.and.T.is.Semiregular.and.EqualityComparable.T.I.ValueType.begin
            {
                description
                {
                    An input iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.Find.I.T.I.I.C.R.T.where.I.is.InputIterator.and.T.is.Semiregular.and.EqualityComparable.T.I.ValueType.end
            {
                description
                {
                    An input iterator pointing one past the end of a sequence.
                }
            }
            parameter System.Find.I.T.I.I.C.R.T.where.I.is.InputIterator.and.T.is.Semiregular.and.EqualityComparable.T.I.ValueType.value
            {
                description
                {
                    A value to search.
                }
            }
            returns System.Find.I.T.I.I.C.R.T.where.I.is.InputIterator.and.T.is.Semiregular.and.EqualityComparable.T.I.ValueType.returnValue
            {
                description
                {
                    Returns an iterator pointing to the found value, or "$end$" if no equal value found.
                }
            }
            source <../src/algorithm.pdf>(6, 6);
        }
        function System.ForEach.I.F.I.I.F.where.I.is.InputIterator.and.F.is.UnaryFunction.and.F.ArgumentType.is.I.ValueType
        {
            description
            {
                Applies a function object for each element of a sequence.
            }
            example <examples/System.ForEach.I.F.I.is.InputIterator.F.is.UnaryFunction.F.ArgumentType.is.I.ValueType.I.I.F.cm>;
            parameter System.ForEach.I.F.I.I.F.where.I.is.InputIterator.and.F.is.UnaryFunction.and.F.ArgumentType.is.I.ValueType.begin
            {
                description
                {
                    An input iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.ForEach.I.F.I.I.F.where.I.is.InputIterator.and.F.is.UnaryFunction.and.F.ArgumentType.is.I.ValueType.end
            {
                description
                {
                    An input iterator pointing one past the end of a sequence.
                }
            }
            parameter System.ForEach.I.F.I.I.F.where.I.is.InputIterator.and.F.is.UnaryFunction.and.F.ArgumentType.is.I.ValueType.f
            {
                description
                {
                    A unary function object.
                }
            }
            returns System.ForEach.I.F.I.I.F.where.I.is.InputIterator.and.F.is.UnaryFunction.and.F.ArgumentType.is.I.ValueType.returnValue
            {
                description
                {
                    Returns the function object.
                }
            }
            source <../src/algorithm.pdf>(8, 8);
        }
        function System.FrontInserter.C.R.C.where.C.is.FrontInsertionSequence
        {
            description
            {
                Returns a System.FrontInsertIterator.C for a front insert sequence.
            }
            remarks
            {
                A System.FrontInsertIterator.C is an output iterator that inserts elements to the front of a front insertion sequence.
            }
            example <examples/System.FrontInsertIterator.cm>;
            parameter System.FrontInserter.C.R.C.where.C.is.FrontInsertionSequence.c
            {
                description
                {
                    A front insertion sequence.
                }
            }
            returns System.FrontInserter.C.R.C.where.C.is.FrontInsertionSequence.returnValue
            {
                description
                {
                    Returns a System.FrontInsertIterator.C for a front insertion sequence.
                }
            }
        }
        function System.Gcd.T.T.T.where.T.is.EuclideanSemiring
        {
            description
            {
                Returns the greatest common divisor of two values.
            }
            example <examples/System.Gcd.T.T.is.EuclideanSemiring.T.T.cm>;
            parameter System.Gcd.T.T.T.where.T.is.EuclideanSemiring.a
            {
                description
                {
                    The first value.
                }
            }
            parameter System.Gcd.T.T.T.where.T.is.EuclideanSemiring.b
            {
                description
                {
                    The second value.
                }
            }
            returns System.Gcd.T.T.T.where.T.is.EuclideanSemiring.returnValue
            {
                description
                {
                    Returns "$gcd(a, b)$".
                }
            }
            source <../src/algorithm.pdf>(15, 15);
        }
        function System.HexChar.byte
        {
            description
            {
                Returns hexadecimal character representation of a four-bit value.
            }
            parameter System.HexChar.byte.nibble
            {
                description
                {
                    A four bit value.
                }
            }
            returns System.HexChar.byte.returnValue
            {
                description
                {
                    Returns hexadecimal character representation of a four-bit value.
                }
            }
        }
        function System.IdentityElement.T.System.Multiplies.T.where.T.is.MultiplicativeMonoid
        {
            description
            {
                Returns the identity element of multiplication, that is T(1).
            }
            parameter System.IdentityElement.T.System.Multiplies.T.where.T.is.MultiplicativeMonoid.__parameter0
            {
                description
                {
                }
            }
            returns System.IdentityElement.T.System.Multiplies.T.where.T.is.MultiplicativeMonoid.returnValue
            {
                description
                {
                    Returns "$T(1)$".
                }
            }
        }
        function System.IdentityElement.T.System.Plus.T.where.T.is.AdditiveMonoid
        {
            description
            {
                Returns the identity element of addition, that is: T(0).
            }
            parameter System.IdentityElement.T.System.Plus.T.where.T.is.AdditiveMonoid.__parameter0
            {
                description
                {
                }
            }
            returns System.IdentityElement.T.System.Plus.T.where.T.is.AdditiveMonoid.returnValue
            {
                description
                {
                    Returns "$T(0)$".
                }
            }
        }
        function System.Inserter.C.I.R.C.I.where.C.is.InsertionSequence.and.I.is.C.Iterator
        {
            description
            {
                Returns an System.InsertIterator.C for an insertion sequence and its iterator.
            }
            remarks
            {
                An System.InsertIterator.C is an output iterator that inserts elements to some position of an insertion sequence.
            }
            example <examples/System.InsertIterator.cm>;
            parameter System.Inserter.C.I.R.C.I.where.C.is.InsertionSequence.and.I.is.C.Iterator.c
            {
                description
                {
                    An insertion sequence.
                }
            }
            parameter System.Inserter.C.I.R.C.I.where.C.is.InsertionSequence.and.I.is.C.Iterator.i
            {
                description
                {
                    An iterator pointing a to position to insert elements.
                }
            }
            returns System.Inserter.C.I.R.C.I.where.C.is.InsertionSequence.and.I.is.C.Iterator.returnValue
            {
                description
                {
                    Returns an System.InsertIterator.C for an insertion sequence and iterator.
                }
            }
        }
        function System.InsertionSort.I.I.I.where.I.is.RandomAccessIterator.and.I.ValueType.is.TotallyOrdered
        {
            description
            {
                Sorts a sequence of values using insertion sort algorithm.
            }
            example <examples/System.InsertionSort.I.I.is.RandomAccessIterator.I.ValueType.is.TotallyOrdered.I.I.cm>;
            parameter System.InsertionSort.I.I.I.where.I.is.RandomAccessIterator.and.I.ValueType.is.TotallyOrdered.begin
            {
                description
                {
                    A random access iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.InsertionSort.I.I.I.where.I.is.RandomAccessIterator.and.I.ValueType.is.TotallyOrdered.end
            {
                description
                {
                    A random access iterator pointing one past the end of a sequence.
                }
            }
            source <../src/algorithm.pdf>(11, 11);
        }
        function System.InsertionSort.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
                Sorts a sequence of values using insertion sort algorithm and given ordering relation.
            }
            example <examples/System.InsertionSort.I.R.I.is.RandomAccessIterator.R.is.Relation.R.Domain.is.I.ValueType.I.I.R.cm>;
            parameter System.InsertionSort.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.begin
            {
                description
                {
                    A random access iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.InsertionSort.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.end
            {
                description
                {
                    A random access iterator pointing one past the end of a sequence.
                }
            }
            parameter System.InsertionSort.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                    An ordering relation.
                }
            }
            source <../src/algorithm.pdf>(11, 11);
        }
        function System.IsAlpha.char
        {
            description
            {
                Returns true if the given character is an alphabetic character, false otherwise.
            }
            remarks
            {
                Alphabetic characters are the lower case and upper case letters 'a' .. 'z' and 'A' ..'Z'.
            }
            parameter System.IsAlpha.char.c
            {
                description
                {
                    A character to test.
                }
            }
            returns System.IsAlpha.char.returnValue
            {
                description
                {
                    Returns true if the given character is an alphabetic character, false otherwise.
                }
            }
        }
        function System.IsAlphanumeric.char
        {
            description
            {
                Returns true if the given character is an alphanumeric character, false otherwise.
            }
            remarks
            {
                Alphanumeric characters are the lower case and upper case letters and decimal digits 'a'..'z', 'A'..'Z' and '0'..'9'.
            }
            parameter System.IsAlphanumeric.char.c
            {
                description
                {
                    A character to test.
                }
            }
            returns System.IsAlphanumeric.char.returnValue
            {
                description
                {
                    Returns true if the given character is an alphanumeric character, false otherwise.
                }
            }
        }
        function System.IsControl.char
        {
            description
            {
                Returns true if the given character is a control character, false otherwise.
            }
            remarks
            {
                The control characters are characters whose ASCII codes are 0 .. 31 and 127.
            }
            parameter System.IsControl.char.c
            {
                description
                {
                    A character to test.
                }
            }
            returns System.IsControl.char.returnValue
            {
                description
                {
                    Returns true if the given character is a control character, false otherwise.
                }
            }
        }
        function System.IsDigit.char
        {
            description
            {
                Returns true if the given character is a decimal digit, false otherwise.
            }
            remarks
            {
                Decimal digits are '0' .. '9'.
            }
            parameter System.IsDigit.char.c
            {
                description
                {
                    A character to test.
                }
            }
            returns System.IsDigit.char.returnValue
            {
                description
                {
                    Returns true if the given character is a decimal digit, false otherwise.
                }
            }
        }
        function System.IsGraphic.char
        {
            description
            {
                Returns true if the given character is a graphical character, false otherwise.
            }
            remarks
            {
                The graphical characters are characters whose ASCII codes are in the range 33 .. 126.
            }
            parameter System.IsGraphic.char.c
            {
                description
                {
                    A character to test.
                }
            }
            returns System.IsGraphic.char.returnValue
            {
                description
                {
                    Returns true if the given character is a graphical character, false otherwise.
                }
            }
        }
        function System.IsHexDigit.char
        {
            description
            {
                Returns true if the given character is a hexadecimal digit, false otherwise.
            }
            remarks
            {
                Hexadecimal digits are '0' .. '9', 'a' .. 'f' and 'A' ..'F'.
            }
            parameter System.IsHexDigit.char.c
            {
                description
                {
                    A character to test.
                }
            }
            returns System.IsHexDigit.char.returnValue
            {
                description
                {
                    Returns true if the given character is a hexadecimal digit, false otherwise.
                }
            }
        }
        function System.IsLower.char
        {
            description
            {
                Returns true if the given character is a lower case letter, false otherwise.
            }
            remarks
            {
                Lower case letters are 'a' .. 'z'.
            }
            parameter System.IsLower.char.c
            {
                description
                {
                    A character to test.
                }
            }
            returns System.IsLower.char.returnValue
            {
                description
                {
                    Returns true if the given character is a lower case letter, false otherwise.
                }
            }
        }
        function System.IsPrintable.char
        {
            description
            {
                Returns true if the given character is a printable character, false otherwise.
            }
            remarks
            {
                Printable characters are characters whose ASCII codes are in the range 32 .. 126.
            }
            parameter System.IsPrintable.char.c
            {
                description
                {
                    A character to test.
                }
            }
            returns System.IsPrintable.char.returnValue
            {
                description
                {
                    Returns true if the given character is a printable character, false otherwise.
                }
            }
        }
        function System.IsPunctuation.char
        {
            description
            {
                Returns true if the given character is a punctuation character, false otherwise.
            }
            remarks
            {
                Punctuation characters are characters whose ASCII codes are in ranges 33 .. 47, 58 .. 64, 91 .. 96 and 123 .. 126.
            }
            parameter System.IsPunctuation.char.c
            {
                description
                {
                    A character to test.
                }
            }
            returns System.IsPunctuation.char.returnValue
            {
                description
                {
                    Returns true if the given character is a punctuation character, false otherwise.
                }
            }
        }
        function System.IsSpace.char
        {
            description
            {
                Returns true if the given character is a space character, false otherwise.
            }
            remarks
            {
                The space characters are characters whose ASCII codes are 9 .. 13 and 32.
            }
            parameter System.IsSpace.char.c
            {
                description
                {
                    A character to test.
                }
            }
            returns System.IsSpace.char.returnValue
            {
                description
                {
                    Returns true if the given character is a space character, false otherwise.
                }
            }
        }
        function System.IsUpper.char
        {
            description
            {
                Returns true if the given character is an upper case letter, false otherwise.
            }
            remarks
            {
                Upper case letters are 'A' .. 'Z'.
            }
            parameter System.IsUpper.char.c
            {
                description
                {
                    A character to test.
                }
            }
            returns System.IsUpper.char.returnValue
            {
                description
                {
                    Returns true if the given character is an upper case letter, false otherwise.
                }
            }
        }
        function System.LastComponentsEqual.C.R.System.String.C.R.System.String.char
        {
            description
            {
                Returns true, if last components of two strings are equal, false otherwise.
            }
            remarks
            {
                First splits 
                System.LastComponentsEqual.C.R.System.String.C.R.System.String.char.s0 and 
                System.LastComponentsEqual.C.R.System.String.C.R.System.String.char.s1 to 
                components with respect to component separator character 
                System.LastComponentsEqual.C.R.System.String.C.R.System.String.char.componentSeparator.
                Then computes "\emph{n}", the minumum number of components of 
                System.LastComponentsEqual.C.R.System.String.C.R.System.String.char.s0 and
                System.LastComponentsEqual.C.R.System.String.C.R.System.String.char.s1.
                Then returns true, if last "\emph{n}" components of 
                System.LastComponentsEqual.C.R.System.String.C.R.System.String.char.s0 and
                System.LastComponentsEqual.C.R.System.String.C.R.System.String.char.s1 are equal,
                false otherwise.
            }
            parameter System.LastComponentsEqual.C.R.System.String.C.R.System.String.char.componentSeparator
            {
                description
                {
                    Component separator character.
                }
            }
            parameter System.LastComponentsEqual.C.R.System.String.C.R.System.String.char.s0
            {
                description
                {
                    First string.
                }
            }
            parameter System.LastComponentsEqual.C.R.System.String.C.R.System.String.char.s1
            {
                description
                {
                    Second string.
                }
            }
            returns System.LastComponentsEqual.C.R.System.String.C.R.System.String.char.returnValue
            {
                description
                {
                    Returns true, if last components of two strings are equal, false otherwise.
                }
            }
        }
        function System.LexicographicalCompare.I1.I2.I1.I1.I2.I2.where.I1.is.InputIterator.and.I2.is.InputIterator.and.LessThanComparable.I1.ValueType.I2.ValueType
        {
            description
            {
                Returns true if the first sequence comes lexicographically before the second sequence, false otherwise.
            }
            remarks
            {
                Compares the sequences element by element, until
                (1) an element in the first sequence is less than the corresponding element in the second sequence. In that case returns true.
                (2) an element in the second sequence is less than the corresponding element in the first sequence. In that case returns false.
                (3) The corresponding elements of the sequences are equal, but the first sequence is shorter than the second sequence. In that case returns true.
                (4) Otherwise returns false.
            }
            example <examples/System.LexicographicalCompare.cm>;
            parameter System.LexicographicalCompare.I1.I2.I1.I1.I2.I2.where.I1.is.InputIterator.and.I2.is.InputIterator.and.LessThanComparable.I1.ValueType.I2.ValueType.first1
            {
                description
                {
                    An input iterator pointing to the beginning of the first sequence.
                }
            }
            parameter System.LexicographicalCompare.I1.I2.I1.I1.I2.I2.where.I1.is.InputIterator.and.I2.is.InputIterator.and.LessThanComparable.I1.ValueType.I2.ValueType.first2
            {
                description
                {
                    An input iterator pointing to the beginning of the second sequence.
                }
            }
            parameter System.LexicographicalCompare.I1.I2.I1.I1.I2.I2.where.I1.is.InputIterator.and.I2.is.InputIterator.and.LessThanComparable.I1.ValueType.I2.ValueType.last1
            {
                description
                {
                    An input iterator pointing one past the end of the first sequence.
                }
            }
            parameter System.LexicographicalCompare.I1.I2.I1.I1.I2.I2.where.I1.is.InputIterator.and.I2.is.InputIterator.and.LessThanComparable.I1.ValueType.I2.ValueType.last2
            {
                description
                {
                    An input iterator pointing one past the end of the second sequence.
                }
            }
            returns System.LexicographicalCompare.I1.I2.I1.I1.I2.I2.where.I1.is.InputIterator.and.I2.is.InputIterator.and.LessThanComparable.I1.ValueType.I2.ValueType.returnValue
            {
                description
                {
                    Returns true if the first sequence comes lexicographically before the second sequence, false otherwise.
                }
            }
            source <../src/algorithm.pdf>(13, 13);
        }
        function System.LexicographicalCompare.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Same.I1.ValueType.I2.ValueType.and.Relation.R.I1.ValueType.I2.ValueType.and.Relation.R.I2.ValueType.I1.ValueType
        {
            description
            {
                Returns true if the first sequence comes lexicographically before the second sequence according to the given ordering relation, false otherwise.
            }
            remarks
            {
                Compares the sequences element by element, until
                (1) an element in the first sequence is less than the corresponding element in the second sequence according to the given ordering relation. In that case returns true.
                (2) an element in the second sequence is less than the corresponding element in the first sequence according to the given ordering relation. In that case returns false.
                (3) The corresponding elements of the sequences are equal, but the first sequence is shorter than the second sequence. In that case returns true.
                (4) Otherwise returns false.
            }
            example <examples/System.LexicographicalCompare.I1.I2.R.I1.is.InputIterator.I2.is.InputIterator.Same.I1.ValueType.I2.ValueType.Relation.R.I1.ValueType.I2.ValueType.Relation.R.I2.ValueType.I1.ValueType.I1.I1.I2.I2.R.cm>;
            parameter System.LexicographicalCompare.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Same.I1.ValueType.I2.ValueType.and.Relation.R.I1.ValueType.I2.ValueType.and.Relation.R.I2.ValueType.I1.ValueType.first1
            {
                description
                {
                    An input iterator pointing to the beginning of the first sequence.
                }
            }
            parameter System.LexicographicalCompare.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Same.I1.ValueType.I2.ValueType.and.Relation.R.I1.ValueType.I2.ValueType.and.Relation.R.I2.ValueType.I1.ValueType.first2
            {
                description
                {
                    An input iterator pointing to the beginning of the second sequence.
                }
            }
            parameter System.LexicographicalCompare.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Same.I1.ValueType.I2.ValueType.and.Relation.R.I1.ValueType.I2.ValueType.and.Relation.R.I2.ValueType.I1.ValueType.last1
            {
                description
                {
                    An input iterator pointing one past the end of the first sequence.
                }
            }
            parameter System.LexicographicalCompare.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Same.I1.ValueType.I2.ValueType.and.Relation.R.I1.ValueType.I2.ValueType.and.Relation.R.I2.ValueType.I1.ValueType.last2
            {
                description
                {
                    An input iterator pointing one past the end of the second sequence.
                }
            }
            parameter System.LexicographicalCompare.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Same.I1.ValueType.I2.ValueType.and.Relation.R.I1.ValueType.I2.ValueType.and.Relation.R.I2.ValueType.I1.ValueType.r
            {
                description
                {
                    An ordering relation.
                }
            }
            returns System.LexicographicalCompare.I1.I2.R.I1.I1.I2.I2.R.where.I1.is.InputIterator.and.I2.is.InputIterator.and.Same.I1.ValueType.I2.ValueType.and.Relation.R.I1.ValueType.I2.ValueType.and.Relation.R.I2.ValueType.I1.ValueType.returnValue
            {
                description
                {
                    Returns true if the first sequence comes lexicographically before the second sequence according to the given ordering relation, false otherwise.
                }
            }
            source <../src/algorithm.pdf>(13, 13);
        }
        function System.LinearInsert.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
            }
            parameter System.LinearInsert.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.first
            {
                description
                {
                }
            }
            parameter System.LinearInsert.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.last
            {
                description
                {
                }
            }
            parameter System.LinearInsert.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                }
            }
        }
        function System.LowerBound.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType
        {
            description
            {
                Finds a position of the first element in a sorted sequence that is greater than or equal to the given value.
            }
            remarks
            {
                Uses a binary search algorithm to search the position.
            }
            example <examples/System.LowerBound.I.T.I.is.ForwardIterator.TotallyOrdered.T.I.ValueType.I.I.T.const.ref.cm>;
            parameter System.LowerBound.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.first
            {
                description
                {
                    A forward iterator pointing to the beginning of a sorted sequence.
                }
            }
            parameter System.LowerBound.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.last
            {
                description
                {
                    A forward iterator pointing one past the end of a sorted sequence.
                }
            }
            parameter System.LowerBound.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.value
            {
                description
                {
                    A value to search.
                }
            }
            returns System.LowerBound.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.returnValue
            {
                description
                {
                    Returns an iterator pointing to the first element in a sorted sequence that is greater than or equal to the given value,
                    if there is one, otherwise returns "\emph{last}".
                }
            }
            source <../src/algorithm.pdf>(4, 4);
        }
        function System.LowerBound.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
                Finds a position of the first element in a sorted sequence that is greater than or equal to the given value according to the given ordering relation.
            }
            remarks
            {
                Uses a binary search algorithm to search the position.
            }
            parameter System.LowerBound.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.first
            {
                description
                {
                    A forward iterator pointing to the beginning of a sorted sequence.
                }
            }
            parameter System.LowerBound.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.last
            {
                description
                {
                    A forward iterator pointing one past the end of a sorted sequence.
                }
            }
            parameter System.LowerBound.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                    An ordering relation.
                }
            }
            parameter System.LowerBound.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.value
            {
                description
                {
                    A value to search.
                }
            }
            returns System.LowerBound.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.returnValue
            {
                description
                {
                    Returns an iterator pointing to the first element in a sorted sequence that is greater than or equal to the given value according to the given ordering relation,
                    if there is one, otherwise returns "\emph{last}".
                }
            }
            source <../src/algorithm.pdf>(4, 4);
        }
        function System.MakePair.T.U.C.R.T.C.R.U.where.T.is.Semiregular.and.U.is.Semiregular
        {
            description
            {
                Returns a pair composed of the given values.
            }
            parameter System.MakePair.T.U.C.R.T.C.R.U.where.T.is.Semiregular.and.U.is.Semiregular.first
            {
                description
                {
                    The first value.
                }
            }
            parameter System.MakePair.T.U.C.R.T.C.R.U.where.T.is.Semiregular.and.U.is.Semiregular.second
            {
                description
                {
                    The second value.
                }
            }
            returns System.MakePair.T.U.C.R.T.C.R.U.where.T.is.Semiregular.and.U.is.Semiregular.returnValue
            {
                description
                {
                    Returns a pair composed of the given values.
                }
            }
        }
        function System.Max.T.C.R.T.C.R.T.where.T.is.LessThanComparable
        {
            description
            {
                Returns the maximum of two values.
            }
            parameter System.Max.T.C.R.T.C.R.T.where.T.is.LessThanComparable.left
            {
                description
                {
                    The first value.
                }
            }
            parameter System.Max.T.C.R.T.C.R.T.where.T.is.LessThanComparable.right
            {
                description
                {
                    The second value.
                }
            }
            returns System.Max.T.C.R.T.C.R.T.where.T.is.LessThanComparable.returnValue
            {
                description
                {
                    If "$right \ge left$" returns "$right$", else returns "$left$".
                }
            }
        }
        function System.MaxElement.I.I.I.where.I.is.ForwardIterator.and.I.ValueType.is.TotallyOrdered
        {
            description
            {
                Returns the position of the first occurrence of the largest element in a sequence of elements.
            }
            example <examples/System.MaxElement.I.I.is.ForwardIterator.I.ValueType.is.TotallyOrdered.I.I.cm>;
            parameter System.MaxElement.I.I.I.where.I.is.ForwardIterator.and.I.ValueType.is.TotallyOrdered.first
            {
                description
                {
                    A forward iterator pointing to the beginning of sequence.
                }
            }
            parameter System.MaxElement.I.I.I.where.I.is.ForwardIterator.and.I.ValueType.is.TotallyOrdered.last
            {
                description
                {
                    A forward iterator pointing one past the end of a sequence.
                }
            }
            returns System.MaxElement.I.I.I.where.I.is.ForwardIterator.and.I.ValueType.is.TotallyOrdered.returnValue
            {
                description
                {
                    Returns the position of the first occurrence of the largest element in a sequence of elements.
                }
            }
            source <../src/algorithm.pdf>(14, 14);
        }
        function System.MaxElement.I.R.I.I.R.where.I.is.ForwardIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
                Returns the position of the first occurrence of the largest element according to the given ordering relation in a sequence of elements.
            }
            parameter System.MaxElement.I.R.I.I.R.where.I.is.ForwardIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.first
            {
                description
                {
                    A forward iterator pointing to the beginning of sequence.
                }
            }
            parameter System.MaxElement.I.R.I.I.R.where.I.is.ForwardIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.last
            {
                description
                {
                    A forward iterator pointing one past the end of a sequence.
                }
            }
            parameter System.MaxElement.I.R.I.I.R.where.I.is.ForwardIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                    An ordering relation.
                }
            }
            returns System.MaxElement.I.R.I.I.R.where.I.is.ForwardIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.returnValue
            {
                description
                {
                    Returns the position of the first occurrence of the largest element according to the given ordering relation in a sequence of elements.
                }
            }
            source <../src/algorithm.pdf>(15, 15);
        }
        function System.MaxValue.I
        {
            description
            {
                Returns the largest value of an integer type.
            }
            returns System.MaxValue.I.returnValue
            {
                description
                {
                    Returns the largest value of an integer type.
                }
            }
        }
        function System.MaxValue.byte
        {
            description
            {
                Returns the maximum value of "\textbf{byte}": 255.
            }
            parameter System.MaxValue.byte.__parameter0
            {
                description
                {
                }
            }
            returns System.MaxValue.byte.returnValue
            {
                description
                {
                    Returns the maximum value of "\textbf{byte}": 255.
                }
            }
        }
        function System.MaxValue.int
        {
            description
            {
                Returns the maximum value of "\textbf{int}": 2147483647.
            }
            parameter System.MaxValue.int.__parameter0
            {
                description
                {
                }
            }
            returns System.MaxValue.int.returnValue
            {
                description
                {
                    Returns the maximum value of "\textbf{int}": 2147483647.
                }
            }
        }
        function System.MaxValue.long
        {
            description
            {
                Returns the maximum value of "\textbf{long}": 9223372036854775807.
            }
            parameter System.MaxValue.long.__parameter0
            {
                description
                {
                }
            }
            returns System.MaxValue.long.returnValue
            {
                description
                {
                    Returns the maximum value of "\textbf{long}": 9223372036854775807.
                }
            }
        }
        function System.MaxValue.sbyte
        {
            description
            {
                Returns the maximum value of "\textbf{sbyte}": 127.
            }
            parameter System.MaxValue.sbyte.__parameter0
            {
                description
                {
                }
            }
            returns System.MaxValue.sbyte.returnValue
            {
                description
                {
                    Returns the maximum value of "\textbf{sbyte}": 127.
                }
            }
        }
        function System.MaxValue.short
        {
            description
            {
                Returns the maximum value of "\textbf{short}": 32767.
            }
            parameter System.MaxValue.short.__parameter0
            {
                description
                {
                }
            }
            returns System.MaxValue.short.returnValue
            {
                description
                {
                    Returns the maximum value of "\textbf{short}": 32767.
                }
            }
        }
        function System.MaxValue.uint
        {
            description
            {
                Returns the maximum value of "\textbf{uint}": 4294967295.
            }
            parameter System.MaxValue.uint.__parameter0
            {
                description
                {
                }
            }
            returns System.MaxValue.uint.returnValue
            {
                description
                {
                    Returns the maximum value of "\textbf{uint}": 4294967295.
                }
            }
        }
        function System.MaxValue.ulong
        {
            description
            {
                Returns the maximum value of "\textbf{ulong}": 18446744073709551615.
            }
            parameter System.MaxValue.ulong.__parameter0
            {
                description
                {
                }
            }
            returns System.MaxValue.ulong.returnValue
            {
                description
                {
                    Returns the maximum value of "\textbf{ulong}": 18446744073709551615.
                }
            }
        }
        function System.MaxValue.ushort
        {
            description
            {
                Returns the maximum value of "\textbf{ushort}": 65535.
            }
            parameter System.MaxValue.ushort.__parameter0
            {
                description
                {
                }
            }
            returns System.MaxValue.ushort.returnValue
            {
                description
                {
                    Returns the maximum value of "\textbf{ushort}": 65535.
                }
            }
        }
        function System.Median.T.C.R.T.C.R.T.C.R.T.where.T.is.TotallyOrdered
        {
            description
            {
                Returns the median of three values.
            }
            parameter System.Median.T.C.R.T.C.R.T.C.R.T.where.T.is.TotallyOrdered.a
            {
                description
                {
                    The first value.
                }
            }
            parameter System.Median.T.C.R.T.C.R.T.C.R.T.where.T.is.TotallyOrdered.b
            {
                description
                {
                    The second value.
                }
            }
            parameter System.Median.T.C.R.T.C.R.T.C.R.T.where.T.is.TotallyOrdered.c
            {
                description
                {
                    The third value.
                }
            }
            returns System.Median.T.C.R.T.C.R.T.C.R.T.where.T.is.TotallyOrdered.returnValue
            {
                description
                {
                    Returns the median of three values.
                }
            }
        }
        function System.Median.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T
        {
            description
            {
                Returns the median of three values according to the given ordering relation.
            }
            parameter System.Median.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.a
            {
                description
                {
                    The first value.
                }
            }
            parameter System.Median.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.b
            {
                description
                {
                    The second value.
                }
            }
            parameter System.Median.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.c
            {
                description
                {
                    The third value.
                }
            }
            parameter System.Median.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.r
            {
                description
                {
                    An ordering relation.
                }
            }
            returns System.Median.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.returnValue
            {
                description
                {
                    Returns the median of three values according to the given ordering relation.
                }
            }
        }
        function System.Min.T.C.R.T.C.R.T.where.T.is.LessThanComparable
        {
            description
            {
                Returns the minimum of two values.
            }
            parameter System.Min.T.C.R.T.C.R.T.where.T.is.LessThanComparable.left
            {
                description
                {
                    The first value.
                }
            }
            parameter System.Min.T.C.R.T.C.R.T.where.T.is.LessThanComparable.right
            {
                description
                {
                    The second value.
                }
            }
            returns System.Min.T.C.R.T.C.R.T.where.T.is.LessThanComparable.returnValue
            {
                description
                {
                    If "$left \le right$" returns "$left$", else returns "$right$".
                }
            }
        }
        function System.MinElement.I.I.I.where.I.is.ForwardIterator.and.I.ValueType.is.TotallyOrdered
        {
            description
            {
                Returns the position of the first occurrence of the smallest element in a sequence of elements.
            }
            example <examples/System.MinElement.I.I.is.ForwardIterator.I.ValueType.is.TotallyOrdered.I.I.cm>;
            parameter System.MinElement.I.I.I.where.I.is.ForwardIterator.and.I.ValueType.is.TotallyOrdered.first
            {
                description
                {
                    A forward iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.MinElement.I.I.I.where.I.is.ForwardIterator.and.I.ValueType.is.TotallyOrdered.last
            {
                description
                {
                    A forward iterator pointing one past the end of a sequence.
                }
            }
            returns System.MinElement.I.I.I.where.I.is.ForwardIterator.and.I.ValueType.is.TotallyOrdered.returnValue
            {
                description
                {
                    Returns the position of the first occurrence of the smallest element in a sequence of elements.
                }
            }
            source <../src/algorithm.pdf>(13, 13);
        }
        function System.MinElement.I.R.I.I.R.where.I.is.ForwardIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
                Returns the position of the first occurrence of the smallest element according to the given ordering relation in a sequence of elements.
            }
            parameter System.MinElement.I.R.I.I.R.where.I.is.ForwardIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.first
            {
                description
                {
                    A forward iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.MinElement.I.R.I.I.R.where.I.is.ForwardIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.last
            {
                description
                {
                    A forward iteraor pointing one past the end of a sequence.
                }
            }
            parameter System.MinElement.I.R.I.I.R.where.I.is.ForwardIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                    An ordering relation.
                }
            }
            returns System.MinElement.I.R.I.I.R.where.I.is.ForwardIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.returnValue
            {
                description
                {
                    Returns the position of the first occurrence of the smallest element according to the given ordering relation in a sequence of elements.
                }
            }
            source <../src/algorithm.pdf>(14, 14);
        }
        function System.MinValue.I
        {
            description
            {
                Returns the smallest value of an integer type.
            }
            returns System.MinValue.I.returnValue
            {
                description
                {
                    Returns the smallest value of an integer type.
                }
            }
        }
        function System.MinValue.byte
        {
            description
            {
                Returns the minimum value of "\textbf{byte}": 0.
            }
            parameter System.MinValue.byte.__parameter0
            {
                description
                {
                }
            }
            returns System.MinValue.byte.returnValue
            {
                description
                {
                    Returns the minimum value of "\textbf{byte}": 0.
                }
            }
        }
        function System.MinValue.int
        {
            description
            {
                Returns the minimum value of "\textbf{int}": -2147483648.
            }
            parameter System.MinValue.int.__parameter0
            {
                description
                {
                }
            }
            returns System.MinValue.int.returnValue
            {
                description
                {
                    Returns the minimum value of "\textbf{int}": -2147483648.
                }
            }
        }
        function System.MinValue.long
        {
            description
            {
                Returns the minimum value of "\textbf{long}": -9223372036854775808.
            }
            parameter System.MinValue.long.__parameter0
            {
                description
                {
                }
            }
            returns System.MinValue.long.returnValue
            {
                description
                {
                    Returns the minimum value of "\textbf{long}": -9223372036854775808.
                }
            }
        }
        function System.MinValue.sbyte
        {
            description
            {
                Returns the minimum value of "\textbf{sbyte}": -128.
            }
            parameter System.MinValue.sbyte.__parameter0
            {
                description
                {
                }
            }
            returns System.MinValue.sbyte.returnValue
            {
                description
                {
                    Returns the minimum value of "\textbf{sbyte}": -128.
                }
            }
        }
        function System.MinValue.short
        {
            description
            {
                Returns the minimum value of "\textbf{short}": -32768.
            }
            parameter System.MinValue.short.__parameter0
            {
                description
                {
                }
            }
            returns System.MinValue.short.returnValue
            {
                description
                {
                    Returns the minimum value of "\textbf{short}": -32768.
                }
            }
        }
        function System.MinValue.uint
        {
            description
            {
                Returns the minimum value of "\textbf{uint}": 0.
            }
            parameter System.MinValue.uint.__parameter0
            {
                description
                {
                }
            }
            returns System.MinValue.uint.returnValue
            {
                description
                {
                    Returns the minimum value of "\textbf{uint}": 0.
                }
            }
        }
        function System.MinValue.ulong
        {
            description
            {
                Returns the minimum value of "\textbf{ulong}": 0.
            }
            parameter System.MinValue.ulong.__parameter0
            {
                description
                {
                }
            }
            returns System.MinValue.ulong.returnValue
            {
                description
                {
                    Returns the minimum value of "\textbf{ulong}": 0.
                }
            }
        }
        function System.MinValue.ushort
        {
            description
            {
                Returns the minimum value of "\textbf{ushort}": 0.
            }
            parameter System.MinValue.ushort.__parameter0
            {
                description
                {
                }
            }
            returns System.MinValue.ushort.returnValue
            {
                description
                {
                    Returns the minimum value of "\textbf{ushort}": 0.
                }
            }
        }
        function System.Move.I.O.I.I.O.where.I.is.InputIterator.and.O.is.OutputIterator.and.O.ValueType.is.I.ValueType.and.I.ValueType.is.MoveAssignable
        {
            description
            {
                Moves a sequence.
            }
            parameter System.Move.I.O.I.I.O.where.I.is.InputIterator.and.O.is.OutputIterator.and.O.ValueType.is.I.ValueType.and.I.ValueType.is.MoveAssignable.begin
            {
                description
                {
                    An input iterator pointing to the beginning of a source sequence.
                }
            }
            parameter System.Move.I.O.I.I.O.where.I.is.InputIterator.and.O.is.OutputIterator.and.O.ValueType.is.I.ValueType.and.I.ValueType.is.MoveAssignable.end
            {
                description
                {
                    An input iterator pointing one past the end of a source sequence.
                }
            }
            parameter System.Move.I.O.I.I.O.where.I.is.InputIterator.and.O.is.OutputIterator.and.O.ValueType.is.I.ValueType.and.I.ValueType.is.MoveAssignable.to
            {
                description
                {
                    An output iterator pointing to the beginning of the target sequence.
                }
            }
            returns System.Move.I.O.I.I.O.where.I.is.InputIterator.and.O.is.OutputIterator.and.O.ValueType.is.I.ValueType.and.I.ValueType.is.MoveAssignable.returnValue
            {
                description
                {
                    Returns an output iterator pointing one past the end of the target sequence.
                }
            }
            source <../src/algorithm.pdf>(2, 2);
        }
        function System.MoveBackward.I.O.I.I.O.where.I.is.BidirectionalIterator.and.O.is.BidirectionalIterator.and.O.ValueType.is.I.ValueType.and.I.ValueType.is.MoveAssignable
        {
            description
            {
                Moves a source sequence to a target sequence starting from the end of the source sequence.
            }
            parameter System.MoveBackward.I.O.I.I.O.where.I.is.BidirectionalIterator.and.O.is.BidirectionalIterator.and.O.ValueType.is.I.ValueType.and.I.ValueType.is.MoveAssignable.begin
            {
                description
                {
                    A bidirectional iterator pointing to the beginning of the source sequence.
                }
            }
            parameter System.MoveBackward.I.O.I.I.O.where.I.is.BidirectionalIterator.and.O.is.BidirectionalIterator.and.O.ValueType.is.I.ValueType.and.I.ValueType.is.MoveAssignable.end
            {
                description
                {
                    A bidirectional iterator pointing one pasth the end of the source sequence.
                }
            }
            parameter System.MoveBackward.I.O.I.I.O.where.I.is.BidirectionalIterator.and.O.is.BidirectionalIterator.and.O.ValueType.is.I.ValueType.and.I.ValueType.is.MoveAssignable.to
            {
                description
                {
                    A bidirectional iterator pointing to the beginning of the target sequence.
                }
            }
            returns System.MoveBackward.I.O.I.I.O.where.I.is.BidirectionalIterator.and.O.is.BidirectionalIterator.and.O.ValueType.is.I.ValueType.and.I.ValueType.is.MoveAssignable.returnValue
            {
                description
                {
                    Returns a bidirectional iterator pointing to the beginning of the target sequence.
                }
            }
            source <../src/algorithm.pdf>(3, 3);
        }
        function System.Next.I.I.int.where.I.is.RandomAccessIterator
        {
            description
            {
                Returns a random access iterator advanced the specified offset.
            }
            parameter System.Next.I.I.int.where.I.is.RandomAccessIterator.i
            {
                description
                {
                    A random access iterator.
                }
            }
            parameter System.Next.I.I.int.where.I.is.RandomAccessIterator.n
            {
                description
                {
                    An offset to advance.
                }
            }
            returns System.Next.I.I.int.where.I.is.RandomAccessIterator.returnValue
            {
                description
                {
                    Returns "$i + n$".
                }
            }
            source <../src/algorithm.pdf>(4, 4);
        }
        function System.Next.I.I.int.where.I.is.ForwardIterator
        {
            description
            {
                Returns a forward iterator advanced the specified number of steps.
            }
            parameter System.Next.I.I.int.where.I.is.ForwardIterator.i
            {
                description
                {
                    A forward iterator.
                }
            }
            parameter System.Next.I.I.int.where.I.is.ForwardIterator.n
            {
                description
                {
                    A non-negative number of steps to advance.
                }
            }
            returns System.Next.I.I.int.where.I.is.ForwardIterator.returnValue
            {
                description
                {
                    Returns a forward iterator advanced the specified number of steps.
                }
            }
            source <../src/algorithm.pdf>(3, 3);
        }
        function System.NextPermutation.I.I.I.where.I.is.BidirectionalIterator.and.I.ValueType.is.LessThanComparable
        {
            description
            {
                Computes the lexicographically next permutation of a sequence of elements.
            }
            example <examples/System.NextPermutation.I.I.is.BidirectionalIterator.I.ValueType.is.LessThanComparable.I.I.cm>;
            parameter System.NextPermutation.I.I.I.where.I.is.BidirectionalIterator.and.I.ValueType.is.LessThanComparable.begin
            {
                description
                {
                    A bidirectional iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.NextPermutation.I.I.I.where.I.is.BidirectionalIterator.and.I.ValueType.is.LessThanComparable.end
            {
                description
                {
                    A bidirectional iterator pointing one past the end of a sequence.
                }
            }
            returns System.NextPermutation.I.I.I.where.I.is.BidirectionalIterator.and.I.ValueType.is.LessThanComparable.returnValue
            {
                description
                {
                    Returns true if the permutation was not last permutation, false otherwise.
                    If the permutation was last, the permutation returned is the lexicographically first permutation of the sequence.
                }
            }
            source <../src/algorithm.pdf>(16, 16);
        }
        function System.NextPermutation.I.R.I.I.R.where.I.is.BidirectionalIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
                Computes the lexicographically next permutation of a sequence of elements according to the given ordering relation.
            }
            parameter System.NextPermutation.I.R.I.I.R.where.I.is.BidirectionalIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.begin
            {
                description
                {
                    A bidirectional iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.NextPermutation.I.R.I.I.R.where.I.is.BidirectionalIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.end
            {
                description
                {
                    A bidirectional iterator pointing one past the end of a sequence.
                }
            }
            parameter System.NextPermutation.I.R.I.I.R.where.I.is.BidirectionalIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                    An ordering relation.
                }
            }
            returns System.NextPermutation.I.R.I.I.R.where.I.is.BidirectionalIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.returnValue
            {
                description
                {
                    Returns true if the permutation was not last permutation, false otherwise.
                    If the permutation was last, the permutation returned is the lexicographically first permutation of the sequence.
                }
            }
            source <../src/algorithm.pdf>(16, 16);
        }
        function System.Now
        {
            description
            {
                Returns current time point value from computer's real time clock.
            }
            returns System.Now.returnValue
            {
                description
                {
                    Returns number of nanoseconds elapsed since 1.1.1970 as a time point value.
                }
            }
        }
        function System.ParseBool.C.R.System.String
        {
            description
            {
                Parses a Boolean value ``true'' or ``false'' from the given string and returns it.
            }
            parameter System.ParseBool.C.R.System.String.s
            {
                description
                {
                    A string to parse.
                }
            }
            returns System.ParseBool.C.R.System.String.returnValue
            {
                description
                {
                    Returns true if "$s$" contains ``true'', false if "$s$" contains ``false''.
                    Otherwise throws System.ConversionException.
                }
            }
        }
        function System.ParseBool.C.R.System.String.R.bool
        {
            description
            {
                Parses a Boolean value ``true'' or ``false'' from the given string and returns true if the parsing was successful, false if not.
            }
            parameter System.ParseBool.C.R.System.String.R.bool.b
            {
                description
                {
                    If "$s$" contains ``true'' b is set to true, if 
                    "$s$" contains ``false'' b is set to false.
                }
            }
            parameter System.ParseBool.C.R.System.String.R.bool.s
            {
                description
                {
                    A string to parse.
                }
            }
            returns System.ParseBool.C.R.System.String.R.bool.returnValue
            {
                description
                {
                    Returns true if the parsing was successful, false if not.
                }
            }
        }
        function System.ParseDate.C.R.System.String
        {
            description
            {
                Parses a date from the given string and returns it.
            }
            parameter System.ParseDate.C.R.System.String.s
            {
                description
                {
                    A string to parse.
                }
            }
            returns System.ParseDate.C.R.System.String.returnValue
            {
                description
                {
                    Returns the parsed date value if the parsing was successful.
                    Otherwise throws System.ConversionException.
                }
            }
        }
        function System.ParseDouble.C.R.System.String
        {
            description
            {
                Parses a "\textbf{double}" value from the given string and returns it.
            }
            parameter System.ParseDouble.C.R.System.String.s
            {
                description
                {
                    A string to parse.
                }
            }
            returns System.ParseDouble.C.R.System.String.returnValue
            {
                description
                {
                    Returns the parsed "\textbf{double}" value if the parsing was successful.
                    Otherwise throws System.ConversionException.
                }
            }
        }
        function System.ParseDouble.C.R.System.String.R.double
        {
            description
            {
                Parses a "\textbf{double}" value from the given string and returns true if the parsing was successful, false if not.
            }
            parameter System.ParseDouble.C.R.System.String.R.double.s
            {
                description
                {
                    A string to parse.
                }
            }
            parameter System.ParseDouble.C.R.System.String.R.double.x
            {
                description
                {
                    A "\textbf{double}" parsed from "\emph{s}".
                }
            }
            returns System.ParseDouble.C.R.System.String.R.double.returnValue
            {
                description
                {
                    Returns true if the parsing was successful, false if not.
                }
            }
        }
        function System.ParseHex.C.R.System.String
        {
            description
            {
                Parses a hexadecimal value from a string.
            }
            parameter System.ParseHex.C.R.System.String.s
            {
                description
                {
                    A string to parse.
                }
            }
            returns System.ParseHex.C.R.System.String.returnValue
            {
                description
                {
                    Returns the parsed hexadecimal value if the parsing was successful,
                    otherwise throws System.ConversionException.
                }
            }
        }
        function System.ParseHex.C.R.System.String.R.System.uhuge
        {
            description
            {
                Parses a hexadecimal 128-bit value from a string and returns true, if the parsing was successful.
            }
            parameter System.ParseHex.C.R.System.String.R.System.uhuge.hex
            {
                description
                {
                    Parsed 128-bit value.
                }
            }
            parameter System.ParseHex.C.R.System.String.R.System.uhuge.s
            {
                description
                {
                    A string to parse.
                }
            }
            returns System.ParseHex.C.R.System.String.R.System.uhuge.returnValue
            {
                description
                {
                    Returns true, if the parsing was successful, false otherwise.
                }
            }
        }
        function System.ParseHex.C.R.System.String.R.ulong
        {
            description
            {
                Parses a hexadecimal value from a string and returns true if the parsing was successful.
            }
            parameter System.ParseHex.C.R.System.String.R.ulong.hex
            {
                description
                {
                    Parsed value.
                }
            }
            parameter System.ParseHex.C.R.System.String.R.ulong.s
            {
                description
                {
                    A string to parse.
                }
            }
            returns System.ParseHex.C.R.System.String.R.ulong.returnValue
            {
                description
                {
                    Returns true, if the parsing was successful, false otherwise.
                }
            }
        }
        function System.ParseHexUHuge.C.R.System.String
        {
            description
            {
                Parses a 128-bit decimal value from a string.
            }
            parameter System.ParseHexUHuge.C.R.System.String.s
            {
                description
                {
                    A string to parse.
                }
            }
            returns System.ParseHexUHuge.C.R.System.String.returnValue
            {
                description
                {
                    Returns the parsed 128-bit decimal value if the parsing was successful,
                    otherwise throws System.ConversionException.
                }
            }
        }
        function System.ParseInt.C.R.System.String
        {
            description
            {
                Parses an "\textbf{int}" from the given string and returns it.
            }
            parameter System.ParseInt.C.R.System.String.s
            {
                description
                {
                    A string to parse.
                }
            }
            returns System.ParseInt.C.R.System.String.returnValue
            {
                description
                {
                    Returns the parsed "\textbf{int}" value if the parsing was successful.
                    Otherwise throws System.ConversionException.
                }
            }
        }
        function System.ParseInt.C.R.System.String.R.int
        {
            description
            {
                Parses an "\textbf{int}" value from the given string and returns true if the parsing was successful, false if not.
            }
            parameter System.ParseInt.C.R.System.String.R.int.s
            {
                description
                {
                    A string to parse.
                }
            }
            parameter System.ParseInt.C.R.System.String.R.int.x
            {
                description
                {
                    An "\textbf{int}" parsed from "\emph{s}".
                }
            }
            returns System.ParseInt.C.R.System.String.R.int.returnValue
            {
                description
                {
                    Returns true if the parsing was successful, false if not.
                }
            }
        }
        function System.ParseUHuge.C.R.System.String
        {
            description
            {
                Parses a decimal 128-bit value from a string.
            }
            parameter System.ParseUHuge.C.R.System.String.s
            {
                description
                {
                    A string to parse.
                }
            }
            returns System.ParseUHuge.C.R.System.String.returnValue
            {
                description
                {
                    Returns parsed 128-bit decimal value if parsing was successful,
                    otherwise throws System.ConversionException.
                }
            }
        }
        function System.ParseUHuge.C.R.System.String.R.System.uhuge
        {
            description
            {
                Parses a decimal 128-bit value from a string and returns true, if the parsing was successful.
            }
            parameter System.ParseUHuge.C.R.System.String.R.System.uhuge.s
            {
                description
                {
                    A string to parse.
                }
            }
            parameter System.ParseUHuge.C.R.System.String.R.System.uhuge.x
            {
                description
                {
                    Parsed 128-bit value.
                }
            }
            returns System.ParseUHuge.C.R.System.String.R.System.uhuge.returnValue
            {
                description
                {
                    Returns true, if the parsing was successful, false otherwise.
                }
            }
        }
        function System.ParseUInt.C.R.System.String
        {
            description
            {
                Parses an "\textbf{uint}" from the given string and returns it.
            }
            parameter System.ParseUInt.C.R.System.String.s
            {
                description
                {
                    A string to parse.
                }
            }
            returns System.ParseUInt.C.R.System.String.returnValue
            {
                description
                {
                    Returns the parsed "\textbf{uint}" value if the parsing was successful.
                    Otherwise throws System.ConversionException.
                }
            }
        }
        function System.ParseUInt.C.R.System.String.R.uint
        {
            description
            {
                Parses an "\textbf{uint}" value from the given string and returns true if the parsing was successful, false if not.
            }
            parameter System.ParseUInt.C.R.System.String.R.uint.s
            {
                description
                {
                    A string to parse.
                }
            }
            parameter System.ParseUInt.C.R.System.String.R.uint.x
            {
                description
                {
                    An "\textbf{uint}" parsed from "\emph{s}".
                }
            }
            returns System.ParseUInt.C.R.System.String.R.uint.returnValue
            {
                description
                {
                    Returns true if the parsing was successful, false if not.
                }
            }
        }
        function System.ParseULong.C.R.System.String
        {
            description
            {
                Parses an "\textbf{ulong}" from the given string and returns it.
            }
            parameter System.ParseULong.C.R.System.String.s
            {
                description
                {
                    A string to parse.
                }
            }
            returns System.ParseULong.C.R.System.String.returnValue
            {
                description
                {
                    Returns the parsed "\textbf{ulong}" value if the parsing was successful.
                    Otherwise throws System.ConversionException.
                }
            }
        }
        function System.ParseULong.C.R.System.String.R.ulong
        {
            description
            {
                Parses an "\textbf{ulong}" value from the given string and returns true if the parsing was successful, false if not.
            }
            parameter System.ParseULong.C.R.System.String.R.ulong.s
            {
                description
                {
                    A string to parse.
                }
            }
            parameter System.ParseULong.C.R.System.String.R.ulong.x
            {
                description
                {
                    An "\textbf{ulong}" parsed from "\emph{s}".
                }
            }
            returns System.ParseULong.C.R.System.String.R.ulong.returnValue
            {
                description
                {
                    Returns true if the parsing was successful, false if not.
                }
            }
        }
        function System.PartialQuickSort.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
            }
            parameter System.PartialQuickSort.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.begin
            {
                description
                {
                }
            }
            parameter System.PartialQuickSort.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.end
            {
                description
                {
                }
            }
            parameter System.PartialQuickSort.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                }
            }
        }
        function System.PrevPermutation.I.I.I.where.I.is.BidirectionalIterator.and.I.ValueType.is.LessThanComparable
        {
            description
            {
                Computes the lexicographically previous permutation of a sequence of elements.
            }
            parameter System.PrevPermutation.I.I.I.where.I.is.BidirectionalIterator.and.I.ValueType.is.LessThanComparable.begin
            {
                description
                {
                    A bidirectional iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.PrevPermutation.I.I.I.where.I.is.BidirectionalIterator.and.I.ValueType.is.LessThanComparable.end
            {
                description
                {
                    A bidirectional iterator pointing one past the end of a sequence.
                }
            }
            returns System.PrevPermutation.I.I.I.where.I.is.BidirectionalIterator.and.I.ValueType.is.LessThanComparable.returnValue
            {
                description
                {
                    Returns true if the permutation was not first permutation, false otherwise.
                    If the permutation was first, the permutation returned is the lexicographically last permutation of the sequence.
                }
            }
        }
        function System.PrevPermutation.I.R.I.I.R.where.I.is.BidirectionalIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
                Computes the lexicographically previous permutation according to the given ordering relation of a sequence of elements.
            }
            parameter System.PrevPermutation.I.R.I.I.R.where.I.is.BidirectionalIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.begin
            {
                description
                {
                    A bidirectional iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.PrevPermutation.I.R.I.I.R.where.I.is.BidirectionalIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.end
            {
                description
                {
                    A bidirectional iterator pointing one past the end of a sequence.
                }
            }
            parameter System.PrevPermutation.I.R.I.I.R.where.I.is.BidirectionalIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                    An ordering relation.
                }
            }
            returns System.PrevPermutation.I.R.I.I.R.where.I.is.BidirectionalIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.returnValue
            {
                description
                {
                    Returns true if the permutation was not first permutation, false otherwise.
                    If the permutation was first, the permutation returned is the lexicographically last permutation of the sequence.
                }
            }
        }
        function System.PtrCast.U.T.C.R.System.SharedPtr.T
        {
            description
            {
                Casts a shared pointer.
            }
            example <examples/System.PtrCast.U.T.System.SharedPtr.T.const.ref.cm>;
            parameter System.PtrCast.U.T.C.R.System.SharedPtr.T.from
            {
                description
                {
                    A shared pointer to cast from.
                }
            }
            returns System.PtrCast.U.T.C.R.System.SharedPtr.T.returnValue
            {
                description
                {
                    Returns the shared pointer casted to "$SharedPtr<U>$".
                }
            }
        }
        function System.Rand
        {
            description
            {
                Returns a pseudorandom number generated by the Mersenne Twister pseudorandom number generator System.MT.
            }
            remarks
            {
                The returned pseudorandom number is in range 0..System.MaxValue.uint inclusive.
            }
            returns System.Rand.returnValue
            {
                description
                {
                    Returns a pseudorandom number generated by the Mersenne Twister pseudorandom number generator System.MT.
                }
            }
        }
        function System.RandomNumber.uint
        {
            description
            {
                Returns a pseudorandom number in range 0..System.RandomNumber.uint.n - 1 inclusive.
            }
            remarks
            {
                Uses System.Rand function to generate a pseudorandom number and returns that number modulo System.RandomNumber.uint.n.
            }
            parameter System.RandomNumber.uint.n
            {
                description
                {
                    Upper bound for the generated pseudorandom number.
                }
            }
            returns System.RandomNumber.uint.returnValue
            {
                description
                {
                    Returns a pseudorandom number in range 0..System.RandomNumber.uint.n - 1 inclusive.
                }
            }
        }
        function System.RandomShuffle.I.I.I.where.I.is.RandomAccessIterator
        {
            description
            {
                Computes a random permutation of a random access sequence.
            }
            parameter System.RandomShuffle.I.I.I.where.I.is.RandomAccessIterator.begin
            {
                description
                {
                    An iterator pointing to the beginning of the sequence.
                }
            }
            parameter System.RandomShuffle.I.I.I.where.I.is.RandomAccessIterator.end
            {
                description
                {
                    An iterator pointing one past the end of the sequence.
                }
            }
        }
        function System.Reverse.I.I.I.where.I.is.BidirectionalIterator
        {
            description
            {
                Reverses a sequence.
            }
            parameter System.Reverse.I.I.I.where.I.is.BidirectionalIterator.begin
            {
                description
                {
                    A bidirectional iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.Reverse.I.I.I.where.I.is.BidirectionalIterator.end
            {
                description
                {
                    A bidirectional iterator pointing one past the end of a sequence.
                }
            }
            source <../src/algorithm.pdf>(2, 2);
        }
        function System.Reverse.I.I.I.where.I.is.RandomAccessIterator
        {
            description
            {
                Reverses a sequence.
            }
            example <examples/System.Reverse.I.I.is.RandomAccessIterator.I.I.cm>;
            parameter System.Reverse.I.I.I.where.I.is.RandomAccessIterator.begin
            {
                description
                {
                    A random access iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.Reverse.I.I.I.where.I.is.RandomAccessIterator.end
            {
                description
                {
                    A random access iterator pointing one past the end of a sequence.
                }
            }
            source <../src/algorithm.pdf>(1, 1);
        }
        function System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator
        {
            description
            {
                Reverses a sequence until the given 
                System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.middle iterator
                is hit.
            }
            remarks
            {
                While System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.first and
                System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.last differ from
                System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.middle,
                decrements System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.last, 
                swaps elements pointed by 
                System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.first and 
                System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.last, and 
                increments 
                System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.first.
                Then returns a pair made of 
                System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.first and 
                System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.last.
            }
            parameter System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.first
            {
                description
                {
                    A bidirectional iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.last
            {
                description
                {
                    A bidirectional iterator pointing one past the end of a sequence.
                }
            }
            parameter System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.middle
            {
                description
                {
                    A bidirectional iterator pointing a position between 
                    System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.first and
                    System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.last inclusive.
                }
            }
            returns System.ReverseUntil.I.I.I.I.where.I.is.BidirectionalIterator.returnValue
            {
                description
                {
                    Returns a pair of iterators. See remarks section.
                }
            }
        }
        function System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator
        {
            description
            {
                Rotates a sequence with respect to a 
                System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator.middle iterator
                and returns an iterator pointing to the new middle.
            }
            remarks
            {
                Shifts a sequence of elements pointed by iterators 
                System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator.first and
                System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator.middle
                (where the System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator.middle 
                iterator points one past the end of that range) to the end of the 
                whole sequence System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator.first 
                and System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator.last.
            }
            parameter System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator.first
            {
                description
                {
                    A bidirectional iterator pointing to the beginning of a sequence.
                    
                }
            }
            parameter System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator.last
            {
                description
                {
                    A bidirectional iterator pointing one past the end of a sequence.
                }
            }
            parameter System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator.middle
            {
                description
                {
                    An iterator pointing to a position between 
                    System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator.first and 
                    System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator.last incusive.
                }
            }
            returns System.Rotate.I.I.I.I.where.I.is.BidirectionalIterator.returnValue
            {
                description
                {
                    Returns an iterator pointing to the new middle.
                }
            }
        }
        function System.Rvalue.T.RR.T
        {
            description
            {
                Converts an argument to an rvalue so that it can be moved.
            }
            example <examples/System.Rvalue.cm>;
            parameter System.Rvalue.T.RR.T.x
            {
                description
                {
                    A argument to convert.
                }
            }
            returns System.Rvalue.T.RR.T.returnValue
            {
                description
                {
                    Returns an rvalue reference of the argument.
                }
            }
        }
        function System.Select_0_2.T.R.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T
        {
            description
            {
                Returns the smaller of two values according to the given ordering relation.
            }
            parameter System.Select_0_2.T.R.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.a
            {
                description
                {
                    The first value.
                }
            }
            parameter System.Select_0_2.T.R.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.b
            {
                description
                {
                    The second value.
                }
            }
            parameter System.Select_0_2.T.R.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.r
            {
                description
                {
                    An ordering relation.
                }
            }
            returns System.Select_0_2.T.R.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.returnValue
            {
                description
                {
                    Returns the smaller of two values according to the given ordering relation.
                }
            }
        }
        function System.Select_0_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T
        {
            description
            {
                Returns the smallest of tree values according to the given ordering relation.
            }
            parameter System.Select_0_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.a
            {
                description
                {
                    The first value.
                }
            }
            parameter System.Select_0_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.b
            {
                description
                {
                    The second value.
                }
            }
            parameter System.Select_0_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.c
            {
                description
                {
                    The third value.
                }
            }
            parameter System.Select_0_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.r
            {
                description
                {
                    An ordering relation.
                }
            }
            returns System.Select_0_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.returnValue
            {
                description
                {
                    Returns the smallest of tree values according to the given ordering relation.
                }
            }
        }
        function System.Select_1_2.T.R.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T
        {
            description
            {
                Returns the larger of two values according to the given ordering relation.
            }
            parameter System.Select_1_2.T.R.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.a
            {
                description
                {
                    The first value.
                }
            }
            parameter System.Select_1_2.T.R.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.b
            {
                description
                {
                    The second value.
                }
            }
            parameter System.Select_1_2.T.R.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.r
            {
                description
                {
                    An ordering relation.
                }
            }
            returns System.Select_1_2.T.R.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.returnValue
            {
                description
                {
                    Returns the larger of two values according to the given ordering relation.
                }
            }
        }
        function System.Select_1_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T
        {
            description
            {
                Returns the median of three values according to the given ordering relation.
            }
            parameter System.Select_1_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.a
            {
                description
                {
                    The first value.
                }
            }
            parameter System.Select_1_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.b
            {
                description
                {
                    The second value.
                }
            }
            parameter System.Select_1_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.c
            {
                description
                {
                    The third value.
                }
            }
            parameter System.Select_1_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.r
            {
                description
                {
                    An ordering relation.
                }
            }
            returns System.Select_1_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.returnValue
            {
                description
                {
                    Returns the median of three values according to the given ordering relation.
                }
            }
        }
        function System.Select_1_3_ab.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T
        {
            description
            {
                Returns the median of three values when the first two are in increasing order according to the given ordering relation.
            }
            parameter System.Select_1_3_ab.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.a
            {
                description
                {
                    The first value.
                }
            }
            parameter System.Select_1_3_ab.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.b
            {
                description
                {
                    The second value.
                }
            }
            parameter System.Select_1_3_ab.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.c
            {
                description
                {
                    The third value.
                }
            }
            parameter System.Select_1_3_ab.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.r
            {
                description
                {
                    An ordering relation.
                }
            }
            returns System.Select_1_3_ab.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.returnValue
            {
                description
                {
                    Returns the median of three values when the first two are in increasing order according to the given ordering relation.
                }
            }
        }
        function System.Select_2_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T
        {
            description
            {
                Returns the largest of three values according to the given ordering relation.
            }
            parameter System.Select_2_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.a
            {
                description
                {
                    The first value.
                }
            }
            parameter System.Select_2_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.b
            {
                description
                {
                    The second value.
                }
            }
            parameter System.Select_2_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.c
            {
                description
                {
                    The third value.
                }
            }
            parameter System.Select_2_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.r
            {
                description
                {
                    An ordering relation.
                }
            }
            returns System.Select_2_3.T.R.C.R.T.C.R.T.C.R.T.R.where.T.is.Semiregular.and.R.is.Relation.and.R.Domain.is.T.returnValue
            {
                description
                {
                    Returns the largest of three values according to the given ordering relation.
                }
            }
        }
        function System.Sort.C.R.C.where.C.is.ForwardContainer.and.C.Iterator.ValueType.is.TotallyOrdered
        {
            description
            {
                Sorts the elements of a forward container to increasing order.
            }
            remarks
            {
                First the elements from the forward container are copied to a System.Collections.List.T,
                then the System.Collections.List.T is sorted,
                and finally the elements from the System.Collections.List.T are copied back to the forward container.
            }
            parameter System.Sort.C.R.C.where.C.is.ForwardContainer.and.C.Iterator.ValueType.is.TotallyOrdered.c
            {
                description
                {
                    A forward container,
                }
            }
            source <../src/algorithm.pdf>(12, 12);
        }
        function System.Sort.C.R.C.where.C.is.RandomAccessContainer.and.C.Iterator.ValueType.is.TotallyOrdered
        {
            description
            {
                Sorts the elements of a random access container to increasing order.
            }
            example <examples/System.Sort.C.C.is.RandomAccessContainer.C.Iterator.ValueType.is.TotallyOrdered.C.ref.cm>;
            parameter System.Sort.C.R.C.where.C.is.RandomAccessContainer.and.C.Iterator.ValueType.is.TotallyOrdered.c
            {
                description
                {
                    A random access container.
                }
            }
            source <../src/algorithm.pdf>(12, 12);
        }
        function System.Sort.C.R.R.C.R.where.C.is.ForwardContainer.and.R.is.Relation.and.R.Domain.is.C.Iterator.ValueType
        {
            description
            {
                Sorts the elements of a forward container to order according to the given ordering relation.
            }
            remarks
            {
                First the elements from the forward container are copied to a System.Collections.List.T,
                then the System.Collections.List.T is sorted,
                and finally the elements from the System.Collections.List.T are copied back to the forward container.
            }
            parameter System.Sort.C.R.R.C.R.where.C.is.ForwardContainer.and.R.is.Relation.and.R.Domain.is.C.Iterator.ValueType.c
            {
                description
                {
                    A forward container.
                }
            }
            parameter System.Sort.C.R.R.C.R.where.C.is.ForwardContainer.and.R.is.Relation.and.R.Domain.is.C.Iterator.ValueType.r
            {
                description
                {
                    An ordering relation.
                }
            }
        }
        function System.Sort.C.R.R.C.R.where.C.is.RandomAccessContainer.and.R.is.Relation.and.R.Domain.is.C.Iterator.ValueType
        {
            description
            {
                Sorts the elements of a random access container to order according to the given ordering relation.
            }
            example <examples/System.Sort.C.R.C.is.RandomAccessContainer.R.is.Relation.R.Domain.is.C.Iterator.ValueType.C.ref.R.cm>;
            parameter System.Sort.C.R.R.C.R.where.C.is.RandomAccessContainer.and.R.is.Relation.and.R.Domain.is.C.Iterator.ValueType.c
            {
                description
                {
                    A random access container.
                }
            }
            parameter System.Sort.C.R.R.C.R.where.C.is.RandomAccessContainer.and.R.is.Relation.and.R.Domain.is.C.Iterator.ValueType.r
            {
                description
                {
                    An ordering relation.
                }
            }
            source <../src/algorithm.pdf>(11, 11);
        }
        function System.Sort.I.I.I.where.I.is.RandomAccessIterator.and.I.ValueType.is.TotallyOrdered
        {
            description
            {
                Sorts the elements of a sequence to increasing order.
            }
            parameter System.Sort.I.I.I.where.I.is.RandomAccessIterator.and.I.ValueType.is.TotallyOrdered.begin
            {
                description
                {
                    A random access iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.Sort.I.I.I.where.I.is.RandomAccessIterator.and.I.ValueType.is.TotallyOrdered.end
            {
                description
                {
                    A random access iterator pointing one past the end of a sequence.
                }
            }
            source <../src/algorithm.pdf>(12, 12);
        }
        function System.Sort.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
                Sorts the elements of a sequence to order according to the given ordering relation.
            }
            parameter System.Sort.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.begin
            {
                description
                {
                    A random access iterator pointing to the beginning of a sequence.
                }
            }
            parameter System.Sort.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.end
            {
                description
                {
                    A random access iterator pointing one past the end of a sequence.
                }
            }
            parameter System.Sort.I.R.I.I.R.where.I.is.RandomAccessIterator.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                    An ordering relation.
                }
            }
            source <../src/algorithm.pdf>(11, 11);
        }
        function System.Swap.T.R.T.R.T.where.T.is.MoveConstructible.and.T.is.MoveAssignable.and.T.is.Destructible
        {
            description
            {
                Exchanges two values.
            }
            remarks
            {
                The values are converted to rvalues using System.Rvalue.T.T.rr function and exchanged by moving them.
            }
            parameter System.Swap.T.R.T.R.T.where.T.is.MoveConstructible.and.T.is.MoveAssignable.and.T.is.Destructible.left
            {
                description
                {
                    The first value.
                }
            }
            parameter System.Swap.T.R.T.R.T.where.T.is.MoveConstructible.and.T.is.MoveAssignable.and.T.is.Destructible.right
            {
                description
                {
                    The second value.
                }
            }
            source <../src/algorithm.pdf>(1, 1);
        }
        function System.ToHexString.System.uhuge
        {
            description
            {
                Returns a 128-bit value converted to hexadecimal representation.
            }
            parameter System.ToHexString.System.uhuge.x
            {
                description
                {
                    A 128-bit value to convert.
                }
            }
            returns System.ToHexString.System.uhuge.returnValue
            {
                description
                {
                    A hexadecimal string.
                }
            }
        }
        function System.ToHexString.U.U.where.U.is.UnsignedInteger.and.ExplicitlyConvertible.U.byte
        {
            description
            {
                Converts an unsigned integer value to hexadecimal string representation.
            }
            parameter System.ToHexString.U.U.where.U.is.UnsignedInteger.and.ExplicitlyConvertible.U.byte.x
            {
                description
                {
                    An unsigned integer value.
                }
            }
            returns System.ToHexString.U.U.where.U.is.UnsignedInteger.and.ExplicitlyConvertible.U.byte.returnValue
            {
                description
                {
                    Returns "$x$" converted to hexadecimal string representation.
                }
            }
            source <../src/convert.pdf>(4, 4);
        }
        function System.ToHexString.byte
        {
            description
            {
                Converts a "\textbf{byte}" to hexadecimal string representation.
            }
            parameter System.ToHexString.byte.b
            {
                description
                {
                    A "\textbf{byte}".
                }
            }
            returns System.ToHexString.byte.returnValue
            {
                description
                {
                    Returns "$b$" converted to hexadecimal string representation.
                }
            }
            source <../src/convert.pdf>(4, 4);
        }
        function System.ToHexString.uint
        {
            description
            {
                Converts an "\textbf{uint}" to hexadecimal string representation.
            }
            parameter System.ToHexString.uint.u
            {
                description
                {
                    An "\textbf{uint}".
                }
            }
            returns System.ToHexString.uint.returnValue
            {
                description
                {
                    Returns "$u$" converted to hexadecimal string representation.
                }
            }
            source <../src/convert.pdf>(4, 4);
        }
        function System.ToHexString.ulong
        {
            description
            {
                Converts an "\textbf{ulong}" to hexadecimal string representation.
            }
            parameter System.ToHexString.ulong.u
            {
                description
                {
                    An "\textbf{ulong}".
                }
            }
            returns System.ToHexString.ulong.returnValue
            {
                description
                {
                    Returns "$u$" converted to hexadecimal string representation.
                }
            }
            source <../src/convert.pdf>(4, 4);
        }
        function System.ToHexString.ushort
        {
            description
            {
                Converts an "\textbf{ushort}" to hexadecimal string representation.
            }
            parameter System.ToHexString.ushort.u
            {
                description
                {
                    An "\textbf{ushort}".
                }
            }
            returns System.ToHexString.ushort.returnValue
            {
                description
                {
                    Returns "$u$" converted to hexadecimal string representation.
                }
            }
            source <../src/convert.pdf>(4, 4);
        }
        function System.ToLower.C.R.System.String
        {
            description
            {
                Converts a string to lower case.
            }
            parameter System.ToLower.C.R.System.String.s
            {
                description
                {
                    A string.
                }
            }
            returns System.ToLower.C.R.System.String.returnValue
            {
                description
                {
                    Returns "$s$" converted to lower case.
                }
            }
            source <../src/string.pdf>(9, 9);
        }
        function System.ToString.I.U.I.where.I.is.SignedInteger.and.U.is.UnsignedInteger.and.ExplicitlyConvertible.I.U.and.ExplicitlyConvertible.U.byte
        {
            description
            {
                Converts a signed integer value to string representation.
            }
            parameter System.ToString.I.U.I.where.I.is.SignedInteger.and.U.is.UnsignedInteger.and.ExplicitlyConvertible.I.U.and.ExplicitlyConvertible.U.byte.x
            {
                description
                {
                    A signed integer value.
                }
            }
            returns System.ToString.I.U.I.where.I.is.SignedInteger.and.U.is.UnsignedInteger.and.ExplicitlyConvertible.I.U.and.ExplicitlyConvertible.U.byte.returnValue
            {
                description
                {
                    Returns "$x$" converted to string representation.
                }
            }
            source <../src/convert.pdf>(1, 1);
        }
        function System.ToString.System.Date
        {
            description
            {
                Converts a System.Date to a string representation.
            }
            parameter System.ToString.System.Date.date
            {
                description
                {
                    A date to convert.
                }
            }
            returns System.ToString.System.Date.returnValue
            {
                description
                {
                    Returns a string "YYYY-MM-DD" where YYYY is
                    year of date in four digits, MM is month of 
                    date in two digits and DD is day of date in
                    two digits.
                }
            }
        }
        function System.ToString.System.uhuge
        {
            description
            {
                Converts a 128-bit value to string representation.
            }
            parameter System.ToString.System.uhuge.x
            {
                description
                {
                    A 128-bit value.
                }
            }
            returns System.ToString.System.uhuge.returnValue
            {
                description
                {
                    Returns "$x$" converted to string.
                }
            }
        }
        function System.ToString.U.U.where.U.is.UnsignedInteger.and.ExplicitlyConvertible.U.byte
        {
            description
            {
                Converts an unsigned integer value to string representation.
            }
            parameter System.ToString.U.U.where.U.is.UnsignedInteger.and.ExplicitlyConvertible.U.byte.x
            {
                description
                {
                    An unsigned integer value.
                }
            }
            returns System.ToString.U.U.where.U.is.UnsignedInteger.and.ExplicitlyConvertible.U.byte.returnValue
            {
                description
                {
                    Returns "$x$" converted to string representation.
                }
            }
            source <../src/convert.pdf>(2, 2);
        }
        function System.ToString.bool
        {
            description
            {
                Converts a Boolean value to string representation.
            }
            parameter System.ToString.bool.b
            {
                description
                {
                    A Boolean value.
                }
            }
            returns System.ToString.bool.returnValue
            {
                description
                {
                    If "$b$" returns ``true'' else returns ``false''.
                }
            }
            source <../src/convert.pdf>(3, 3);
        }
        function System.ToString.byte
        {
            description
            {
                Converts a "\textbf{byte}" to string representation.
            }
            parameter System.ToString.byte.x
            {
                description
                {
                    A "\textbf{byte}".
                }
            }
            returns System.ToString.byte.returnValue
            {
                description
                {
                    Returns a "\textbf{byte}" converted to string representation.
                }
            }
            source <../src/convert.pdf>(2, 2);
        }
        function System.ToString.char
        {
            description
            {
                Converts a character to string representation.
            }
            parameter System.ToString.char.c
            {
                description
                {
                    A character.
                }
            }
            returns System.ToString.char.returnValue
            {
                description
                {
                    Returns "$c$" converted to string representation.
                }
            }
            source <../src/convert.pdf>(3, 3);
        }
        function System.ToString.double
        {
            description
            {
                Converts a "\textbf{double}" to string representation.
            }
            remarks
            {
                The maximum number of decimal places in the conversion is 15.
            }
            parameter System.ToString.double.x
            {
                description
                {
                    A "\textbf{double}".
                }
            }
            returns System.ToString.double.returnValue
            {
                description
                {
                    Returns "$x$" converted to string representation.
                }
            }
            source <../src/convert.pdf>(3, 3);
        }
        function System.ToString.double.int
        {
            description
            {
                Converts a "\textbf{double}" to string representation using the given maximum number of decimal places.
            }
            parameter System.ToString.double.int.maxNumDecimals
            {
                description
                {
                    Maximum number of decimal digits.
                }
            }
            parameter System.ToString.double.int.x
            {
                description
                {
                    A "\textbf{double}".
                }
            }
            returns System.ToString.double.int.returnValue
            {
                description
                {
                    Returns "$x$" converted to string representation using the given maximum number of decimal places.
                }
            }
            source <../src/convert.pdf>(3, 3);
        }
        function System.ToString.int
        {
            description
            {
                Converts an "\textbf{int}" to string representation.
            }
            parameter System.ToString.int.x
            {
                description
                {
                    An "\textbf{int}".
                }
            }
            returns System.ToString.int.returnValue
            {
                description
                {
                    Returns "$x$" converted to string representation.
                }
            }
            source <../src/convert.pdf>(2, 2);
        }
        function System.ToString.long
        {
            description
            {
                Converts a "\textbf{long}" to string representation.
            }
            parameter System.ToString.long.x
            {
                description
                {
                    A "\textbf{long}".
                }
            }
            returns System.ToString.long.returnValue
            {
                description
                {
                    Returns "$x$" converted to string representation.
                }
            }
            source <../src/convert.pdf>(2, 2);
        }
        function System.ToString.sbyte
        {
            description
            {
                Converts an "\textbf{sbyte}" to string representation.
            }
            parameter System.ToString.sbyte.x
            {
                description
                {
                    An "\textbf{sbyte}".
                }
            }
            returns System.ToString.sbyte.returnValue
            {
                description
                {
                    Returns "$x$" converted to string representation.
                }
            }
            source <../src/convert.pdf>(2, 2);
        }
        function System.ToString.short
        {
            description
            {
                Converts a "\textbf{short}" to string representation.
            }
            parameter System.ToString.short.x
            {
                description
                {
                    An "\textbf{short}".
                }
            }
            returns System.ToString.short.returnValue
            {
                description
                {
                    Returns "$x$" converted to string representation.
                }
            }
            source <../src/convert.pdf>(2, 2);
        }
        function System.ToString.uint
        {
            description
            {
                Converts an "\textbf{uint}" to string representation.
            }
            parameter System.ToString.uint.x
            {
                description
                {
                    An "\textbf{uint}".
                }
            }
            returns System.ToString.uint.returnValue
            {
                description
                {
                    Returns "$x$" converted to string representation.
                }
            }
            source <../src/convert.pdf>(2, 2);
        }
        function System.ToString.ulong
        {
            description
            {
                Converts an "\textbf{ulong}" to string representation.
            }
            parameter System.ToString.ulong.x
            {
                description
                {
                    An "\textbf{ulong}".
                }
            }
            returns System.ToString.ulong.returnValue
            {
                description
                {
                    Returns "$x$" converted to string representation.
                }
            }
            source <../src/convert.pdf>(2, 2);
        }
        function System.ToString.ushort
        {
            description
            {
                Converts an "\textbf{ushort}" to string representation.
            }
            parameter System.ToString.ushort.x
            {
                description
                {
                    An "\textbf{ushort}".
                }
            }
            returns System.ToString.ushort.returnValue
            {
                description
                {
                    Returns "$x$" converted to string representation.
                }
            }
            source <../src/convert.pdf>(2, 2);
        }
        function System.ToUpper.C.R.System.String
        {
            description
            {
                Converts a string to upper case.
            }
            parameter System.ToUpper.C.R.System.String.s
            {
                description
                {
                    A string.
                }
            }
            returns System.ToUpper.C.R.System.String.returnValue
            {
                description
                {
                    Returns "$s$" converted to upper case.
                }
            }
            source <../src/string.pdf>(10, 10);
        }
        function System.ToUtf8.uint
        {
            description
            {
                Converts the given Unicode code point to UTF-8
                representation.
            }
            parameter System.ToUtf8.uint.c
            {
                description
                {
                    A Unicode code point.
                }
            }
            returns System.ToUtf8.uint.returnValue
            {
                description
                {
                    Returns a UTF-8 encoded string.
                }
            }
        }
        function System.Transform.I.O.F.I.I.O.F.where.I.is.InputIterator.and.O.is.OutputIterator.and.F.is.UnaryFunction.and.F.ArgumentType.is.I.ValueType.and.CopyAssignable.O.ValueType.F.ResultType
        {
            description
            {
                Transforms an input sequence to an output sequence using a unary function.
            }
            example <examples/System.Transform.I.O.F.I.is.InputIterator.O.is.OutputIterator.F.is.UnaryFunction.F.ArgumentType.is.I.ValueType.Assignable.O.ValueType.F.ResultType.I.I.O.F.cm>;
            parameter System.Transform.I.O.F.I.I.O.F.where.I.is.InputIterator.and.O.is.OutputIterator.and.F.is.UnaryFunction.and.F.ArgumentType.is.I.ValueType.and.CopyAssignable.O.ValueType.F.ResultType.begin
            {
                description
                {
                    An input iterator pointing to the beginning of an input sequence.
                }
            }
            parameter System.Transform.I.O.F.I.I.O.F.where.I.is.InputIterator.and.O.is.OutputIterator.and.F.is.UnaryFunction.and.F.ArgumentType.is.I.ValueType.and.CopyAssignable.O.ValueType.F.ResultType.end
            {
                description
                {
                    An input iterator pointing one past the end of an input sequence.
                }
            }
            parameter System.Transform.I.O.F.I.I.O.F.where.I.is.InputIterator.and.O.is.OutputIterator.and.F.is.UnaryFunction.and.F.ArgumentType.is.I.ValueType.and.CopyAssignable.O.ValueType.F.ResultType.fun
            {
                description
                {
                    A unary function object.
                }
            }
            parameter System.Transform.I.O.F.I.I.O.F.where.I.is.InputIterator.and.O.is.OutputIterator.and.F.is.UnaryFunction.and.F.ArgumentType.is.I.ValueType.and.CopyAssignable.O.ValueType.F.ResultType.to
            {
                description
                {
                    An output iterator pointing to the beginning of an output sequence.
                }
            }
            returns System.Transform.I.O.F.I.I.O.F.where.I.is.InputIterator.and.O.is.OutputIterator.and.F.is.UnaryFunction.and.F.ArgumentType.is.I.ValueType.and.CopyAssignable.O.ValueType.F.ResultType.returnValue
            {
                description
                {
                    Returns an output iterator pointing one past the end of the output sequence.
                }
            }
            source <../src/algorithm.pdf>(8, 8);
        }
        function System.Transform.I1.I2.O.F.I1.I1.I2.O.F.where.I1.is.InputIterator.and.I2.is.InputIterator.and.O.is.OutputIterator.and.F.is.BinaryFunction.and.F.FirstArgumentType.is.I1.ValueType.and.F.SecondArgumentType.is.I2.ValueType.and.CopyAssignable.O.ValueType.F.ResultType
        {
            description
            {
                Transforms two input sequences to an ouput sequence using a binary function.
            }
            example <examples/System.Transform2.cm>;
            parameter System.Transform.I1.I2.O.F.I1.I1.I2.O.F.where.I1.is.InputIterator.and.I2.is.InputIterator.and.O.is.OutputIterator.and.F.is.BinaryFunction.and.F.FirstArgumentType.is.I1.ValueType.and.F.SecondArgumentType.is.I2.ValueType.and.CopyAssignable.O.ValueType.F.ResultType.begin1
            {
                description
                {
                    An input iterator pointing to the beginning of the first input sequence.
                }
            }
            parameter System.Transform.I1.I2.O.F.I1.I1.I2.O.F.where.I1.is.InputIterator.and.I2.is.InputIterator.and.O.is.OutputIterator.and.F.is.BinaryFunction.and.F.FirstArgumentType.is.I1.ValueType.and.F.SecondArgumentType.is.I2.ValueType.and.CopyAssignable.O.ValueType.F.ResultType.begin2
            {
                description
                {
                    An input iterator pointing to the beginning of the second input sequence.
                }
            }
            parameter System.Transform.I1.I2.O.F.I1.I1.I2.O.F.where.I1.is.InputIterator.and.I2.is.InputIterator.and.O.is.OutputIterator.and.F.is.BinaryFunction.and.F.FirstArgumentType.is.I1.ValueType.and.F.SecondArgumentType.is.I2.ValueType.and.CopyAssignable.O.ValueType.F.ResultType.end1
            {
                description
                {
                    An input iterator pointing one past the end of the first input sequence.
                }
            }
            parameter System.Transform.I1.I2.O.F.I1.I1.I2.O.F.where.I1.is.InputIterator.and.I2.is.InputIterator.and.O.is.OutputIterator.and.F.is.BinaryFunction.and.F.FirstArgumentType.is.I1.ValueType.and.F.SecondArgumentType.is.I2.ValueType.and.CopyAssignable.O.ValueType.F.ResultType.fun
            {
                description
                {
                    A binary function object.
                }
            }
            parameter System.Transform.I1.I2.O.F.I1.I1.I2.O.F.where.I1.is.InputIterator.and.I2.is.InputIterator.and.O.is.OutputIterator.and.F.is.BinaryFunction.and.F.FirstArgumentType.is.I1.ValueType.and.F.SecondArgumentType.is.I2.ValueType.and.CopyAssignable.O.ValueType.F.ResultType.to
            {
                description
                {
                    An output iterator pointing to the beginning of the output sequence.
                }
            }
            returns System.Transform.I1.I2.O.F.I1.I1.I2.O.F.where.I1.is.InputIterator.and.I2.is.InputIterator.and.O.is.OutputIterator.and.F.is.BinaryFunction.and.F.FirstArgumentType.is.I1.ValueType.and.F.SecondArgumentType.is.I2.ValueType.and.CopyAssignable.O.ValueType.F.ResultType.returnValue
            {
                description
                {
                    Returns an output iterator pointing one past the end of the output sequence.
                }
            }
            source <../src/algorithm.pdf>(8, 8);
        }
        function System.UnguardedLinearInsert.I.T.R.I.C.R.T.R.where.I.is.RandomAccessIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
            }
            parameter System.UnguardedLinearInsert.I.T.R.I.C.R.T.R.where.I.is.RandomAccessIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.last
            {
                description
                {
                }
            }
            parameter System.UnguardedLinearInsert.I.T.R.I.C.R.T.R.where.I.is.RandomAccessIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                }
            }
            parameter System.UnguardedLinearInsert.I.T.R.I.C.R.T.R.where.I.is.RandomAccessIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.val
            {
                description
                {
                }
            }
        }
        function System.UnguardedPartition.I.T.R.I.I.C.R.T.R.where.I.is.RandomAccessIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
            }
            parameter System.UnguardedPartition.I.T.R.I.I.C.R.T.R.where.I.is.RandomAccessIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.begin
            {
                description
                {
                }
            }
            parameter System.UnguardedPartition.I.T.R.I.I.C.R.T.R.where.I.is.RandomAccessIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.end
            {
                description
                {
                }
            }
            parameter System.UnguardedPartition.I.T.R.I.I.C.R.T.R.where.I.is.RandomAccessIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.pivot
            {
                description
                {
                }
            }
            parameter System.UnguardedPartition.I.T.R.I.I.C.R.T.R.where.I.is.RandomAccessIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                }
            }
            returns System.UnguardedPartition.I.T.R.I.I.C.R.T.R.where.I.is.RandomAccessIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.returnValue
            {
                description
                {
                }
            }
        }
        function System.UpperBound.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType
        {
            description
            {
                Finds a position of the first element in a sorted sequence that is greater than the given value.
            }
            example <examples/System.UpperBound.I.T.I.is.ForwardIterator.TotallyOrdered.T.I.ValueType.I.I.T.const.ref.cm>;
            parameter System.UpperBound.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.first
            {
                description
                {
                    A forward iterator pointing to the beginning of a sorted sequence.
                }
            }
            parameter System.UpperBound.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.last
            {
                description
                {
                    A forward iterator pointing one past the end of a sorted sequence.
                }
            }
            parameter System.UpperBound.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.value
            {
                description
                {
                    A value to search.
                }
            }
            returns System.UpperBound.I.T.I.I.C.R.T.where.I.is.ForwardIterator.and.TotallyOrdered.T.I.ValueType.returnValue
            {
                description
                {
                    Returns an iterator pointing to the first element in a sorted sequence that is greater than the given value,
                    if there is one, otherwise returns "\emph{last}".
                }
            }
            source <../src/algorithm.pdf>(4, 4);
        }
        function System.UpperBound.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType
        {
            description
            {
                Finds a position of the first element in a sorted sequence that is greater than the given value according to the given ordering relation.
            }
            parameter System.UpperBound.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.first
            {
                description
                {
                    A forward iterator pointing to the beginning of a sorted sequence.
                }
            }
            parameter System.UpperBound.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.last
            {
                description
                {
                    A forward iterator pointing one past the end of a sorted sequence.
                }
            }
            parameter System.UpperBound.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.r
            {
                description
                {
                    An ordering relation.
                }
            }
            parameter System.UpperBound.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.value
            {
                description
                {
                    A value to search.
                }
            }
            returns System.UpperBound.I.T.R.I.I.C.R.T.R.where.I.is.ForwardIterator.and.T.is.I.ValueType.and.R.is.Relation.and.R.Domain.is.I.ValueType.returnValue
            {
                description
                {
                    Returns an iterator pointing to the first element in a sorted sequence that is greater than the given value according to the given ordering relation,
                    if there is one, otherwise returns "\emph{last}".
                }
            }
            source <../src/algorithm.pdf>(5, 5);
        }
        function System.divmod.System.uhuge.System.uhuge
        {
            description
            {
                Computes quotient and remainder of division of two 128-bit values.
            }
            parameter System.divmod.System.uhuge.System.uhuge.left
            {
                description
                {
                    Dividend.
                }
            }
            parameter System.divmod.System.uhuge.System.uhuge.right
            {
                description
                {
                    Divisor.
                }
            }
            returns System.divmod.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns a pair in which the first value is the quotient and the second value is the remainder
                    of "$left/right$".
                }
            }
            owner System.uhuge;
        }
        function System.divmod.System.uhuge.uint
        {
            description
            {
                Computes quotient and remainder of division of a 128-bit value divided by a 32-bit value.
            }
            parameter System.divmod.System.uhuge.uint.left
            {
                description
                {
                    Dividend.
                }
            }
            parameter System.divmod.System.uhuge.uint.right
            {
                description
                {
                    Divisor.
                }
            }
            returns System.divmod.System.uhuge.uint.returnValue
            {
                description
                {
                    Returns a pair in which the first value is the quotient and the second value is the remainder
                    of "$left/right$".
                }
            }
            owner System.uhuge;
        }
        function System.endl
        {
            description
            {
                Returns System.EndLine object that represents an end of line character.
            }
            returns System.endl.returnValue
            {
                description
                {
                    Returns System.EndLine object that represents and end of line character.
                }
            }
        }
        function System.mul.System.uhuge.System.uhuge
        {
            description
            {
                Computes the 256-bit product of two 128-bit values.
            }
            parameter System.mul.System.uhuge.System.uhuge.left
            {
                description
                {
                    The first 128-bit value.
                }
            }
            parameter System.mul.System.uhuge.System.uhuge.right
            {
                description
                {
                    The second 128-bit value.
                }
            }
            returns System.mul.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns a pair in which the first value is the high part and the second value is the low part of
                    of "$left \times right$".
                }
            }
            owner System.uhuge;
        }
        function System.operator.remainder.System.Duration.System.Duration
        {
            description
            {
                Computes the remainder of division of two durations.
            }
            parameter System.operator.remainder.System.Duration.System.Duration.left
            {
                description
                {
                    The first duration.
                }
            }
            parameter System.operator.remainder.System.Duration.System.Duration.right
            {
                description
                {
                    The second duration.
                }
            }
            returns System.operator.remainder.System.Duration.System.Duration.returnValue
            {
                description
                {
                    Returns "$left\%right$".
                }
            }
            owner System.Duration;
        }
        function System.operator.remainder.System.uhuge.System.uhuge
        {
            description
            {
                Computes the remainder of division of two 128-bit values.
            }
            parameter System.operator.remainder.System.uhuge.System.uhuge.left
            {
                description
                {
                    Dividend.
                }
            }
            parameter System.operator.remainder.System.uhuge.System.uhuge.right
            {
                description
                {
                    Divisor.
                }
            }
            returns System.operator.remainder.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns "$left\%right$".
                }
            }
            owner System.uhuge;
        }
        function System.operator.and.System.uhuge.System.uhuge
        {
            description
            {
                Bitwise-AND operation of two 128-bit values.
            }
            parameter System.operator.and.System.uhuge.System.uhuge.left
            {
                description
                {
                    The first 128-bit value.
                }
            }
            parameter System.operator.and.System.uhuge.System.uhuge.right
            {
                description
                {
                    The second 128-bit value.
                }
            }
            returns System.operator.and.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns bitwise AND of "$left$" and "$right$".
                }
            }
            owner System.uhuge;
        }
        function System.operator.times.System.Duration.System.Duration
        {
            description
            {
                Computes the product of two durations.
            }
            parameter System.operator.times.System.Duration.System.Duration.left
            {
                description
                {
                    The first duration.
                }
            }
            parameter System.operator.times.System.Duration.System.Duration.right
            {
                description
                {
                    The second duration.
                }
            }
            returns System.operator.times.System.Duration.System.Duration.returnValue
            {
                description
                {
                    Returns "$left \times right$".
                }
            }
            owner System.Duration;
        }
        function System.operator.times.System.uhuge.System.uhuge
        {
            description
            {
                Computes the product of two 128-bit values.
            }
            parameter System.operator.times.System.uhuge.System.uhuge.left
            {
                description
                {
                    Ths first 128-bit value.
                }
            }
            parameter System.operator.times.System.uhuge.System.uhuge.right
            {
                description
                {
                    The second 128-bit value.
                }
            }
            returns System.operator.times.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns "$left \times right$".
                }
            }
            owner System.uhuge;
        }
        function System.operator.plus.System.Duration.System.Duration
        {
            description
            {
                Computes the sum of two durations.
            }
            parameter System.operator.plus.System.Duration.System.Duration.left
            {
                description
                {
                    The first duration.
                }
            }
            parameter System.operator.plus.System.Duration.System.Duration.right
            {
                description
                {
                    The second duration.
                }
            }
            returns System.operator.plus.System.Duration.System.Duration.returnValue
            {
                description
                {
                    Returns "$left+right$".
                }
            }
            owner System.Duration;
        }
        function System.operator.plus.System.Duration.System.TimePoint
        {
            description
            {
                Computes the sum of a duration and a time point and returns a time point.
            }
            parameter System.operator.plus.System.Duration.System.TimePoint.d
            {
                description
                {
                    A duration.
                }
            }
            parameter System.operator.plus.System.Duration.System.TimePoint.tp
            {
                description
                {
                    A time point.
                }
            }
            returns System.operator.plus.System.Duration.System.TimePoint.returnValue
            {
                description
                {
                    Returns "$d+tp$".
                }
            }
            owner System.Duration;
        }
        function System.operator.plus.System.TimePoint.System.Duration
        {
            description
            {
                Computes the sum of a time point and a duration and returns a time point.
            }
            parameter System.operator.plus.System.TimePoint.System.Duration.d
            {
                description
                {
                    A duration.
                }
            }
            parameter System.operator.plus.System.TimePoint.System.Duration.tp
            {
                description
                {
                    A time point.
                }
            }
            returns System.operator.plus.System.TimePoint.System.Duration.returnValue
            {
                description
                {
                    Returns "tp+d".
                }
            }
            owner System.TimePoint;
        }
        function System.operator.plus.System.uhuge.System.uhuge
        {
            description
            {
                Computes the sum of two 128-bit values.
            }
            parameter System.operator.plus.System.uhuge.System.uhuge.left
            {
                description
                {
                    The first 128-bit value.
                }
            }
            parameter System.operator.plus.System.uhuge.System.uhuge.right
            {
                description
                {
                    The second 128-bit value.
                }
            }
            returns System.operator.plus.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns "$left+right$".
                }
            }
            owner System.uhuge;
        }
        function System.operator.plus.T.R.P.C.R.System.RandomAccessIter.T.R.P.int
        {
            description
            {
                Returns a random access iterator advanced by the given integer offset.
            }
            parameter System.operator.plus.T.R.P.C.R.System.RandomAccessIter.T.R.P.int.it
            {
                description
                {
                    A random access iterator.
                }
            }
            parameter System.operator.plus.T.R.P.C.R.System.RandomAccessIter.T.R.P.int.offset
            {
                description
                {
                    An integer offset.
                }
            }
            returns System.operator.plus.T.R.P.C.R.System.RandomAccessIter.T.R.P.int.returnValue
            {
                description
                {
                    Returns a random access iterator advanced by the given integer offset.
                }
            }
            owner System.RandomAccessIter.T.R.P;
        }
        function System.operator.plus.C.R.System.String.C.R.System.String
        {
            description
            {
                Concatenates two strings.
            }
            example <examples/System.@operator.plus.System.String.const.ref.System.String.const.ref.cm>;
            parameter System.operator.plus.C.R.System.String.C.R.System.String.first
            {
                description
                {
                    The first string.
                }
            }
            parameter System.operator.plus.C.R.System.String.C.R.System.String.second
            {
                description
                {
                    The second string.
                }
            }
            returns System.operator.plus.C.R.System.String.C.R.System.String.returnValue
            {
                description
                {
                    Returns a string that result when "\emph{first}" and "\emph{second}" is concatenated.
                }
            }
            owner System.String;
        }
        function System.operator.plus.C.R.System.String.C.P.char
        {
            description
            {
                Concatenates a string and a C-style string.
            }
            example <examples/System.@operator.plus.char.const.ptr.System.String.const.ref.cm>;
            parameter System.operator.plus.C.R.System.String.C.P.char.first
            {
                description
                {
                    A string.
                }
            }
            parameter System.operator.plus.C.R.System.String.C.P.char.second
            {
                description
                {
                    A C-style string.
                }
            }
            returns System.operator.plus.C.R.System.String.C.P.char.returnValue
            {
                description
                {
                    Returns a string that result when "\emph{first}" and "\emph{second}" is concatenated.
                }
            }
            owner System.String;
        }
        function System.operator.plus.C.P.char.C.R.System.String
        {
            description
            {
                Concatenates a C-style string and a string.
            }
            example <examples/System.@operator.plus.System.String.const.ref.char.const.ptr.cm>;
            parameter System.operator.plus.C.P.char.C.R.System.String.first
            {
                description
                {
                    A C-style string.
                }
            }
            parameter System.operator.plus.C.P.char.C.R.System.String.second
            {
                description
                {
                    A string.
                }
            }
            returns System.operator.plus.C.P.char.C.R.System.String.returnValue
            {
                description
                {
                    Returns a string that result when "\emph{first}" and "\emph{second}" is concatenated.
                }
            }
            owner System.String;
        }
        function System.operator.plus.T.R.P.int.C.R.System.RandomAccessIter.T.R.P
        {
            description
            {
                Returns a random access iterator advanced by the given integer offset.
            }
            parameter System.operator.plus.T.R.P.int.C.R.System.RandomAccessIter.T.R.P.it
            {
                description
                {
                    A random access iterator.
                }
            }
            parameter System.operator.plus.T.R.P.int.C.R.System.RandomAccessIter.T.R.P.offset
            {
                description
                {
                    An integer offset.
                }
            }
            returns System.operator.plus.T.R.P.int.C.R.System.RandomAccessIter.T.R.P.returnValue
            {
                description
                {
                    Returns a random access iterator advanced by the given integer offset.
                }
            }
            owner System.RandomAccessIter.T.R.P;
        }
        function System.operator.minus.System.Duration.System.Duration
        {
            description
            {
                Subtracts a duration from a duration.
            }
            parameter System.operator.minus.System.Duration.System.Duration.left
            {
                description
                {
                    The first duration.
                }
            }
            parameter System.operator.minus.System.Duration.System.Duration.right
            {
                description
                {
                    The second duration.
                }
            }
            returns System.operator.minus.System.Duration.System.Duration.returnValue
            {
                description
                {
                    Returns "$left-right$".
                }
            }
            owner System.Duration;
        }
        function System.operator.minus.System.TimePoint.System.Duration
        {
            description
            {
                Subtracts a duration from a time point and returns a time point.
            }
            parameter System.operator.minus.System.TimePoint.System.Duration.d
            {
                description
                {
                    A duration.
                }
            }
            parameter System.operator.minus.System.TimePoint.System.Duration.tp
            {
                description
                {
                    A time point.
                }
            }
            returns System.operator.minus.System.TimePoint.System.Duration.returnValue
            {
                description
                {
                    Returns "$TimePoint(tp-d)$".
                }
            }
            owner System.TimePoint;
        }
        function System.operator.minus.System.TimePoint.System.TimePoint
        {
            description
            {
                Subtracts a time point from a time point and returns a duration.
            }
            parameter System.operator.minus.System.TimePoint.System.TimePoint.left
            {
                description
                {
                    The first time point.
                }
            }
            parameter System.operator.minus.System.TimePoint.System.TimePoint.right
            {
                description
                {
                    The second time point.
                }
            }
            returns System.operator.minus.System.TimePoint.System.TimePoint.returnValue
            {
                description
                {
                    Returns "$Duration(left-right)$".
                }
            }
            owner System.TimePoint;
        }
        function System.operator.minus.System.uhuge.System.uhuge
        {
            description
            {
                Subtracts a 128-bit value from 128-bit value.
            }
            parameter System.operator.minus.System.uhuge.System.uhuge.left
            {
                description
                {
                    The first 128-bit value.
                }
            }
            parameter System.operator.minus.System.uhuge.System.uhuge.right
            {
                description
                {
                    The second 128-bit value.
                }
            }
            returns System.operator.minus.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns "$left-right$".
                }
            }
            owner System.uhuge;
        }
        function System.operator.minus.T.R.P.C.R.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P
        {
            description
            {
                Returns the distance between two random access iterators.
            }
            remarks
            {
                Both iterators must point to an element in the same sequence or both must be end iterators.
            }
            parameter System.operator.minus.T.R.P.C.R.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P.left
            {
                description
                {
                    The first random access iterator.
                }
            }
            parameter System.operator.minus.T.R.P.C.R.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P.right
            {
                description
                {
                    The second random access iterator.
                }
            }
            returns System.operator.minus.T.R.P.C.R.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P.returnValue
            {
                description
                {
                    Returns the difference of the pointer contained by "\emph{left}" and the pointer contained by "\emph{right}".
                }
            }
            owner System.RandomAccessIter.T.R.P;
        }
        function System.operator.minus.T.R.P.C.R.System.RandomAccessIter.T.R.P.int
        {
            description
            {
                Returns the difference of a random access iterator and an integer.
            }
            parameter System.operator.minus.T.R.P.C.R.System.RandomAccessIter.T.R.P.int.it
            {
                description
                {
                    A random access iterator.
                }
            }
            parameter System.operator.minus.T.R.P.C.R.System.RandomAccessIter.T.R.P.int.offset
            {
                description
                {
                    An integer.
                }
            }
            returns System.operator.minus.T.R.P.C.R.System.RandomAccessIter.T.R.P.int.returnValue
            {
                description
                {
                    Returns a random access iterator that comes "\emph{offset}" elements before the "\emph{it}".
                }
            }
            owner System.RandomAccessIter.T.R.P;
        }
        function System.operator.divides.System.Duration.System.Duration
        {
            description
            {
                Division of two durations.
            }
            parameter System.operator.divides.System.Duration.System.Duration.left
            {
                description
                {
                    Dividend.
                }
            }
            parameter System.operator.divides.System.Duration.System.Duration.right
            {
                description
                {
                    Divisor.
                }
            }
            returns System.operator.divides.System.Duration.System.Duration.returnValue
            {
                description
                {
                    Returns "$left$" divided by "$right$".
                }
            }
            owner System.Duration;
        }
        function System.operator.divides.System.uhuge.System.uhuge
        {
            description
            {
                Division of two 128-bit values.
            }
            parameter System.operator.divides.System.uhuge.System.uhuge.left
            {
                description
                {
                    Dividend.
                }
            }
            parameter System.operator.divides.System.uhuge.System.uhuge.right
            {
                description
                {
                    Divisor.
                }
            }
            returns System.operator.divides.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns "$left$" divided by "$right$".
                }
            }
            owner System.uhuge;
        }
        function System.operator.less.System.Date.System.Date
        {
            description
            {
                Compares two dates for less than relationship.
            }
            parameter System.operator.less.System.Date.System.Date.left
            {
                description
                {
                    The first date.
                }
            }
            parameter System.operator.less.System.Date.System.Date.right
            {
                description
                {
                    The second date.
                }
            }
            returns System.operator.less.System.Date.System.Date.returnValue
            {
                description
                {
                    Returns true if the first date comes before the second date,
                    false otherwise.
                }
            }
            owner System.Date;
        }
        function System.operator.less.System.Duration.System.Duration
        {
            description
            {
                Compares two durations for less than relationship.
            }
            parameter System.operator.less.System.Duration.System.Duration.left
            {
                description
                {
                    The first duration.
                }
            }
            parameter System.operator.less.System.Duration.System.Duration.right
            {
                description
                {
                    The second duration.
                }
            }
            returns System.operator.less.System.Duration.System.Duration.returnValue
            {
                description
                {
                    Returns true, if the first duration is less than the second duration, false otherwise.
                }
            }
            owner System.Duration;
        }
        function System.operator.less.System.TimePoint.System.TimePoint
        {
            description
            {
                Compares two time points for less than relationship.
            }
            parameter System.operator.less.System.TimePoint.System.TimePoint.left
            {
                description
                {
                    The first time point.
                }
            }
            parameter System.operator.less.System.TimePoint.System.TimePoint.right
            {
                description
                {
                    The second time point.
                }
            }
            returns System.operator.less.System.TimePoint.System.TimePoint.returnValue
            {
                description
                {
                    Returns true, if the first time point is less than the second time point, false otherwise.
                }
            }
            owner System.TimePoint;
        }
        function System.operator.less.System.uhuge.System.uhuge
        {
            description
            {
                Compares two 128-bit values for less than relationship.
            }
            parameter System.operator.less.System.uhuge.System.uhuge.left
            {
                description
                {
                    The first 128-bit value.
                }
            }
            parameter System.operator.less.System.uhuge.System.uhuge.right
            {
                description
                {
                    The second 128-bit value.
                }
            }
            returns System.operator.less.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns true, if the first 128-bit value is less than the second 128-bit value, false otherwise.
                }
            }
            owner System.uhuge;
        }
        function System.operator.less.T.U.C.R.System.Pair.T.U.C.R.System.Pair.T.U.where.T.is.TotallyOrdered.and.U.is.TotallyOrdered
        {
            description
            {
                Compares two pairs for less than relationship.
            }
            parameter System.operator.less.T.U.C.R.System.Pair.T.U.C.R.System.Pair.T.U.where.T.is.TotallyOrdered.and.U.is.TotallyOrdered.left
            {
                description
                {
                    The first pair.
                }
            }
            parameter System.operator.less.T.U.C.R.System.Pair.T.U.C.R.System.Pair.T.U.where.T.is.TotallyOrdered.and.U.is.TotallyOrdered.right
            {
                description
                {
                    The second pair.
                }
            }
            returns System.operator.less.T.U.C.R.System.Pair.T.U.C.R.System.Pair.T.U.where.T.is.TotallyOrdered.and.U.is.TotallyOrdered.returnValue
            {
                description
                {
                    Returns true if the first component of the first pair is less than the first component of the second pair.
                    Returns false if the first component of the second pair is less than the first component of the first pair.
                    Returns true if the second component of the first pair is less than the second component of the second pair.
                    Otherwise returns false.
                }
            }
            owner System.Pair.T.U;
        }
        function System.operator.less.T.R.P.C.R.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P
        {
            description
            {
                Compares two random access iterators for less than relationship.
            }
            remarks
            {
                Both iterators must point to an element of the same sequence or both must be end iterators.
            }
            parameter System.operator.less.T.R.P.C.R.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P.left
            {
                description
                {
                    The first random access iterator.
                }
            }
            parameter System.operator.less.T.R.P.C.R.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P.right
            {
                description
                {
                    The second random access iterator.
                }
            }
            returns System.operator.less.T.R.P.C.R.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P.returnValue
            {
                description
                {
                    Returns true if the element pointed by "\emph{left}" comes before the element pointed by "\emph{right}" in the sequence,
                    false otherwise.
                }
            }
            owner System.RandomAccessIter.T.R.P;
        }
        function System.operator.less.T.C.R.System.SharedCount.T.C.R.System.SharedCount.T
        {
            description
            {
                Compares two shared count objects for less than relationship.
            }
            parameter System.operator.less.T.C.R.System.SharedCount.T.C.R.System.SharedCount.T.left
            {
                description
                {
                    The first shared count.
                }
            }
            parameter System.operator.less.T.C.R.System.SharedCount.T.C.R.System.SharedCount.T.right
            {
                description
                {
                    The second shared count.
                }
            }
            returns System.operator.less.T.C.R.System.SharedCount.T.C.R.System.SharedCount.T.returnValue
            {
                description
                {
                    Returns true if the memory address the counter contained by the "\emph{left}" count is less than
                    the memory address of the counter contained by the "\emph{right}" count, false otherwise.
                }
            }
            owner System.SharedCount.T;
        }
        function System.operator.less.T.C.R.System.SharedPtr.T.C.R.System.SharedPtr.T
        {
            description
            {
                Compares two shared pointers for less than relationship.
            }
            parameter System.operator.less.T.C.R.System.SharedPtr.T.C.R.System.SharedPtr.T.left
            {
                description
                {
                    The first shared pointer.
                }
            }
            parameter System.operator.less.T.C.R.System.SharedPtr.T.C.R.System.SharedPtr.T.right
            {
                description
                {
                    The second shared pointer.
                }
            }
            returns System.operator.less.T.C.R.System.SharedPtr.T.C.R.System.SharedPtr.T.returnValue
            {
                description
                {
                    Returns true if the memory address of the counted object pointed by "\emph{left}" is 
                    less than the memory address of the counted object pointed by "\emph{right}", false otherwise.
                }
            }
            owner System.SharedPtr.T;
        }
        function System.operator.less.T.C.R.System.UniquePtr.T.C.R.System.UniquePtr.T
        {
            description
            {
                Compares two unique pointers for less than relationship.
            }
            parameter System.operator.less.T.C.R.System.UniquePtr.T.C.R.System.UniquePtr.T.left
            {
                description
                {
                    The first unique pointer.
                }
            }
            parameter System.operator.less.T.C.R.System.UniquePtr.T.C.R.System.UniquePtr.T.right
            {
                description
                {
                    The second unique pointer.
                }
            }
            returns System.operator.less.T.C.R.System.UniquePtr.T.C.R.System.UniquePtr.T.returnValue
            {
                description
                {
                    Returns true if the pointer contained by the first unique pointer is less than
                    the pointer contained by the second unique pointer, false otherwise.
                }
            }
            owner System.UniquePtr.T;
        }
        function System.operator.less.T.C.R.System.WeakCount.T.C.R.System.WeakCount.T
        {
            description
            {
                Compares two weak counts for less than relationship.
            }
            parameter System.operator.less.T.C.R.System.WeakCount.T.C.R.System.WeakCount.T.left
            {
                description
                {
                    The first weak count.
                }
            }
            parameter System.operator.less.T.C.R.System.WeakCount.T.C.R.System.WeakCount.T.right
            {
                description
                {
                    The second weak count.
                }
            }
            returns System.operator.less.T.C.R.System.WeakCount.T.C.R.System.WeakCount.T.returnValue
            {
                description
                {
                    Returns true if the memory address of the counter contained by the "\emph{left}" count is less than
                    the memory addess of the counter contained by the "\emph{right}" count, false otherwise.
                }
            }
            owner System.WeakCount.T;
        }
        function System.operator.shiftLeft.System.uhuge.System.uhuge
        {
            description
            {
                Shifts the given System.uhuge value to the given number of 
                bit positions left and returns it.
            }
            parameter System.operator.shiftLeft.System.uhuge.System.uhuge.left
            {
                description
                {
                    The uhuge value to shift.
                }
            }
            parameter System.operator.shiftLeft.System.uhuge.System.uhuge.right
            {
                description
                {
                    The number of bit positions to shift.
                }
            }
            returns System.operator.shiftLeft.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns an uhuge value shifted given number of bit positions left.
                }
            }
            owner System.uhuge;
        }
        function System.operator.equal.System.Date.System.Date
        {
            description
            {
                Compares two dates for equality.
            }
            parameter System.operator.equal.System.Date.System.Date.left
            {
                description
                {
                    The first date.
                }
            }
            parameter System.operator.equal.System.Date.System.Date.right
            {
                description
                {
                    The second date.
                }
            }
            returns System.operator.equal.System.Date.System.Date.returnValue
            {
                description
                {
                    Returns true, if the first date is equal to the second date,
                    false otherwise.
                }
            }
            owner System.Date;
        }
        function System.operator.equal.System.Duration.System.Duration
        {
            description
            {
                Compares two durations for equality.
            }
            parameter System.operator.equal.System.Duration.System.Duration.left
            {
                description
                {
                    The first duration.
                }
            }
            parameter System.operator.equal.System.Duration.System.Duration.right
            {
                description
                {
                    The second duration.
                }
            }
            returns System.operator.equal.System.Duration.System.Duration.returnValue
            {
                description
                {
                    Returns true, if the first duration is equal to the second duration, false otherwise.
                }
            }
            owner System.Duration;
        }
        function System.operator.equal.System.TimePoint.System.TimePoint
        {
            description
            {
                Compares two time points for equality.
            }
            parameter System.operator.equal.System.TimePoint.System.TimePoint.left
            {
                description
                {
                    The first time point.
                }
            }
            parameter System.operator.equal.System.TimePoint.System.TimePoint.right
            {
                description
                {
                    The second time point.
                }
            }
            returns System.operator.equal.System.TimePoint.System.TimePoint.returnValue
            {
                description
                {
                    Returns true, if the first time point is equal to the second time point, false otherwise.
                }
            }
            owner System.TimePoint;
        }
        function System.operator.equal.System.uhuge.System.uhuge
        {
            description
            {
                Compares two 128-bit values for equality.
            }
            parameter System.operator.equal.System.uhuge.System.uhuge.left
            {
                description
                {
                    The first 128-bit value.
                }
            }
            parameter System.operator.equal.System.uhuge.System.uhuge.right
            {
                description
                {
                    The second 128-bit value.
                }
            }
            returns System.operator.equal.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns true, if the first 128-bit value is equal to the second 128-bit value, false otherwise.
                }
            }
            owner System.uhuge;
        }
        function System.operator.equal.T.U.C.R.System.Pair.T.U.C.R.System.Pair.T.U.where.T.is.Regular.and.U.is.Regular
        {
            description
            {
                Compares two pairs for equality.
            }
            parameter System.operator.equal.T.U.C.R.System.Pair.T.U.C.R.System.Pair.T.U.where.T.is.Regular.and.U.is.Regular.left
            {
                description
                {
                    The first pair.
                }
            }
            parameter System.operator.equal.T.U.C.R.System.Pair.T.U.C.R.System.Pair.T.U.where.T.is.Regular.and.U.is.Regular.right
            {
                description
                {
                    The second pair.
                }
            }
            returns System.operator.equal.T.U.C.R.System.Pair.T.U.C.R.System.Pair.T.U.where.T.is.Regular.and.U.is.Regular.returnValue
            {
                description
                {
                    Returns true if the first component of the first pair is equal to the first component of the second pair and the second component of the first pair is equal to the second component
                    of the second pair, false otherwise.
                }
            }
            owner System.Pair.T.U;
        }
        function System.operator.equal.T.R.P.C.R.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P
        {
            description
            {
                Compares two random access iterators for equality.
            }
            parameter System.operator.equal.T.R.P.C.R.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P.left
            {
                description
                {
                    The first random access iterator.
                }
            }
            parameter System.operator.equal.T.R.P.C.R.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P.right
            {
                description
                {
                    The second random access iterator.
                }
            }
            returns System.operator.equal.T.R.P.C.R.System.RandomAccessIter.T.R.P.C.R.System.RandomAccessIter.T.R.P.returnValue
            {
                description
                {
                    Returns true if "\emph{left}" points to the same element as "\emph{right}" or both are end iterators, false otherwise.
                }
            }
            owner System.RandomAccessIter.T.R.P;
        }
        function System.operator.equal.T.C.R.System.SharedCount.T.C.R.System.SharedCount.T
        {
            description
            {
                Compares to shared count objects for equality.
            }
            parameter System.operator.equal.T.C.R.System.SharedCount.T.C.R.System.SharedCount.T.left
            {
                description
                {
                    The first shared count.
                }
            }
            parameter System.operator.equal.T.C.R.System.SharedCount.T.C.R.System.SharedCount.T.right
            {
                description
                {
                    The second shared count.
                }
            }
            returns System.operator.equal.T.C.R.System.SharedCount.T.C.R.System.SharedCount.T.returnValue
            {
                description
                {
                    Returns true if "\emph{left}" contains the same counter as "\emph{right}" or both are empty, false otherwise.
                }
            }
            owner System.SharedCount.T;
        }
        function System.operator.equal.T.C.R.System.SharedPtr.T.C.R.System.SharedPtr.T
        {
            description
            {
                Compares two shared pointers for equality.
            }
            parameter System.operator.equal.T.C.R.System.SharedPtr.T.C.R.System.SharedPtr.T.left
            {
                description
                {
                    The first shared pointer.
                }
            }
            parameter System.operator.equal.T.C.R.System.SharedPtr.T.C.R.System.SharedPtr.T.right
            {
                description
                {
                    The second shared pointer.
                }
            }
            returns System.operator.equal.T.C.R.System.SharedPtr.T.C.R.System.SharedPtr.T.returnValue
            {
                description
                {
                    Returns true if "\emph{left}" points to the same object as "\emph{right}" or 
                    both are null, false otherwise.
                }
            }
            owner System.SharedPtr.T;
        }
        function System.operator.equal.T.C.R.System.UniquePtr.T.C.R.System.UniquePtr.T
        {
            description
            {
                Compares two unique pointers for equality.
            }
            parameter System.operator.equal.T.C.R.System.UniquePtr.T.C.R.System.UniquePtr.T.left
            {
                description
                {
                    The first unique pointer.
                }
            }
            parameter System.operator.equal.T.C.R.System.UniquePtr.T.C.R.System.UniquePtr.T.right
            {
                description
                {
                    The second unique pointer.
                }
            }
            returns System.operator.equal.T.C.R.System.UniquePtr.T.C.R.System.UniquePtr.T.returnValue
            {
                description
                {
                    Returns true if the pointer contained by the first unique pointer is equal to 
                    the pointer contained by the second unique pointer.
                }
            }
            owner System.UniquePtr.T;
        }
        function System.operator.equal.T.C.R.System.WeakCount.T.C.R.System.WeakCount.T
        {
            description
            {
                Compares two weak counts for equality.
            }
            parameter System.operator.equal.T.C.R.System.WeakCount.T.C.R.System.WeakCount.T.left
            {
                description
                {
                    The first weak count.
                }
            }
            parameter System.operator.equal.T.C.R.System.WeakCount.T.C.R.System.WeakCount.T.right
            {
                description
                {
                    The second weak count.
                }
            }
            returns System.operator.equal.T.C.R.System.WeakCount.T.C.R.System.WeakCount.T.returnValue
            {
                description
                {
                    Returns true if "\emph{left}" contains the same counter as "\emph{right}" or both are empty, false otherwise.
                }
            }
            owner System.WeakCount.T;
        }
        function System.operator.shiftRight.System.uhuge.System.uhuge
        {
            description
            {
                Shifts the given System.uhuge value to given bit positions right and returns it.
            }
            parameter System.operator.shiftRight.System.uhuge.System.uhuge.left
            {
                description
                {
                    An uhuge value to shift.
                }
            }
            parameter System.operator.shiftRight.System.uhuge.System.uhuge.right
            {
                description
                {
                    Number of bit positions to shift.
                }
            }
            returns System.operator.shiftRight.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns the given uhuge value shifted given number of bit positions right.
                }
            }
            owner System.uhuge;
        }
        function System.operator.xor.System.uhuge.System.uhuge
        {
            description
            {
                Computes the bitwise-XOR operation of two 128-bit values.
            }
            parameter System.operator.xor.System.uhuge.System.uhuge.left
            {
                description
                {
                    The first 128-bit value.
                }
            }
            parameter System.operator.xor.System.uhuge.System.uhuge.right
            {
                description
                {
                    The second 128-bit value.
                }
            }
            returns System.operator.xor.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns "$left$" XOR "$right$".
                }
            }
            owner System.uhuge;
        }
        function System.operator.or.System.uhuge.System.uhuge
        {
            description
            {
                Computes bitwise-OR of two 128-bit values.
            }
            parameter System.operator.or.System.uhuge.System.uhuge.left
            {
                description
                {
                    The first 128-bit value.
                }
            }
            parameter System.operator.or.System.uhuge.System.uhuge.right
            {
                description
                {
                    The second 128-bit value.
                }
            }
            returns System.operator.or.System.uhuge.System.uhuge.returnValue
            {
                description
                {
                    Returns bitwise-OR of "$left$" and "$right$".
                }
            }
            owner System.uhuge;
        }
        function System.operator.complement.System.uhuge
        {
            description
            {
                Computes bitwise complement of a 128-bit value.
            }
            parameter System.operator.complement.System.uhuge.x
            {
                description
                {
                    A 128-bit value.
                }
            }
            returns System.operator.complement.System.uhuge.returnValue
            {
                description
                {
                    Returns bitwise complement of "$x$".
                }
            }
            owner System.uhuge;
        }
        enumType System.CharClass
        {
            description
            {
                A character classification enumeration.
            }
            enumConstant System.CharClass.alnum
            {
                description
                {
                    Alphanumeric character.
                }
            }
            enumConstant System.CharClass.alpha
            {
                description
                {
                    Alphabetic character.
                }
            }
            enumConstant System.CharClass.cntrl
            {
                description
                {
                    Control character.
                }
            }
            enumConstant System.CharClass.digit
            {
                description
                {
                    Digit character.
                }
            }
            enumConstant System.CharClass.graph
            {
                description
                {
                    Graphical character.
                }
            }
            enumConstant System.CharClass.lower
            {
                description
                {
                    Lower case alphabetic character.
                }
            }
            enumConstant System.CharClass.none
            {
                description
                {
                    No classification.
                }
            }
            enumConstant System.CharClass.print
            {
                description
                {
                    Printable character.
                }
            }
            enumConstant System.CharClass.punct
            {
                description
                {
                    Punctuation character.
                }
            }
            enumConstant System.CharClass.space
            {
                description
                {
                    White space character.
                }
            }
            enumConstant System.CharClass.upper
            {
                description
                {
                    Upper case alphabetic character.
                }
            }
            enumConstant System.CharClass.xdigit
            {
                description
                {
                    Hexadecimal digit character.
                }
            }
        }
        constant System.EXIT_CHAR_CLASS_TABLE_ALLOCATE
        {
            description
            {
                Program exit status when the character class table could not be allocated.
            }
        }
        constant System.InsertionSortThreshold
        {
            description
            {
                A threshold value for doing insertion sort.
            }
        }
    }
    namespace System.Collections
    {
        description
        {
            Contains collection classes and functions that operate on collections.
        }
        diagram(class, collectionclasses, "Collection Classes");
        class System.Collections.BitSet
        {
            description
            {
                A compact sequence of bits.
            }
            example <examples/System.Collections.BitSet.cm>;
            function System.Collections.BitSet.constructor.P.System.Collections.BitSet
            {
                description
                {
                    Constructor. Constructs an empty bit set.
                }
                source <../src/bitset.pdf>(1, 1);
            }
            function System.Collections.BitSet.constructor.P.System.Collections.BitSet.C.R.System.Collections.BitSet
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.BitSet.constructor.P.System.Collections.BitSet.C.R.System.Collections.BitSet.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.BitSet.operator.assign.P.System.Collections.BitSet.C.R.System.Collections.BitSet
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.BitSet.operator.assign.P.System.Collections.BitSet.C.R.System.Collections.BitSet.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.BitSet.constructor.P.System.Collections.BitSet.RR.System.Collections.BitSet
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.BitSet.constructor.P.System.Collections.BitSet.RR.System.Collections.BitSet.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.BitSet.operator.assign.P.System.Collections.BitSet.RR.System.Collections.BitSet
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.BitSet.operator.assign.P.System.Collections.BitSet.RR.System.Collections.BitSet.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.BitSet.All.C.P.System.Collections.BitSet
            {
                description
                {
                    Returns true if all the bits are 1, false otherwise.
                }
                returns System.Collections.BitSet.All.C.P.System.Collections.BitSet.returnValue
                {
                    description
                    {
                        Returns true if all the bits are 1, false otherwise.
                    }
                }
                source <../src/bitset.pdf>(3, 3);
            }
            function System.Collections.BitSet.Any.C.P.System.Collections.BitSet
            {
                description
                {
                    Returns true if any bit is 1, false otherwise.
                }
                returns System.Collections.BitSet.Any.C.P.System.Collections.BitSet.returnValue
                {
                    description
                    {
                        Returns true if any bit is 1, false otherwise.
                    }
                }
                source <../src/bitset.pdf>(4, 4);
            }
            function System.Collections.BitSet.constructor.P.System.Collections.BitSet.C.R.System.String
            {
                description
                {
                    Constructor. Constructs a bit set from a string of bits.
                }
                parameter System.Collections.BitSet.constructor.P.System.Collections.BitSet.C.R.System.String.bits_
                {
                    description
                    {
                        A string of bits.
                    }
                }
                source <../src/bitset.pdf>(1, 1);
            }
            function System.Collections.BitSet.constructor.P.System.Collections.BitSet.int
            {
                description
                {
                    Constructor. Constructs a bit set capable of holding given number of bits.
                }
                parameter System.Collections.BitSet.constructor.P.System.Collections.BitSet.int.numBits_
                {
                    description
                    {
                        Number of bits the bit set will contain.
                    }
                }
                source <../src/bitset.pdf>(1, 1);
            }
            function System.Collections.BitSet.Clear.P.System.Collections.BitSet
            {
                description
                {
                    Makes the bit set empty.
                }
                source <../src/bitset.pdf>(2, 2);
            }
            function System.Collections.BitSet.Count.C.P.System.Collections.BitSet
            {
                description
                {
                    Returns the number of bits the bit set contains.
                }
                returns System.Collections.BitSet.Count.C.P.System.Collections.BitSet.returnValue
                {
                    description
                    {
                        Returns the number of bits the bit set contains.
                    }
                }
                source <../src/bitset.pdf>(2, 2);
            }
            function System.Collections.BitSet.Flip.P.System.Collections.BitSet
            {
                description
                {
                    Toggles the values of the bits that the bit set contains.
                }
                source <../src/bitset.pdf>(3, 3);
            }
            function System.Collections.BitSet.Flip.P.System.Collections.BitSet.int
            {
                description
                {
                    Toggles the value of the bit with the given index.
                }
                parameter System.Collections.BitSet.Flip.P.System.Collections.BitSet.int.pos
                {
                    description
                    {
                        Index of the bit to toggle.
                    }
                }
                source <../src/bitset.pdf>(3, 3);
            }
            function System.Collections.BitSet.None.C.P.System.Collections.BitSet
            {
                description
                {
                    Returns true if all the bits are 0, false otherwise.
                }
                returns System.Collections.BitSet.None.C.P.System.Collections.BitSet.returnValue
                {
                    description
                    {
                        Returns true if all the bits are 0, false otherwise.
                    }
                }
                source <../src/bitset.pdf>(4, 4);
            }
            function System.Collections.BitSet.Reset.P.System.Collections.BitSet
            {
                description
                {
                    Resets all the bits to 0.
                }
                source <../src/bitset.pdf>(2, 2);
            }
            function System.Collections.BitSet.Reset.P.System.Collections.BitSet.int
            {
                description
                {
                    Resets the bit with the given index to 0.
                }
                parameter System.Collections.BitSet.Reset.P.System.Collections.BitSet.int.pos
                {
                    description
                    {
                        Index of the bit to reset.
                    }
                }
                source <../src/bitset.pdf>(2, 2);
            }
            function System.Collections.BitSet.Resize.P.System.Collections.BitSet.int
            {
                description
                {
                    Resizes the bit set to contain the given number of bits.
                }
                parameter System.Collections.BitSet.Resize.P.System.Collections.BitSet.int.numBits_
                {
                    description
                    {
                        Number of bits the bit set will contain.
                    }
                }
                source <../src/bitset.pdf>(2, 2);
            }
            function System.Collections.BitSet.Set.P.System.Collections.BitSet
            {
                description
                {
                    Sets all the bits to 1.
                }
                source <../src/bitset.pdf>(2, 2);
            }
            function System.Collections.BitSet.Set.P.System.Collections.BitSet.int
            {
                description
                {
                    Sets the bit with the given index to 1.
                }
                parameter System.Collections.BitSet.Set.P.System.Collections.BitSet.int.pos
                {
                    description
                    {
                        Index of the bit to set.
                    }
                }
                source <../src/bitset.pdf>(2, 2);
            }
            function System.Collections.BitSet.Set.P.System.Collections.BitSet.int.bool
            {
                description
                {
                    Sets the bit with the given index to the given value.
                }
                parameter System.Collections.BitSet.Set.P.System.Collections.BitSet.int.bool.bit
                {
                    description
                    {
                        If true, the bit will be set to 1, otherwise it will be reset to 0.
                    }
                }
                parameter System.Collections.BitSet.Set.P.System.Collections.BitSet.int.bool.pos
                {
                    description
                    {
                        Index of the bit to set.
                    }
                }
                source <../src/bitset.pdf>(3, 3);
            }
            function System.Collections.BitSet.Test.C.P.System.Collections.BitSet.int
            {
                description
                {
                    Returns true if a bit with the given index is 1, false otherwise.
                }
                parameter System.Collections.BitSet.Test.C.P.System.Collections.BitSet.int.pos
                {
                    description
                    {
                        Index of the bit to test.
                    }
                }
                returns System.Collections.BitSet.Test.C.P.System.Collections.BitSet.int.returnValue
                {
                    description
                    {
                        Returns true if a bit with the given index is 1, false otherwise.
                    }
                }
                source <../src/bitset.pdf>(3, 3);
            }
            function System.Collections.BitSet.ToString.C.P.System.Collections.BitSet
            {
                description
                {
                    Returns the string representation of the bit set.
                }
                returns System.Collections.BitSet.ToString.C.P.System.Collections.BitSet.returnValue
                {
                    description
                    {
                        Returns the string representation of the bit set.
                    }
                }
                source <../src/bitset.pdf>(5, 5);
            }
            function System.Collections.BitSet.operator.equal.C.P.System.Collections.BitSet.C.R.System.Collections.BitSet
            {
                description
                {
                    Compares this bit set and given bit set for equality.
                }
                parameter System.Collections.BitSet.operator.equal.C.P.System.Collections.BitSet.C.R.System.Collections.BitSet.that
                {
                    description
                    {
                        A bit set to compare with.
                    }
                }
                returns System.Collections.BitSet.operator.equal.C.P.System.Collections.BitSet.C.R.System.Collections.BitSet.returnValue
                {
                    description
                    {
                        Returns true if both bitsets contain the same number of equal bits, false otherwise.
                    }
                }
                source <../src/bitset.pdf>(4, 4);
            }
            function System.Collections.BitSet.operator.index.C.P.System.Collections.BitSet.int
            {
                description
                {
                    Returns true if the bit with the given index is 1 and false if it is 0.
                }
                parameter System.Collections.BitSet.operator.index.C.P.System.Collections.BitSet.int.index
                {
                    description
                    {
                        Index of the bit to test.
                    }
                }
                returns System.Collections.BitSet.operator.index.C.P.System.Collections.BitSet.int.returnValue
                {
                    description
                    {
                        Returns true if the bit with the given index is 1 and false if it is 0.
                    }
                }
                source <../src/bitset.pdf>(3, 3);
            }
            function System.Collections.BitSet.destructor.P.System.Collections.BitSet
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.Collections.Bucket.T
        {
            description
            {
                A hash table bucket.
            }
            typedef System.Collections.Bucket.T.ValueType
            {
                description
                {
                    Type of value contained by the bucket.
                }
            }
            function System.Collections.Bucket.T.constructor.P.System.Collections.Bucket.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Bucket.T.constructor.P.System.Collections.Bucket.T.C.R.System.Collections.Bucket.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Bucket.T.constructor.P.System.Collections.Bucket.T.C.R.System.Collections.Bucket.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Bucket.T.operator.assign.P.System.Collections.Bucket.T.C.R.System.Collections.Bucket.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Bucket.T.operator.assign.P.System.Collections.Bucket.T.C.R.System.Collections.Bucket.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Bucket.T.constructor.P.System.Collections.Bucket.T.RR.System.Collections.Bucket.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Bucket.T.constructor.P.System.Collections.Bucket.T.RR.System.Collections.Bucket.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Bucket.T.operator.assign.P.System.Collections.Bucket.T.RR.System.Collections.Bucket.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Bucket.T.operator.assign.P.System.Collections.Bucket.T.RR.System.Collections.Bucket.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.Bucket.T.constructor.P.System.Collections.Bucket.T.C.R.T.P.System.Collections.Bucket.T
            {
                description
                {
                    Constructor. Initializes the bucket with a pointer to the next bucket and a value.
                }
                parameter System.Collections.Bucket.T.constructor.P.System.Collections.Bucket.T.C.R.T.P.System.Collections.Bucket.T.next_
                {
                    description
                    {
                        Pointer to the next bucket.
                    }
                }
                parameter System.Collections.Bucket.T.constructor.P.System.Collections.Bucket.T.C.R.T.P.System.Collections.Bucket.T.value_
                {
                    description
                    {
                        A value contained by the bucket.
                    }
                }
            }
            function System.Collections.Bucket.T.Next.C.P.System.Collections.Bucket.T
            {
                description
                {
                    Returns a pointer to the next bucket.
                }
                returns System.Collections.Bucket.T.Next.C.P.System.Collections.Bucket.T.returnValue
                {
                    description
                    {
                        Returns a pointer to the next bucket.
                    }
                }
            }
            function System.Collections.Bucket.T.SetNext.P.System.Collections.Bucket.T.P.System.Collections.Bucket.T
            {
                description
                {
                    Sets the pointer to the next bucket.
                }
                parameter System.Collections.Bucket.T.SetNext.P.System.Collections.Bucket.T.P.System.Collections.Bucket.T.next_
                {
                    description
                    {
                        A pointer to the next bucket.
                    }
                }
            }
            function System.Collections.Bucket.T.Value.C.P.System.Collections.Bucket.T
            {
                description
                {
                    Returns a constant reference to the value contained by the bucket.
                }
                returns System.Collections.Bucket.T.Value.C.P.System.Collections.Bucket.T.returnValue
                {
                    description
                    {
                        Returns a constant reference to the value contained by the bucket.
                    }
                }
            }
        }
        class System.Collections.ForwardList.T
        {
            description
            {
                A singly linked list of elements.
            }
            remarks
            {
                System.Collections.ForwardList.T is suitable only for very short sequences of items.
                Often a System.Collections.List.T is more appropriate.
            }
            typedef System.Collections.ForwardList.T.ConstIterator
            {
                description
                {
                    A constant iterator type.
                }
            }
            typedef System.Collections.ForwardList.T.Iterator
            {
                description
                {
                    An iterator type.
                }
            }
            typedef System.Collections.ForwardList.T.ValueType
            {
                description
                {
                    The type of the contained element.
                }
            }
            function System.Collections.ForwardList.T.constructor.P.System.Collections.ForwardList.T
            {
                description
                {
                    Constructor. Constructs an empty forward list.
                }
                source <../src/fwdlist.pdf>(3, 3);
            }
            function System.Collections.ForwardList.T.constructor.P.System.Collections.ForwardList.T.C.R.System.Collections.ForwardList.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.ForwardList.T.constructor.P.System.Collections.ForwardList.T.C.R.System.Collections.ForwardList.T.that
                {
                    description
                    {
                        A forward list to copy.
                    }
                }
                source <../src/fwdlist.pdf>(3, 3);
            }
            function System.Collections.ForwardList.T.operator.assign.P.System.Collections.ForwardList.T.C.R.System.Collections.ForwardList.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.ForwardList.T.operator.assign.P.System.Collections.ForwardList.T.C.R.System.Collections.ForwardList.T.that
                {
                    description
                    {
                        A forward list to assign.
                    }
                }
                source <../src/fwdlist.pdf>(3, 3);
            }
            function System.Collections.ForwardList.T.constructor.P.System.Collections.ForwardList.T.RR.System.Collections.ForwardList.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.ForwardList.T.constructor.P.System.Collections.ForwardList.T.RR.System.Collections.ForwardList.T.that
                {
                    description
                    {
                        A forward list to move from.
                    }
                }
                source <../src/fwdlist.pdf>(3, 3);
            }
            function System.Collections.ForwardList.T.operator.assign.P.System.Collections.ForwardList.T.RR.System.Collections.ForwardList.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.ForwardList.T.operator.assign.P.System.Collections.ForwardList.T.RR.System.Collections.ForwardList.T.that
                {
                    description
                    {
                        A forward list to move from.
                    }
                }
                source <../src/fwdlist.pdf>(3, 3);
            }
            function System.Collections.ForwardList.T.Begin.P.System.Collections.ForwardList.T
            {
                description
                {
                    Returns an iterator pointing to the first element of the forward list, or System.Collections.ForwardList.T.End.P.System.Collections.ForwardList.T if the forward list is empty.
                }
                returns System.Collections.ForwardList.T.Begin.P.System.Collections.ForwardList.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the first element of the forward list, or System.Collections.ForwardList.T.End.P.System.Collections.ForwardList.T if the forward list is empty.
                    }
                }
                source <../src/fwdlist.pdf>(4, 4);
            }
            function System.Collections.ForwardList.T.Begin.C.P.System.Collections.ForwardList.T
            {
                description
                {
                    Returns a constant iterator pointing to the first element of the forward list, or System.Collections.ForwardList.T.CEnd.C.P.System.Collections.ForwardList.T if the forward list is empty.
                }
                returns System.Collections.ForwardList.T.Begin.C.P.System.Collections.ForwardList.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the first element of the forward list, or System.Collections.ForwardList.T.CEnd.C.P.System.Collections.ForwardList.T if the forward list is empty.
                    }
                }
                source <../src/fwdlist.pdf>(4, 4);
            }
            function System.Collections.ForwardList.T.CBegin.C.P.System.Collections.ForwardList.T
            {
                description
                {
                    Returns a constant iterator pointing to the first element of the forward list, or System.Collections.ForwardList.T.CEnd.C.P.System.Collections.ForwardList.T if the forward list is empty.
                }
                returns System.Collections.ForwardList.T.CBegin.C.P.System.Collections.ForwardList.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the first element of the forward list, or System.Collections.ForwardList.T.CEnd.C.P.System.Collections.ForwardList.T if the forward list is empty.
                    }
                }
                source <../src/fwdlist.pdf>(4, 4);
            }
            function System.Collections.ForwardList.T.CEnd.C.P.System.Collections.ForwardList.T
            {
                description
                {
                    Returns a constant iterator pointing to one past the end of the forward list.
                }
                returns System.Collections.ForwardList.T.CEnd.C.P.System.Collections.ForwardList.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to one past the end of the forward list.
                    }
                }
                source <../src/fwdlist.pdf>(4, 4);
            }
            function System.Collections.ForwardList.T.Clear.P.System.Collections.ForwardList.T
            {
                description
                {
                    Makes the forward list empty.
                }
                source <../src/fwdlist.pdf>(3, 3);
            }
            function System.Collections.ForwardList.T.Count.C.P.System.Collections.ForwardList.T
            {
                description
                {
                    Counts the number of elements in the forward list.
                }
                remarks
                {
                    This is a "\emph{O(n)}" operation where "\emph{n}" is the number of elements in the forward list.
                }
                returns System.Collections.ForwardList.T.Count.C.P.System.Collections.ForwardList.T.returnValue
                {
                    description
                    {
                        Returns the number of elements in the forward list.
                    }
                }
                source <../src/fwdlist.pdf>(3, 3);
            }
            function System.Collections.ForwardList.T.End.P.System.Collections.ForwardList.T
            {
                description
                {
                    Returns an iterator pointing to one past the end of the forward list.
                }
                returns System.Collections.ForwardList.T.End.P.System.Collections.ForwardList.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to one past the end of the forward list.
                    }
                }
                source <../src/fwdlist.pdf>(4, 4);
            }
            function System.Collections.ForwardList.T.End.C.P.System.Collections.ForwardList.T
            {
                description
                {
                    Returns a constant iterator pointing to one past the end of the forward list.
                }
                returns System.Collections.ForwardList.T.End.C.P.System.Collections.ForwardList.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to one past the end of the forward list.
                    }
                }
                source <../src/fwdlist.pdf>(4, 4);
            }
            function System.Collections.ForwardList.T.Front.C.P.System.Collections.ForwardList.T
            {
                description
                {
                    Returns a constant reference to the first element in the forward list.
                }
                returns System.Collections.ForwardList.T.Front.C.P.System.Collections.ForwardList.T.returnValue
                {
                    description
                    {
                        Returns a constant reference to the first element in the forward list.
                    }
                }
                source <../src/fwdlist.pdf>(4, 4);
            }
            function System.Collections.ForwardList.T.InsertAfter.P.System.Collections.ForwardList.T.System.Collections.ForwardListNodeIterator.T.R.T.P.T.C.R.T
            {
                description
                {
                    Inserts an element after the position pointed by the given iterator, 
                    or to the front of the forward list if the forward list is empty and the iterator is an System.Collections.ForwardList.T.End.P.System.Collections.ForwardList.T iterator.
                }
                parameter System.Collections.ForwardList.T.InsertAfter.P.System.Collections.ForwardList.T.System.Collections.ForwardListNodeIterator.T.R.T.P.T.C.R.T.pos
                {
                    description
                    {
                        An iterator.
                    }
                }
                parameter System.Collections.ForwardList.T.InsertAfter.P.System.Collections.ForwardList.T.System.Collections.ForwardListNodeIterator.T.R.T.P.T.C.R.T.value
                {
                    description
                    {
                        A value to insert.
                    }
                }
                returns System.Collections.ForwardList.T.InsertAfter.P.System.Collections.ForwardList.T.System.Collections.ForwardListNodeIterator.T.R.T.P.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the inserted element.
                    }
                }
                source <../src/fwdlist.pdf>(4, 4);
            }
            function System.Collections.ForwardList.T.InsertFront.P.System.Collections.ForwardList.T.C.R.T
            {
                description
                {
                    Inserts an element to the front of the forward list.
                }
                parameter System.Collections.ForwardList.T.InsertFront.P.System.Collections.ForwardList.T.C.R.T.value
                {
                    description
                    {
                        A value to insert.
                    }
                }
                returns System.Collections.ForwardList.T.InsertFront.P.System.Collections.ForwardList.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the inserted element.
                    }
                }
                source <../src/fwdlist.pdf>(4, 4);
            }
            function System.Collections.ForwardList.T.IsEmpty.C.P.System.Collections.ForwardList.T
            {
                description
                {
                    Returns true if the forward list is empty, false otherwise.
                }
                returns System.Collections.ForwardList.T.IsEmpty.C.P.System.Collections.ForwardList.T.returnValue
                {
                    description
                    {
                        Returns true if the forward list is empty, false otherwise.
                    }
                }
                source <../src/fwdlist.pdf>(3, 3);
            }
            function System.Collections.ForwardList.T.Remove.P.System.Collections.ForwardList.T.C.R.T
            {
                description
                {
                    Removes all occurrences of the given value from the forward list.
                }
                parameter System.Collections.ForwardList.T.Remove.P.System.Collections.ForwardList.T.C.R.T.value
                {
                    description
                    {
                        A value to remove.
                    }
                }
                source <../src/fwdlist.pdf>(5, 5);
            }
            function System.Collections.ForwardList.T.RemoveAfter.P.System.Collections.ForwardList.T.System.Collections.ForwardListNodeIterator.T.R.T.P.T
            {
                description
                {
                    Removes an element after the position pointed by the given iterator.
                }
                parameter System.Collections.ForwardList.T.RemoveAfter.P.System.Collections.ForwardList.T.System.Collections.ForwardListNodeIterator.T.R.T.P.T.pos
                {
                    description
                    {
                        An iterator.
                    }
                }
                source <../src/fwdlist.pdf>(5, 5);
            }
            function System.Collections.ForwardList.T.RemoveFront.P.System.Collections.ForwardList.T
            {
                description
                {
                    Removes an element from the front of the forward list.
                }
                source <../src/fwdlist.pdf>(4, 4);
            }
            function System.Collections.ForwardList.T.destructor.P.System.Collections.ForwardList.T
            {
                description
                {
                    Destructor.
                }
                source <../src/fwdlist.pdf>(3, 3);
            }
            modelof System.Concepts.ForwardContainer.T;
        }
        class System.Collections.ForwardListNode.T
        {
            description
            {
                A forward list node type.
            }
            function System.Collections.ForwardListNode.T.constructor.P.System.Collections.ForwardListNode.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.ForwardListNode.T.constructor.P.System.Collections.ForwardListNode.T.C.R.System.Collections.ForwardListNode.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.ForwardListNode.T.constructor.P.System.Collections.ForwardListNode.T.C.R.System.Collections.ForwardListNode.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.ForwardListNode.T.operator.assign.P.System.Collections.ForwardListNode.T.C.R.System.Collections.ForwardListNode.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.ForwardListNode.T.operator.assign.P.System.Collections.ForwardListNode.T.C.R.System.Collections.ForwardListNode.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.ForwardListNode.T.constructor.P.System.Collections.ForwardListNode.T.RR.System.Collections.ForwardListNode.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.ForwardListNode.T.constructor.P.System.Collections.ForwardListNode.T.RR.System.Collections.ForwardListNode.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.ForwardListNode.T.operator.assign.P.System.Collections.ForwardListNode.T.RR.System.Collections.ForwardListNode.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.ForwardListNode.T.operator.assign.P.System.Collections.ForwardListNode.T.RR.System.Collections.ForwardListNode.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.ForwardListNode.T.constructor.P.System.Collections.ForwardListNode.T.P.System.Collections.ForwardListNode.T.C.R.T
            {
                description
                {
                    Constructor. Initializes the forward list node with a pointer to the next forward list node and a value.
                }
                parameter System.Collections.ForwardListNode.T.constructor.P.System.Collections.ForwardListNode.T.P.System.Collections.ForwardListNode.T.C.R.T.next_
                {
                    description
                    {
                        A pointer to the next forward list node.
                    }
                }
                parameter System.Collections.ForwardListNode.T.constructor.P.System.Collections.ForwardListNode.T.P.System.Collections.ForwardListNode.T.C.R.T.value_
                {
                    description
                    {
                        A value.
                    }
                }
            }
            function System.Collections.ForwardListNode.T.Next.C.P.System.Collections.ForwardListNode.T
            {
                description
                {
                    Returns a pointer to the next forward list node.
                }
                returns System.Collections.ForwardListNode.T.Next.C.P.System.Collections.ForwardListNode.T.returnValue
                {
                    description
                    {
                        Returns a pointer to the next forward list node.
                    }
                }
            }
            function System.Collections.ForwardListNode.T.SetNext.P.System.Collections.ForwardListNode.T.P.System.Collections.ForwardListNode.T
            {
                description
                {
                    Sets the pointer to the next forward list node.
                }
                parameter System.Collections.ForwardListNode.T.SetNext.P.System.Collections.ForwardListNode.T.P.System.Collections.ForwardListNode.T.next_
                {
                    description
                    {
                        A pointer to the next forward list node.
                    }
                }
            }
            function System.Collections.ForwardListNode.T.Value.P.System.Collections.ForwardListNode.T
            {
                description
                {
                    Returns a reference to the value contained by the forward list node.
                }
                returns System.Collections.ForwardListNode.T.Value.P.System.Collections.ForwardListNode.T.returnValue
                {
                    description
                    {
                        Returns a reference to the value contained by the forward list node.
                    }
                }
            }
            function System.Collections.ForwardListNode.T.Value.C.P.System.Collections.ForwardListNode.T
            {
                description
                {
                    Returns a constant reference to the value contained by the forward list node.
                }
                returns System.Collections.ForwardListNode.T.Value.C.P.System.Collections.ForwardListNode.T.returnValue
                {
                    description
                    {
                        Returns a constant reference to the value contained by the forward list node.
                    }
                }
            }
        }
        class System.Collections.ForwardListNodeIterator.T.R.P
        {
            description
            {
                A forward iterator that iterates throught a System.Collections.ForwardList.T.
            }
            typedef System.Collections.ForwardListNodeIterator.T.R.P.PointerType
            {
                description
                {
                    The type of a pointer to an element.
                }
            }
            typedef System.Collections.ForwardListNodeIterator.T.R.P.ReferenceType
            {
                description
                {
                    The type of a reference to an element.
                }
            }
            typedef System.Collections.ForwardListNodeIterator.T.R.P.ValueType
            {
                description
                {
                    The type of an element.
                }
            }
            function System.Collections.ForwardListNodeIterator.T.R.P.constructor.P.System.Collections.ForwardListNodeIterator.T.R.P
            {
                description
                {
                    Constructor. Default constructs a forward list node iterator.
                }
                source <../src/fwdlist.pdf>(2, 2);
            }
            function System.Collections.ForwardListNodeIterator.T.R.P.constructor.P.System.Collections.ForwardListNodeIterator.T.R.P.C.R.System.Collections.ForwardListNodeIterator.T.R.P
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.ForwardListNodeIterator.T.R.P.constructor.P.System.Collections.ForwardListNodeIterator.T.R.P.C.R.System.Collections.ForwardListNodeIterator.T.R.P.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.ForwardListNodeIterator.T.R.P.operator.assign.P.System.Collections.ForwardListNodeIterator.T.R.P.C.R.System.Collections.ForwardListNodeIterator.T.R.P
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.ForwardListNodeIterator.T.R.P.operator.assign.P.System.Collections.ForwardListNodeIterator.T.R.P.C.R.System.Collections.ForwardListNodeIterator.T.R.P.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.ForwardListNodeIterator.T.R.P.constructor.P.System.Collections.ForwardListNodeIterator.T.R.P.RR.System.Collections.ForwardListNodeIterator.T.R.P
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.ForwardListNodeIterator.T.R.P.constructor.P.System.Collections.ForwardListNodeIterator.T.R.P.RR.System.Collections.ForwardListNodeIterator.T.R.P.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.ForwardListNodeIterator.T.R.P.operator.assign.P.System.Collections.ForwardListNodeIterator.T.R.P.RR.System.Collections.ForwardListNodeIterator.T.R.P
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.ForwardListNodeIterator.T.R.P.operator.assign.P.System.Collections.ForwardListNodeIterator.T.R.P.RR.System.Collections.ForwardListNodeIterator.T.R.P.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.ForwardListNodeIterator.T.R.P.constructor.P.System.Collections.ForwardListNodeIterator.T.R.P.P.System.Collections.ForwardListNode.T
            {
                description
                {
                    Constructor. Constructs a forward list node iterator pointing to a forward list node.
                }
                parameter System.Collections.ForwardListNodeIterator.T.R.P.constructor.P.System.Collections.ForwardListNodeIterator.T.R.P.P.System.Collections.ForwardListNode.T.node_
                {
                    description
                    {
                        A pointer to a forward list node.
                    }
                }
                source <../src/fwdlist.pdf>(2, 2);
            }
            function System.Collections.ForwardListNodeIterator.T.R.P.GetNode.C.P.System.Collections.ForwardListNodeIterator.T.R.P
            {
                description
                {
                    Returns the contained pointer to an element.
                }
                returns System.Collections.ForwardListNodeIterator.T.R.P.GetNode.C.P.System.Collections.ForwardListNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns the contained pointer to an element.
                    }
                }
                source <../src/fwdlist.pdf>(2, 2);
            }
            function System.Collections.ForwardListNodeIterator.T.R.P.operator.times.C.P.System.Collections.ForwardListNodeIterator.T.R.P
            {
                description
                {
                    Returns a reference to an element.
                }
                returns System.Collections.ForwardListNodeIterator.T.R.P.operator.times.C.P.System.Collections.ForwardListNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a reference to an element.
                    }
                }
                source <../src/fwdlist.pdf>(2, 2);
            }
            function System.Collections.ForwardListNodeIterator.T.R.P.operator.increment.P.System.Collections.ForwardListNodeIterator.T.R.P
            {
                description
                {
                    Advances the iterator pointing to the next element in the forward list.
                }
                returns System.Collections.ForwardListNodeIterator.T.R.P.operator.increment.P.System.Collections.ForwardListNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a reference to the iterator.
                    }
                }
                source <../src/fwdlist.pdf>(2, 2);
            }
            function System.Collections.ForwardListNodeIterator.T.R.P.operator.pointer.C.P.System.Collections.ForwardListNodeIterator.T.R.P
            {
                description
                {
                    Returns a pointer to an element.
                }
                returns System.Collections.ForwardListNodeIterator.T.R.P.operator.pointer.C.P.System.Collections.ForwardListNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a pointer to an element.
                    }
                }
                source <../src/fwdlist.pdf>(2, 2);
            }
            modelof System.Concepts.ForwardIterator.T;
        }
        class System.Collections.HashMap.K.T.H.C
        {
            description
            {
                An associative container of key-value pairs organized in a hash table. The keys need not be ordered.
            }
            typedef System.Collections.HashMap.K.T.H.C.Compare
            {
                description
                {
                    A relation used to compare keys.
                }
            }
            typedef System.Collections.HashMap.K.T.H.C.ConstIterator
            {
                description
                {
                    A contant iterator type.
                }
            }
            typedef System.Collections.HashMap.K.T.H.C.HashFun
            {
                description
                {
                    A hash function type.
                }
            }
            typedef System.Collections.HashMap.K.T.H.C.Iterator
            {
                description
                {
                    An iterator type.
                }
            }
            typedef System.Collections.HashMap.K.T.H.C.KeyType
            {
                description
                {
                    The type of the key.
                }
            }
            typedef System.Collections.HashMap.K.T.H.C.MappedType
            {
                description
                {
                    The type associated with the key.
                }
            }
            typedef System.Collections.HashMap.K.T.H.C.Self
            {
                description
                {
                }
            }
            typedef System.Collections.HashMap.K.T.H.C.TableType
            {
                description
                {
                }
            }
            typedef System.Collections.HashMap.K.T.H.C.ValueType
            {
                description
                {
                    A pair composed of key type and mapped type.
                }
            }
            function System.Collections.HashMap.K.T.H.C.constructor.P.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashMap.K.T.H.C.constructor.P.System.Collections.HashMap.K.T.H.C.C.R.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashMap.K.T.H.C.constructor.P.System.Collections.HashMap.K.T.H.C.C.R.System.Collections.HashMap.K.T.H.C.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.operator.assign.P.System.Collections.HashMap.K.T.H.C.C.R.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashMap.K.T.H.C.operator.assign.P.System.Collections.HashMap.K.T.H.C.C.R.System.Collections.HashMap.K.T.H.C.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.constructor.P.System.Collections.HashMap.K.T.H.C.RR.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashMap.K.T.H.C.constructor.P.System.Collections.HashMap.K.T.H.C.RR.System.Collections.HashMap.K.T.H.C.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.operator.assign.P.System.Collections.HashMap.K.T.H.C.RR.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashMap.K.T.H.C.operator.assign.P.System.Collections.HashMap.K.T.H.C.RR.System.Collections.HashMap.K.T.H.C.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.Begin.P.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Returns an iterator to the beginning of the hash map, or
                    System.Collections.HashMap.K.T.H.C.End.P.System.Collections.HashMap.K.T.H.C if the hash map is empty.
                }
                returns System.Collections.HashMap.K.T.H.C.Begin.P.System.Collections.HashMap.K.T.H.C.returnValue
                {
                    description
                    {
                        Returns an iterator to the beginning of the hash map, or
                        System.Collections.HashMap.K.T.H.C.End.P.System.Collections.HashMap.K.T.H.C if the hash map is empty.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.Begin.C.P.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Returns a constant iterator to the beginning of the hash map, or 
                    System.Collections.HashMap.K.T.H.C.CEnd.C.P.System.Collections.HashMap.K.T.H.C if the hash map is empty.
                }
                returns System.Collections.HashMap.K.T.H.C.Begin.C.P.System.Collections.HashMap.K.T.H.C.returnValue
                {
                    description
                    {
                        Returns a constant iterator to the beginning of the hash map, or 
                        System.Collections.HashMap.K.T.H.C.CEnd.C.P.System.Collections.HashMap.K.T.H.C if the hash map is empty.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.CBegin.C.P.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Returns a constant iterator to the beginning of the hash map, or
                    System.Collections.HashMap.K.T.H.C.CEnd.C.P.System.Collections.HashMap.K.T.H.C if the hash map is empty.
                }
                returns System.Collections.HashMap.K.T.H.C.CBegin.C.P.System.Collections.HashMap.K.T.H.C.returnValue
                {
                    description
                    {
                        Returns a constant iterator to the beginning of the hash map, or
                        System.Collections.HashMap.K.T.H.C.CEnd.C.P.System.Collections.HashMap.K.T.H.C if the hash map is empty.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.CEnd.C.P.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Returns a constant iterator pointing one past the end of the hash map.
                }
                returns System.Collections.HashMap.K.T.H.C.CEnd.C.P.System.Collections.HashMap.K.T.H.C.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing one past the end of the hash map.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.CFind.C.P.System.Collections.HashMap.K.T.H.C.C.R.K
            {
                description
                {
                    Searches a key from the hash map and returns a constant iterator pointing to the found element,
                    or System.Collections.HashMap.K.T.H.C.CEnd.C.P.System.Collections.HashMap.K.T.H.C if the key is
                    not found in the hash map.
                }
                parameter System.Collections.HashMap.K.T.H.C.CFind.C.P.System.Collections.HashMap.K.T.H.C.C.R.K.key
                {
                    description
                    {
                        A key to search.
                    }
                }
                returns System.Collections.HashMap.K.T.H.C.CFind.C.P.System.Collections.HashMap.K.T.H.C.C.R.K.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the found element,
                        or System.Collections.HashMap.K.T.H.C.CEnd.C.P.System.Collections.HashMap.K.T.H.C if the key is
                        not found in the hash map.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.Clear.P.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Makes the hash map empty.
                }
            }
            function System.Collections.HashMap.K.T.H.C.Count.C.P.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Returns the number of elements in the hash map.
                }
                returns System.Collections.HashMap.K.T.H.C.Count.C.P.System.Collections.HashMap.K.T.H.C.returnValue
                {
                    description
                    {
                        Returns the number of elements in the hash map.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.End.P.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Returns an iterator pointing one past the end of the hash map.
                }
                returns System.Collections.HashMap.K.T.H.C.End.P.System.Collections.HashMap.K.T.H.C.returnValue
                {
                    description
                    {
                        Returns an iterator pointing one past the end of the hash map.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.End.C.P.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Returns a constant iterator pointing one past the end of the hash map.
                }
                returns System.Collections.HashMap.K.T.H.C.End.C.P.System.Collections.HashMap.K.T.H.C.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing one past the end of the hash map.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.Find.P.System.Collections.HashMap.K.T.H.C.C.R.K
            {
                description
                {
                    Searches a key from the hash map and returns an iterator pointing to the found element,
                    or System.Collections.HashMap.K.T.H.C.End.P.System.Collections.HashMap.K.T.H.C if the key is
                    not found in the hash map.
                }
                parameter System.Collections.HashMap.K.T.H.C.Find.P.System.Collections.HashMap.K.T.H.C.C.R.K.key
                {
                    description
                    {
                        A key to seach.
                    }
                }
                returns System.Collections.HashMap.K.T.H.C.Find.P.System.Collections.HashMap.K.T.H.C.C.R.K.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the found element,
                        or System.Collections.HashMap.K.T.H.C.End.P.System.Collections.HashMap.K.T.H.C if the key is
                        not found in the hash map.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.Find.C.P.System.Collections.HashMap.K.T.H.C.C.R.K
            {
                description
                {
                    Searches a key from the hash map and returns a constant iterator pointing to the found element,
                    or System.Collections.HashMap.K.T.H.C.CEnd.C.P.System.Collections.HashMap.K.T.H.C if the key is
                    not found in the hash map.
                }
                parameter System.Collections.HashMap.K.T.H.C.Find.C.P.System.Collections.HashMap.K.T.H.C.C.R.K.key
                {
                    description
                    {
                        A key to search.
                    }
                }
                returns System.Collections.HashMap.K.T.H.C.Find.C.P.System.Collections.HashMap.K.T.H.C.C.R.K.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the found element,
                        or System.Collections.HashMap.K.T.H.C.CEnd.C.P.System.Collections.HashMap.K.T.H.C if the key is
                        not found in the hash map.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.Insert.P.System.Collections.HashMap.K.T.H.C.C.R.System.Pair.K.T
            {
                description
                {
                    Inserts a key-value pair to the hash map if the hash map does not already contain the key.
                    In that case returns a pair consisting a pair of an iterator pointing to the inserted element and 
                    "\textbf{true}". Otherwise does not insert an element, but returns a pair consisting of an iterator
                    pointing to the previously inserted element and "\textbf{false}".
                }
                parameter System.Collections.HashMap.K.T.H.C.Insert.P.System.Collections.HashMap.K.T.H.C.C.R.System.Pair.K.T.value
                {
                    description
                    {
                        A key-value pair to insert.
                    }
                }
                returns System.Collections.HashMap.K.T.H.C.Insert.P.System.Collections.HashMap.K.T.H.C.C.R.System.Pair.K.T.returnValue
                {
                    description
                    {
                        Returns a pair consisting an iterator pointing to the key-value pair in the map, and a
                        Boolean value indicating whether the element was inserted in the hash map.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.IsEmpty.C.P.System.Collections.HashMap.K.T.H.C
            {
                description
                {
                    Returns true if the hash map is empty, false otherwise.
                }
                returns System.Collections.HashMap.K.T.H.C.IsEmpty.C.P.System.Collections.HashMap.K.T.H.C.returnValue
                {
                    description
                    {
                        Returns true if the hash map is empty, false otherwise.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.Remove.P.System.Collections.HashMap.K.T.H.C.System.Collections.HashtableIterator.System.Pair.K.T.R.System.Pair.K.T.P.System.Pair.K.T
            {
                description
                {
                    Removes an element pointed by the given iterator from the hash map.
                }
                parameter System.Collections.HashMap.K.T.H.C.Remove.P.System.Collections.HashMap.K.T.H.C.System.Collections.HashtableIterator.System.Pair.K.T.R.System.Pair.K.T.P.System.Pair.K.T.pos
                {
                    description
                    {
                        Iterator pointing to an element to remove.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.Remove.P.System.Collections.HashMap.K.T.H.C.C.R.K
            {
                description
                {
                    Removes an element with the given key from the hash map.
                }
                parameter System.Collections.HashMap.K.T.H.C.Remove.P.System.Collections.HashMap.K.T.H.C.C.R.K.key
                {
                    description
                    {
                        Key of element to remove.
                    }
                }
            }
            function System.Collections.HashMap.K.T.H.C.operator.index.P.System.Collections.HashMap.K.T.H.C.C.R.K
            {
                description
                {
                    Returns a reference to the value associated with the given key.
                    If there are currently no value associated with the given key, a default constructed value is 
                    created and inserted to the hash map.
                }
                parameter System.Collections.HashMap.K.T.H.C.operator.index.P.System.Collections.HashMap.K.T.H.C.C.R.K.key
                {
                    description
                    {
                        A key.
                    }
                }
                returns System.Collections.HashMap.K.T.H.C.operator.index.P.System.Collections.HashMap.K.T.H.C.C.R.K.returnValue
                {
                    description
                    {
                        A value associated with the key.
                    }
                }
            }
            modelof System.Concepts.ForwardContainer.T;
        }
        class System.Collections.HashSet.T.H.C
        {
            description
            {
                A set of unique elements organized in a hash table. The elements need not be ordered.
            }
            typedef System.Collections.HashSet.T.H.C.Compare
            {
                description
                {
                    A relation used to compare elements.
                }
            }
            typedef System.Collections.HashSet.T.H.C.ConstIterator
            {
                description
                {
                    A constant iterator type.
                }
            }
            typedef System.Collections.HashSet.T.H.C.HashFun
            {
                description
                {
                    A hash function type.
                }
            }
            typedef System.Collections.HashSet.T.H.C.Iterator
            {
                description
                {
                    An iterator type.
                }
            }
            typedef System.Collections.HashSet.T.H.C.KeyType
            {
                description
                {
                    The key type is equal to the System.Collections.HashSet.T.H.C.ValueType
                    for the hash table.
                }
            }
            typedef System.Collections.HashSet.T.H.C.Self
            {
                description
                {
                }
            }
            typedef System.Collections.HashSet.T.H.C.TableType
            {
                description
                {
                }
            }
            typedef System.Collections.HashSet.T.H.C.ValueType
            {
                description
                {
                    The type of the element in the hash set.
                }
            }
            function System.Collections.HashSet.T.H.C.constructor.P.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashSet.T.H.C.constructor.P.System.Collections.HashSet.T.H.C.C.R.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashSet.T.H.C.constructor.P.System.Collections.HashSet.T.H.C.C.R.System.Collections.HashSet.T.H.C.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.operator.assign.P.System.Collections.HashSet.T.H.C.C.R.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashSet.T.H.C.operator.assign.P.System.Collections.HashSet.T.H.C.C.R.System.Collections.HashSet.T.H.C.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.constructor.P.System.Collections.HashSet.T.H.C.RR.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashSet.T.H.C.constructor.P.System.Collections.HashSet.T.H.C.RR.System.Collections.HashSet.T.H.C.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.operator.assign.P.System.Collections.HashSet.T.H.C.RR.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashSet.T.H.C.operator.assign.P.System.Collections.HashSet.T.H.C.RR.System.Collections.HashSet.T.H.C.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.Begin.P.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Returns an iterator pointing to the beginning of the hash set, or 
                    System.Collections.HashSet.T.H.C.End.P.System.Collections.HashSet.T.H.C if the hash set is empty.
                }
                returns System.Collections.HashSet.T.H.C.Begin.P.System.Collections.HashSet.T.H.C.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the beginning of the hash set, or
                        System.Collections.HashSet.T.H.C.End.P.System.Collections.HashSet.T.H.C if the hash set is empty.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.Begin.C.P.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Returns a constant iterator pointing to the beginning of the hash set, or
                    System.Collections.HashSet.T.H.C.CEnd.C.P.System.Collections.HashSet.T.H.C if the hash set is empty.
                }
                returns System.Collections.HashSet.T.H.C.Begin.C.P.System.Collections.HashSet.T.H.C.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the beginning of the hash set, or
                        System.Collections.HashSet.T.H.C.CEnd.C.P.System.Collections.HashSet.T.H.C if the hash set is empty.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.CBegin.C.P.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Returns a constant iterator pointing to the beginning of the hash set, or
                    System.Collections.HashSet.T.H.C.CEnd.C.P.System.Collections.HashSet.T.H.C if the hash set is empty.
                }
                returns System.Collections.HashSet.T.H.C.CBegin.C.P.System.Collections.HashSet.T.H.C.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the beginning of the hash set, or
                        System.Collections.HashSet.T.H.C.CEnd.C.P.System.Collections.HashSet.T.H.C if the hash set is empty.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.CEnd.C.P.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Returns a constant iterator pointing one past the end of the hash set.
                }
                returns System.Collections.HashSet.T.H.C.CEnd.C.P.System.Collections.HashSet.T.H.C.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing one past the end of the hash set.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.CFind.C.P.System.Collections.HashSet.T.H.C.C.R.T
            {
                description
                {
                    Searches an element in the hash set and returns a constant iterator pointing to it if found,
                    or System.Collections.HashSet.T.H.C.CEnd.C.P.System.Collections.HashSet.T.H.C otherwise.
                }
                parameter System.Collections.HashSet.T.H.C.CFind.C.P.System.Collections.HashSet.T.H.C.C.R.T.key
                {
                    description
                    {
                        An element to search.
                    }
                }
                returns System.Collections.HashSet.T.H.C.CFind.C.P.System.Collections.HashSet.T.H.C.C.R.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the found element if the search was successful, or
                        System.Collections.HashSet.T.H.C.CEnd.C.P.System.Collections.HashSet.T.H.C iterator otherwise.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.Clear.P.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Makes the hash set empty.
                }
            }
            function System.Collections.HashSet.T.H.C.Count.C.P.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Returns the number of elements in the hash set.
                }
                returns System.Collections.HashSet.T.H.C.Count.C.P.System.Collections.HashSet.T.H.C.returnValue
                {
                    description
                    {
                        Returns the number of elements in the hash set.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.End.P.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Returns an iterator pointing one past the end of the hash set.
                }
                returns System.Collections.HashSet.T.H.C.End.P.System.Collections.HashSet.T.H.C.returnValue
                {
                    description
                    {
                        Returns an iterator pointing one past the end of the hash set.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.End.C.P.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Returns a constant iterator pointing one past the end of the hash set.
                }
                returns System.Collections.HashSet.T.H.C.End.C.P.System.Collections.HashSet.T.H.C.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing one past the end of the hash set.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.Find.P.System.Collections.HashSet.T.H.C.C.R.T
            {
                description
                {
                    Searches an element in the hash set and returns an iterator pointing to it if found,
                    or System.Collections.HashSet.T.H.C.End.P.System.Collections.HashSet.T.H.C iterator otherwise.
                }
                parameter System.Collections.HashSet.T.H.C.Find.P.System.Collections.HashSet.T.H.C.C.R.T.key
                {
                    description
                    {
                        An element to seach.
                    }
                }
                returns System.Collections.HashSet.T.H.C.Find.P.System.Collections.HashSet.T.H.C.C.R.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the found element if the search was successful, or
                        System.Collections.HashSet.T.H.C.End.P.System.Collections.HashSet.T.H.C iterator otherwise.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.Find.C.P.System.Collections.HashSet.T.H.C.C.R.T
            {
                description
                {
                    Searches an element in the hash set and returns a constant iterator pointing to it if found,
                    or System.Collections.HashSet.T.H.C.CEnd.C.P.System.Collections.HashSet.T.H.C iterator otherwise.
                }
                parameter System.Collections.HashSet.T.H.C.Find.C.P.System.Collections.HashSet.T.H.C.C.R.T.key
                {
                    description
                    {
                        An element to seach.
                    }
                }
                returns System.Collections.HashSet.T.H.C.Find.C.P.System.Collections.HashSet.T.H.C.C.R.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the found element if the search was successful, or
                        System.Collections.HashSet.T.H.C.CEnd.C.P.System.Collections.HashSet.T.H.C iterator otherwise.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.Insert.P.System.Collections.HashSet.T.H.C.C.R.T
            {
                description
                {
                    Inserts an element into the hash set, if it is not already there.
                }
                parameter System.Collections.HashSet.T.H.C.Insert.P.System.Collections.HashSet.T.H.C.C.R.T.value
                {
                    description
                    {
                        An element to insert.
                    }
                }
                returns System.Collections.HashSet.T.H.C.Insert.P.System.Collections.HashSet.T.H.C.C.R.T.returnValue
                {
                    description
                    {
                        Returns a pair consisting of an iterator pointing to the inserted element and "\textbf{true}" 
                        if the element was inserted, or a pair consisting an iterator pointing to an existing element and
                        "\textbf{false}" otherwise.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.IsEmpty.C.P.System.Collections.HashSet.T.H.C
            {
                description
                {
                    Returns true if the hash set is empty, false otherwise.
                }
                returns System.Collections.HashSet.T.H.C.IsEmpty.C.P.System.Collections.HashSet.T.H.C.returnValue
                {
                    description
                    {
                        Returns true if the hash set is empty, false otherwise.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.Remove.P.System.Collections.HashSet.T.H.C.System.Collections.HashtableIterator.T.R.T.P.T
            {
                description
                {
                    Removes an element pointed by the given iterator from the hash set.
                }
                parameter System.Collections.HashSet.T.H.C.Remove.P.System.Collections.HashSet.T.H.C.System.Collections.HashtableIterator.T.R.T.P.T.pos
                {
                    description
                    {
                        An iterator pointing to the element to remove.
                    }
                }
            }
            function System.Collections.HashSet.T.H.C.Remove.P.System.Collections.HashSet.T.H.C.C.R.T
            {
                description
                {
                    Removes an element from the hash set. If element was not found, does nothing.
                }
                parameter System.Collections.HashSet.T.H.C.Remove.P.System.Collections.HashSet.T.H.C.C.R.T.key
                {
                    description
                    {
                        An element to remove.
                    }
                }
            }
            modelof System.Concepts.ForwardContainer.T;
        }
        class System.Collections.Hasher.T
        {
            description
            {
                Default hash function.
            }
            function System.Collections.Hasher.T.constructor.P.System.Collections.Hasher.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Hasher.T.constructor.P.System.Collections.Hasher.T.C.R.System.Collections.Hasher.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Hasher.T.constructor.P.System.Collections.Hasher.T.C.R.System.Collections.Hasher.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Hasher.T.operator.assign.P.System.Collections.Hasher.T.C.R.System.Collections.Hasher.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Hasher.T.operator.assign.P.System.Collections.Hasher.T.C.R.System.Collections.Hasher.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Hasher.T.constructor.P.System.Collections.Hasher.T.RR.System.Collections.Hasher.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Hasher.T.constructor.P.System.Collections.Hasher.T.RR.System.Collections.Hasher.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Hasher.T.operator.assign.P.System.Collections.Hasher.T.RR.System.Collections.Hasher.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Hasher.T.operator.assign.P.System.Collections.Hasher.T.RR.System.Collections.Hasher.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.Hasher.T.operator.apply.P.System.Collections.Hasher.T.C.R.T
            {
                description
                {
                    Calls the overloaded "\emph{GetHashCode(T)}" function to return a hash code for the given key.
                }
                remarks
                {
                    By overloading the GetHashCode(T) function for the key type, one can use the default hash function as is.
                }
                parameter System.Collections.Hasher.T.operator.apply.P.System.Collections.Hasher.T.C.R.T.x
                {
                    description
                    {
                        A key.
                    }
                }
                returns System.Collections.Hasher.T.operator.apply.P.System.Collections.Hasher.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns a hash code for the given key.
                    }
                }
            }
            modelof System.Concepts.HashFunction.T.Key;
        }
        class System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
        {
            description
            {
                A hash table of unique elements used to implement System.Collections.HashMap.K.T.H.C and
                System.Collections.HashSet.T.H.C. The keys of elements need not be ordered.
            }
            typedef System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.ConstIterator
            {
                description
                {
                    A constant iterator type.
                }
            }
            typedef System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Iterator
            {
                description
                {
                    An iterator type.
                }
            }
            typedef System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Self
            {
                description
                {
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.constructor.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Default constructor. Constructs an empty hash table.
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.constructor.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.constructor.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.that
                {
                    description
                    {
                        A hash table to copy from.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.operator.assign.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.operator.assign.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.that
                {
                    description
                    {
                        A hash table to assign.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.constructor.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.RR.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.constructor.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.RR.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.__parameter0
                {
                    description
                    {
                        A hash table to move from.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.operator.assign.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.RR.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.operator.assign.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.RR.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.__parameter0
                {
                    description
                    {
                        A hash table to move from.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Begin.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Returns an iterator to the beginning of the hash table,
                    or System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.End.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare is 
                    the hash table is empty.
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Begin.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.returnValue
                {
                    description
                    {
                        Returns an iterator to the beginning of the hash table, or
                        System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.End.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare is 
                        the hash table is empty.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Begin.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Returns a constant iterator to the beginning of the hash table, or
                    System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CEnd.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare if the hash table is empty.
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Begin.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.returnValue
                {
                    description
                    {
                        Returns a constant iterator to the beginning of the hash table, or
                        System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CEnd.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare if the hash table is empty.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CBegin.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Returns a constant iterator to the beginning of the hash table, or
                    System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CEnd.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare if the hash table is empty.
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CBegin.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.returnValue
                {
                    description
                    {
                        Returns a constant iterator to the beginning of the hash table, or
                        System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CEnd.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare if the hash table is empty.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CEnd.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Returns a constant iterator one past the end of the hash table.
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CEnd.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.returnValue
                {
                    description
                    {
                        Returns a constant iterator one past the end of the hash table.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CFind.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.KeyType
            {
                description
                {
                    Searches an element with the given key from the hash table and returns a constant iterator pointing to it if found,
                    or System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CEnd.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare iterator otherwise.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CFind.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.KeyType.key
                {
                    description
                    {
                        A key to search.
                    }
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CFind.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.KeyType.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the found element, if the search was successful, or 
                        System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CEnd.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare iterator otherwise.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Clear.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Makes the hash table empty.
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Count.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Returns the number of elements in the hash table.
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Count.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.returnValue
                {
                    description
                    {
                        Returns the number of elements in the hash table.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.End.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Returns an iterator pointing one past the end of the hash table.
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.End.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.returnValue
                {
                    description
                    {
                        Returns an iterator pointing one past the end of the hash table.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.End.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Returns a constant iterator pointing one past the end of the hash table.
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.End.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing one past the end of the hash table.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Find.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.KeyType
            {
                description
                {
                    Searches an element with the given key from the hash table and returns an iterator pointing to it if found,
                    or System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.End.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare iterator otherwise.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Find.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.KeyType.key
                {
                    description
                    {
                        A key to search.
                    }
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Find.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.KeyType.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the found element, if the search was successful, or 
                        System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.End.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare iterator otherwise.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Find.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.KeyType
            {
                description
                {
                    Searches an element with the given key from the hash table and returns a constant iterator pointing to it if found,
                    or System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CEnd.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare iterator otherwise.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Find.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.KeyType.key
                {
                    description
                    {
                        A key to search.
                    }
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Find.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.KeyType.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the found element, if the search was successful, or 
                        System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CEnd.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare iterator otherwise.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.GetBucket.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.int
            {
                description
                {
                    Returns a pointer to first bucket with the given index.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.GetBucket.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.int.index
                {
                    description
                    {
                        Index of the bucket.
                    }
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.GetBucket.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.int.returnValue
                {
                    description
                    {
                        Returns a pointer to first bucket with the given index.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.GetBucketCount.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Returns the number of buckets in the hash table.
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.GetBucketCount.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.returnValue
                {
                    description
                    {
                        Returns the number of buckets in the hash table.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.GetBucketIndex.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.ValueType
            {
                description
                {
                    Returns index of bucket with the given element.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.GetBucketIndex.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.ValueType.value
                {
                    description
                    {
                        An element.
                    }
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.GetBucketIndex.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.ValueType.returnValue
                {
                    description
                    {
                        Returns index of bucket with the given element.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Insert.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.ValueType
            {
                description
                {
                    Inserts an element to the hash table and returns a pair consisting of an iterator to the inserted element and "\textbf{true}" if the element was not already in the hash table, 
                    or a pair consisting of an iterator pointing to an existing element and "\textbf{false}" otherwise.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Insert.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.ValueType.value
                {
                    description
                    {
                        A value to insert.
                    }
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Insert.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.ValueType.returnValue
                {
                    description
                    {
                        Returns a pair consisting of an iterator to the inserted element and "\textbf{true}" if the element was not already in the hash table, 
                        or a pair consisting of an iterator pointing to an existing element and "\textbf{false}" otherwise.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.IsEmpty.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Returns true if the hash table is empty, false otherwise.
                }
                returns System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.IsEmpty.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.returnValue
                {
                    description
                    {
                        Returns true if the hash table is empty, false otherwise.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Remove.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.System.Collections.HashtableIterator.ValueType.R.ValueType.P.ValueType
            {
                description
                {
                    Removes an element pointed by the given iterator from the hash table.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Remove.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.System.Collections.HashtableIterator.ValueType.R.ValueType.P.ValueType.pos
                {
                    description
                    {
                        An iterator pointing to the element to remove.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Remove.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.KeyType
            {
                description
                {
                    Removes an element with the given key from the hash table.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.Remove.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.C.R.KeyType.key
                {
                    description
                    {
                        Key of element to remove.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.SetMaxLoadFactor.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.double
            {
                description
                {
                    Sets maximum load factor of the hash table.
                }
                remarks
                {
                    By default maximum load factor is 0.8.
                }
                parameter System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.SetMaxLoadFactor.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.double.maxLoadFactor_
                {
                    description
                    {
                        New maximum load factor.
                    }
                }
            }
            function System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.destructor.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare
            {
                description
                {
                    Destructor.
                }
            }
            modelof System.Concepts.ForwardContainer.T;
        }
        class System.Collections.HashtableBase.T
        {
            description
            {
                Implementation detail.
            }
            typedef System.Collections.HashtableBase.T.ValueType
            {
                description
                {
                }
            }
            function System.Collections.HashtableBase.T.constructor.P.System.Collections.HashtableBase.T
            {
                description
                {
                }
            }
            function System.Collections.HashtableBase.T.constructor.P.System.Collections.HashtableBase.T.C.R.System.Collections.HashtableBase.T
            {
                description
                {
                }
                parameter System.Collections.HashtableBase.T.constructor.P.System.Collections.HashtableBase.T.C.R.System.Collections.HashtableBase.T.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.HashtableBase.T.operator.assign.P.System.Collections.HashtableBase.T.C.R.System.Collections.HashtableBase.T
            {
                description
                {
                }
                parameter System.Collections.HashtableBase.T.operator.assign.P.System.Collections.HashtableBase.T.C.R.System.Collections.HashtableBase.T.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.HashtableBase.T.constructor.P.System.Collections.HashtableBase.T.RR.System.Collections.HashtableBase.T
            {
                description
                {
                }
                parameter System.Collections.HashtableBase.T.constructor.P.System.Collections.HashtableBase.T.RR.System.Collections.HashtableBase.T.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.HashtableBase.T.operator.assign.P.System.Collections.HashtableBase.T.RR.System.Collections.HashtableBase.T
            {
                description
                {
                }
                parameter System.Collections.HashtableBase.T.operator.assign.P.System.Collections.HashtableBase.T.RR.System.Collections.HashtableBase.T.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.HashtableBase.T.GetBucket.C.P.System.Collections.HashtableBase.T.int
            {
                description
                {
                }
                parameter System.Collections.HashtableBase.T.GetBucket.C.P.System.Collections.HashtableBase.T.int.index
                {
                    description
                    {
                    }
                }
                returns System.Collections.HashtableBase.T.GetBucket.C.P.System.Collections.HashtableBase.T.int.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.HashtableBase.T.GetBucketCount.C.P.System.Collections.HashtableBase.T
            {
                description
                {
                }
                returns System.Collections.HashtableBase.T.GetBucketCount.C.P.System.Collections.HashtableBase.T.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.HashtableBase.T.GetBucketIndex.C.P.System.Collections.HashtableBase.T.C.R.T
            {
                description
                {
                }
                parameter System.Collections.HashtableBase.T.GetBucketIndex.C.P.System.Collections.HashtableBase.T.C.R.T.value
                {
                    description
                    {
                    }
                }
                returns System.Collections.HashtableBase.T.GetBucketIndex.C.P.System.Collections.HashtableBase.T.C.R.T.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.HashtableBase.T.destructor.P.System.Collections.HashtableBase.T
            {
                description
                {
                }
            }
        }
        class System.Collections.HashtableIterator.T.R.P
        {
            description
            {
                A hash table iterator type.
            }
            typedef System.Collections.HashtableIterator.T.R.P.PointerType
            {
                description
                {
                    Type of pointer to hash table element.
                }
            }
            typedef System.Collections.HashtableIterator.T.R.P.ReferenceType
            {
                description
                {
                    Type of reference to hash table element.
                }
            }
            typedef System.Collections.HashtableIterator.T.R.P.Self
            {
                description
                {
                }
            }
            typedef System.Collections.HashtableIterator.T.R.P.ValueType
            {
                description
                {
                    Type of hash table element.
                }
            }
            function System.Collections.HashtableIterator.T.R.P.constructor.P.System.Collections.HashtableIterator.T.R.P
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashtableIterator.T.R.P.constructor.P.System.Collections.HashtableIterator.T.R.P.C.R.System.Collections.HashtableIterator.T.R.P
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashtableIterator.T.R.P.constructor.P.System.Collections.HashtableIterator.T.R.P.C.R.System.Collections.HashtableIterator.T.R.P.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashtableIterator.T.R.P.operator.assign.P.System.Collections.HashtableIterator.T.R.P.C.R.System.Collections.HashtableIterator.T.R.P
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashtableIterator.T.R.P.operator.assign.P.System.Collections.HashtableIterator.T.R.P.C.R.System.Collections.HashtableIterator.T.R.P.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashtableIterator.T.R.P.constructor.P.System.Collections.HashtableIterator.T.R.P.RR.System.Collections.HashtableIterator.T.R.P
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashtableIterator.T.R.P.constructor.P.System.Collections.HashtableIterator.T.R.P.RR.System.Collections.HashtableIterator.T.R.P.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashtableIterator.T.R.P.operator.assign.P.System.Collections.HashtableIterator.T.R.P.RR.System.Collections.HashtableIterator.T.R.P
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashtableIterator.T.R.P.operator.assign.P.System.Collections.HashtableIterator.T.R.P.RR.System.Collections.HashtableIterator.T.R.P.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.HashtableIterator.T.R.P.GetBucket.C.P.System.Collections.HashtableIterator.T.R.P
            {
                description
                {
                    Returns a pointer to the bucket the iterator points to.
                }
                returns System.Collections.HashtableIterator.T.R.P.GetBucket.C.P.System.Collections.HashtableIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a pointer to the bucket the iterator points to.
                    }
                }
            }
            function System.Collections.HashtableIterator.T.R.P.constructor.P.System.Collections.HashtableIterator.T.R.P.P.System.Collections.HashtableBase.T.P.System.Collections.Bucket.T
            {
                description
                {
                    Constructor. Initalizes the hash table iterator with the given pointer to hash table and pointer to bucket.
                }
                parameter System.Collections.HashtableIterator.T.R.P.constructor.P.System.Collections.HashtableIterator.T.R.P.P.System.Collections.HashtableBase.T.P.System.Collections.Bucket.T.bucket_
                {
                    description
                    {
                        A pointer to bucket.
                    }
                }
                parameter System.Collections.HashtableIterator.T.R.P.constructor.P.System.Collections.HashtableIterator.T.R.P.P.System.Collections.HashtableBase.T.P.System.Collections.Bucket.T.table_
                {
                    description
                    {
                        A pointer to hash table.
                    }
                }
            }
            function System.Collections.HashtableIterator.T.R.P.operator.times.C.P.System.Collections.HashtableIterator.T.R.P
            {
                description
                {
                    Returns a reference to hash table element the iterator points to.
                }
                returns System.Collections.HashtableIterator.T.R.P.operator.times.C.P.System.Collections.HashtableIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a reference to hash table element the iterator points to.
                    }
                }
            }
            function System.Collections.HashtableIterator.T.R.P.operator.increment.P.System.Collections.HashtableIterator.T.R.P
            {
                description
                {
                    Advances the iterator to point to next element in the hash table.
                }
                returns System.Collections.HashtableIterator.T.R.P.operator.increment.P.System.Collections.HashtableIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns the iterator.
                    }
                }
            }
            function System.Collections.HashtableIterator.T.R.P.operator.pointer.C.P.System.Collections.HashtableIterator.T.R.P
            {
                description
                {
                    Returns a pointer to the hash table element the iterator points to.
                }
                returns System.Collections.HashtableIterator.T.R.P.operator.pointer.C.P.System.Collections.HashtableIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a pointer to the hash table element the iterator points to.
                    }
                }
            }
            modelof System.Concepts.ForwardIterator.T;
        }
        class System.Collections.HashtablePrimes
        {
            description
            {
            }
            function System.Collections.HashtablePrimes.GetNextPrime.int
            {
                description
                {
                }
                parameter System.Collections.HashtablePrimes.GetNextPrime.int.n
                {
                    description
                    {
                    }
                }
                returns System.Collections.HashtablePrimes.GetNextPrime.int.returnValue
                {
                    description
                    {
                    }
                }
            }
        }
        class System.Collections.LinkedList.T
        {
            description
            {
                A doubly linked list class.
            }
            typedef System.Collections.LinkedList.T.ConstIterator
            {
                description
                {
                    Type of constant iterator.
                }
            }
            typedef System.Collections.LinkedList.T.Iterator
            {
                description
                {
                    Type of iterator.
                }
            }
            typedef System.Collections.LinkedList.T.ValueType
            {
                description
                {
                    Type of element the linked list contains.
                }
            }
            function System.Collections.LinkedList.T.constructor.P.System.Collections.LinkedList.T
            {
                description
                {
                    Default constructor. Constructs an empty linked list.
                }
            }
            function System.Collections.LinkedList.T.constructor.P.System.Collections.LinkedList.T.C.R.System.Collections.LinkedList.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.LinkedList.T.constructor.P.System.Collections.LinkedList.T.C.R.System.Collections.LinkedList.T.that
                {
                    description
                    {
                        A linked list to copy from.
                    }
                }
            }
            function System.Collections.LinkedList.T.operator.assign.P.System.Collections.LinkedList.T.C.R.System.Collections.LinkedList.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.LinkedList.T.operator.assign.P.System.Collections.LinkedList.T.C.R.System.Collections.LinkedList.T.that
                {
                    description
                    {
                        A linked list to assign from.
                    }
                }
            }
            function System.Collections.LinkedList.T.constructor.P.System.Collections.LinkedList.T.RR.System.Collections.LinkedList.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.LinkedList.T.constructor.P.System.Collections.LinkedList.T.RR.System.Collections.LinkedList.T.that
                {
                    description
                    {
                        A linked list to move from.
                    }
                }
            }
            function System.Collections.LinkedList.T.operator.assign.P.System.Collections.LinkedList.T.RR.System.Collections.LinkedList.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.LinkedList.T.operator.assign.P.System.Collections.LinkedList.T.RR.System.Collections.LinkedList.T.that
                {
                    description
                    {
                        A linked list to move from.
                    }
                }
            }
            function System.Collections.LinkedList.T.Add.P.System.Collections.LinkedList.T.C.R.T
            {
                description
                {
                    Adds an element to the end of the linked list.
                }
                parameter System.Collections.LinkedList.T.Add.P.System.Collections.LinkedList.T.C.R.T.value
                {
                    description
                    {
                        An element to add.
                    }
                }
            }
            function System.Collections.LinkedList.T.Back.C.P.System.Collections.LinkedList.T
            {
                description
                {
                    Returns a constant reference to the last element in the linked list.
                }
                returns System.Collections.LinkedList.T.Back.C.P.System.Collections.LinkedList.T.returnValue
                {
                    description
                    {
                        Returns a constant reference to the last element in the linked list.
                    }
                }
            }
            function System.Collections.LinkedList.T.Begin.P.System.Collections.LinkedList.T
            {
                description
                {
                    Returns an iterator pointing to the beginning of the linked list, or
                    System.Collections.LinkedList.T.End.P.System.Collections.LinkedList.T if the linked list is empty.
                }
                returns System.Collections.LinkedList.T.Begin.P.System.Collections.LinkedList.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the beginning of the linked list, or
                        System.Collections.LinkedList.T.End.P.System.Collections.LinkedList.T if the linked list is empty.
                    }
                }
            }
            function System.Collections.LinkedList.T.Begin.C.P.System.Collections.LinkedList.T
            {
                description
                {
                    Returns a constant iterator pointing to the beginning of the linked list, or
                    System.Collections.LinkedList.T.CEnd.C.P.System.Collections.LinkedList.T if the linked list is empty.
                }
                returns System.Collections.LinkedList.T.Begin.C.P.System.Collections.LinkedList.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the beginning of the linked list, or
                        System.Collections.LinkedList.T.CEnd.C.P.System.Collections.LinkedList.T if the linked list is empty.
                    }
                }
            }
            function System.Collections.LinkedList.T.CBegin.C.P.System.Collections.LinkedList.T
            {
                description
                {
                    Returns a constant iterator pointing to the beginning of the linked list, or
                    System.Collections.LinkedList.T.CEnd.C.P.System.Collections.LinkedList.T if the linked list is empty.
                }
                returns System.Collections.LinkedList.T.CBegin.C.P.System.Collections.LinkedList.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the beginning of the linked list, or
                        System.Collections.LinkedList.T.CEnd.C.P.System.Collections.LinkedList.T if the linked list is empty.
                    }
                }
            }
            function System.Collections.LinkedList.T.CEnd.C.P.System.Collections.LinkedList.T
            {
                description
                {
                    Returns a constant iterator pointing one past the end of the linked list.
                }
                returns System.Collections.LinkedList.T.CEnd.C.P.System.Collections.LinkedList.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing one past the end of the linked list.
                    }
                }
            }
            function System.Collections.LinkedList.T.Clear.P.System.Collections.LinkedList.T
            {
                description
                {
                    Makes the linked list empty.
                }
            }
            function System.Collections.LinkedList.T.Count.C.P.System.Collections.LinkedList.T
            {
                description
                {
                    Returns the number of elements in the linked list.
                }
                returns System.Collections.LinkedList.T.Count.C.P.System.Collections.LinkedList.T.returnValue
                {
                    description
                    {
                        Returns the number of elements in the linked list.
                    }
                }
            }
            function System.Collections.LinkedList.T.End.P.System.Collections.LinkedList.T
            {
                description
                {
                    Returns an iterator pointing one past the end of the linked list.
                }
                returns System.Collections.LinkedList.T.End.P.System.Collections.LinkedList.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing one past the end of the linked list.
                    }
                }
            }
            function System.Collections.LinkedList.T.End.C.P.System.Collections.LinkedList.T
            {
                description
                {
                    Returns a constant iterator pointing one past the end of the linked list.
                }
                returns System.Collections.LinkedList.T.End.C.P.System.Collections.LinkedList.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing one past the end of the linked list.
                    }
                }
            }
            function System.Collections.LinkedList.T.Front.C.P.System.Collections.LinkedList.T
            {
                description
                {
                    Returns a constant reference to the first element in the linked list.
                }
                returns System.Collections.LinkedList.T.Front.C.P.System.Collections.LinkedList.T.returnValue
                {
                    description
                    {
                        Returns a constant reference to the first element in the linked list.
                    }
                }
            }
            function System.Collections.LinkedList.T.GetTail.P.System.Collections.LinkedList.T
            {
                description
                {
                }
                returns System.Collections.LinkedList.T.GetTail.P.System.Collections.LinkedList.T.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.LinkedList.T.Insert.P.System.Collections.LinkedList.T.System.Collections.LinkedListNodeIterator.T.R.T.P.T.C.R.T
            {
                description
                {
                    Inserts an element before position pointed by the given iterator to the linked list.
                }
                parameter System.Collections.LinkedList.T.Insert.P.System.Collections.LinkedList.T.System.Collections.LinkedListNodeIterator.T.R.T.P.T.C.R.T.pos
                {
                    description
                    {
                        An iterator pointing to a position before to insert.
                    }
                }
                parameter System.Collections.LinkedList.T.Insert.P.System.Collections.LinkedList.T.System.Collections.LinkedListNodeIterator.T.R.T.P.T.C.R.T.value
                {
                    description
                    {
                        An element to insert.
                    }
                }
                returns System.Collections.LinkedList.T.Insert.P.System.Collections.LinkedList.T.System.Collections.LinkedListNodeIterator.T.R.T.P.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the inserted element.
                    }
                }
            }
            function System.Collections.LinkedList.T.InsertFront.P.System.Collections.LinkedList.T.C.R.T
            {
                description
                {
                    Inserts an element to the head of the linked list.
                }
                parameter System.Collections.LinkedList.T.InsertFront.P.System.Collections.LinkedList.T.C.R.T.value
                {
                    description
                    {
                        An element to insert.
                    }
                }
                returns System.Collections.LinkedList.T.InsertFront.P.System.Collections.LinkedList.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the inserted element.
                    }
                }
            }
            function System.Collections.LinkedList.T.IsEmpty.C.P.System.Collections.LinkedList.T
            {
                description
                {
                    Returns true if the linked list is empty, false otherwise.
                }
                returns System.Collections.LinkedList.T.IsEmpty.C.P.System.Collections.LinkedList.T.returnValue
                {
                    description
                    {
                        Returns true if the linked list is empty, false otherwise.
                    }
                }
            }
            function System.Collections.LinkedList.T.Remove.P.System.Collections.LinkedList.T.System.Collections.LinkedListNodeIterator.T.R.T.P.T
            {
                description
                {
                    Removes an element pointed by the given iterator from the linked list.
                }
                parameter System.Collections.LinkedList.T.Remove.P.System.Collections.LinkedList.T.System.Collections.LinkedListNodeIterator.T.R.T.P.T.pos
                {
                    description
                    {
                        An iterator pointing to the element to remove.
                    }
                }
            }
            function System.Collections.LinkedList.T.Remove.P.System.Collections.LinkedList.T.C.R.T
            {
                description
                {
                    Removes elements that are equal to the given value from the linked list.
                }
                parameter System.Collections.LinkedList.T.Remove.P.System.Collections.LinkedList.T.C.R.T.value
                {
                    description
                    {
                        A value to remove.
                    }
                }
            }
            function System.Collections.LinkedList.T.RemoveFirst.P.System.Collections.LinkedList.T
            {
                description
                {
                    Removes the first element from the linked list.
                }
            }
            function System.Collections.LinkedList.T.RemoveLast.P.System.Collections.LinkedList.T
            {
                description
                {
                    Removes the last element from the linked list.
                }
            }
            function System.Collections.LinkedList.T.destructor.P.System.Collections.LinkedList.T
            {
                description
                {
                    Destructor.
                }
            }
            modelof System.Concepts.BidirectionalContainer.T;
            modelof System.Concepts.BackInsertionSequence.T;
            modelof System.Concepts.FrontInsertionSequence.T;
            modelof System.Concepts.InsertionSequence.T;
        }
        class System.Collections.LinkedListBase
        {
            description
            {
                Implementation detail.
            }
            function System.Collections.LinkedListBase.constructor.P.System.Collections.LinkedListBase
            {
                description
                {
                }
            }
            function System.Collections.LinkedListBase.constructor.P.System.Collections.LinkedListBase.C.R.System.Collections.LinkedListBase
            {
                description
                {
                }
                parameter System.Collections.LinkedListBase.constructor.P.System.Collections.LinkedListBase.C.R.System.Collections.LinkedListBase.that
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.LinkedListBase.operator.assign.P.System.Collections.LinkedListBase.C.R.System.Collections.LinkedListBase
            {
                description
                {
                }
                parameter System.Collections.LinkedListBase.operator.assign.P.System.Collections.LinkedListBase.C.R.System.Collections.LinkedListBase.that
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.LinkedListBase.constructor.P.System.Collections.LinkedListBase.RR.System.Collections.LinkedListBase
            {
                description
                {
                }
                parameter System.Collections.LinkedListBase.constructor.P.System.Collections.LinkedListBase.RR.System.Collections.LinkedListBase.that
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.LinkedListBase.operator.assign.P.System.Collections.LinkedListBase.RR.System.Collections.LinkedListBase
            {
                description
                {
                }
                parameter System.Collections.LinkedListBase.operator.assign.P.System.Collections.LinkedListBase.RR.System.Collections.LinkedListBase.that
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.LinkedListBase.GetTail.P.System.Collections.LinkedListBase
            {
                description
                {
                }
                returns System.Collections.LinkedListBase.GetTail.P.System.Collections.LinkedListBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.LinkedListBase.destructor.P.System.Collections.LinkedListBase
            {
                description
                {
                }
            }
        }
        class System.Collections.LinkedListNode.T
        {
            description
            {
                A linked list node type.
            }
            typedef System.Collections.LinkedListNode.T.ValueType
            {
                description
                {
                    Type of linked list element.
                }
            }
            function System.Collections.LinkedListNode.T.constructor.P.System.Collections.LinkedListNode.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.LinkedListNode.T.constructor.P.System.Collections.LinkedListNode.T.C.R.System.Collections.LinkedListNode.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.LinkedListNode.T.constructor.P.System.Collections.LinkedListNode.T.C.R.System.Collections.LinkedListNode.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.LinkedListNode.T.operator.assign.P.System.Collections.LinkedListNode.T.C.R.System.Collections.LinkedListNode.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.LinkedListNode.T.operator.assign.P.System.Collections.LinkedListNode.T.C.R.System.Collections.LinkedListNode.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.LinkedListNode.T.constructor.P.System.Collections.LinkedListNode.T.RR.System.Collections.LinkedListNode.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.LinkedListNode.T.constructor.P.System.Collections.LinkedListNode.T.RR.System.Collections.LinkedListNode.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.LinkedListNode.T.operator.assign.P.System.Collections.LinkedListNode.T.RR.System.Collections.LinkedListNode.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.LinkedListNode.T.operator.assign.P.System.Collections.LinkedListNode.T.RR.System.Collections.LinkedListNode.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.LinkedListNode.T.constructor.P.System.Collections.LinkedListNode.T.C.R.T.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase
            {
                description
                {
                    Constructor. Initializes the linked list node with the given value and pointers to previous and next linked list nodes.
                }
                parameter System.Collections.LinkedListNode.T.constructor.P.System.Collections.LinkedListNode.T.C.R.T.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase.next_
                {
                    description
                    {
                        A pointer to next linked list node.
                    }
                }
                parameter System.Collections.LinkedListNode.T.constructor.P.System.Collections.LinkedListNode.T.C.R.T.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase.prev_
                {
                    description
                    {
                        A pointer to previous linked list node.
                    }
                }
                parameter System.Collections.LinkedListNode.T.constructor.P.System.Collections.LinkedListNode.T.C.R.T.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase.value_
                {
                    description
                    {
                        A linked list element.
                    }
                }
            }
            function System.Collections.LinkedListNode.T.Value.P.System.Collections.LinkedListNode.T
            {
                description
                {
                    Returns a reference to the contained linked list element.
                }
                returns System.Collections.LinkedListNode.T.Value.P.System.Collections.LinkedListNode.T.returnValue
                {
                    description
                    {
                        Returns a reference to the contained linked list element.
                    }
                }
            }
            function System.Collections.LinkedListNode.T.Value.C.P.System.Collections.LinkedListNode.T
            {
                description
                {
                    Returns a constant reference to the contained linked list element.
                }
                returns System.Collections.LinkedListNode.T.Value.C.P.System.Collections.LinkedListNode.T.returnValue
                {
                    description
                    {
                        Returns a constant reference to the contained linked list element.
                    }
                }
            }
        }
        class System.Collections.LinkedListNodeBase
        {
            description
            {
                Implementation detail.
            }
            function System.Collections.LinkedListNodeBase.constructor.P.System.Collections.LinkedListNodeBase
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.LinkedListNodeBase.constructor.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase
            {
                description
                {
                }
                parameter System.Collections.LinkedListNodeBase.constructor.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase.next_
                {
                    description
                    {
                    }
                }
                parameter System.Collections.LinkedListNodeBase.constructor.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase.prev_
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.LinkedListNodeBase.Next.C.P.System.Collections.LinkedListNodeBase
            {
                description
                {
                }
                returns System.Collections.LinkedListNodeBase.Next.C.P.System.Collections.LinkedListNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.LinkedListNodeBase.Prev.C.P.System.Collections.LinkedListNodeBase
            {
                description
                {
                }
                returns System.Collections.LinkedListNodeBase.Prev.C.P.System.Collections.LinkedListNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.LinkedListNodeBase.SetNext.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase
            {
                description
                {
                }
                parameter System.Collections.LinkedListNodeBase.SetNext.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase.next_
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.LinkedListNodeBase.SetPrev.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase
            {
                description
                {
                }
                parameter System.Collections.LinkedListNodeBase.SetPrev.P.System.Collections.LinkedListNodeBase.P.System.Collections.LinkedListNodeBase.prev_
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.LinkedListNodeBase.destructor.P.System.Collections.LinkedListNodeBase
            {
                description
                {
                }
            }
        }
        class System.Collections.LinkedListNodeIterator.T.R.P
        {
            description
            {
                A linked list iterator type.
            }
            typedef System.Collections.LinkedListNodeIterator.T.R.P.PointerType
            {
                description
                {
                    Type of pointer to linked list element.
                }
            }
            typedef System.Collections.LinkedListNodeIterator.T.R.P.ReferenceType
            {
                description
                {
                    Type of reference to linked list element.
                }
            }
            typedef System.Collections.LinkedListNodeIterator.T.R.P.Self
            {
                description
                {
                }
            }
            typedef System.Collections.LinkedListNodeIterator.T.R.P.ValueType
            {
                description
                {
                    Type of linked list element.
                }
            }
            function System.Collections.LinkedListNodeIterator.T.R.P.constructor.P.System.Collections.LinkedListNodeIterator.T.R.P
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.LinkedListNodeIterator.T.R.P.constructor.P.System.Collections.LinkedListNodeIterator.T.R.P.C.R.System.Collections.LinkedListNodeIterator.T.R.P
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.LinkedListNodeIterator.T.R.P.constructor.P.System.Collections.LinkedListNodeIterator.T.R.P.C.R.System.Collections.LinkedListNodeIterator.T.R.P.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.LinkedListNodeIterator.T.R.P.operator.assign.P.System.Collections.LinkedListNodeIterator.T.R.P.C.R.System.Collections.LinkedListNodeIterator.T.R.P
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.LinkedListNodeIterator.T.R.P.operator.assign.P.System.Collections.LinkedListNodeIterator.T.R.P.C.R.System.Collections.LinkedListNodeIterator.T.R.P.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.LinkedListNodeIterator.T.R.P.constructor.P.System.Collections.LinkedListNodeIterator.T.R.P.RR.System.Collections.LinkedListNodeIterator.T.R.P
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.LinkedListNodeIterator.T.R.P.constructor.P.System.Collections.LinkedListNodeIterator.T.R.P.RR.System.Collections.LinkedListNodeIterator.T.R.P.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.LinkedListNodeIterator.T.R.P.operator.assign.P.System.Collections.LinkedListNodeIterator.T.R.P.RR.System.Collections.LinkedListNodeIterator.T.R.P
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.LinkedListNodeIterator.T.R.P.operator.assign.P.System.Collections.LinkedListNodeIterator.T.R.P.RR.System.Collections.LinkedListNodeIterator.T.R.P.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.LinkedListNodeIterator.T.R.P.GetNode.C.P.System.Collections.LinkedListNodeIterator.T.R.P
            {
                description
                {
                    Returns a pointer to linked list node the iterator points to.
                }
                returns System.Collections.LinkedListNodeIterator.T.R.P.GetNode.C.P.System.Collections.LinkedListNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a pointer to linked list node the iterator points to.
                    }
                }
            }
            function System.Collections.LinkedListNodeIterator.T.R.P.constructor.P.System.Collections.LinkedListNodeIterator.T.R.P.P.System.Collections.LinkedListBase.P.System.Collections.LinkedListNode.T
            {
                description
                {
                    Constructor. Initializes the linked list node iterator with the given pointer to linked list and pointer to linked list node.
                }
                parameter System.Collections.LinkedListNodeIterator.T.R.P.constructor.P.System.Collections.LinkedListNodeIterator.T.R.P.P.System.Collections.LinkedListBase.P.System.Collections.LinkedListNode.T.list_
                {
                    description
                    {
                        A pointer to linked list.
                    }
                }
                parameter System.Collections.LinkedListNodeIterator.T.R.P.constructor.P.System.Collections.LinkedListNodeIterator.T.R.P.P.System.Collections.LinkedListBase.P.System.Collections.LinkedListNode.T.node_
                {
                    description
                    {
                        A pointer to linked list node.
                    }
                }
            }
            function System.Collections.LinkedListNodeIterator.T.R.P.operator.times.C.P.System.Collections.LinkedListNodeIterator.T.R.P
            {
                description
                {
                    Returns a reference to the linked list element the iterator points to.
                }
                returns System.Collections.LinkedListNodeIterator.T.R.P.operator.times.C.P.System.Collections.LinkedListNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a reference to the linked list element the iterator points to.
                    }
                }
            }
            function System.Collections.LinkedListNodeIterator.T.R.P.operator.increment.P.System.Collections.LinkedListNodeIterator.T.R.P
            {
                description
                {
                    Advances the linked list node iterator to point to next element in the linked list.
                }
                returns System.Collections.LinkedListNodeIterator.T.R.P.operator.increment.P.System.Collections.LinkedListNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns the iterator.
                    }
                }
            }
            function System.Collections.LinkedListNodeIterator.T.R.P.operator.decrement.P.System.Collections.LinkedListNodeIterator.T.R.P
            {
                description
                {
                    Backs up the linked list node iterator to point to previous element in the linked list.
                }
                returns System.Collections.LinkedListNodeIterator.T.R.P.operator.decrement.P.System.Collections.LinkedListNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns the iterator.
                    }
                }
            }
            function System.Collections.LinkedListNodeIterator.T.R.P.operator.pointer.C.P.System.Collections.LinkedListNodeIterator.T.R.P
            {
                description
                {
                    Returns a pointer the linked list element the iterator points to.
                }
                returns System.Collections.LinkedListNodeIterator.T.R.P.operator.pointer.C.P.System.Collections.LinkedListNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a pointer the linked list element the iterator points to.
                    }
                }
            }
            modelof System.Concepts.BidirectionalIterator.T;
        }
        class System.Collections.List.T
        {
            description
            {
                A container of elements in which the contained elements are in consecutive locations in memory.
            }
            example <examples/System.Collections.List.cm>;
            typedef System.Collections.List.T.ConstIterator
            {
                description
                {
                    A constant iterator type.
                }
            }
            typedef System.Collections.List.T.Iterator
            {
                description
                {
                    An iterator type.
                }
            }
            typedef System.Collections.List.T.ValueType
            {
                description
                {
                    The type of the contained element.
                }
            }
            function System.Collections.List.T.constructor.P.System.Collections.List.T
            {
                description
                {
                    Constructor. Constructs an empty list.
                }
                source <../src/list.pdf>(1, 1);
            }
            function System.Collections.List.T.constructor.P.System.Collections.List.T.C.R.System.Collections.List.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.T.constructor.P.System.Collections.List.T.C.R.System.Collections.List.T.that
                {
                    description
                    {
                        A list to copy from.
                    }
                }
            }
            function System.Collections.List.T.operator.assign.P.System.Collections.List.T.C.R.System.Collections.List.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.T.operator.assign.P.System.Collections.List.T.C.R.System.Collections.List.T.that
                {
                    description
                    {
                        A list to assign from.
                    }
                }
            }
            function System.Collections.List.T.constructor.P.System.Collections.List.T.RR.System.Collections.List.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.T.constructor.P.System.Collections.List.T.RR.System.Collections.List.T.that
                {
                    description
                    {
                        A list to move from.
                    }
                }
            }
            function System.Collections.List.T.operator.assign.P.System.Collections.List.T.RR.System.Collections.List.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.T.operator.assign.P.System.Collections.List.T.RR.System.Collections.List.T.that
                {
                    description
                    {
                        A list to move from.
                    }
                }
            }
            function System.Collections.List.T.Add.P.System.Collections.List.T.RR.T
            {
                description
                {
                    Moves an element to the end of the list.
                }
                parameter System.Collections.List.T.Add.P.System.Collections.List.T.RR.T.item
                {
                    description
                    {
                        An element to move.
                    }
                }
            }
            function System.Collections.List.T.Add.P.System.Collections.List.T.C.R.T
            {
                description
                {
                    Copies an element to the end of the list.
                }
                parameter System.Collections.List.T.Add.P.System.Collections.List.T.C.R.T.item
                {
                    description
                    {
                        An element to add.
                    }
                }
            }
            function System.Collections.List.T.Back.P.System.Collections.List.T
            {
                description
                {
                    Returns a reference to the last element in the list.
                }
                returns System.Collections.List.T.Back.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns a reference to the last element in the list.
                    }
                }
                source <../src/list.pdf>(6, 6);
            }
            function System.Collections.List.T.Back.C.P.System.Collections.List.T
            {
                description
                {
                    Returns a constant reference to the last element in the list.
                }
                returns System.Collections.List.T.Back.C.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns a constant reference to the last element in the list.
                    }
                }
                source <../src/list.pdf>(6, 6);
            }
            function System.Collections.List.T.Begin.P.System.Collections.List.T
            {
                description
                {
                    Returns an iterator pointing to the first element of the list, or System.Collections.List.T.End.P.System.Collections.List.T if the list is empty.
                }
                returns System.Collections.List.T.Begin.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the first element of the list, or System.Collections.List.T.End.P.System.Collections.List.T if the list is empty.
                    }
                }
                source <../src/list.pdf>(5, 5);
            }
            function System.Collections.List.T.Begin.C.P.System.Collections.List.T
            {
                description
                {
                    Returns a constant iterator pointing to the first element of the list, or System.Collections.List.T.CEnd.C.P.System.Collections.List.T if the list is empty.
                }
                returns System.Collections.List.T.Begin.C.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the first element of the list, or System.Collections.List.T.CEnd.C.P.System.Collections.List.T if the list is empty.
                    }
                }
                source <../src/list.pdf>(5, 5);
            }
            function System.Collections.List.T.CBegin.C.P.System.Collections.List.T
            {
                description
                {
                    Returns a constant iterator pointing to the first element of the list, or System.Collections.List.T.CEnd.C.P.System.Collections.List.T if the list is empty.
                }
                returns System.Collections.List.T.CBegin.C.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the first element of the list, or System.Collections.List.T.CEnd.C.P.System.Collections.List.T if the list is empty.
                    }
                }
                source <../src/list.pdf>(5, 5);
            }
            function System.Collections.List.T.CEnd.C.P.System.Collections.List.T
            {
                description
                {
                    Returns a constant iterator pointing one past the end of the list.
                }
                returns System.Collections.List.T.CEnd.C.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing one past the end of the list.
                    }
                }
                source <../src/list.pdf>(5, 5);
            }
            function System.Collections.List.T.Capacity.C.P.System.Collections.List.T
            {
                description
                {
                    Returns the number of elements that the list can contain without a memory allocation.
                }
                returns System.Collections.List.T.Capacity.C.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns the number of elements that the list can contain without a memory allocation.
                    }
                }
                source <../src/list.pdf>(2, 2);
            }
            function System.Collections.List.T.Clear.P.System.Collections.List.T
            {
                description
                {
                    Makes the list empty.
                }
                source <../src/list.pdf>(3, 3);
            }
            function System.Collections.List.T.Count.C.P.System.Collections.List.T
            {
                description
                {
                    Returns the number of elements in the list.
                }
                returns System.Collections.List.T.Count.C.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns the number of elements in the list.
                    }
                }
                source <../src/list.pdf>(3, 3);
            }
            function System.Collections.List.T.End.P.System.Collections.List.T
            {
                description
                {
                    Returns an iterator pointing one past the end of the list.
                }
                returns System.Collections.List.T.End.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing one past the end of the list.
                    }
                }
                source <../src/list.pdf>(5, 5);
            }
            function System.Collections.List.T.End.C.P.System.Collections.List.T
            {
                description
                {
                    Returns a constant iterator pointing one past the end of the list.
                }
                returns System.Collections.List.T.End.C.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing one past the end of the list.
                    }
                }
                source <../src/list.pdf>(5, 5);
            }
            function System.Collections.List.T.Front.P.System.Collections.List.T
            {
                description
                {
                    Returns a reference to the first element in the list.
                }
                returns System.Collections.List.T.Front.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns a reference to the first element int the list.
                    }
                }
                source <../src/list.pdf>(5, 5);
            }
            function System.Collections.List.T.Front.C.P.System.Collections.List.T
            {
                description
                {
                    Returns a constant reference to the first element in the list.
                }
                returns System.Collections.List.T.Front.C.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns a constant reference to the first element in the list.
                    }
                }
                source <../src/list.pdf>(5, 5);
            }
            function System.Collections.List.T.Insert.P.System.Collections.List.T.System.RandomAccessIter.T.R.T.P.T.RR.T
            {
                description
                {
                    Moves an element before the given position in the list.
                }
                parameter System.Collections.List.T.Insert.P.System.Collections.List.T.System.RandomAccessIter.T.R.T.P.T.RR.T.item
                {
                    description
                    {
                        An element to move.
                    }
                }
                parameter System.Collections.List.T.Insert.P.System.Collections.List.T.System.RandomAccessIter.T.R.T.P.T.RR.T.pos
                {
                    description
                    {
                        An iterator pointing to the position before which to insert.
                    }
                }
                returns System.Collections.List.T.Insert.P.System.Collections.List.T.System.RandomAccessIter.T.R.T.P.T.RR.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the inserted element.
                    }
                }
            }
            function System.Collections.List.T.Insert.P.System.Collections.List.T.System.RandomAccessIter.T.R.T.P.T.C.R.T
            {
                description
                {
                    Copies an element before the given position in the list.
                }
                parameter System.Collections.List.T.Insert.P.System.Collections.List.T.System.RandomAccessIter.T.R.T.P.T.C.R.T.item
                {
                    description
                    {
                        An element to insert.
                    }
                }
                parameter System.Collections.List.T.Insert.P.System.Collections.List.T.System.RandomAccessIter.T.R.T.P.T.C.R.T.pos
                {
                    description
                    {
                        An iterator pointing to the position before which to insert.
                    }
                }
                returns System.Collections.List.T.Insert.P.System.Collections.List.T.System.RandomAccessIter.T.R.T.P.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the inserted element.
                    }
                }
            }
            function System.Collections.List.T.InsertFront.P.System.Collections.List.T.RR.T
            {
                description
                {
                    Moves an element to the head of the list.
                }
                parameter System.Collections.List.T.InsertFront.P.System.Collections.List.T.RR.T.item
                {
                    description
                    {
                        An element to move.
                    }
                }
                returns System.Collections.List.T.InsertFront.P.System.Collections.List.T.RR.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the inserted element.
                    }
                }
            }
            function System.Collections.List.T.InsertFront.P.System.Collections.List.T.C.R.T
            {
                description
                {
                    Copies an element to the head of the list.
                }
                parameter System.Collections.List.T.InsertFront.P.System.Collections.List.T.C.R.T.item
                {
                    description
                    {
                        An element to insert.
                    }
                }
                returns System.Collections.List.T.InsertFront.P.System.Collections.List.T.C.R.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the inserted element.
                    }
                }
            }
            function System.Collections.List.T.IsEmpty.C.P.System.Collections.List.T
            {
                description
                {
                    Returns true if the list is empty, false otherwise.
                }
                returns System.Collections.List.T.IsEmpty.C.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns true if the list is empty, false otherwise.
                    }
                }
                source <../src/list.pdf>(3, 3);
            }
            function System.Collections.List.T.constructor.P.System.Collections.List.T.int.C.R.T
            {
                description
                {
                    Constructs a list consisting of given number of copies of given value.
                }
                parameter System.Collections.List.T.constructor.P.System.Collections.List.T.int.C.R.T.n
                {
                    description
                    {
                        Number of elements to construct.
                    }
                }
                parameter System.Collections.List.T.constructor.P.System.Collections.List.T.int.C.R.T.value
                {
                    description
                    {
                        Element to copy.
                    }
                }
            }
            function System.Collections.List.T.Remove.P.System.Collections.List.T.System.RandomAccessIter.T.R.T.P.T
            {
                description
                {
                    Removes an element pointed by the given iterator from the list and returns the removed element.
                }
                parameter System.Collections.List.T.Remove.P.System.Collections.List.T.System.RandomAccessIter.T.R.T.P.T.pos
                {
                    description
                    {
                        An iterator pointing to the element to remove.
                    }
                }
                returns System.Collections.List.T.Remove.P.System.Collections.List.T.System.RandomAccessIter.T.R.T.P.T.returnValue
                {
                    description
                    {
                        Returns the removed element.
                    }
                }
                source <../src/list.pdf>(4, 4);
            }
            function System.Collections.List.T.RemoveFirst.P.System.Collections.List.T
            {
                description
                {
                    Removes the first element from the list.
                }
                returns System.Collections.List.T.RemoveFirst.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns the removed element.
                    }
                }
                source <../src/list.pdf>(4, 4);
            }
            function System.Collections.List.T.RemoveLast.P.System.Collections.List.T
            {
                description
                {
                    Removes the last element from the list.
                }
                returns System.Collections.List.T.RemoveLast.P.System.Collections.List.T.returnValue
                {
                    description
                    {
                        Returns the removed element,.
                    }
                }
                source <../src/list.pdf>(4, 4);
            }
            function System.Collections.List.T.Reserve.P.System.Collections.List.T.int
            {
                description
                {
                    Makes the capacity of the list at least the given number of elements.
                }
                parameter System.Collections.List.T.Reserve.P.System.Collections.List.T.int.minRes
                {
                    description
                    {
                        The minimum number of elements the list can hold without a memory allocation.
                    }
                }
                source <../src/list.pdf>(2, 2);
            }
            function System.Collections.List.T.Resize.P.System.Collections.List.T.int
            {
                description
                {
                    Grows or shrinks the list so that it contains given number of elements.
                }
                parameter System.Collections.List.T.Resize.P.System.Collections.List.T.int.newCount
                {
                    description
                    {
                        New number of elements.
                    }
                }
            }
            function System.Collections.List.T.operator.index.P.System.Collections.List.T.int
            {
                description
                {
                    Returns a reference to the element with the given index.
                }
                parameter System.Collections.List.T.operator.index.P.System.Collections.List.T.int.index
                {
                    description
                    {
                        An index.
                    }
                }
                returns System.Collections.List.T.operator.index.P.System.Collections.List.T.int.returnValue
                {
                    description
                    {
                        Returns a reference to the element with the given index.
                    }
                }
                source <../src/list.pdf>(5, 5);
            }
            function System.Collections.List.T.operator.index.C.P.System.Collections.List.T.int
            {
                description
                {
                    Returns a constant reference to the element with the given index.
                }
                parameter System.Collections.List.T.operator.index.C.P.System.Collections.List.T.int.index
                {
                    description
                    {
                        An index.
                    }
                }
                returns System.Collections.List.T.operator.index.C.P.System.Collections.List.T.int.returnValue
                {
                    description
                    {
                        Returns a constant reference to the element with the given index.
                    }
                }
                source <../src/list.pdf>(5, 5);
            }
            function System.Collections.List.T.destructor.P.System.Collections.List.T
            {
                description
                {
                    Destructor.
                }
            }
            modelof System.Concepts.BackInsertionSequence.T;
            modelof System.Concepts.InsertionSequence.T;
            modelof System.Concepts.FrontInsertionSequence.T;
            modelof System.Concepts.RandomAccessContainer.T;
        }
        class System.Collections.Map.Key.Value.KeyCompare
        {
            description
            {
                An associative container of key-value pairs organized in a red-black tree.
                The keys need to be ordered.
            }
            example <examples/System.Collections.Map.cm>;
            typedef System.Collections.Map.Key.Value.KeyCompare.Compare
            {
                description
                {
                    The type of a relation used to compare keys.
                }
            }
            typedef System.Collections.Map.Key.Value.KeyCompare.ConstIterator
            {
                description
                {
                    A constant iterator type.
                }
            }
            typedef System.Collections.Map.Key.Value.KeyCompare.Iterator
            {
                description
                {
                    An iterator type.
                }
            }
            typedef System.Collections.Map.Key.Value.KeyCompare.KeyType
            {
                description
                {
                    The type of key.
                }
            }
            typedef System.Collections.Map.Key.Value.KeyCompare.MappedType
            {
                description
                {
                    The type associated with the key.
                }
            }
            typedef System.Collections.Map.Key.Value.KeyCompare.ValueType
            {
                description
                {
                    A pair composed of key type and mapped type.
                }
            }
            function System.Collections.Map.Key.Value.KeyCompare.constructor.P.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Default constructor. Constructs an empty map.
                }
                source <../src/map.pdf>(1, 1);
            }
            function System.Collections.Map.Key.Value.KeyCompare.constructor.P.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Map.Key.Value.KeyCompare.constructor.P.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Map.Key.Value.KeyCompare.operator.assign.P.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Map.Key.Value.KeyCompare.operator.assign.P.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Map.Key.Value.KeyCompare.constructor.P.System.Collections.Map.Key.Value.KeyCompare.RR.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Map.Key.Value.KeyCompare.constructor.P.System.Collections.Map.Key.Value.KeyCompare.RR.System.Collections.Map.Key.Value.KeyCompare.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Map.Key.Value.KeyCompare.operator.assign.P.System.Collections.Map.Key.Value.KeyCompare.RR.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Map.Key.Value.KeyCompare.operator.assign.P.System.Collections.Map.Key.Value.KeyCompare.RR.System.Collections.Map.Key.Value.KeyCompare.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.Map.Key.Value.KeyCompare.Begin.P.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Returns an iterator pointing to the beginning of the map, or
                    System.Collections.Map.Key.Value.KeyCompare.End.P.System.Collections.Map.Key.Value.KeyCompare if the map is empty.
                }
                returns System.Collections.Map.Key.Value.KeyCompare.Begin.P.System.Collections.Map.Key.Value.KeyCompare.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the beginning of the map, or
                        System.Collections.Map.Key.Value.KeyCompare.End.P.System.Collections.Map.Key.Value.KeyCompare if the map is empty.
                    }
                }
                source <../src/map.pdf>(1, 1);
            }
            function System.Collections.Map.Key.Value.KeyCompare.Begin.C.P.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Returns a constant iterator pointing to the beginning of the map.
                }
                returns System.Collections.Map.Key.Value.KeyCompare.Begin.C.P.System.Collections.Map.Key.Value.KeyCompare.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the beginning of the map, or
                        System.Collections.Map.Key.Value.KeyCompare.CEnd.C.P.System.Collections.Map.Key.Value.KeyCompare if the map is empty.
                    }
                }
            }
            function System.Collections.Map.Key.Value.KeyCompare.CBegin.C.P.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Returns a constant iterator pointing to the beginning of the map, or
                    System.Collections.Map.Key.Value.KeyCompare.CEnd.C.P.System.Collections.Map.Key.Value.KeyCompare if the map is empty.
                }
                returns System.Collections.Map.Key.Value.KeyCompare.CBegin.C.P.System.Collections.Map.Key.Value.KeyCompare.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the beginning of the map, or
                        System.Collections.Map.Key.Value.KeyCompare.CEnd.C.P.System.Collections.Map.Key.Value.KeyCompare if the map is empty.
                    }
                }
                source <../src/map.pdf>(2, 2);
            }
            function System.Collections.Map.Key.Value.KeyCompare.CEnd.C.P.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Returns a constant iterator pointing to one past the end of the map.
                }
                returns System.Collections.Map.Key.Value.KeyCompare.CEnd.C.P.System.Collections.Map.Key.Value.KeyCompare.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to one past the end of the map.
                    }
                }
                source <../src/map.pdf>(2, 2);
            }
            function System.Collections.Map.Key.Value.KeyCompare.CFind.C.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key
            {
                description
                {
                    Searches the given key from the map and returns a constant iterator pointing to the found element, or 
                    System.Collections.Map.Key.Value.KeyCompare.CEnd.C.P.System.Collections.Map.Key.Value.KeyCompare iterator if
                    the key is not found.
                    
                }
                parameter System.Collections.Map.Key.Value.KeyCompare.CFind.C.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key.key
                {
                    description
                    {
                        A key to search.
                    }
                }
                returns System.Collections.Map.Key.Value.KeyCompare.CFind.C.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the found element, or 
                        System.Collections.Map.Key.Value.KeyCompare.CEnd.C.P.System.Collections.Map.Key.Value.KeyCompare iterator if
                        the key is not found.
                    }
                }
            }
            function System.Collections.Map.Key.Value.KeyCompare.Clear.P.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Makes the map empty.
                }
                source <../src/map.pdf>(2, 2);
            }
            function System.Collections.Map.Key.Value.KeyCompare.Count.C.P.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Returns the number of key-value pairs in the map.
                }
                returns System.Collections.Map.Key.Value.KeyCompare.Count.C.P.System.Collections.Map.Key.Value.KeyCompare.returnValue
                {
                    description
                    {
                        Returns the number of key-value pairs in the map.
                    }
                }
                source <../src/map.pdf>(2, 2);
            }
            function System.Collections.Map.Key.Value.KeyCompare.End.P.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Returns an iterator pointing to one past the end of the map.
                }
                returns System.Collections.Map.Key.Value.KeyCompare.End.P.System.Collections.Map.Key.Value.KeyCompare.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to one past the end of the map.
                    }
                }
                source <../src/map.pdf>(2, 2);
            }
            function System.Collections.Map.Key.Value.KeyCompare.End.C.P.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Returns a constant iterator pointing one past the end of the map.
                }
                returns System.Collections.Map.Key.Value.KeyCompare.End.C.P.System.Collections.Map.Key.Value.KeyCompare.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing one past the end of the map.
                    }
                }
            }
            function System.Collections.Map.Key.Value.KeyCompare.Find.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key
            {
                description
                {
                    Searches the given key in the map and returns an iterator pointing to it, if found,
                    or an System.Collections.Map.End iterator otherwise.
                }
                parameter System.Collections.Map.Key.Value.KeyCompare.Find.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key.key
                {
                    description
                    {
                        A key to search.
                    }
                }
                returns System.Collections.Map.Key.Value.KeyCompare.Find.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the found key-value pair, if the search was successful,
                        or System.Collections.Map.End iterator otherwise.
                    }
                }
                source <../src/map.pdf>(2, 2);
            }
            function System.Collections.Map.Key.Value.KeyCompare.Find.C.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key
            {
                description
                {
                    Searches the given key in the map and returns a constant iterator pointing to the found element, 
                    or System.Collections.Map.Key.Value.KeyCompare.CEnd.C.P.System.Collections.Map.Key.Value.KeyCompare iterator 
                    if the key is not found.
                }
                parameter System.Collections.Map.Key.Value.KeyCompare.Find.C.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key.key
                {
                    description
                    {
                        A key to seaerch.
                    }
                }
                returns System.Collections.Map.Key.Value.KeyCompare.Find.C.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the found element, 
                        or System.Collections.Map.Key.Value.KeyCompare.CEnd.C.P.System.Collections.Map.Key.Value.KeyCompare iterator 
                        if the key is not found.
                    }
                }
            }
            function System.Collections.Map.Key.Value.KeyCompare.Insert.P.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Pair.Key.Value
            {
                description
                {
                    Inserts an element to the map if the key of the element is not already found in the map.
                }
                parameter System.Collections.Map.Key.Value.KeyCompare.Insert.P.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Pair.Key.Value.value
                {
                    description
                    {
                        A key-value pair to insert.
                    }
                }
                returns System.Collections.Map.Key.Value.KeyCompare.Insert.P.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Pair.Key.Value.returnValue
                {
                    description
                    {
                        If the key of the element is not already in the map returns a pair consisting of an iterator pointing to the inserted element and "\textbf{true}",
                        or a pair consisting of an iterator pointing to an existing element and "\textbf{false}" otherwise.
                    }
                }
            }
            function System.Collections.Map.Key.Value.KeyCompare.IsEmpty.C.P.System.Collections.Map.Key.Value.KeyCompare
            {
                description
                {
                    Returns true if the map is empty, false otherwise.
                }
                returns System.Collections.Map.Key.Value.KeyCompare.IsEmpty.C.P.System.Collections.Map.Key.Value.KeyCompare.returnValue
                {
                    description
                    {
                        Returns true if the map is empty, false otherwise.
                    }
                }
                source <../src/map.pdf>(2, 2);
            }
            function System.Collections.Map.Key.Value.KeyCompare.Remove.P.System.Collections.Map.Key.Value.KeyCompare.System.Collections.RedBlackTreeNodeIterator.System.Pair.Key.Value.R.System.Pair.Key.Value.P.System.Pair.Key.Value
            {
                description
                {
                    Removes an element pointed by the given iterator from the map.
                }
                parameter System.Collections.Map.Key.Value.KeyCompare.Remove.P.System.Collections.Map.Key.Value.KeyCompare.System.Collections.RedBlackTreeNodeIterator.System.Pair.Key.Value.R.System.Pair.Key.Value.P.System.Pair.Key.Value.pos
                {
                    description
                    {
                        An iterator pointing to the element to remove.
                    }
                }
            }
            function System.Collections.Map.Key.Value.KeyCompare.Remove.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key
            {
                description
                {
                    Removes a key-value pair associated with the given key from the map.
                }
                parameter System.Collections.Map.Key.Value.KeyCompare.Remove.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key.key
                {
                    description
                    {
                        A key.
                    }
                }
                returns System.Collections.Map.Key.Value.KeyCompare.Remove.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key.returnValue
                {
                    description
                    {
                        Returns true if there was a key-value pair for the given key in the map.
                    }
                }
                source <../src/map.pdf>(2, 2);
            }
            function System.Collections.Map.Key.Value.KeyCompare.operator.index.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key
            {
                description
                {
                    Returns a reference to the value associated with the given key.
                    If there are currently no value associated with the given key,
                    a default constructed value is created and inserted in the map.
                }
                parameter System.Collections.Map.Key.Value.KeyCompare.operator.index.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key.key
                {
                    description
                    {
                        A key.
                    }
                }
                returns System.Collections.Map.Key.Value.KeyCompare.operator.index.P.System.Collections.Map.Key.Value.KeyCompare.C.R.Key.returnValue
                {
                    description
                    {
                        A value associated with the key.
                    }
                }
                source <../src/map.pdf>(2, 2);
            }
            modelof System.Concepts.BidirectionalContainer.T;
        }
        class System.Collections.Queue.T
        {
            description
            {
                A first-in first-out data structure.
            }
            example <examples/System.Collections.Queue.cm>;
            typedef System.Collections.Queue.T.ValueType
            {
                description
                {
                    The type of the queue element.
                }
            }
            function System.Collections.Queue.T.constructor.P.System.Collections.Queue.T
            {
                description
                {
                    Default constructor. Constructs an empty queue.
                }
                source <../src/queue.pdf>(1, 1);
            }
            function System.Collections.Queue.T.constructor.P.System.Collections.Queue.T.C.R.System.Collections.Queue.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Queue.T.constructor.P.System.Collections.Queue.T.C.R.System.Collections.Queue.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Queue.T.operator.assign.P.System.Collections.Queue.T.C.R.System.Collections.Queue.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Queue.T.operator.assign.P.System.Collections.Queue.T.C.R.System.Collections.Queue.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Queue.T.constructor.P.System.Collections.Queue.T.RR.System.Collections.Queue.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Queue.T.constructor.P.System.Collections.Queue.T.RR.System.Collections.Queue.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
                source <../src/queue.pdf>(1, 1);
            }
            function System.Collections.Queue.T.operator.assign.P.System.Collections.Queue.T.RR.System.Collections.Queue.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Queue.T.operator.assign.P.System.Collections.Queue.T.RR.System.Collections.Queue.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
                source <../src/queue.pdf>(1, 1);
            }
            function System.Collections.Queue.T.Clear.P.System.Collections.Queue.T
            {
                description
                {
                    Makes the queue empty.
                }
                source <../src/queue.pdf>(2, 2);
            }
            function System.Collections.Queue.T.Count.C.P.System.Collections.Queue.T
            {
                description
                {
                    Returns the number of elements in the queue.
                }
                returns System.Collections.Queue.T.Count.C.P.System.Collections.Queue.T.returnValue
                {
                    description
                    {
                        Returns the number of elements in the queue.
                    }
                }
                source <../src/queue.pdf>(1, 1);
            }
            function System.Collections.Queue.T.Front.C.P.System.Collections.Queue.T
            {
                description
                {
                    Returns a constant reference to the first element in the queue.
                }
                returns System.Collections.Queue.T.Front.C.P.System.Collections.Queue.T.returnValue
                {
                    description
                    {
                        Returns a constant reference to the first element in the queue.
                    }
                }
                source <../src/queue.pdf>(2, 2);
            }
            function System.Collections.Queue.T.Get.P.System.Collections.Queue.T
            {
                description
                {
                    Removes the first element from the queue and returns it.
                }
                returns System.Collections.Queue.T.Get.P.System.Collections.Queue.T.returnValue
                {
                    description
                    {
                        Returns the removed first element of the queue.
                    }
                }
                source <../src/queue.pdf>(1, 1);
            }
            function System.Collections.Queue.T.IsEmpty.C.P.System.Collections.Queue.T
            {
                description
                {
                    Returns true if the queue is empty, false otherwise.
                }
                returns System.Collections.Queue.T.IsEmpty.C.P.System.Collections.Queue.T.returnValue
                {
                    description
                    {
                        Returns true if the queue is empty, false otherwise.
                    }
                }
                source <../src/queue.pdf>(1, 1);
            }
            function System.Collections.Queue.T.Put.P.System.Collections.Queue.T.RR.T
            {
                description
                {
                    Moves an element to the back of the queue.
                }
                parameter System.Collections.Queue.T.Put.P.System.Collections.Queue.T.RR.T.item
                {
                    description
                    {
                        An element to insert.
                    }
                }
                source <../src/queue.pdf>(1, 1);
            }
            function System.Collections.Queue.T.Put.P.System.Collections.Queue.T.C.R.T
            {
                description
                {
                    Puts an element to the back of the queue.
                }
                parameter System.Collections.Queue.T.Put.P.System.Collections.Queue.T.C.R.T.item
                {
                    description
                    {
                        An element to put.
                    }
                }
                source <../src/queue.pdf>(1, 1);
            }
        }
        class System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
        {
            description
            {
                A self-balancing binary search tree of unique elements used to implement System.Collections.Set.T.C and 
                System.Collections.Map.Key.Value.KeyCompare. The keys of the elements in the tree need to be ordered.
            }
            typedef System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.ConstIterator
            {
                description
                {
                    A constant iterator type.
                }
            }
            typedef System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Iterator
            {
                description
                {
                    An iterator type.
                }
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.constructor.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                    Default constructor. Constructs an empty red-black tree.
                }
                source <../src/rbtree.pdf>(12, 12);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.constructor.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                }
                parameter System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.constructor.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.that
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.operator.assign.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                }
                parameter System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.operator.assign.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.that
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.constructor.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.RR.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                }
                parameter System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.constructor.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.RR.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.that
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.operator.assign.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.RR.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                }
                parameter System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.operator.assign.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.RR.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.that
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Begin.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                    Returns a bidirectional iterator pointing to the beginning of the red-black tree.
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Begin.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.returnValue
                {
                    description
                    {
                        Returns a bidirectional iterator pointing to the beginning of the red-black tree.
                    }
                }
                source <../src/rbtree.pdf>(12, 12);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Begin.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                    Returns a constant bidirectional iterator pointing to the beginning of the red-black tree.
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Begin.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.returnValue
                {
                    description
                    {
                        Returns a constant bidirectional iterator pointing to the beginning of the red-black tree.
                    }
                }
                source <../src/rbtree.pdf>(12, 12);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.CBegin.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                    Returns a constant bidirectional iterator pointing to the beginning of the red-black tree.
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.CBegin.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.returnValue
                {
                    description
                    {
                        Returns a constant bidirectional iterator pointing to the beginning of the red-black tree.
                    }
                }
                source <../src/rbtree.pdf>(12, 12);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.CEnd.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                    Returns a constant bidirectional iterator pointing to one past the end of the red-black tree.
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.CEnd.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.returnValue
                {
                    description
                    {
                        Returns a constant bidirectional iterator pointing to one past the end of the red-black tree.
                    }
                }
                source <../src/rbtree.pdf>(13, 13);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.CFind.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.KeyType
            {
                description
                {
                }
                parameter System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.CFind.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.KeyType.key
                {
                    description
                    {
                    }
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.CFind.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.KeyType.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Clear.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                    Makes the red-black tree empty.
                }
                source <../src/rbtree.pdf>(13, 13);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Count.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                    Returns the number of elements in the red-black tree.
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Count.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.returnValue
                {
                    description
                    {
                        Returns the number of elements in the red-black tree.
                    }
                }
                source <../src/rbtree.pdf>(13, 13);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.End.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                    Returns a bidirectional iterator pointing to one past the end of the red-black tree.
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.End.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.returnValue
                {
                    description
                    {
                        Returns a bidirectional iterator pointing to one past the end of the red-black tree.
                    }
                }
                source <../src/rbtree.pdf>(13, 13);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.End.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                    Returns a constant bidirectional iterator pointing to one past the end of the red-black tree.
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.End.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.returnValue
                {
                    description
                    {
                        Returns a constant bidirectional iterator pointing to one past the end of the red-black tree.
                    }
                }
                source <../src/rbtree.pdf>(12, 12);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Find.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.KeyType
            {
                description
                {
                    Finds an element with the given key in the red-black tree and returns an iterator pointing to it if found, or System.Collections.RedBlackTree.End iterator otherwise.
                }
                parameter System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Find.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.KeyType.key
                {
                    description
                    {
                        A key to search.
                    }
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Find.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.KeyType.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the found element if search is successful, or System.Collections.RedBlackTree.End iterator otherwise.
                    }
                }
                source <../src/rbtree.pdf>(13, 13);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Find.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.KeyType
            {
                description
                {
                    Finds an element with the given key in the red-black tree and returns a constant iterator pointing to it if found, or System.Collections.RedBlackTree.CEnd.const iterator otherwise.
                }
                parameter System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Find.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.KeyType.key
                {
                    description
                    {
                        A key to search.
                    }
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Find.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.KeyType.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the found element if search is successful, or System.Collections.RedBlackTree.CEnd.const iterator otherwise.
                    }
                }
                source <../src/rbtree.pdf>(14, 14);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Insert.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.ValueType
            {
                description
                {
                }
                parameter System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Insert.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.ValueType.value
                {
                    description
                    {
                    }
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Insert.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.ValueType.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.IsEmpty.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                    Returns true if the red-black tree is empty, false otherwise.
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.IsEmpty.C.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.returnValue
                {
                    description
                    {
                        Returns true if the red-black tree is empty, false otherwise.
                    }
                }
                source <../src/rbtree.pdf>(13, 13);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Remove.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.System.Collections.RedBlackTreeNodeIterator.ValueType.R.ValueType.P.ValueType
            {
                description
                {
                    Removes an element pointed by the given iterator from the red-black tree.
                }
                parameter System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Remove.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.System.Collections.RedBlackTreeNodeIterator.ValueType.R.ValueType.P.ValueType.pos
                {
                    description
                    {
                        An iterator pointing to the element to be removed.
                    }
                }
                source <../src/rbtree.pdf>(17, 17);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Remove.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.KeyType
            {
                description
                {
                    Removes an element with the given key from the red-black tree.
                    If an element with the given is not found, does nothing.
                }
                parameter System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Remove.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.KeyType.key
                {
                    description
                    {
                        A key of an element to remove.
                    }
                }
                returns System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.Remove.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.C.R.KeyType.returnValue
                {
                    description
                    {
                        Returns true if an element was removed, false otherwise.
                    }
                }
                source <../src/rbtree.pdf>(16, 16);
            }
            function System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.destructor.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare
            {
                description
                {
                    Destructor.
                }
                source <../src/rbtree.pdf>(12, 12);
            }
        }
        class System.Collections.RedBlackTreeNode.T
        {
            description
            {
            }
            typedef System.Collections.RedBlackTreeNode.T.ValueType
            {
                description
                {
                }
            }
            function System.Collections.RedBlackTreeNode.T.constructor.P.System.Collections.RedBlackTreeNode.T
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNode.T.constructor.P.System.Collections.RedBlackTreeNode.T.C.R.System.Collections.RedBlackTreeNode.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNode.T.constructor.P.System.Collections.RedBlackTreeNode.T.C.R.System.Collections.RedBlackTreeNode.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.T.operator.assign.P.System.Collections.RedBlackTreeNode.T.C.R.System.Collections.RedBlackTreeNode.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNode.T.operator.assign.P.System.Collections.RedBlackTreeNode.T.C.R.System.Collections.RedBlackTreeNode.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.T.constructor.P.System.Collections.RedBlackTreeNode.T.RR.System.Collections.RedBlackTreeNode.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNode.T.constructor.P.System.Collections.RedBlackTreeNode.T.RR.System.Collections.RedBlackTreeNode.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.T.operator.assign.P.System.Collections.RedBlackTreeNode.T.RR.System.Collections.RedBlackTreeNode.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNode.T.operator.assign.P.System.Collections.RedBlackTreeNode.T.RR.System.Collections.RedBlackTreeNode.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.T.constructor.P.System.Collections.RedBlackTreeNode.T.C.R.T.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                parameter System.Collections.RedBlackTreeNode.T.constructor.P.System.Collections.RedBlackTreeNode.T.C.R.T.P.System.Collections.RedBlackTreeNodeBase.parent_
                {
                    description
                    {
                    }
                }
                parameter System.Collections.RedBlackTreeNode.T.constructor.P.System.Collections.RedBlackTreeNode.T.C.R.T.P.System.Collections.RedBlackTreeNodeBase.value_
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.T.Value.P.System.Collections.RedBlackTreeNode.T
            {
                description
                {
                }
                returns System.Collections.RedBlackTreeNode.T.Value.P.System.Collections.RedBlackTreeNode.T.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.T.Value.C.P.System.Collections.RedBlackTreeNode.T
            {
                description
                {
                }
                returns System.Collections.RedBlackTreeNode.T.Value.C.P.System.Collections.RedBlackTreeNode.T.returnValue
                {
                    description
                    {
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNodeBase
        {
            description
            {
            }
            typedef System.Collections.RedBlackTreeNodeBase.Node
            {
                description
                {
                }
            }
            function System.Collections.RedBlackTreeNodeBase.constructor.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNodeBase.GetColor.C.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                returns System.Collections.RedBlackTreeNodeBase.GetColor.C.P.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.IsHeaderNode.C.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                returns System.Collections.RedBlackTreeNodeBase.IsHeaderNode.C.P.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.Left.C.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                returns System.Collections.RedBlackTreeNodeBase.Left.C.P.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.LeftRef.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                returns System.Collections.RedBlackTreeNodeBase.LeftRef.P.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.Max.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                parameter System.Collections.RedBlackTreeNodeBase.Max.P.System.Collections.RedBlackTreeNodeBase.n
                {
                    description
                    {
                    }
                }
                returns System.Collections.RedBlackTreeNodeBase.Max.P.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.Min.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                parameter System.Collections.RedBlackTreeNodeBase.Min.P.System.Collections.RedBlackTreeNodeBase.n
                {
                    description
                    {
                    }
                }
                returns System.Collections.RedBlackTreeNodeBase.Min.P.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.Next.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                parameter System.Collections.RedBlackTreeNodeBase.Next.P.System.Collections.RedBlackTreeNodeBase.n
                {
                    description
                    {
                    }
                }
                returns System.Collections.RedBlackTreeNodeBase.Next.P.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.Parent.C.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                returns System.Collections.RedBlackTreeNodeBase.Parent.C.P.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.ParentRef.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                returns System.Collections.RedBlackTreeNodeBase.ParentRef.P.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.Prev.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                parameter System.Collections.RedBlackTreeNodeBase.Prev.P.System.Collections.RedBlackTreeNodeBase.n
                {
                    description
                    {
                    }
                }
                returns System.Collections.RedBlackTreeNodeBase.Prev.P.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.RebalanceAfterInsert.P.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                parameter System.Collections.RedBlackTreeNodeBase.RebalanceAfterInsert.P.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.n
                {
                    description
                    {
                    }
                }
                parameter System.Collections.RedBlackTreeNodeBase.RebalanceAfterInsert.P.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.root
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.RebalanceForRemove.P.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                parameter System.Collections.RedBlackTreeNodeBase.RebalanceForRemove.P.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.leftmost
                {
                    description
                    {
                    }
                }
                parameter System.Collections.RedBlackTreeNodeBase.RebalanceForRemove.P.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.rightmost
                {
                    description
                    {
                    }
                }
                parameter System.Collections.RedBlackTreeNodeBase.RebalanceForRemove.P.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.root
                {
                    description
                    {
                    }
                }
                parameter System.Collections.RedBlackTreeNodeBase.RebalanceForRemove.P.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.z
                {
                    description
                    {
                    }
                }
                returns System.Collections.RedBlackTreeNodeBase.RebalanceForRemove.P.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.P.R.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.constructor.P.System.Collections.RedBlackTreeNodeBase.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                parameter System.Collections.RedBlackTreeNodeBase.constructor.P.System.Collections.RedBlackTreeNodeBase.P.System.Collections.RedBlackTreeNodeBase.parent_
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.Right.C.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                returns System.Collections.RedBlackTreeNodeBase.Right.C.P.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.RightRef.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                returns System.Collections.RedBlackTreeNodeBase.RightRef.P.System.Collections.RedBlackTreeNodeBase.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.SetColor.P.System.Collections.RedBlackTreeNodeBase.System.Collections.RedBlackTreeNodeBase.Color
            {
                description
                {
                }
                parameter System.Collections.RedBlackTreeNodeBase.SetColor.P.System.Collections.RedBlackTreeNodeBase.System.Collections.RedBlackTreeNodeBase.Color.color_
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.SetLeft.P.System.Collections.RedBlackTreeNodeBase.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                parameter System.Collections.RedBlackTreeNodeBase.SetLeft.P.System.Collections.RedBlackTreeNodeBase.P.System.Collections.RedBlackTreeNodeBase.left_
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.SetParent.P.System.Collections.RedBlackTreeNodeBase.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                parameter System.Collections.RedBlackTreeNodeBase.SetParent.P.System.Collections.RedBlackTreeNodeBase.P.System.Collections.RedBlackTreeNodeBase.parent_
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.SetRight.P.System.Collections.RedBlackTreeNodeBase.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
                parameter System.Collections.RedBlackTreeNodeBase.SetRight.P.System.Collections.RedBlackTreeNodeBase.P.System.Collections.RedBlackTreeNodeBase.right_
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeBase.destructor.P.System.Collections.RedBlackTreeNodeBase
            {
                description
                {
                }
            }
            enumType System.Collections.RedBlackTreeNodeBase.Color
            {
                description
                {
                }
                enumConstant System.Collections.RedBlackTreeNodeBase.Color.black
                {
                    description
                    {
                    }
                }
                enumConstant System.Collections.RedBlackTreeNodeBase.Color.red
                {
                    description
                    {
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNodeIterator.T.R.P
        {
            description
            {
                A bidirectional iterator that iterates through the elements in a reb-black tree.
            }
            typedef System.Collections.RedBlackTreeNodeIterator.T.R.P.PointerType
            {
                description
                {
                    The type of a pointer to an element.
                }
            }
            typedef System.Collections.RedBlackTreeNodeIterator.T.R.P.ReferenceType
            {
                description
                {
                    The type of a reference to an element.
                }
            }
            typedef System.Collections.RedBlackTreeNodeIterator.T.R.P.ValueType
            {
                description
                {
                    The type of the element.
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.T.R.P.constructor.P.System.Collections.RedBlackTreeNodeIterator.T.R.P
            {
                description
                {
                    Constructor. Default constructs a red-black tree node iterator.
                }
                source <../src/rbtree.pdf>(11, 11);
            }
            function System.Collections.RedBlackTreeNodeIterator.T.R.P.constructor.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.C.R.System.Collections.RedBlackTreeNodeIterator.T.R.P
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.T.R.P.constructor.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.C.R.System.Collections.RedBlackTreeNodeIterator.T.R.P.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.T.R.P.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.C.R.System.Collections.RedBlackTreeNodeIterator.T.R.P
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.T.R.P.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.C.R.System.Collections.RedBlackTreeNodeIterator.T.R.P.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.T.R.P.constructor.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.RR.System.Collections.RedBlackTreeNodeIterator.T.R.P
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.T.R.P.constructor.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.RR.System.Collections.RedBlackTreeNodeIterator.T.R.P.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.T.R.P.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.RR.System.Collections.RedBlackTreeNodeIterator.T.R.P
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.T.R.P.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.RR.System.Collections.RedBlackTreeNodeIterator.T.R.P.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.T.R.P.GetNode.C.P.System.Collections.RedBlackTreeNodeIterator.T.R.P
            {
                description
                {
                    Returns a pointer to a red-black tree node.
                }
                returns System.Collections.RedBlackTreeNodeIterator.T.R.P.GetNode.C.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a pointer to a red-black tree node.
                    }
                }
                source <../src/rbtree.pdf>(11, 11);
            }
            function System.Collections.RedBlackTreeNodeIterator.T.R.P.constructor.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.P.System.Collections.RedBlackTreeNode.T
            {
                description
                {
                    Constructor. Constructs an iterator pointing to a red-black tree node.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.T.R.P.constructor.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.P.System.Collections.RedBlackTreeNode.T.node_
                {
                    description
                    {
                        A pointer to a red-black tree node.
                    }
                }
                source <../src/rbtree.pdf>(11, 11);
            }
            function System.Collections.RedBlackTreeNodeIterator.T.R.P.operator.times.C.P.System.Collections.RedBlackTreeNodeIterator.T.R.P
            {
                description
                {
                    Returns a reference to an element.
                }
                returns System.Collections.RedBlackTreeNodeIterator.T.R.P.operator.times.C.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a reference to an element.
                    }
                }
                source <../src/rbtree.pdf>(11, 11);
            }
            function System.Collections.RedBlackTreeNodeIterator.T.R.P.operator.increment.P.System.Collections.RedBlackTreeNodeIterator.T.R.P
            {
                description
                {
                    Advances the iterator pointing to the next element in the red-black tree.
                }
                returns System.Collections.RedBlackTreeNodeIterator.T.R.P.operator.increment.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a reference to the iterator.
                    }
                }
                source <../src/rbtree.pdf>(11, 11);
            }
            function System.Collections.RedBlackTreeNodeIterator.T.R.P.operator.decrement.P.System.Collections.RedBlackTreeNodeIterator.T.R.P
            {
                description
                {
                    Backs the iterator pointing to the previous element in the red-black tree.
                }
                returns System.Collections.RedBlackTreeNodeIterator.T.R.P.operator.decrement.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a reference to the iterator.
                    }
                }
                source <../src/rbtree.pdf>(11, 11);
            }
            function System.Collections.RedBlackTreeNodeIterator.T.R.P.operator.pointer.C.P.System.Collections.RedBlackTreeNodeIterator.T.R.P
            {
                description
                {
                    Returns a pointer to an element.
                }
                returns System.Collections.RedBlackTreeNodeIterator.T.R.P.operator.pointer.C.P.System.Collections.RedBlackTreeNodeIterator.T.R.P.returnValue
                {
                    description
                    {
                        Returns a pointer to an element.
                    }
                }
                source <../src/rbtree.pdf>(11, 11);
            }
            modelof System.Concepts.BidirectionalIterator.T;
        }
        class System.Collections.Set.T.C
        {
            description
            {
                A container that contains a set of unique elements organized in a red-black tree.
                The elements need to be ordered.
            }
            example <examples/System.Collections.Set.cm>;
            typedef System.Collections.Set.T.C.Compare
            {
                description
                {
                    A relation used to order elements in the set.
                }
            }
            typedef System.Collections.Set.T.C.ConstIterator
            {
                description
                {
                    A constant iterator type.
                }
            }
            typedef System.Collections.Set.T.C.Iterator
            {
                description
                {
                    An iterator type.
                }
            }
            typedef System.Collections.Set.T.C.KeyType
            {
                description
                {
                    The key type is equal to the System.Collections.Set.ValueType for the red-black tree.
                }
            }
            typedef System.Collections.Set.T.C.ValueType
            {
                description
                {
                    The type of the element in the set.
                }
            }
            function System.Collections.Set.T.C.constructor.P.System.Collections.Set.T.C
            {
                description
                {
                    Default constructor. Constructs an empty set.
                }
                source <../src/set.pdf>(1, 1);
            }
            function System.Collections.Set.T.C.constructor.P.System.Collections.Set.T.C.C.R.System.Collections.Set.T.C
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Set.T.C.constructor.P.System.Collections.Set.T.C.C.R.System.Collections.Set.T.C.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Set.T.C.operator.assign.P.System.Collections.Set.T.C.C.R.System.Collections.Set.T.C
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Set.T.C.operator.assign.P.System.Collections.Set.T.C.C.R.System.Collections.Set.T.C.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Set.T.C.constructor.P.System.Collections.Set.T.C.RR.System.Collections.Set.T.C
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Set.T.C.constructor.P.System.Collections.Set.T.C.RR.System.Collections.Set.T.C.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Set.T.C.operator.assign.P.System.Collections.Set.T.C.RR.System.Collections.Set.T.C
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Set.T.C.operator.assign.P.System.Collections.Set.T.C.RR.System.Collections.Set.T.C.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Collections.Set.T.C.Begin.P.System.Collections.Set.T.C
            {
                description
                {
                    Returns an iterator pointing to the beginning of the set, or
                    System.Collections.Set.T.C.End.P.System.Collections.Set.T.C if the set is empty.
                }
                returns System.Collections.Set.T.C.Begin.P.System.Collections.Set.T.C.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the beginning of the set, or
                        System.Collections.Set.T.C.End.P.System.Collections.Set.T.C if the set is empty.
                    }
                }
                source <../src/set.pdf>(1, 1);
            }
            function System.Collections.Set.T.C.Begin.C.P.System.Collections.Set.T.C
            {
                description
                {
                    Returns a constant iterator pointing to the beginnig of the set, or
                    System.Collections.Set.T.C.CEnd.C.P.System.Collections.Set.T.C ir the set is empty.
                }
                returns System.Collections.Set.T.C.Begin.C.P.System.Collections.Set.T.C.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the beginnig of the set, or
                        System.Collections.Set.T.C.CEnd.C.P.System.Collections.Set.T.C ir the set is empty.
                    }
                }
            }
            function System.Collections.Set.T.C.CBegin.C.P.System.Collections.Set.T.C
            {
                description
                {
                    Returns a constant iterator pointing to the beginning of the set, or
                    System.Collections.Set.T.C.CEnd.C.P.System.Collections.Set.T.C if the set is empty.
                }
                returns System.Collections.Set.T.C.CBegin.C.P.System.Collections.Set.T.C.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to the beginning of the set, or
                        System.Collections.Set.T.C.CEnd.C.P.System.Collections.Set.T.C if the set is empty.
                    }
                }
                source <../src/set.pdf>(1, 1);
            }
            function System.Collections.Set.T.C.CEnd.C.P.System.Collections.Set.T.C
            {
                description
                {
                    Returns a constant iterator pointing one past the end of the set.
                }
                returns System.Collections.Set.T.C.CEnd.C.P.System.Collections.Set.T.C.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing one past the end of the set.
                    }
                }
                source <../src/set.pdf>(2, 2);
            }
            function System.Collections.Set.T.C.CFind.C.P.System.Collections.Set.T.C.C.R.T
            {
                description
                {
                    Searches an element from the set and returns a constant iterator pointing to it if found, or 
                    System.Collections.Set.T.C.CEnd.C.P.System.Collections.Set.T.C iterator otherwise.
                }
                parameter System.Collections.Set.T.C.CFind.C.P.System.Collections.Set.T.C.C.R.T.key
                {
                    description
                    {
                        An element to search.
                    }
                }
                returns System.Collections.Set.T.C.CFind.C.P.System.Collections.Set.T.C.C.R.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to it if found, or 
                        System.Collections.Set.T.C.CEnd.C.P.System.Collections.Set.T.C iterator otherwise.
                    }
                }
            }
            function System.Collections.Set.T.C.Clear.P.System.Collections.Set.T.C
            {
                description
                {
                    Makes the set empty.
                }
                source <../src/set.pdf>(2, 2);
            }
            function System.Collections.Set.T.C.Count.C.P.System.Collections.Set.T.C
            {
                description
                {
                    Returns the number of elements in the set.
                }
                returns System.Collections.Set.T.C.Count.C.P.System.Collections.Set.T.C.returnValue
                {
                    description
                    {
                        Returns the number of elements in the set.
                    }
                }
                source <../src/set.pdf>(2, 2);
            }
            function System.Collections.Set.T.C.End.P.System.Collections.Set.T.C
            {
                description
                {
                    Returns an iterator pointing one past the end of the set.
                }
                returns System.Collections.Set.T.C.End.P.System.Collections.Set.T.C.returnValue
                {
                    description
                    {
                        Returns an iterator pointing one past the end of the set.
                    }
                }
                source <../src/set.pdf>(2, 2);
            }
            function System.Collections.Set.T.C.End.C.P.System.Collections.Set.T.C
            {
                description
                {
                }
                returns System.Collections.Set.T.C.End.C.P.System.Collections.Set.T.C.returnValue
                {
                    description
                    {
                    }
                }
            }
            function System.Collections.Set.T.C.Find.P.System.Collections.Set.T.C.C.R.T
            {
                description
                {
                    Searches an element from the set and returns an iterator pointing to it if found, or 
                    System.Collections.Set.T.C.End.P.System.Collections.Set.T.C iterator otherwise.
                }
                parameter System.Collections.Set.T.C.Find.P.System.Collections.Set.T.C.C.R.T.key
                {
                    description
                    {
                        An element to seach.
                    }
                }
                returns System.Collections.Set.T.C.Find.P.System.Collections.Set.T.C.C.R.T.returnValue
                {
                    description
                    {
                        Returns an iterator pointing to the found element if the search was successful, or 
                        System.Collections.Set.T.C.End.P.System.Collections.Set.T.C iterator otherwise.
                    }
                }
                source <../src/set.pdf>(2, 2);
            }
            function System.Collections.Set.T.C.Find.C.P.System.Collections.Set.T.C.C.R.T
            {
                description
                {
                    Searches an element from the set and returns a constant iterator pointing to it if found, or 
                    System.Collections.Set.T.C.CEnd.C.P.System.Collections.Set.T.C iterator otherwise.
                }
                parameter System.Collections.Set.T.C.Find.C.P.System.Collections.Set.T.C.C.R.T.key
                {
                    description
                    {
                        An element to search.
                    }
                }
                returns System.Collections.Set.T.C.Find.C.P.System.Collections.Set.T.C.C.R.T.returnValue
                {
                    description
                    {
                        Returns a constant iterator pointing to it if found, or 
                        System.Collections.Set.T.C.CEnd.C.P.System.Collections.Set.T.C iterator otherwise.
                    }
                }
            }
            function System.Collections.Set.T.C.Insert.P.System.Collections.Set.T.C.C.R.T
            {
                description
                {
                    Inserts an element to the set if it is not already there and returns
                    a pair consisting of an iterator pointing to the inserted element and "\textbf{true}"
                    if element was inserted, and a pair consisting of an iterator pointing to the 
                    existing element and "\textbf{false}" otherwise.
                }
                parameter System.Collections.Set.T.C.Insert.P.System.Collections.Set.T.C.C.R.T.value
                {
                    description
                    {
                        An element to insert.
                    }
                }
                returns System.Collections.Set.T.C.Insert.P.System.Collections.Set.T.C.C.R.T.returnValue
                {
                    description
                    {
                        Returns a pair consisting of an iterator pointing to the inserted element and "\textbf{true}"
                        if element was inserted, and a pair consisting of an iterator pointing to the 
                        existing element and "\textbf{false}" otherwise.                    
                    }
                }
            }
            function System.Collections.Set.T.C.IsEmpty.C.P.System.Collections.Set.T.C
            {
                description
                {
                    Returns true if the set is empty, false otherwise.
                }
                returns System.Collections.Set.T.C.IsEmpty.C.P.System.Collections.Set.T.C.returnValue
                {
                    description
                    {
                        Returns true if the set is empty, false otherwise.
                    }
                }
                source <../src/set.pdf>(2, 2);
            }
            function System.Collections.Set.T.C.Remove.P.System.Collections.Set.T.C.System.Collections.RedBlackTreeNodeIterator.T.R.T.P.T
            {
                description
                {
                    Removes an element pointed by the given iterator from the set.
                }
                parameter System.Collections.Set.T.C.Remove.P.System.Collections.Set.T.C.System.Collections.RedBlackTreeNodeIterator.T.R.T.P.T.pos
                {
                    description
                    {
                        An iterator pointing to the element to remove.
                    }
                }
            }
            function System.Collections.Set.T.C.Remove.P.System.Collections.Set.T.C.C.R.T
            {
                description
                {
                    Removes an element from the set.
                    If the element was not found, does nothing.
                }
                parameter System.Collections.Set.T.C.Remove.P.System.Collections.Set.T.C.C.R.T.key
                {
                    description
                    {
                        An element to remove.
                    }
                }
                returns System.Collections.Set.T.C.Remove.P.System.Collections.Set.T.C.C.R.T.returnValue
                {
                    description
                    {
                        Returns true if element was removed, false otherwise.
                    }
                }
                source <../src/set.pdf>(2, 2);
            }
            modelof System.Concepts.BidirectionalContainer.T;
        }
        class System.Collections.Stack.T
        {
            description
            {
                A last-in first-out data structure.
            }
            example <examples/System.Collections.Stack.cm>;
            typedef System.Collections.Stack.T.ValueType
            {
                description
                {
                    The type of the stack element.
                }
            }
            function System.Collections.Stack.T.constructor.P.System.Collections.Stack.T
            {
                description
                {
                    Default constructor. Constructs an empty stack.
                }
                source <../src/stack.pdf>(1, 1);
            }
            function System.Collections.Stack.T.constructor.P.System.Collections.Stack.T.C.R.System.Collections.Stack.T
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Stack.T.constructor.P.System.Collections.Stack.T.C.R.System.Collections.Stack.T.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Stack.T.operator.assign.P.System.Collections.Stack.T.C.R.System.Collections.Stack.T
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Stack.T.operator.assign.P.System.Collections.Stack.T.C.R.System.Collections.Stack.T.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Stack.T.constructor.P.System.Collections.Stack.T.RR.System.Collections.Stack.T
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Stack.T.constructor.P.System.Collections.Stack.T.RR.System.Collections.Stack.T.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
                source <../src/stack.pdf>(1, 1);
            }
            function System.Collections.Stack.T.operator.assign.P.System.Collections.Stack.T.RR.System.Collections.Stack.T
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Stack.T.operator.assign.P.System.Collections.Stack.T.RR.System.Collections.Stack.T.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
                source <../src/stack.pdf>(1, 1);
            }
            function System.Collections.Stack.T.Clear.P.System.Collections.Stack.T
            {
                description
                {
                    Makes the stack empty.
                }
                source <../src/stack.pdf>(2, 2);
            }
            function System.Collections.Stack.T.Count.C.P.System.Collections.Stack.T
            {
                description
                {
                    Returns the number of elements in the stack.
                }
                returns System.Collections.Stack.T.Count.C.P.System.Collections.Stack.T.returnValue
                {
                    description
                    {
                        Returns the number of elements in the stack.
                    }
                }
                source <../src/stack.pdf>(1, 1);
            }
            function System.Collections.Stack.T.IsEmpty.C.P.System.Collections.Stack.T
            {
                description
                {
                    Returns true if the stack is empty, false otherwise.
                }
                returns System.Collections.Stack.T.IsEmpty.C.P.System.Collections.Stack.T.returnValue
                {
                    description
                    {
                        Returns true if the stack is empty, false otherwise.
                    }
                }
                source <../src/stack.pdf>(1, 1);
            }
            function System.Collections.Stack.T.Pop.P.System.Collections.Stack.T
            {
                description
                {
                    Removes an element from the top of the stack and returns it.
                }
                returns System.Collections.Stack.T.Pop.P.System.Collections.Stack.T.returnValue
                {
                    description
                    {
                        Returns the removed element.
                    }
                }
            }
            function System.Collections.Stack.T.Push.P.System.Collections.Stack.T.RR.T
            {
                description
                {
                    Moves an element to the top of the stack.
                }
                parameter System.Collections.Stack.T.Push.P.System.Collections.Stack.T.RR.T.item
                {
                    description
                    {
                        An element to push.
                    }
                }
            }
            function System.Collections.Stack.T.Push.P.System.Collections.Stack.T.C.R.T
            {
                description
                {
                    Copies an element to the top of the stack.
                }
                parameter System.Collections.Stack.T.Push.P.System.Collections.Stack.T.C.R.T.item
                {
                    description
                    {
                        An element to push.
                    }
                }
            }
            function System.Collections.Stack.T.Top.P.System.Collections.Stack.T
            {
                description
                {
                    Return a reference to the element at the top of the stack.
                }
                returns System.Collections.Stack.T.Top.P.System.Collections.Stack.T.returnValue
                {
                    description
                    {
                        Return a reference to the element at the top of the stack.
                    }
                }
                source <../src/stack.pdf>(2, 2);
            }
            function System.Collections.Stack.T.Top.C.P.System.Collections.Stack.T
            {
                description
                {
                    Returns a constant reference to the element at the top of the stack.
                }
                returns System.Collections.Stack.T.Top.C.P.System.Collections.Stack.T.returnValue
                {
                    description
                    {
                        Returns a constant reference to the element at the top of the stack.
                    }
                }
                source <../src/stack.pdf>(2, 2);
            }
        }
        function System.Collections.ConstructiveCopy.ValueType.P.ValueType.P.ValueType.int.where.ValueType.is.CopyConstructible
        {
            description
            {
                Copies a sequence of values by constructing them into raw memory.
            }
            parameter System.Collections.ConstructiveCopy.ValueType.P.ValueType.P.ValueType.int.where.ValueType.is.CopyConstructible.count
            {
                description
                {
                    The number of elements to copy.
                }
            }
            parameter System.Collections.ConstructiveCopy.ValueType.P.ValueType.P.ValueType.int.where.ValueType.is.CopyConstructible.from
            {
                description
                {
                    A pointer to elements to copy.
                }
            }
            parameter System.Collections.ConstructiveCopy.ValueType.P.ValueType.P.ValueType.int.where.ValueType.is.CopyConstructible.to
            {
                description
                {
                    A pointer to beginning of raw memory to copy the elements to.
                }
            }
            source <../src/list.pdf>(7, 7);
        }
        function System.Collections.ConstructiveMove.ValueType.P.ValueType.P.ValueType.int.where.ValueType.is.MoveConstructible
        {
            description
            {
                Moves a sequence of values by moving them into raw memory.
            }
            parameter System.Collections.ConstructiveMove.ValueType.P.ValueType.P.ValueType.int.where.ValueType.is.MoveConstructible.count
            {
                description
                {
                    The number of elements to move.
                }
            }
            parameter System.Collections.ConstructiveMove.ValueType.P.ValueType.P.ValueType.int.where.ValueType.is.MoveConstructible.from
            {
                description
                {
                    A pointer to elements to move.
                }
            }
            parameter System.Collections.ConstructiveMove.ValueType.P.ValueType.P.ValueType.int.where.ValueType.is.MoveConstructible.to
            {
                description
                {
                    A pointer to beginning of raw memory to move the elements to.
                }
            }
            source <../src/list.pdf>(7, 7);
        }
        function System.Collections.Destroy.ValueType.P.ValueType.int.where.ValueType.is.Destructible
        {
            description
            {
                Destroys a sequence of values but does not release the memory allocated for them.
            }
            parameter System.Collections.Destroy.ValueType.P.ValueType.int.where.ValueType.is.Destructible.count
            {
                description
                {
                    The number of elements to destroy.
                }
            }
            parameter System.Collections.Destroy.ValueType.P.ValueType.int.where.ValueType.is.Destructible.items
            {
                description
                {
                    A pointer to elements to destroy.
                }
            }
            source <../src/list.pdf>(7, 7);
        }
        function System.Collections.GetHashCode.char
        {
            description
            {
                Returns a hash code for given chararacter.
            }
            parameter System.Collections.GetHashCode.char.x
            {
                description
                {
                    A character.
                }
            }
            returns System.Collections.GetHashCode.char.returnValue
            {
                description
                {
                    Returns a hash code for the given chararacter.
                }
            }
        }
        function System.Collections.GetHashCode.C.R.System.String
        {
            description
            {
                Computes a hash code for the given string and returns it.
            }
            parameter System.Collections.GetHashCode.C.R.System.String.s
            {
                description
                {
                    A string.
                }
            }
            returns System.Collections.GetHashCode.C.R.System.String.returnValue
            {
                description
                {
                    Returns a hash code for the given string.
                }
            }
        }
        function System.Collections.GetHashCode.long
        {
            description
            {
                Returns a hash code for the given long value.
            }
            parameter System.Collections.GetHashCode.long.x
            {
                description
                {
                    A long value.
                }
            }
            returns System.Collections.GetHashCode.long.returnValue
            {
                description
                {
                    Returns a hash code for the given long value.
                }
            }
        }
        function System.Collections.GetHashCode.ulong
        {
            description
            {
                Returns a hash code for the given ulong value.
            }
            parameter System.Collections.GetHashCode.ulong.x
            {
                description
                {
                    A ulong value.
                }
            }
            returns System.Collections.GetHashCode.ulong.returnValue
            {
                description
                {
                    Returns a hash code for the given ulong value.
                }
            }
        }
        function System.Collections.GetHashCode.P.void
        {
            description
            {
                Returns a hash code for the given pointer.
            }
            parameter System.Collections.GetHashCode.P.void.x
            {
                description
                {
                    A pointer.
                }
            }
            returns System.Collections.GetHashCode.P.void.returnValue
            {
                description
                {
                    Returns a hash code for the given pointer.
                }
            }
        }
        function System.Collections.operator.less.T.C.R.System.Collections.ForwardList.T.C.R.System.Collections.ForwardList.T.where.T.is.TotallyOrdered
        {
            description
            {
                Compares two forward lists for less than relationship and returns true if the first forward list comes lexicographically before the second forward list, false otherwise.
            }
            parameter System.Collections.operator.less.T.C.R.System.Collections.ForwardList.T.C.R.System.Collections.ForwardList.T.where.T.is.TotallyOrdered.left
            {
                description
                {
                    The first forward list.
                }
            }
            parameter System.Collections.operator.less.T.C.R.System.Collections.ForwardList.T.C.R.System.Collections.ForwardList.T.where.T.is.TotallyOrdered.right
            {
                description
                {
                    The second forward list.
                }
            }
            returns System.Collections.operator.less.T.C.R.System.Collections.ForwardList.T.C.R.System.Collections.ForwardList.T.where.T.is.TotallyOrdered.returnValue
            {
                description
                {
                    Returns true if the first forward list comes lexicographically before the second forward list, false otherwise.
                }
            }
            owner System.Collections.ForwardList.T;
            source <../src/fwdlist.pdf>(6, 6);
        }
        function System.Collections.operator.less.T.C.R.System.Collections.LinkedList.T.C.R.System.Collections.LinkedList.T.where.T.is.TotallyOrdered
        {
            description
            {
                Compares two linked listys for less than relationship and returns true if the first linked list comes lexicographically before the second linked list, false otherwise.
            }
            parameter System.Collections.operator.less.T.C.R.System.Collections.LinkedList.T.C.R.System.Collections.LinkedList.T.where.T.is.TotallyOrdered.left
            {
                description
                {
                    The first linked list.
                }
            }
            parameter System.Collections.operator.less.T.C.R.System.Collections.LinkedList.T.C.R.System.Collections.LinkedList.T.where.T.is.TotallyOrdered.right
            {
                description
                {
                    The second linked list.
                }
            }
            returns System.Collections.operator.less.T.C.R.System.Collections.LinkedList.T.C.R.System.Collections.LinkedList.T.where.T.is.TotallyOrdered.returnValue
            {
                description
                {
                    Returns true if the first linked list comes lexicographically before the second linked list, false otherwise.
                }
            }
            owner System.Collections.LinkedList.T;
        }
        function System.Collections.operator.less.T.C.R.System.Collections.List.T.C.R.System.Collections.List.T.where.T.is.TotallyOrdered
        {
            description
            {
                Compares two lists for less than relationship and returns true if the first list comes lexicographically before the second list, false otherwise.
            }
            parameter System.Collections.operator.less.T.C.R.System.Collections.List.T.C.R.System.Collections.List.T.where.T.is.TotallyOrdered.left
            {
                description
                {
                    The first list.
                }
            }
            parameter System.Collections.operator.less.T.C.R.System.Collections.List.T.C.R.System.Collections.List.T.where.T.is.TotallyOrdered.right
            {
                description
                {
                    The second list.
                }
            }
            returns System.Collections.operator.less.T.C.R.System.Collections.List.T.C.R.System.Collections.List.T.where.T.is.TotallyOrdered.returnValue
            {
                description
                {
                    Returns true if the first list comes lexicographically before the second list, false otherwise.
                }
            }
            owner System.Collections.List.T;
            source <../src/list.pdf>(7, 7);
        }
        function System.Collections.operator.less.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.where.Key.is.Semiregular.and.Value.is.TotallyOrdered.and.KeyCompare.is.Relation.and.KeyCompare.Domain.is.Key
        {
            description
            {
                Compares two maps for less than relationship and returns true if the first map comes lexicographically before the second map, false otherwise.
            }
            example <examples/System.Collections.@operator.less.Map.cm>;
            parameter System.Collections.operator.less.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.where.Key.is.Semiregular.and.Value.is.TotallyOrdered.and.KeyCompare.is.Relation.and.KeyCompare.Domain.is.Key.left
            {
                description
                {
                    The first map.
                }
            }
            parameter System.Collections.operator.less.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.where.Key.is.Semiregular.and.Value.is.TotallyOrdered.and.KeyCompare.is.Relation.and.KeyCompare.Domain.is.Key.right
            {
                description
                {
                    The second map.
                }
            }
            returns System.Collections.operator.less.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.where.Key.is.Semiregular.and.Value.is.TotallyOrdered.and.KeyCompare.is.Relation.and.KeyCompare.Domain.is.Key.returnValue
            {
                description
                {
                    Returns true if the first map comes lexicographically before the second map, false otherwise.
                }
            }
            owner System.Collections.Map.Key.Value.KeyCompare;
            source <../src/map.pdf>(3, 3);
        }
        function System.Collections.operator.less.T.C.C.R.System.Collections.Set.T.C.C.R.System.Collections.Set.T.C.where.T.is.Semiregular.and.C.is.Relation.and.C.Domain.is.T
        {
            description
            {
                Compares two sets for less than relationship and returns true if the first set comes lexicographically before the second set, false otherwise.
            }
            example <examples/System.Collections.@operator.less.Set.cm>;
            parameter System.Collections.operator.less.T.C.C.R.System.Collections.Set.T.C.C.R.System.Collections.Set.T.C.where.T.is.Semiregular.and.C.is.Relation.and.C.Domain.is.T.left
            {
                description
                {
                    The first set.
                }
            }
            parameter System.Collections.operator.less.T.C.C.R.System.Collections.Set.T.C.C.R.System.Collections.Set.T.C.where.T.is.Semiregular.and.C.is.Relation.and.C.Domain.is.T.right
            {
                description
                {
                    The second set.
                }
            }
            returns System.Collections.operator.less.T.C.C.R.System.Collections.Set.T.C.C.R.System.Collections.Set.T.C.where.T.is.Semiregular.and.C.is.Relation.and.C.Domain.is.T.returnValue
            {
                description
                {
                    Returns true if the first set comes lexicographically before the second set, false otherwise.
                }
            }
            owner System.Collections.Set.T.C;
            source <../src/set.pdf>(3, 3);
        }
        function System.Collections.operator.equal.T.R.P.System.Collections.ForwardListNodeIterator.T.R.P.System.Collections.ForwardListNodeIterator.T.R.P
        {
            description
            {
                Compares two forward list node iterators for equality.
            }
            parameter System.Collections.operator.equal.T.R.P.System.Collections.ForwardListNodeIterator.T.R.P.System.Collections.ForwardListNodeIterator.T.R.P.left
            {
                description
                {
                    The first forward list node iterator.
                }
            }
            parameter System.Collections.operator.equal.T.R.P.System.Collections.ForwardListNodeIterator.T.R.P.System.Collections.ForwardListNodeIterator.T.R.P.right
            {
                description
                {
                    The second forward list node iterator.
                }
            }
            returns System.Collections.operator.equal.T.R.P.System.Collections.ForwardListNodeIterator.T.R.P.System.Collections.ForwardListNodeIterator.T.R.P.returnValue
            {
                description
                {
                    Returns true if both iterators point to same forward list node, or both are System.Collections.ForwardList.T.End.P.System.Collections.ForwardList.T iterators, false otherwise.
                }
            }
            owner System.Collections.ForwardListNodeIterator.T.R.P;
            source <../src/fwdlist.pdf>(6, 6);
        }
        function System.Collections.operator.equal.T.C.R.System.Collections.ForwardList.T.C.R.System.Collections.ForwardList.T.where.T.is.Regular
        {
            description
            {
                Compares two forward lists for equality and returns true if both contain the same number of pairwise equal elements, false otherwise.
            }
            parameter System.Collections.operator.equal.T.C.R.System.Collections.ForwardList.T.C.R.System.Collections.ForwardList.T.where.T.is.Regular.left
            {
                description
                {
                    The first forward list.
                }
            }
            parameter System.Collections.operator.equal.T.C.R.System.Collections.ForwardList.T.C.R.System.Collections.ForwardList.T.where.T.is.Regular.right
            {
                description
                {
                    The second forward list.
                }
            }
            returns System.Collections.operator.equal.T.C.R.System.Collections.ForwardList.T.C.R.System.Collections.ForwardList.T.where.T.is.Regular.returnValue
            {
                description
                {
                    returns true if both contain the same number of pairwise equal elements, false otherwise.
                }
            }
            owner System.Collections.ForwardList.T;
            source <../src/fwdlist.pdf>(6, 6);
        }
        function System.Collections.operator.equal.K.T.H.C.C.R.System.Collections.HashMap.K.T.H.C.C.R.System.Collections.HashMap.K.T.H.C.where.K.is.Semiregular.and.T.is.Semiregular.and.HashFunction.H.K.and.C.is.Relation.and.C.Domain.is.K
        {
            description
            {
                Compares two hash maps for equality and returns true if the first hash map contains same number of equal elements as the second hash map, false otherwise.
            }
            parameter System.Collections.operator.equal.K.T.H.C.C.R.System.Collections.HashMap.K.T.H.C.C.R.System.Collections.HashMap.K.T.H.C.where.K.is.Semiregular.and.T.is.Semiregular.and.HashFunction.H.K.and.C.is.Relation.and.C.Domain.is.K.left
            {
                description
                {
                    The first hash map.
                }
            }
            parameter System.Collections.operator.equal.K.T.H.C.C.R.System.Collections.HashMap.K.T.H.C.C.R.System.Collections.HashMap.K.T.H.C.where.K.is.Semiregular.and.T.is.Semiregular.and.HashFunction.H.K.and.C.is.Relation.and.C.Domain.is.K.right
            {
                description
                {
                    The second hash map.
                }
            }
            returns System.Collections.operator.equal.K.T.H.C.C.R.System.Collections.HashMap.K.T.H.C.C.R.System.Collections.HashMap.K.T.H.C.where.K.is.Semiregular.and.T.is.Semiregular.and.HashFunction.H.K.and.C.is.Relation.and.C.Domain.is.K.returnValue
            {
                description
                {
                    Returns true if the first hash map contains same number of equal elements as the second hash map, false otherwise
                }
            }
            owner System.Collections.HashMap.K.T.H.C;
        }
        function System.Collections.operator.equal.T.H.C.C.R.System.Collections.HashSet.T.H.C.C.R.System.Collections.HashSet.T.H.C.where.T.is.Semiregular.and.HashFunction.H.T.and.C.is.Relation.and.C.Domain.is.T
        {
            description
            {
                Compares two hash sets for equality and returns true if the first hash set contains same number of equal elements as the second hash set, false otherwise.
            }
            parameter System.Collections.operator.equal.T.H.C.C.R.System.Collections.HashSet.T.H.C.C.R.System.Collections.HashSet.T.H.C.where.T.is.Semiregular.and.HashFunction.H.T.and.C.is.Relation.and.C.Domain.is.T.left
            {
                description
                {
                    The first hash set.
                }
            }
            parameter System.Collections.operator.equal.T.H.C.C.R.System.Collections.HashSet.T.H.C.C.R.System.Collections.HashSet.T.H.C.where.T.is.Semiregular.and.HashFunction.H.T.and.C.is.Relation.and.C.Domain.is.T.right
            {
                description
                {
                    The second hash set.
                }
            }
            returns System.Collections.operator.equal.T.H.C.C.R.System.Collections.HashSet.T.H.C.C.R.System.Collections.HashSet.T.H.C.where.T.is.Semiregular.and.HashFunction.H.T.and.C.is.Relation.and.C.Domain.is.T.returnValue
            {
                description
                {
                    Returns true if the first hash set contains same number of equal elements as the second hash set, false otherwise.
                }
            }
            owner System.Collections.HashSet.T.H.C;
        }
        function System.Collections.operator.equal.T.R.P.C.R.System.Collections.HashtableIterator.T.R.P.C.R.System.Collections.HashtableIterator.T.R.P
        {
            description
            {
                Compares two hash table iterators for equality and returns true if they point to the same hash table node if the table is not empty,
                or both are System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CEnd.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare iterators
                otherwise.
            }
            parameter System.Collections.operator.equal.T.R.P.C.R.System.Collections.HashtableIterator.T.R.P.C.R.System.Collections.HashtableIterator.T.R.P.left
            {
                description
                {
                    The first iterator.
                }
            }
            parameter System.Collections.operator.equal.T.R.P.C.R.System.Collections.HashtableIterator.T.R.P.C.R.System.Collections.HashtableIterator.T.R.P.right
            {
                description
                {
                    The second iterator.
                }
            }
            returns System.Collections.operator.equal.T.R.P.C.R.System.Collections.HashtableIterator.T.R.P.C.R.System.Collections.HashtableIterator.T.R.P.returnValue
            {
                description
                {
                    Returns true if both point to same hash table node, or both are 
                    System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare.CEnd.C.P.System.Collections.Hashtable.KeyType.ValueType.KeyOfValue.HashFun.Compare iterators.
                }
            }
            owner System.Collections.HashtableIterator.T.R.P;
        }
        function System.Collections.operator.equal.T.C.R.System.Collections.LinkedList.T.C.R.System.Collections.LinkedList.T.where.T.is.Regular
        {
            description
            {
                Compares two linked lists for equality and returns true if they contain same number of pairwise equal elements, false otherwise.
            }
            parameter System.Collections.operator.equal.T.C.R.System.Collections.LinkedList.T.C.R.System.Collections.LinkedList.T.where.T.is.Regular.left
            {
                description
                {
                    The first linked list.
                }
            }
            parameter System.Collections.operator.equal.T.C.R.System.Collections.LinkedList.T.C.R.System.Collections.LinkedList.T.where.T.is.Regular.right
            {
                description
                {
                    The second linked list-.
                }
            }
            returns System.Collections.operator.equal.T.C.R.System.Collections.LinkedList.T.C.R.System.Collections.LinkedList.T.where.T.is.Regular.returnValue
            {
                description
                {
                    Returns true if both linked lists contain the same number of pairwise equal elements, false otherwise.
                }
            }
            owner System.Collections.LinkedList.T;
        }
        function System.Collections.operator.equal.T.R.P.C.R.System.Collections.LinkedListNodeIterator.T.R.P.C.R.System.Collections.LinkedListNodeIterator.T.R.P
        {
            description
            {
                Compares two linked list node iterators and returns true if they point to same linked list node, or
                both are System.Collections.LinkedList.T.CEnd.C.P.System.Collections.LinkedList.T iterators, false otherwise.
            }
            parameter System.Collections.operator.equal.T.R.P.C.R.System.Collections.LinkedListNodeIterator.T.R.P.C.R.System.Collections.LinkedListNodeIterator.T.R.P.left
            {
                description
                {
                    The first linked list node iterator.
                }
            }
            parameter System.Collections.operator.equal.T.R.P.C.R.System.Collections.LinkedListNodeIterator.T.R.P.C.R.System.Collections.LinkedListNodeIterator.T.R.P.right
            {
                description
                {
                    The second linked list node iterator.
                }
            }
            returns System.Collections.operator.equal.T.R.P.C.R.System.Collections.LinkedListNodeIterator.T.R.P.C.R.System.Collections.LinkedListNodeIterator.T.R.P.returnValue
            {
                description
                {
                    Returns true if both iterators point to same linked list node, or
                    both are System.Collections.LinkedList.T.CEnd.C.P.System.Collections.LinkedList.T iterators, false otherwise.
                }
            }
            owner System.Collections.LinkedListNodeIterator.T.R.P;
        }
        function System.Collections.operator.equal.T.C.R.System.Collections.List.T.C.R.System.Collections.List.T.where.T.is.Regular
        {
            description
            {
                Compares two lists for equality and returns true if both lists contain the same number of pairwise equal elements, false otherwise.
            }
            parameter System.Collections.operator.equal.T.C.R.System.Collections.List.T.C.R.System.Collections.List.T.where.T.is.Regular.left
            {
                description
                {
                    The first list.
                }
            }
            parameter System.Collections.operator.equal.T.C.R.System.Collections.List.T.C.R.System.Collections.List.T.where.T.is.Regular.right
            {
                description
                {
                    The second list.
                }
            }
            returns System.Collections.operator.equal.T.C.R.System.Collections.List.T.C.R.System.Collections.List.T.where.T.is.Regular.returnValue
            {
                description
                {
                    Returns true if both lists contain the same number of pairwise equal elements, false otherwise.
                }
            }
            owner System.Collections.List.T;
            source <../src/list.pdf>(7, 7);
        }
        function System.Collections.operator.equal.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.where.Key.is.Regular.and.Value.is.Regular.and.KeyCompare.is.Relation.and.KeyCompare.Domain.is.Key
        {
            description
            {
                Compares two maps for equality and returns true if both maps contain the same number of pairwise equal elements, false otherwise.
            }
            example <examples/System.Collections.@operator.equal.Map.cm>;
            parameter System.Collections.operator.equal.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.where.Key.is.Regular.and.Value.is.Regular.and.KeyCompare.is.Relation.and.KeyCompare.Domain.is.Key.left
            {
                description
                {
                    The first map to compare.
                }
            }
            parameter System.Collections.operator.equal.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.where.Key.is.Regular.and.Value.is.Regular.and.KeyCompare.is.Relation.and.KeyCompare.Domain.is.Key.right
            {
                description
                {
                    The second map to compare.
                }
            }
            returns System.Collections.operator.equal.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.C.R.System.Collections.Map.Key.Value.KeyCompare.where.Key.is.Regular.and.Value.is.Regular.and.KeyCompare.is.Relation.and.KeyCompare.Domain.is.Key.returnValue
            {
                description
                {
                    Returns true if both maps contain the same number of pairwise equal elements, false otherwise.
                }
            }
            owner System.Collections.Map.Key.Value.KeyCompare;
            source <../src/map.pdf>(3, 3);
        }
        function System.Collections.operator.equal.T.R.P.C.R.System.Collections.RedBlackTreeNodeIterator.T.R.P.C.R.System.Collections.RedBlackTreeNodeIterator.T.R.P
        {
            description
            {
                Compares two red-black tree node iterators for equality.
            }
            parameter System.Collections.operator.equal.T.R.P.C.R.System.Collections.RedBlackTreeNodeIterator.T.R.P.C.R.System.Collections.RedBlackTreeNodeIterator.T.R.P.left
            {
                description
                {
                    The first red-black tree node iterator.
                }
            }
            parameter System.Collections.operator.equal.T.R.P.C.R.System.Collections.RedBlackTreeNodeIterator.T.R.P.C.R.System.Collections.RedBlackTreeNodeIterator.T.R.P.right
            {
                description
                {
                    The second red-black tree node iterator.
                }
            }
            returns System.Collections.operator.equal.T.R.P.C.R.System.Collections.RedBlackTreeNodeIterator.T.R.P.C.R.System.Collections.RedBlackTreeNodeIterator.T.R.P.returnValue
            {
                description
                {
                    Returns true if both iterators point to same red-black tree node, or both are 
                    System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare.End.P.System.Collections.RedBlackTree.KeyType.ValueType.KeyOfValue.Compare iterators, false otherwise.
                }
            }
            owner System.Collections.RedBlackTreeNodeIterator.T.R.P;
            source <../src/rbtree.pdf>(11, 11);
        }
        function System.Collections.operator.equal.T.C.C.R.System.Collections.Set.T.C.C.R.System.Collections.Set.T.C.where.T.is.Regular.and.C.is.Relation.and.C.Domain.is.T
        {
            description
            {
                Compares two sets for equality and returns true if both contain the same number of pairwise equal elements, false otherwise.
            }
            example <examples/System.Collections.@operator.equal.Set.cm>;
            parameter System.Collections.operator.equal.T.C.C.R.System.Collections.Set.T.C.C.R.System.Collections.Set.T.C.where.T.is.Regular.and.C.is.Relation.and.C.Domain.is.T.left
            {
                description
                {
                    The first set.
                }
            }
            parameter System.Collections.operator.equal.T.C.C.R.System.Collections.Set.T.C.C.R.System.Collections.Set.T.C.where.T.is.Regular.and.C.is.Relation.and.C.Domain.is.T.right
            {
                description
                {
                    The second set.
                }
            }
            returns System.Collections.operator.equal.T.C.C.R.System.Collections.Set.T.C.C.R.System.Collections.Set.T.C.where.T.is.Regular.and.C.is.Relation.and.C.Domain.is.T.returnValue
            {
                description
                {
                    Returns true if both contain the same number of pairwise equal elements, false otherwise.
                }
            }
            owner System.Collections.Set.T.C;
            source <../src/set.pdf>(2, 2);
        }
    }
    namespace System.Concepts
    {
        description
        {
            Contains system library concepts.
        }
        diagram(concept, concepts1, "Basic Concepts");
        diagram(concept, concepts2, "Iterator Concepts");
        diagram(concept, concepts3, "Container Concepts");
        diagram(concept, concepts4, "Functional Concepts");
        diagram(concept, concepts5, "Algebraic Concepts");
        concept System.Concepts.AdditiveGroup.T
        {
            description
            {
                An additive group is an additive monoid that has an
                inverse of addition operation.
            }
            models
            {
                Integer and floating-point types with + and - are partial models
                of an additive group.
            }
        }
        concept System.Concepts.AdditiveMonoid.T
        {
            description
            {
                An additive semigroup that has an identitity element 0
                is called an additive monoid.
            }
            models
            {
                Integer and floating-point types with + are partial models
                of an additive monoid.
            }
        }
        concept System.Concepts.AdditiveSemigroup.T
        {
            description
            {
                A set with an associative and commutative addition operation +
                is called an additive semigroup.
            }
            models
            {
                Integer and floating-point types with + are partial models
                of an additive semigroup.
            }
        }
        concept System.Concepts.BackInsertionSequence.T
        {
            description
            {
                A container with an "\textbf{Add}" member function, 
                that adds elements to the end of the container is 
                called a back insertion sequence.
            }
            models
            {
                System.Collections.List.T and System.Collections.LinkedList.T are a back insertion sequences.
            }
        }
        concept System.Concepts.BidirectionalContainer.T
        {
            description
            {
                A container whose iterators are bidirectional iterators
                is a bidirectional container.
            }
            models
            {
                System.Collections.List.T, System.Collections.LinkedList.T, System.Collections.Set.T.C and System.Collections.Map.Key.Value.KeyCompare
                are bidirectional containers.
            }
        }
        concept System.Concepts.BidirectionalIterator.T
        {
            description
            {
                An iterator that can be incremented and decremented 
                is a bidirectional iterator.
            }
            models
            {
                System.Collections.LinkedListNodeIterator.T.R.P and System.Collections.RedBlackTreeNodeIterator.T.R.P are bidirectional iterators.
            }
        }
        concept System.Concepts.BinaryFunction.T
        {
            description
            {
                A function object that implements an "\textbf{operator()}" 
                member function that accepts two parameters is called 
                a binary function.
            }
            models
            {
                System.Plus.T, System.Minus.T, System.Multiplies.T,
                System.Divides.T and System.Remainder.T are 
                binary functions.
            }
        }
        concept System.Concepts.BinaryOperation.T
        {
            description
            {
                A binary function whose result type is same as its first argument type
                is called a binary operation.
            }
            models
            {
                System.Plus.T, System.Minus.T, System.Multiplies.T,
                System.Divides.T and System.Remainder.T are 
                binary operations.
            }
        }
        concept System.Concepts.BinaryPredicate.T
        {
            description
            {
                A binary function whose result type is "\textbf{bool}" is called a binary predicate.
            }
            models
            {
                System.EqualTo.T, System.EqualTo2.T.U, System.NotEqualTo.T, 
                System.NotEqualTo2.T.U, System.Less.T, System.Less2.T.U,
                System.Greater.T, System.Greater2.T.U, System.LessOrEqualTo.T,
                System.LessOrEqualTo2.T.U, System.GreaterOrEqualTo.T,
                System.GreaterOrEqualTo2.T.U are binary predicates. 
            }
        }
        concept System.Concepts.CommutativeSemiring.T
        {
            description
            {
                A semiring with commutative multiplication operation is called a commutative semiring.
            }
            models
            {
                Integer types with + and * are partial models of a commutative semiring.
            }
        }
        concept System.Concepts.Container.T
        {
            description
            {
                A class that contains other objects is called a container.
                A container must expose the type of its contained object as an associated type named ValueType,
                and provide iterator types for iterating through the container, for example.
            }
            models
            {
                System.Collections.List.T, 
                System.Collections.LinkedList.T, 
                System.Collections.Set.T.C, 
                System.Collections.Map.Key.Value.KeyCompare,
                System.Collections.HashSet.T.H.C, 
                System.Collections.HashMap.K.T.H.C and 
                System.Collections.ForwardList.T are containers.
            }
        }
        concept System.Concepts.CopyAssignable.T.U
        {
            description
            {
                Types T and U satisfy the System.Concepts.CopyAssignable.T.U concept if type T has an copy assignment operator taking a parameter of type U.
            }
            example <examples/System.Concepts.CopyAssignable.T.U.cm>;
        }
        concept System.Concepts.CopyAssignable.T
        {
            description
            {
                Copy assignable type can be target of an copy assignment operation.
            }
            example <examples/System.Concepts.CopyAssignable.T.cm>;
            models
            {
                All built-in types ("\textbf{int}", "\textbf{double}", "\textbf{bool}", "\textbf{char}", etc...) are copy assignable.
                All types in the System.Collections namespace (System.Collections.List.T, System.Collections.Set.T.C, etc...) are copy assignable.
                System.String, System.Exception, System.Pair.T.U and System.SharedPtr.T, for example, are also copy assignable,
                but System.UniquePtr.T is not copy assignable, because its copy assignment operator is suppressed.
            }
        }
        concept System.Concepts.CopyConstructible.T
        {
            description
            {
                A copy constructible type can be copied.
            }
            example <examples/System.Concepts.CopyConstructible.cm>;
            models
            {
                All built-in types ("\textbf{int}", "\textbf{double}", "\textbf{bool}", "\textbf{char}", etc...) are copy constructible.
                All types in the System.Collections namespace (System.Collections.List.T, System.Collections.Set.T.C, etc...) are copy constructible
                if their value type is copy constructible.
                System.String, System.Exception, System.Pair.T.U and System.SharedPtr.T, for example, are also copy constructible,
                but System.UniquePtr.T is not copy constructible, because its copy constructor is suppressed.
            }
        }
        concept System.Concepts.Copyable.T
        {
            description
            {
                A copy constructible and copy assignable type is copyable.
            }
        }
        concept System.Concepts.DefaultConstructible.T
        {
            description
            {
                A default constructible type has a constructor that takes no parameters.
            }
            remarks
            {
                The default constructor initializes a value of its type to the natural default value:
                that is 0 for a numeric type, "\textbf{false}" for a Boolean type, empty string for a string type, 
                empty container for a container type, etc...
            }
            example <examples/System.Concepts.DefaultConstructible.cm>;
            models
            {
                All built-in types ("\textbf{int}", "\textbf{double}", "\textbf{bool}", "\textbf{char}", etc...) are default constructible.
                All types in the System.Collections namespace (System.Collections.List.T, System.Collections.Set.T.C, etc...) are default constructible.
                System.String, System.Exception, System.Pair.T.U, System.UniquePtr.T and System.SharedPtr.T, for example, are also default constructible.
            }
        }
        concept System.Concepts.Destructible.T
        {
            description
            {
                A destructible type has a user defined or compiler generated destructor, or is trivially destructible.
            }
            example <examples/System.Concepts.Destructible.cm>;
            models
            {
                All types in Cmajor are destructible.
            }
        }
        concept System.Concepts.EqualityComparable.T.U
        {
            description
            {
                Types T and U satisfy the cross-type equality comparable concept,
                if T is equality comparable, U is equality comparable and 
                they have a common type that is equality comparable.
            }
        }
        concept System.Concepts.EqualityComparable.T
        {
            description
            {
                An equality comparable type can be compared for equality and inequality.
            }
        }
        concept System.Concepts.EuclideanSemiring.T
        {
            description
            {
                Euclidean semiring is a commutative semiring that has division and remainder operations.
            }
        }
        concept System.Concepts.ForwardContainer.T
        {
            description
            {
                A container whose iterators are forward iterators is a forward container.
            }
            models
            {
                System.Collections.ForwardList.T is a proper forward container.
                All containers in the System.Collections namespace are also forward containers.
            }
        }
        concept System.Concepts.ForwardIterator.T
        {
            description
            {
                A multipass iterator that can be incremented is a forward iterator.
            }
            models
            {
                System.Collections.ForwardListNodeIterator.T.R.P is a proper forward iterator.
                All Cmajor iterators are also forward iterators.
            }
        }
        concept System.Concepts.FrontInsertionSequence.T
        {
            description
            {
                A container with an "\textbf{InsertFront}" member function
                is called a front insertion sequence.
            }
            models
            {
                System.Collections.List.T, System.Collections.LinkedList.T and System.Collections.ForwardList.T are front insertion sequences.
            }
        }
        concept System.Concepts.HashFunction.T.Key
        {
            description
            {
                A unary function that computes a hash code from a key is a hash function.
            }
            models
            {
                System.Collections.Hasher.T is a hash function.
            }
        }
        concept System.Concepts.InputIterator.T
        {
            description
            {
                A one-pass iterator that can be incremented and compared for equality is an input iterator.
            }
        }
        concept System.Concepts.InsertionSequence.T
        {
            description
            {
                A container with an "\textbf{Insert}" member function
                is called an insertion sequence.
            }
            models
            {
                System.Collections.List.T and System.Collections.LinkedList.T are insertion sequences.
            }
        }
        concept System.Concepts.Integer.I
        {
            description
            {
                An integer type supports the usual integer operations.
            }
            models
            {
                All Cmajor integer types.
            }
        }
        concept System.Concepts.KeySelectionFunction.T.Key.Value
        {
            description
            {
                A unary function that extracts a key from a value type is called a key selection function.
            }
            models
            {
                System.SelectFirst.T.U is a key selection function.
            }
        }
        concept System.Concepts.LessThanComparable.T.U
        {
            description
            {
                Types T and U satisfy the cross-type less than comparable concept,
                if T is less than comparable, U is less than comparable and 
                they have a common type that is less than comparable.
            }
        }
        concept System.Concepts.LessThanComparable.T
        {
            description
            {
                An less than comparable type can be compared for less than, greater than, less than or
                equal to and greater than or equal to releations.
            }
        }
        concept System.Concepts.Movable.T
        {
            description
            {
                A move constructible and move assignable type is movable.
            }
        }
        concept System.Concepts.MoveAssignable.T
        {
            description
            {
                A type equipped with move assignment operator is called move assignable.
            }
        }
        concept System.Concepts.MoveConstructible.T
        {
            description
            {
                A type equipped with move constructor is called move constructible.
            }
        }
        concept System.Concepts.MultiplicativeGroup.T
        {
            description
            {
                A multiplicative monoid with a division operation is called a multiplicative group.
            }
        }
        concept System.Concepts.MultiplicativeMonoid.T
        {
            description
            {
                A multiplicative semigroup with an identity element is called a multiplicative monoid.
            }
        }
        concept System.Concepts.MultiplicativeSemigroup.T
        {
            description
            {
                A set with an associative multiplication operation is called a multiplicative semigroup.
            }
        }
        concept System.Concepts.OrderedAdditiveGroup.T
        {
            description
            {
                An ordered additive monoid that forms also an additive group is called an ordered additive group.
            }
        }
        concept System.Concepts.OrderedAdditiveMonoid.T
        {
            description
            {
                An ordered additive semigroup that forms also an additive monoid is called an ordered additive monoid.
            }
        }
        concept System.Concepts.OrderedAdditiveSemigroup.T
        {
            description
            {
                An additive semigroup with a total ordering relation on its elements is called an ordered additive semigroup.
            }
        }
        concept System.Concepts.OrderedMultiplicativeSemigroup.T
        {
            description
            {
                A multiplicative semigroup with a total ordering relation on its elements is called an ordered multiplicative semigroup.
            }
        }
        concept System.Concepts.OutputIterator.T
        {
            description
            {
                A writable iterator that is incrementable is an output iterator.
            }
        }
        concept System.Concepts.RandomAccessContainer.T
        {
            description
            {
                A container whose iterators are random access iterators is a random access container.
            }
            models
            {
                System.Collections.List.T is a random access container.
            }
        }
        concept System.Concepts.RandomAccessIterator.T
        {
            description
            {
                An iterator that supports incrementing, decrementing, subscripting, adding or subtracting an integer offset,
                and computing the difference of two iterators is a random access iterator.
            }
            models
            {
                System.RandomAccessIter.T.R.P is a random access iterator.
            }
        }
        concept System.Concepts.Regular.T
        {
            description
            {
                A regular type behaves like a built-in type:
                its objects can be default initialized, either copied, or moved (or both) and 
                compared for equality and inequality.
            }
            remarks
            {
                If a type implements the == operator, the compiler implements the != operator automatically.
            }
            example <examples/System.Concepts.Regular.cm>;
            models
            {
                All built-in types ("\textbf{int}", "\textbf{double}", "\textbf{bool}", "\textbf{char}", etc...) are regular.
                All types in the System.Collections namespace (System.Collections.List.T, System.Collections.Set.T.C, etc...) are regular,
                if their value type is regular.
            }
        }
        concept System.Concepts.Relation.T.U.V
        {
            description
            {
                A binary predicate with two not necessarily same argument types satisfy a multiparameter relation concept.
            }
        }
        concept System.Concepts.Relation.T
        {
            description
            {
                A binary predicate whose argument types are same is called a relation.
            }
        }
        concept System.Concepts.Semiregular.T
        {
            description
            {
                A semiregular type behaves in many ways like a built-in type:
                its objects can be default initialized, either copied or moved (or both),
                but not necessarily compared for equality and inequality.
            }
            remarks
            {
                Many containers require that the type of the contained object is semiregular.
            }
            example <examples/System.Concepts.Semiregular.cm>;
            models
            {
                All built-in types ("\textbf{int}", "\textbf{double}", "\textbf{bool}", "\textbf{char}", etc...) are semiregular.
                All types in the System.Collections namespace (System.Collections.List.T, System.Collections.Set.T.C, etc...) are semiregular.
                System.String, System.Exception, System.Pair.T.U and System.SharedPtr.T, for example, are also semiregular.
                Although System.UniquePtr.T is not copyable because its copy constructor and assignment operator are suppressed,
                it is movable because it implements move constructor and move assignment operator, so it is semiregular.
            }
        }
        concept System.Concepts.Semiring.T
        {
            description
            {
                A set with addition and multiplication operations that are connected with given axioms is called a semiring.
            }
        }
        concept System.Concepts.SignedInteger.I
        {
            description
            {
                An integer type with a conversion from "\textbf{sbyte}" is called a signed integer.
            }
            models
            {
                "\textbf{sbyte}", "\textbf{short}", "\textbf{int}" and "\textbf{long}" are signed integer types.
            }
        }
        concept System.Concepts.TotallyOrdered.T.U
        {
            description
            {
                Types T and U satisfy the cross-type totally ordered concept if T is totally ordered, U is totally ordered and
                they have a common type that is totally ordered.
            }
        }
        concept System.Concepts.TotallyOrdered.T
        {
            description
            {
                A totally ordered type is a regular type that can be also compared for 
                less than, greater than, less than or equal to, and greater than or equal to
                relationships.
            }
            remarks
            {
                If a type implements the < operator, the compiler implements the >, <= and >= operators automatically.
            }
            example <examples/System.Concepts.TotallyOrdered.cm>;
            models
            {
                Arithmetic and character types ("\textbf{int}", "\textbf{double}", "\textbf{char}", etc...) are totally ordered.
                System.Collections.List.T, System.Collections.LinkedList.T, System.Collections.Set.T.C and System.Collections.Map.Key.Value.KeyCompare are
                totally ordered if their value type is totally ordered.
            }
        }
        concept System.Concepts.TrivialIterator.T
        {
            description
            {
                A trivial iterator concept collects together requirements common to all iterator types.
            }
        }
        concept System.Concepts.UnaryFunction.T
        {
            description
            {
                A function object that implements an "\textbf{operator()}" that accepts one parameter is called a unary function. 
            }
            models
            {
                System.Negate.T and System.Identity.T are unary functions.
            }
        }
        concept System.Concepts.UnaryOperation.T
        {
            description
            {
                A unary function whose result type and argument type are same is called a unary operation.
            }
            models
            {
                System.Negate.T and System.Identity.T are unary operations.
            }
        }
        concept System.Concepts.UnaryPredicate.T
        {
            description
            {
                A unary function whose result type is "\textbf{bool}" is called a unary predicate.
            }
        }
        concept System.Concepts.UnsignedInteger.U
        {
            description
            {
                An integer type with a conversion from "\textbf{byte}" is called an unsigned integer.
            }
            models
            {
                "\textbf{byte}", "\textbf{ushort}", "\textbf{uint}" and "\textbf{ulong}" are unsigned integer types.
            }
        }
    }
    namespace System.IO
    {
        description
        {
            Contains classes and functions for doing input and output.
        }
        diagram(class, ioclasses, "I/O Classes");
        class System.IO.BinaryFileStream
        {
            description
            {
                A stream of bytes connected to a file.
            }
            function System.IO.BinaryFileStream.constructor.P.System.IO.BinaryFileStream.RR.System.IO.BinaryFileStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.BinaryFileStream.constructor.P.System.IO.BinaryFileStream.RR.System.IO.BinaryFileStream.that
                {
                    description
                    {
                        A binary file stream to move from.
                    }
                }
            }
            function System.IO.BinaryFileStream.operator.assign.P.System.IO.BinaryFileStream.RR.System.IO.BinaryFileStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.BinaryFileStream.operator.assign.P.System.IO.BinaryFileStream.RR.System.IO.BinaryFileStream.__parameter0
                {
                    description
                    {
                        A binary file stream to move from.
                    }
                }
            }
            function System.IO.BinaryFileStream.constructor.P.System.IO.BinaryFileStream.C.R.System.String.System.IO.OpenMode
            {
                description
                {
                    Opens a binary file stream with the specified open mode and file name.
                }
                parameter System.IO.BinaryFileStream.constructor.P.System.IO.BinaryFileStream.C.R.System.String.System.IO.OpenMode.fileName_
                {
                    description
                    {
                        The name of file to open.
                    }
                }
                parameter System.IO.BinaryFileStream.constructor.P.System.IO.BinaryFileStream.C.R.System.String.System.IO.OpenMode.mode_
                {
                    description
                    {
                        An open mode.
                    }
                }
            }
            function System.IO.BinaryFileStream.constructor.P.System.IO.BinaryFileStream.C.R.System.String.System.IO.OpenMode.int
            {
                description
                {
                    Opens a binary file stream with the specified open mode, file name and permission mode.
                }
                parameter System.IO.BinaryFileStream.constructor.P.System.IO.BinaryFileStream.C.R.System.String.System.IO.OpenMode.int.fileName_
                {
                    description
                    {
                        The name of file to open.
                    }
                }
                parameter System.IO.BinaryFileStream.constructor.P.System.IO.BinaryFileStream.C.R.System.String.System.IO.OpenMode.int.mode_
                {
                    description
                    {
                        An open mode.
                    }
                }
                parameter System.IO.BinaryFileStream.constructor.P.System.IO.BinaryFileStream.C.R.System.String.System.IO.OpenMode.int.pmode
                {
                    description
                    {
                        A permission mode that is formed by ORing together following constants:
                        S_IREAD, S_IWRITE (Windows);
                        S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH (Unix).
                    }
                }
            }
            function System.IO.BinaryFileStream.Close.P.System.IO.BinaryFileStream
            {
                description
                {
                    If the binary file stream is connected to an open file, closes the file,
                    otherwise throws System.IO.CloseFileException.
                }
            }
            function System.IO.BinaryFileStream.GetFileSize.P.System.IO.BinaryFileStream
            {
                description
                {
                    Returns the size of the file binary file stream is connected to.
                }
                returns System.IO.BinaryFileStream.GetFileSize.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the size of the file binary file stream is connected to.
                    }
                }
            }
            function System.IO.BinaryFileStream.Open.P.System.IO.BinaryFileStream.C.R.System.String.System.IO.OpenMode.int
            {
                description
                {
                    Opens a file with the specified open mode, file name and permission mode and connects it with the binary file stream.
                }
                remarks
                {
                    If the binary file stream was connected to a file before the call,
                    that file is closed first.
                }
                parameter System.IO.BinaryFileStream.Open.P.System.IO.BinaryFileStream.C.R.System.String.System.IO.OpenMode.int.fileName_
                {
                    description
                    {
                        The name of the file to open.
                    }
                }
                parameter System.IO.BinaryFileStream.Open.P.System.IO.BinaryFileStream.C.R.System.String.System.IO.OpenMode.int.mode_
                {
                    description
                    {
                        An open mode.
                    }
                }
                parameter System.IO.BinaryFileStream.Open.P.System.IO.BinaryFileStream.C.R.System.String.System.IO.OpenMode.int.pmode
                {
                    description
                    {
                        A permission mode that is formed by ORing together following constants:
                        S_IREAD, S_IWRITE (Windows);
                        S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH (Unix).
                    }
                }
            }
            function System.IO.BinaryFileStream.Read.P.System.IO.BinaryFileStream.P.void.ulong
            {
                description
                {
                    Reads System.IO.BinaryFileStream.Read.P.System.IO.BinaryFileStream.P.void.ulong.size bytes
                    from binary file stream into 
                    System.IO.BinaryFileStream.Read.P.System.IO.BinaryFileStream.P.void.ulong.buffer and
                    returns the number of bytes read.
                }
                parameter System.IO.BinaryFileStream.Read.P.System.IO.BinaryFileStream.P.void.ulong.buffer
                {
                    description
                    {
                        A buffer to read to.
                    }
                }
                parameter System.IO.BinaryFileStream.Read.P.System.IO.BinaryFileStream.P.void.ulong.size
                {
                    description
                    {
                        Number of bytes to read.
                    }
                }
                returns System.IO.BinaryFileStream.Read.P.System.IO.BinaryFileStream.P.void.ulong.returnValue
                {
                    description
                    {
                        Returns the number of bytes read.
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadBool.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads a Boolean value from the binary file stream and returns it.
                }
                returns System.IO.BinaryFileStream.ReadBool.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read Boolean value.
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadByte.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads a "\textbf{byte}" from the binary file stream and returns it.
                }
                returns System.IO.BinaryFileStream.ReadByte.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read "\textbf{byte}".
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadChar.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads a character from the binary file stream and returns it.
                }
                returns System.IO.BinaryFileStream.ReadChar.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read character.
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadDouble.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads a "\textbf{double}" from the binary file stream and returns it.
                }
                returns System.IO.BinaryFileStream.ReadDouble.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read "\textbf{double}".
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadFloat.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads a "\textbf{float}" from the binary file stream and returns it.
                }
                returns System.IO.BinaryFileStream.ReadFloat.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read "\textbf{float}".
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadInt.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads an "\textbf{int}" from the binary file stream and returns it.
                }
                returns System.IO.BinaryFileStream.ReadInt.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read "\textbf{int}".
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadLong.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads an "\textbf{long}" from the binary file stream and returns it.
                }
                returns System.IO.BinaryFileStream.ReadLong.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read "\textbf{long}".
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadSByte.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads an "\textbf{sbyte}" from the binary file stream and returns it.
                }
                returns System.IO.BinaryFileStream.ReadSByte.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read "\textbf{sbyte}".
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadShort.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads a "\textbf{short}" from the binary file stream and returns it.
                }
                returns System.IO.BinaryFileStream.ReadShort.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read "\textbf{short}".
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadSize.P.System.IO.BinaryFileStream.P.void.ulong
            {
                description
                {
                    Reads exactly System.IO.BinaryFileStream.ReadSize.P.System.IO.BinaryFileStream.P.void.ulong.size bytes from 
                    the binary file stream into 
                    System.IO.BinaryFileStream.ReadSize.P.System.IO.BinaryFileStream.P.void.ulong.buffer.
                    If the number of bytes read is not equal to 
                    System.IO.BinaryFileStream.ReadSize.P.System.IO.BinaryFileStream.P.void.ulong.size throws
                    an System.IO.IOException.
                }
                parameter System.IO.BinaryFileStream.ReadSize.P.System.IO.BinaryFileStream.P.void.ulong.buffer
                {
                    description
                    {
                        A buffer to read to.
                    }
                }
                parameter System.IO.BinaryFileStream.ReadSize.P.System.IO.BinaryFileStream.P.void.ulong.size
                {
                    description
                    {
                        Number of bytes to read.
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadString.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads the length of a string (an "\textbf{int}") followed by the 
                    contents of the string from the binary file stream and returns the string.
                }
                returns System.IO.BinaryFileStream.ReadString.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read string.
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadUInt.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads a "\textbf{uint}" from the binary file stream and returns it.
                }
                returns System.IO.BinaryFileStream.ReadUInt.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read "\textbf{uint}".
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadULong.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads a "\textbf{ulong}" from the binary file stream and returns it.
                }
                returns System.IO.BinaryFileStream.ReadULong.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read "\textbf{ulong}".
                    }
                }
            }
            function System.IO.BinaryFileStream.ReadUShort.P.System.IO.BinaryFileStream
            {
                description
                {
                    Reads a "\textbf{ushort}" from the binary file stream and returns it.
                }
                returns System.IO.BinaryFileStream.ReadUShort.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the read "\textbf{ushort}".
                    }
                }
            }
            function System.IO.BinaryFileStream.Seek.P.System.IO.BinaryFileStream.long.int
            {
                description
                {
                    Sets the current file position.
                }
                parameter System.IO.BinaryFileStream.Seek.P.System.IO.BinaryFileStream.long.int.offset
                {
                    description
                    {
                        An offset.
                    }
                }
                parameter System.IO.BinaryFileStream.Seek.P.System.IO.BinaryFileStream.long.int.origin
                {
                    description
                    {
                        One of the constants SEEK_SET, SEEK_CUR, and SEEK_END.
                    }
                }
                returns System.IO.BinaryFileStream.Seek.P.System.IO.BinaryFileStream.long.int.returnValue
                {
                    description
                    {
                        Returns the current file position.
                    }
                }
            }
            function System.IO.BinaryFileStream.Tell.P.System.IO.BinaryFileStream
            {
                description
                {
                    Returns the current file position.
                }
                returns System.IO.BinaryFileStream.Tell.P.System.IO.BinaryFileStream.returnValue
                {
                    description
                    {
                        Returns the current file position.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.bool
            {
                description
                {
                    Writes a Boolean value to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.bool.b
                {
                    description
                    {
                        A Boolean value to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.byte
            {
                description
                {
                    Writes a "\textbf{byte}" to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.byte.b
                {
                    description
                    {
                        A "\textbf{byte}" to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.char
            {
                description
                {
                    Writes a character to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.char.c
                {
                    description
                    {
                        A character to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.C.R.System.String
            {
                description
                {
                    Writes a length (an "\textbf{int}") of the given string followed
                    by the contents of the string to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.C.R.System.String.s
                {
                    description
                    {
                        A string to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.C.P.char
            {
                description
                {
                    Writes a length (an "\textbf{int}") of the given C-style string followed
                    by the contents of the C-style string to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.C.P.char.s
                {
                    description
                    {
                        A C-style string to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.double
            {
                description
                {
                    Writes a "\textbf{double}" to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.double.d
                {
                    description
                    {
                        A "\textbf{double}" to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.float
            {
                description
                {
                    Writes a "\textbf{float}" to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.float.f
                {
                    description
                    {
                        A "\textbf{float}" to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.int
            {
                description
                {
                    Writes an "\textbf{int}" to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.int.i
                {
                    description
                    {
                        An "\textbf{int}" to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.long
            {
                description
                {
                    Writes a "\textbf{long}" to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.long.l
                {
                    description
                    {
                        A "\textbf{long}" to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.sbyte
            {
                description
                {
                    Writes an "\textbf{sbyte}" to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.sbyte.s
                {
                    description
                    {
                        An "\textbf{sbyte}" to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.short
            {
                description
                {
                    Writes a "\textbf{short}" to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.short.s
                {
                    description
                    {
                        A "\textbf{short}" to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.uint
            {
                description
                {
                    Writes a "\textbf{uint}" to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.uint.u
                {
                    description
                    {
                        A "\textbf{uint}" to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.ulong
            {
                description
                {
                    Writes a "\textbf{ulong}" to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.ulong.u
                {
                    description
                    {
                        A "\textbf{ulong}" to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.ushort
            {
                description
                {
                    Writes a "\textbf{ushort}" to the binary file stream.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.ushort.u
                {
                    description
                    {
                        A "\textbf{ushort}" to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.P.void.ulong
            {
                description
                {
                    Writes System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.P.void.ulong.size
                    bytes from System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.P.void.ulong.buffer
                    to the binary file stream.
                    If the number of bytes written is not equal to 
                    System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.P.void.ulong.size 
                    throws an System.IO.IOException.
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.P.void.ulong.buffer
                {
                    description
                    {
                        A buffer to write from.
                    }
                }
                parameter System.IO.BinaryFileStream.Write.P.System.IO.BinaryFileStream.P.void.ulong.size
                {
                    description
                    {
                        Number of bytes to write.
                    }
                }
            }
            function System.IO.BinaryFileStream.destructor.P.System.IO.BinaryFileStream
            {
                description
                {
                    If the binary file stream is connected to an open file, closes the file.
                }
            }
        }
        class System.IO.CloseFileException
        {
            description
            {
                An exception thrown when closing a file fails.
            }
            function System.IO.CloseFileException.constructor.P.System.IO.CloseFileException
            {
                description
                {
                    Default constructor.
                }
            }
            function System.IO.CloseFileException.constructor.P.System.IO.CloseFileException.C.R.System.IO.CloseFileException
            {
                description
                {
                    Copy constructor.
                }
                parameter System.IO.CloseFileException.constructor.P.System.IO.CloseFileException.C.R.System.IO.CloseFileException.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.IO.CloseFileException.operator.assign.P.System.IO.CloseFileException.C.R.System.IO.CloseFileException
            {
                description
                {
                    Copy assignment.
                }
                parameter System.IO.CloseFileException.operator.assign.P.System.IO.CloseFileException.C.R.System.IO.CloseFileException.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.IO.CloseFileException.constructor.P.System.IO.CloseFileException.RR.System.IO.CloseFileException
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.CloseFileException.constructor.P.System.IO.CloseFileException.RR.System.IO.CloseFileException.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.IO.CloseFileException.operator.assign.P.System.IO.CloseFileException.RR.System.IO.CloseFileException
            {
                description
                {
                    Move assignment.
                }
                parameter System.IO.CloseFileException.operator.assign.P.System.IO.CloseFileException.RR.System.IO.CloseFileException.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.IO.CloseFileException.constructor.P.System.IO.CloseFileException.C.R.System.String
            {
                description
                {
                    Constructor. Initializes the close file exception with the given error message.
                }
                parameter System.IO.CloseFileException.constructor.P.System.IO.CloseFileException.C.R.System.String.message_
                {
                    description
                    {
                        An error message.
                    }
                }
            }
            function System.IO.CloseFileException.destructor.P.System.IO.CloseFileException
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.IO.IOBuffer
        {
            description
            {
                A handle to dynamically allocated memory.
            }
            function System.IO.IOBuffer.constructor.P.System.IO.IOBuffer.RR.System.IO.IOBuffer
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.IOBuffer.constructor.P.System.IO.IOBuffer.RR.System.IO.IOBuffer.that
                {
                    description
                    {
                        An I/O buffer to move from.
                    }
                }
            }
            function System.IO.IOBuffer.operator.assign.P.System.IO.IOBuffer.RR.System.IO.IOBuffer
            {
                description
                {
                    Move assignment.
                }
                parameter System.IO.IOBuffer.operator.assign.P.System.IO.IOBuffer.RR.System.IO.IOBuffer.that
                {
                    description
                    {
                        An I/O buffer to assign from.
                    }
                }
            }
            function System.IO.IOBuffer.constructor.P.System.IO.IOBuffer.ulong
            {
                description
                {
                    Constructor. 
                    Creates an I/O buffer of 
                    System.IO.IOBuffer.constructor.P.System.IO.IOBuffer.ulong.size_ bytes.
                    
                }
                parameter System.IO.IOBuffer.constructor.P.System.IO.IOBuffer.ulong.size_
                {
                    description
                    {
                        Number of bytes to allocate.
                    }
                }
            }
            function System.IO.IOBuffer.Mem.C.P.System.IO.IOBuffer
            {
                description
                {
                    Returns a generic pointer to the allocated memory.
                }
                returns System.IO.IOBuffer.Mem.C.P.System.IO.IOBuffer.returnValue
                {
                    description
                    {
                        Returns a generic pointer to the allocated memory.
                    }
                }
            }
            function System.IO.IOBuffer.Size.C.P.System.IO.IOBuffer
            {
                description
                {
                    Returns the size of the I/O buffer.
                }
                returns System.IO.IOBuffer.Size.C.P.System.IO.IOBuffer.returnValue
                {
                    description
                    {
                        Returns the size of the I/O buffer.
                    }
                }
            }
            function System.IO.IOBuffer.destructor.P.System.IO.IOBuffer
            {
                description
                {
                    Destructor. Releases the allocated memory back to system.
                }
            }
        }
        class System.IO.IOException
        {
            description
            {
                An exception thrown when an I/O operation fails.
            }
            function System.IO.IOException.constructor.P.System.IO.IOException
            {
                description
                {
                    Default constructor.
                }
            }
            function System.IO.IOException.constructor.P.System.IO.IOException.C.R.System.IO.IOException
            {
                description
                {
                    Copy constructor.
                }
                parameter System.IO.IOException.constructor.P.System.IO.IOException.C.R.System.IO.IOException.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.IO.IOException.operator.assign.P.System.IO.IOException.C.R.System.IO.IOException
            {
                description
                {
                    Copy assignment.
                }
                parameter System.IO.IOException.operator.assign.P.System.IO.IOException.C.R.System.IO.IOException.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.IO.IOException.constructor.P.System.IO.IOException.RR.System.IO.IOException
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.IOException.constructor.P.System.IO.IOException.RR.System.IO.IOException.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.IO.IOException.operator.assign.P.System.IO.IOException.RR.System.IO.IOException
            {
                description
                {
                    Move assignment.
                }
                parameter System.IO.IOException.operator.assign.P.System.IO.IOException.RR.System.IO.IOException.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.IO.IOException.constructor.P.System.IO.IOException.C.R.System.String
            {
                description
                {
                    Constructor. Initializes the exception with the given error message.
                }
                parameter System.IO.IOException.constructor.P.System.IO.IOException.C.R.System.String.message_
                {
                    description
                    {
                        An error message.
                    }
                }
            }
            function System.IO.IOException.destructor.P.System.IO.IOException
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.IO.InputFileStream
        {
            description
            {
                A stream of characters connected to an input file.
            }
            function System.IO.InputFileStream.constructor.P.System.IO.InputFileStream
            {
                description
                {
                    Default constructor. Initializes the input file stream and connects it to standard input stream.
                }
            }
            function System.IO.InputFileStream.constructor.P.System.IO.InputFileStream.RR.System.IO.InputFileStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.InputFileStream.constructor.P.System.IO.InputFileStream.RR.System.IO.InputFileStream.that
                {
                    description
                    {
                        An input file stream to move from.
                    }
                }
            }
            function System.IO.InputFileStream.operator.assign.P.System.IO.InputFileStream.RR.System.IO.InputFileStream
            {
                description
                {
                    Move assignment.
                }
                parameter System.IO.InputFileStream.operator.assign.P.System.IO.InputFileStream.RR.System.IO.InputFileStream.__parameter0
                {
                    description
                    {
                        An input file steram to assign from.
                    }
                }
            }
            function System.IO.InputFileStream.Close.P.System.IO.InputFileStream
            {
                description
                {
                    If the input file stream is connected to an open file, closes the file,
                    otherwise throws System.IO.CloseFileException;
                }
            }
            function System.IO.InputFileStream.EndOfStream.C.P.System.IO.InputFileStream
            {
                description
                {
                    Returns true if the end of the stream is encountered, false otherwise.
                }
                returns System.IO.InputFileStream.EndOfStream.C.P.System.IO.InputFileStream.returnValue
                {
                    description
                    {
                        Returns true if the end of the stream is encountered, false otherwise.
                    }
                }
            }
            function System.IO.InputFileStream.FileName.C.P.System.IO.InputFileStream
            {
                description
                {
                    Returns the name of the file input file stream is connected to.
                }
                returns System.IO.InputFileStream.FileName.C.P.System.IO.InputFileStream.returnValue
                {
                    description
                    {
                        Returns the name of the file input file stream is connected to.
                    }
                }
            }
            function System.IO.InputFileStream.Handle.C.P.System.IO.InputFileStream
            {
                description
                {
                    Returns the file handler the input file stream is connected to.
                }
                returns System.IO.InputFileStream.Handle.C.P.System.IO.InputFileStream.returnValue
                {
                    description
                    {
                        Returns the file handler the input file stream is connected to.
                    }
                }
            }
            function System.IO.InputFileStream.constructor.P.System.IO.InputFileStream.C.R.System.String
            {
                description
                {
                    Constructor. Initializes the input file stream and connects it to a file with the given name.
                }
                parameter System.IO.InputFileStream.constructor.P.System.IO.InputFileStream.C.R.System.String.fileName_
                {
                    description
                    {
                        The name of the file to open.
                    }
                }
            }
            function System.IO.InputFileStream.constructor.P.System.IO.InputFileStream.C.R.System.String.uint
            {
                description
                {
                    Constructor. Initializes the input file stream with the given buffer size and connects it to a file with the given name.
                }
                parameter System.IO.InputFileStream.constructor.P.System.IO.InputFileStream.C.R.System.String.uint.bufferSize_
                {
                    description
                    {
                        The size of the input buffer.
                    }
                }
                parameter System.IO.InputFileStream.constructor.P.System.IO.InputFileStream.C.R.System.String.uint.fileName_
                {
                    description
                    {
                        The name of the file to open.
                    }
                }
            }
            function System.IO.InputFileStream.constructor.P.System.IO.InputFileStream.int.uint
            {
                description
                {
                    Constructor. Initializes the input file stream with the given buffer size and connects it to the file with the given file handle.
                }
                parameter System.IO.InputFileStream.constructor.P.System.IO.InputFileStream.int.uint.bufferSize_
                {
                    description
                    {
                        The size of the input buffer.
                    }
                }
                parameter System.IO.InputFileStream.constructor.P.System.IO.InputFileStream.int.uint.handle_
                {
                    description
                    {
                        A file handle.
                    }
                }
            }
            function System.IO.InputFileStream.Open.P.System.IO.InputFileStream.C.R.System.String
            {
                description
                {
                    Opens an input file and connects it to the input file stream.
                }
                remarks
                {
                    If the input file stream was connected to a file before the call,
                    that file is closed first.
                }
                parameter System.IO.InputFileStream.Open.P.System.IO.InputFileStream.C.R.System.String.fileName_
                {
                    description
                    {
                        The name of the file to open.
                    }
                }
            }
            function System.IO.InputFileStream.ReadLine.P.System.IO.InputFileStream
            {
                description
                {
                    Reads a line of text from the input file stream and returns it.
                }
                returns System.IO.InputFileStream.ReadLine.P.System.IO.InputFileStream.returnValue
                {
                    description
                    {
                        Returns the line of text read.
                    }
                }
            }
            function System.IO.InputFileStream.ReadToEnd.P.System.IO.InputFileStream
            {
                description
                {
                    Reads the content of the input file into a string and returns it.
                }
                returns System.IO.InputFileStream.ReadToEnd.P.System.IO.InputFileStream.returnValue
                {
                    description
                    {
                        Returns the contents of the file read.
                    }
                }
            }
            function System.IO.InputFileStream.destructor.P.System.IO.InputFileStream
            {
                description
                {
                    Destructor. If the input file stream is connected to an open file, closes the file.
                }
            }
        }
        class System.IO.InputStream
        {
            description
            {
                An abstract base class for input stream classes.
            }
            function System.IO.InputStream.constructor.P.System.IO.InputStream
            {
                description
                {
                    Default constructor.
                }
            }
            function System.IO.InputStream.constructor.P.System.IO.InputStream.RR.System.IO.InputStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.InputStream.constructor.P.System.IO.InputStream.RR.System.IO.InputStream.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.IO.InputStream.operator.assign.P.System.IO.InputStream.RR.System.IO.InputStream
            {
                description
                {
                    Move assignment.
                }
                parameter System.IO.InputStream.operator.assign.P.System.IO.InputStream.RR.System.IO.InputStream.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.IO.InputStream.EndOfStream.C.P.System.IO.InputStream
            {
                description
                {
                    Abstract member function for returning the end-of-file status.
                }
                returns System.IO.InputStream.EndOfStream.C.P.System.IO.InputStream.returnValue
                {
                    description
                    {
                        Returns true if the end of the stream is encountered, false otherwise.
                    }
                }
            }
            function System.IO.InputStream.ReadLine.P.System.IO.InputStream
            {
                description
                {
                    Abstract member function for reading a line of text from the input stream.
                }
                returns System.IO.InputStream.ReadLine.P.System.IO.InputStream.returnValue
                {
                    description
                    {
                        Returns the line read.
                    }
                }
            }
            function System.IO.InputStream.ReadToEnd.P.System.IO.InputStream
            {
                description
                {
                    Abstract member function for reading the contents of the stream into a string.
                }
                returns System.IO.InputStream.ReadToEnd.P.System.IO.InputStream.returnValue
                {
                    description
                    {
                        Returns the contents of the stream.
                    }
                }
            }
            function System.IO.InputStream.destructor.P.System.IO.InputStream
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.IO.InputStringStream
        {
            description
            {
                A class for reading from a string.
            }
            function System.IO.InputStringStream.constructor.P.System.IO.InputStringStream
            {
                description
                {
                    Default constructor.
                }
            }
            function System.IO.InputStringStream.constructor.P.System.IO.InputStringStream.RR.System.IO.InputStringStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.InputStringStream.constructor.P.System.IO.InputStringStream.RR.System.IO.InputStringStream.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.IO.InputStringStream.operator.assign.P.System.IO.InputStringStream.RR.System.IO.InputStringStream
            {
                description
                {
                    Move assignment.
                }
                parameter System.IO.InputStringStream.operator.assign.P.System.IO.InputStringStream.RR.System.IO.InputStringStream.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.IO.InputStringStream.EndOfStream.C.P.System.IO.InputStringStream
            {
                description
                {
                    Returns true if the end of the string has been encountered, false otherwise.
                }
                returns System.IO.InputStringStream.EndOfStream.C.P.System.IO.InputStringStream.returnValue
                {
                    description
                    {
                        Returns true if the end of the string has been encountered, false otherwise.
                    }
                }
            }
            function System.IO.InputStringStream.GetStr.C.P.System.IO.InputStringStream
            {
                description
                {
                    Returns the contained string.
                }
                returns System.IO.InputStringStream.GetStr.C.P.System.IO.InputStringStream.returnValue
                {
                    description
                    {
                        Returns the contained string.
                    }
                }
            }
            function System.IO.InputStringStream.constructor.P.System.IO.InputStringStream.C.R.System.String
            {
                description
                {
                    Constructor. Initializes the input string stream with the given string.
                }
                parameter System.IO.InputStringStream.constructor.P.System.IO.InputStringStream.C.R.System.String.str_
                {
                    description
                    {
                        A string to read from.
                    }
                }
            }
            function System.IO.InputStringStream.ReadLine.P.System.IO.InputStringStream
            {
                description
                {
                    Reads a line of text from the string and returns it.
                }
                returns System.IO.InputStringStream.ReadLine.P.System.IO.InputStringStream.returnValue
                {
                    description
                    {
                        Returns the line read.
                    }
                }
            }
            function System.IO.InputStringStream.ReadToEnd.P.System.IO.InputStringStream
            {
                description
                {
                    Returns the contents of the rest of the string.
                }
                returns System.IO.InputStringStream.ReadToEnd.P.System.IO.InputStringStream.returnValue
                {
                    description
                    {
                        Returns the contents of the rest of the string.
                    }
                }
            }
            function System.IO.InputStringStream.SetStr.P.System.IO.InputStringStream.C.R.System.String
            {
                description
                {
                    Sets the contained string.
                }
                parameter System.IO.InputStringStream.SetStr.P.System.IO.InputStringStream.C.R.System.String.str_
                {
                    description
                    {
                        A string.
                    }
                }
            }
            function System.IO.InputStringStream.destructor.P.System.IO.InputStringStream
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.IO.InvalidPathException
        {
            description
            {
                An exception class that is thrown if a path contains too many ".." components.
            }
            function System.IO.InvalidPathException.constructor.P.System.IO.InvalidPathException
            {
                description
                {
                    Default constructor.
                }
            }
            function System.IO.InvalidPathException.constructor.P.System.IO.InvalidPathException.C.R.System.IO.InvalidPathException
            {
                description
                {
                    Copy constructor.
                }
                parameter System.IO.InvalidPathException.constructor.P.System.IO.InvalidPathException.C.R.System.IO.InvalidPathException.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.IO.InvalidPathException.operator.assign.P.System.IO.InvalidPathException.C.R.System.IO.InvalidPathException
            {
                description
                {
                    Copy assignment.
                }
                parameter System.IO.InvalidPathException.operator.assign.P.System.IO.InvalidPathException.C.R.System.IO.InvalidPathException.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.IO.InvalidPathException.constructor.P.System.IO.InvalidPathException.RR.System.IO.InvalidPathException
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.InvalidPathException.constructor.P.System.IO.InvalidPathException.RR.System.IO.InvalidPathException.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.IO.InvalidPathException.operator.assign.P.System.IO.InvalidPathException.RR.System.IO.InvalidPathException
            {
                description
                {
                    Move assignment.
                }
                parameter System.IO.InvalidPathException.operator.assign.P.System.IO.InvalidPathException.RR.System.IO.InvalidPathException.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.IO.InvalidPathException.constructor.P.System.IO.InvalidPathException.C.R.System.String
            {
                description
                {
                    Constructor. Initializes the exception with the given error message.
                }
                parameter System.IO.InvalidPathException.constructor.P.System.IO.InvalidPathException.C.R.System.String.message_
                {
                    description
                    {
                        An error message.
                    }
                }
            }
            function System.IO.InvalidPathException.destructor.P.System.IO.InvalidPathException
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.IO.OpenFileException
        {
            description
            {
                An exception class thrown if opening a file fails.
            }
            function System.IO.OpenFileException.constructor.P.System.IO.OpenFileException
            {
                description
                {
                    Default constructor.
                }
            }
            function System.IO.OpenFileException.constructor.P.System.IO.OpenFileException.C.R.System.IO.OpenFileException
            {
                description
                {
                    Copy constructor.
                }
                parameter System.IO.OpenFileException.constructor.P.System.IO.OpenFileException.C.R.System.IO.OpenFileException.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.IO.OpenFileException.operator.assign.P.System.IO.OpenFileException.C.R.System.IO.OpenFileException
            {
                description
                {
                    Copy assignment.
                }
                parameter System.IO.OpenFileException.operator.assign.P.System.IO.OpenFileException.C.R.System.IO.OpenFileException.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.IO.OpenFileException.constructor.P.System.IO.OpenFileException.RR.System.IO.OpenFileException
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.OpenFileException.constructor.P.System.IO.OpenFileException.RR.System.IO.OpenFileException.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.IO.OpenFileException.operator.assign.P.System.IO.OpenFileException.RR.System.IO.OpenFileException
            {
                description
                {
                    Move assignment.
                }
                parameter System.IO.OpenFileException.operator.assign.P.System.IO.OpenFileException.RR.System.IO.OpenFileException.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.IO.OpenFileException.constructor.P.System.IO.OpenFileException.C.R.System.String
            {
                description
                {
                    Constructor. Initializes the exception with the given error message.
                }
                parameter System.IO.OpenFileException.constructor.P.System.IO.OpenFileException.C.R.System.String.message_
                {
                    description
                    {
                        An error message.
                    }
                }
            }
            function System.IO.OpenFileException.destructor.P.System.IO.OpenFileException
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.IO.OutputFileStream
        {
            description
            {
                A stream of characters connected to an output file.
            }
            function System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream
            {
                description
                {
                    Default constructor. Connects the output file stream with standard output stream.
                }
            }
            function System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.RR.System.IO.OutputFileStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.RR.System.IO.OutputFileStream.that
                {
                    description
                    {
                        An output file stream to move from.
                    }
                }
            }
            function System.IO.OutputFileStream.operator.assign.P.System.IO.OutputFileStream.RR.System.IO.OutputFileStream
            {
                description
                {
                    Move assignment.
                }
                parameter System.IO.OutputFileStream.operator.assign.P.System.IO.OutputFileStream.RR.System.IO.OutputFileStream.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.IO.OutputFileStream.Close.P.System.IO.OutputFileStream
            {
                description
                {
                    If the output file stream is connected to an open file, the file is closed,
                    otherwise throws System.IO.CloseFileException.
                }
            }
            function System.IO.OutputFileStream.FileName.C.P.System.IO.OutputFileStream
            {
                description
                {
                    Returns the name of the output file the output file stream is connected to.
                }
                returns System.IO.OutputFileStream.FileName.C.P.System.IO.OutputFileStream.returnValue
                {
                    description
                    {
                        Returns the name of the output file.
                    }
                }
            }
            function System.IO.OutputFileStream.Handle.C.P.System.IO.OutputFileStream
            {
                description
                {
                    Returns the file handle of the file the output file stream is connected to.
                }
                returns System.IO.OutputFileStream.Handle.C.P.System.IO.OutputFileStream.returnValue
                {
                    description
                    {
                        Returns the file handle.
                    }
                }
            }
            function System.IO.OutputFileStream.Open.P.System.IO.OutputFileStream.C.R.System.String
            {
                description
                {
                    Opens the given output file and connects it to the output file stream.
                }
                remarks
                {
                    If the output file stream was connected to an open file before the operation,
                    that file is closed first.
                    If the given file does not exist, it is created.
                    If the given file exists, it is truncated to zero length.
                }
                parameter System.IO.OutputFileStream.Open.P.System.IO.OutputFileStream.C.R.System.String.fileName_
                {
                    description
                    {
                        The name of the output file.
                    }
                }
            }
            function System.IO.OutputFileStream.Open.P.System.IO.OutputFileStream.C.R.System.String.bool
            {
                description
                {
                    Opens the given output file and connects it to the output file stream.
                }
                remarks
                {
                    If the append parameter is true, opens the file for appending. 
                }
                parameter System.IO.OutputFileStream.Open.P.System.IO.OutputFileStream.C.R.System.String.bool.append
                {
                    description
                    {
                        If true, the file is opened for appending.
                    }
                }
                parameter System.IO.OutputFileStream.Open.P.System.IO.OutputFileStream.C.R.System.String.bool.fileName_
                {
                    description
                    {
                        The name of the output file.
                    }
                }
            }
            function System.IO.OutputFileStream.Open.P.System.IO.OutputFileStream.C.R.System.String.int
            {
                description
                {
                    Opens the given output file and connects it to the output file stream using given permissions.
                }
                parameter System.IO.OutputFileStream.Open.P.System.IO.OutputFileStream.C.R.System.String.int.fileName_
                {
                    description
                    {
                        The name of the output file.
                    }
                }
                parameter System.IO.OutputFileStream.Open.P.System.IO.OutputFileStream.C.R.System.String.int.pmode
                {
                    description
                    {
                        A permission mode that is formed by ORing together following constants:
                        S_IREAD, S_IWRITE (Windows);
                        S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH (Unix).
                    }
                }
            }
            function System.IO.OutputFileStream.Open.P.System.IO.OutputFileStream.C.R.System.String.int.bool
            {
                description
                {
                    Opens the given output file and connects it to the output file stream using given permissions.
                }
                remarks
                {
                    If the append parameter is true, opens the file for appending.
                }
                parameter System.IO.OutputFileStream.Open.P.System.IO.OutputFileStream.C.R.System.String.int.bool.append
                {
                    description
                    {
                        If true, the file is opened for appending.
                    }
                }
                parameter System.IO.OutputFileStream.Open.P.System.IO.OutputFileStream.C.R.System.String.int.bool.fileName_
                {
                    description
                    {
                        The name of the output file.
                    }
                }
                parameter System.IO.OutputFileStream.Open.P.System.IO.OutputFileStream.C.R.System.String.int.bool.pmode
                {
                    description
                    {
                        A permission mode that is formed by ORing together following constants:
                        S_IREAD, S_IWRITE (Windows);
                        S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH (Unix).
                    }
                }
            }
            function System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.C.R.System.String
            {
                description
                {
                    Constructor. Connects the output file stream with the output file of the given name.
                }
                remarks
                {
                    If the file does not exist, it is created.
                    If the file exists, it is truncated to zero length.
                }
                parameter System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.C.R.System.String.fileName_
                {
                    description
                    {
                        The name of the output file.
                    }
                }
            }
            function System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.C.R.System.String.bool
            {
                description
                {
                    Constructor. Connects the output file stream to an output file of the given name.
                }
                remarks
                {
                    If the append parameter is true, opens the file for appending.
                }
                parameter System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.C.R.System.String.bool.append
                {
                    description
                    {
                        If true, the file is opened for appending.
                    }
                }
                parameter System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.C.R.System.String.bool.fileName_
                {
                    description
                    {
                        The name of the output file.
                    }
                }
            }
            function System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.C.R.System.String.int
            {
                description
                {
                    Constructor. Connects the output file stream to an output file with the given name using given permissions.
                }
                parameter System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.C.R.System.String.int.fileName_
                {
                    description
                    {
                        The name of the output file.
                    }
                }
                parameter System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.C.R.System.String.int.pmode
                {
                    description
                    {
                        A permission mode that is formed by ORing together following constants:
                        S_IREAD, S_IWRITE (Windows);
                        S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH (Unix).
                    }
                }
            }
            function System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.C.R.System.String.int.bool
            {
                description
                {
                    Constructor. Connects the output file stream to an output file with the given name using given permissions.
                }
                remarks
                {
                    If the append parameter is true, opens the file for appending.
                }
                parameter System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.C.R.System.String.int.bool.append
                {
                    description
                    {
                        If true, the file is opened for appending.
                    }
                }
                parameter System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.C.R.System.String.int.bool.fileName_
                {
                    description
                    {
                        The name of the output file.
                    }
                }
                parameter System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.C.R.System.String.int.bool.pmode
                {
                    description
                    {
                        A permission mode that is formed by ORing together following constants:
                        S_IREAD, S_IWRITE (Windows);
                        S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH (Unix).
                    }
                }
            }
            function System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.int
            {
                description
                {
                    Constructor. Connects the output file stream to an output file with the given file handle.
                }
                parameter System.IO.OutputFileStream.constructor.P.System.IO.OutputFileStream.int.handle_
                {
                    description
                    {
                        A file handle.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.bool
            {
                description
                {
                    Writes the given Boolean value to the output file stream.
                }
                remarks
                {
                    If the value is true, writes ``true'', otherwise writes ``false''.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.bool.b
                {
                    description
                    {
                        A Boolean value to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.byte
            {
                description
                {
                    Writes the given "\textbf{byte}" to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.byte.b
                {
                    description
                    {
                        A "\textbf{byte}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.char
            {
                description
                {
                    Writes the given character to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.char.c
                {
                    description
                    {
                        A character to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.C.R.System.String
            {
                description
                {
                    Writes the given string to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.C.R.System.String.s
                {
                    description
                    {
                        A string to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.C.P.char
            {
                description
                {
                    Writes the given C-style string to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.C.P.char.s
                {
                    description
                    {
                        A C-style string to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.double
            {
                description
                {
                    Writes the given "\textbf{double}" value to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.double.d
                {
                    description
                    {
                        A "\textbf{double}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.float
            {
                description
                {
                    Writes the given "\textbf{float}" value to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.float.f
                {
                    description
                    {
                        A "\textbf{float}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.int
            {
                description
                {
                    Writes the given "\textbf{int}" value to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.int.i
                {
                    description
                    {
                        An "\textbf{int}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.long
            {
                description
                {
                    Writes the given "\textbf{long}" value to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.long.l
                {
                    description
                    {
                        A "\textbf{long}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.sbyte
            {
                description
                {
                    Writes the given "\textbf{sbyte}" value to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.sbyte.s
                {
                    description
                    {
                        An "\textbf{sbyte}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.short
            {
                description
                {
                    Writes the given "\textbf{short}" value to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.short.s
                {
                    description
                    {
                        A "\textbf{short}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.uint
            {
                description
                {
                    Writes the given "\textbf{uint}" value to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.uint.i
                {
                    description
                    {
                        A "\textbf{uint}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.ulong
            {
                description
                {
                    Writes the given "\textbf{ulong}" value to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.ulong.u
                {
                    description
                    {
                        A "\textbf{ulong}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.ushort
            {
                description
                {
                    Writes the given "\textbf{ushort}" value to the output file stream.
                }
                parameter System.IO.OutputFileStream.Write.P.System.IO.OutputFileStream.ushort.u
                {
                    description
                    {
                        A "\textbf{ushort}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream
            {
                description
                {
                    Writes a new line to the output file stream.
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.bool
            {
                description
                {
                    Writes the given Boolean value followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.bool.b
                {
                    description
                    {
                        A Boolean value to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.byte
            {
                description
                {
                    Writes the given "\textbf{byte}" value followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.byte.b
                {
                    description
                    {
                        A "\textbf{byte}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.char
            {
                description
                {
                    Writes the given character followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.char.c
                {
                    description
                    {
                        A character to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.C.R.System.String
            {
                description
                {
                    Writes the given string followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.C.R.System.String.s
                {
                    description
                    {
                        A string to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.C.P.char
            {
                description
                {
                    Writes the given C-style string followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.C.P.char.s
                {
                    description
                    {
                        A C-style string to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.double
            {
                description
                {
                    Writes the given "\textbf{double}" value followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.double.d
                {
                    description
                    {
                        A "\textbf{double}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.float
            {
                description
                {
                    Writes the given "\textbf{float}" value followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.float.f
                {
                    description
                    {
                        A "\textbf{float}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.int
            {
                description
                {
                    Writes the given "\textbf{int}" value followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.int.i
                {
                    description
                    {
                        An "\textbf{int}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.long
            {
                description
                {
                    Writes the given "\textbf{long}" value followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.long.l
                {
                    description
                    {
                        A "\textbf{long}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.sbyte
            {
                description
                {
                    Writes the given "\textbf{sbyte}" value followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.sbyte.s
                {
                    description
                    {
                        An "\textbf{sbyte}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.short
            {
                description
                {
                    Writes the given "\textbf{short}" value followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.short.s
                {
                    description
                    {
                        A "\textbf{short}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.uint
            {
                description
                {
                    Writes the given "\textbf{uint}" value followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.uint.u
                {
                    description
                    {
                        A "\textbf{uint}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.ulong
            {
                description
                {
                    Writes the given "\textbf{ulong}" value followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.ulong.u
                {
                    description
                    {
                        A "\textbf{ulong}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.ushort
            {
                description
                {
                    Writes the given "\textbf{ushort}" value followed by a new line to the output file stream.
                }
                parameter System.IO.OutputFileStream.WriteLine.P.System.IO.OutputFileStream.ushort.u
                {
                    description
                    {
                        A "\textbf{ushort}" to write.
                    }
                }
            }
            function System.IO.OutputFileStream.destructor.P.System.IO.OutputFileStream
            {
                description
                {
                    Destructor. If the output file stream is connected to an open file, the file is closed.
                }
            }
        }
        class System.IO.OutputStream
        {
            description
            {
                An abstract base class for output stream classes.
            }
            function System.IO.OutputStream.constructor.P.System.IO.OutputStream
            {
                description
                {
                    Default constructor.
                }
            }
            function System.IO.OutputStream.constructor.P.System.IO.OutputStream.RR.System.IO.OutputStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.OutputStream.constructor.P.System.IO.OutputStream.RR.System.IO.OutputStream.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.IO.OutputStream.operator.assign.P.System.IO.OutputStream.RR.System.IO.OutputStream
            {
                description
                {
                    Move assignment.
                }
                parameter System.IO.OutputStream.operator.assign.P.System.IO.OutputStream.RR.System.IO.OutputStream.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.bool
            {
                description
                {
                    Writes a Boolean value to output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.bool.b
                {
                    description
                    {
                        A Boolean to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.byte
            {
                description
                {
                    Writes a "\textbf{byte}" to the output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.byte.b
                {
                    description
                    {
                        A "\textbf{byte}" to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.char
            {
                description
                {
                    Writes a character to the output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.char.c
                {
                    description
                    {
                        A character to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.C.R.System.String
            {
                description
                {
                    Writes a string to the output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.C.R.System.String.s
                {
                    description
                    {
                        A string to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.C.P.char
            {
                description
                {
                    Writes a C-style string to the output steram.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.C.P.char.s
                {
                    description
                    {
                        A C-style string to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.double
            {
                description
                {
                    Writes a "\textbf{double}" to the output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.double.d
                {
                    description
                    {
                        A "\textbf{double}" to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.float
            {
                description
                {
                    Writes a "\textbf{float}" to the output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.float.f
                {
                    description
                    {
                        A "\textbf{float}" to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.int
            {
                description
                {
                    Writes an "\textbf{int}" to the output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.int.i
                {
                    description
                    {
                        An "\textbf{int}" to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.long
            {
                description
                {
                    Writes a "\textbf{long}" to the output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.long.l
                {
                    description
                    {
                        A "\textbf{long}" to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.sbyte
            {
                description
                {
                    Writes an "\textbf{sbyte}" to the output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.sbyte.b
                {
                    description
                    {
                        An "\textbf{sbyte}" to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.short
            {
                description
                {
                    Writes a "\textbf{short}" to the output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.short.s
                {
                    description
                    {
                        A "\textbf{short}" to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.uint
            {
                description
                {
                    Writes a "\textbf{uint}" to the output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.uint.i
                {
                    description
                    {
                        A "\textbf{uint}" to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.ulong
            {
                description
                {
                    Writes a "\textbf{ulong}" to the output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.ulong.u
                {
                    description
                    {
                        A "\textbf{ulong}" to write.
                    }
                }
            }
            function System.IO.OutputStream.Write.P.System.IO.OutputStream.ushort
            {
                description
                {
                    Writes a "\textbf{ushort}" to the output stream.
                }
                parameter System.IO.OutputStream.Write.P.System.IO.OutputStream.ushort.u
                {
                    description
                    {
                        A "\textbf{ushort}" to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream
            {
                description
                {
                    Writes a new line to the output stream.
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.bool
            {
                description
                {
                    Writes a Boolean followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.bool.b
                {
                    description
                    {
                        A Boolean to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.byte
            {
                description
                {
                    Writes a "\textbf{byte}" followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.byte.b
                {
                    description
                    {
                        A "\textbf{byte}" to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.char
            {
                description
                {
                    Writes a character followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.char.c
                {
                    description
                    {
                        A character to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.C.R.System.String
            {
                description
                {
                    Writes a string followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.C.R.System.String.s
                {
                    description
                    {
                        A string to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.C.P.char
            {
                description
                {
                    Writes a C-style string followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.C.P.char.s
                {
                    description
                    {
                        A C-style string to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.double
            {
                description
                {
                    Writes a "\textbf{double}" followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.double.d
                {
                    description
                    {
                        A "\textbf{double}" to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.float
            {
                description
                {
                    Writes a "\textbf{float}" followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.float.f
                {
                    description
                    {
                        A "\textbf{float}" to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.int
            {
                description
                {
                    Writes an "\textbf{int}" followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.int.i
                {
                    description
                    {
                        An "\textbf{int}" to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.long
            {
                description
                {
                    Writes a "\textbf{long}" followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.long.l
                {
                    description
                    {
                        A "\textbf{long}" to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.sbyte
            {
                description
                {
                    Writes an "\textbf{sbyte}" followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.sbyte.b
                {
                    description
                    {
                        An "\textbf{sbyte}" to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.short
            {
                description
                {
                    Writes a "\textbf{short}" followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.short.s
                {
                    description
                    {
                        A "\textbf{short}" to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.uint
            {
                description
                {
                    Writes a "\textbf{uint}" followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.uint.i
                {
                    description
                    {
                        A "\textbf{uint}" to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.ulong
            {
                description
                {
                    Writes a "\textbf{ulong}" followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.ulong.u
                {
                    description
                    {
                        A "\textbf{ulong}" to write.
                    }
                }
            }
            function System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.ushort
            {
                description
                {
                    Writes a "\textbf{ushort}" followed by a new line to the output stream.
                }
                parameter System.IO.OutputStream.WriteLine.P.System.IO.OutputStream.ushort.u
                {
                    description
                    {
                        A "\textbf{ushort}" to write.
                    }
                }
            }
            function System.IO.OutputStream.destructor.P.System.IO.OutputStream
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.IO.OutputStringStream
        {
            description
            {
                A class for writing to a string.
            }
            function System.IO.OutputStringStream.constructor.P.System.IO.OutputStringStream
            {
                description
                {
                    Default constructor. Write to an empty string.
                }
            }
            function System.IO.OutputStringStream.constructor.P.System.IO.OutputStringStream.RR.System.IO.OutputStringStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.IO.OutputStringStream.constructor.P.System.IO.OutputStringStream.RR.System.IO.OutputStringStream.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.IO.OutputStringStream.operator.assign.P.System.IO.OutputStringStream.RR.System.IO.OutputStringStream
            {
                description
                {
                    Move assignment.
                }
                parameter System.IO.OutputStringStream.operator.assign.P.System.IO.OutputStringStream.RR.System.IO.OutputStringStream.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.IO.OutputStringStream.GetStr.C.P.System.IO.OutputStringStream
            {
                description
                {
                    Returns the contained string.
                }
                returns System.IO.OutputStringStream.GetStr.C.P.System.IO.OutputStringStream.returnValue
                {
                    description
                    {
                        Returns the contained string.
                    }
                }
            }
            function System.IO.OutputStringStream.constructor.P.System.IO.OutputStringStream.C.R.System.String
            {
                description
                {
                    Constructor. Write to the end of the given string.
                }
                parameter System.IO.OutputStringStream.constructor.P.System.IO.OutputStringStream.C.R.System.String.str_
                {
                    description
                    {
                        A string to write to.
                    }
                }
            }
            function System.IO.OutputStringStream.SetStr.P.System.IO.OutputStringStream.C.R.System.String
            {
                description
                {
                    Sets the contained string.
                }
                parameter System.IO.OutputStringStream.SetStr.P.System.IO.OutputStringStream.C.R.System.String.str_
                {
                    description
                    {
                        A string to write to.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.bool
            {
                description
                {
                    Writes a Boolean value to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.bool.b
                {
                    description
                    {
                        A Boolean value to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.byte
            {
                description
                {
                    Writes a "\textbf{byte}" to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.byte.b
                {
                    description
                    {
                        A "\textbf{byte}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.char
            {
                description
                {
                    Writes a character to the endf of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.char.c
                {
                    description
                    {
                        A character to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.C.R.System.String
            {
                description
                {
                    Writes a string to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.C.R.System.String.s
                {
                    description
                    {
                        A string to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.C.P.char
            {
                description
                {
                    Writes a C-style string to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.C.P.char.s
                {
                    description
                    {
                        A C-style string to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.double
            {
                description
                {
                    Writes a "\textbf{double}" to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.double.d
                {
                    description
                    {
                        A "\textbf{double}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.float
            {
                description
                {
                    Writes a "\textbf{float}" to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.float.f
                {
                    description
                    {
                        A "\textbf{float}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.int
            {
                description
                {
                    Writes an "\textbf{int}" to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.int.i
                {
                    description
                    {
                        An "\textbf{int}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.long
            {
                description
                {
                    Writes a "\textbf{long}" to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.long.l
                {
                    description
                    {
                        A "\textbf{long}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.sbyte
            {
                description
                {
                    Writes an "\textbf{sbyte}" to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.sbyte.b
                {
                    description
                    {
                        An "\textbf{sbyte}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.short
            {
                description
                {
                    Writes a "\textbf{short}" to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.short.s
                {
                    description
                    {
                        A "\textbf{short}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.uint
            {
                description
                {
                    Writes a "\textbf{uint}" to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.uint.i
                {
                    description
                    {
                        A "\textbf{uint}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.ulong
            {
                description
                {
                    Writes a "\textbf{ulong}" to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.ulong.u
                {
                    description
                    {
                        A "\textbf{ulong}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.ushort
            {
                description
                {
                    Writes a "\textbf{ushort}" to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.Write.P.System.IO.OutputStringStream.ushort.u
                {
                    description
                    {
                        A "\textbf{ushort}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream
            {
                description
                {
                    Writes a new line to the end of the contained string.
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.bool
            {
                description
                {
                    Writes a Boolean followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.bool.b
                {
                    description
                    {
                        A Boolean to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.byte
            {
                description
                {
                    Writes a "\textbf{byte}" followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.byte.b
                {
                    description
                    {
                        A "\textbf{byte}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.char
            {
                description
                {
                    Writes a character followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.char.c
                {
                    description
                    {
                        A character to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.C.R.System.String
            {
                description
                {
                    Writes a string followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.C.R.System.String.s
                {
                    description
                    {
                        A string to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.C.P.char
            {
                description
                {
                    Writes a C-style string followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.C.P.char.s
                {
                    description
                    {
                        A C-style string to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.double
            {
                description
                {
                    Writes a "\textbf{double}" followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.double.d
                {
                    description
                    {
                        A "\textbf{double}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.float
            {
                description
                {
                    Writes a "\textbf{float}" followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.float.f
                {
                    description
                    {
                        A "\textbf{float}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.int
            {
                description
                {
                    Writes an "\textbf{int}" followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.int.i
                {
                    description
                    {
                        An "\textbf{int}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.long
            {
                description
                {
                    Writes a "\textbf{long}" followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.long.l
                {
                    description
                    {
                        A "\textbf{long}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.sbyte
            {
                description
                {
                    Writes an "\textbf{sbyte}" followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.sbyte.b
                {
                    description
                    {
                        An "\textbf{sbyte}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.short
            {
                description
                {
                    Writes a "\textbf{short}" followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.short.s
                {
                    description
                    {
                        A "\textbf{short}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.uint
            {
                description
                {
                    Writes a "\textbf{uint}" followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.uint.i
                {
                    description
                    {
                        A "\textbf{uint}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.ulong
            {
                description
                {
                    Writes a "\textbf{ulong}" followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.ulong.u
                {
                    description
                    {
                        A "\textbf{ulong}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.ushort
            {
                description
                {
                    Writes a "\textbf{ushort}" followed by a new line to the end of the contained string.
                }
                parameter System.IO.OutputStringStream.WriteLine.P.System.IO.OutputStringStream.ushort.u
                {
                    description
                    {
                        A "\textbf{ushort}" to write.
                    }
                }
            }
            function System.IO.OutputStringStream.destructor.P.System.IO.OutputStringStream
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.IO.Path
        {
            description
            {
                A static class for manipulating paths.
            }
            function System.IO.Path.ChangeExtension.C.R.System.String.C.R.System.String
            {
                description
                {
                    Changes an extension of a path.
                }
                remarks
                {
                    If new extension is empty, returns a path with extension removed.
                    Otherwise, if path has no extension, returns a path with the new extension appended.
                    Otherwise, returns a path with the new extension replaced.
                    New extension can have '.' in it or not.
                }
                parameter System.IO.Path.ChangeExtension.C.R.System.String.C.R.System.String.extension
                {
                    description
                    {
                        A new extension.
                    }
                }
                parameter System.IO.Path.ChangeExtension.C.R.System.String.C.R.System.String.path
                {
                    description
                    {
                        A path.
                    }
                }
                returns System.IO.Path.ChangeExtension.C.R.System.String.C.R.System.String.returnValue
                {
                    description
                    {
                        A path with a new extension.
                    }
                }
            }
            function System.IO.Path.Combine.C.R.System.String.C.R.System.String
            {
                description
                {
                    Combines to paths.
                }
                remarks
                {
                    If the first path is empty, returns the second path.
                    Otherwise, if the second path is empty, returns the first path.
                    Otherwise, if the second path is absolute, returns the second path.
                    Otherwise returns the first path and the second path separated by the '/' character.
                }
                parameter System.IO.Path.Combine.C.R.System.String.C.R.System.String.path1
                {
                    description
                    {
                        The first path.
                    }
                }
                parameter System.IO.Path.Combine.C.R.System.String.C.R.System.String.path2
                {
                    description
                    {
                        The second path.
                    }
                }
                returns System.IO.Path.Combine.C.R.System.String.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns the first path combined with the second path.
                    }
                }
            }
            function System.IO.Path.GetDirectoryName.C.R.System.String
            {
                description
                {
                    Returns the directory name part of a path.
                }
                remarks
                {
                    If the path parameter is empty, returns empty string.
                    Otherwise, if the path consists of alphabetical letter, a colon and a slash, returns empty string.
                    Otherwise, if the path has a '/' character, returns a path with the last '/' character and characters following it removed.
                    Otherwise returns an empty string.
                }
                parameter System.IO.Path.GetDirectoryName.C.R.System.String.path
                {
                    description
                    {
                        A path.
                    }
                }
                returns System.IO.Path.GetDirectoryName.C.R.System.String.returnValue
                {
                    description
                    {
                        A path with last component removed.
                    }
                }
            }
            function System.IO.Path.GetExtension.C.R.System.String
            {
                description
                {
                    Returns the extension of a path.
                }
                remarks
                {
                    If the path contains a '.' character but it also contains '/' character after the last '.' character,
                    an empty string is returned.
                    Otherwise, if the path contains a '.' character, returns a substring containing the last '.' character and
                    characters following it.
                    Otherwise returns an empty string.
                }
                parameter System.IO.Path.GetExtension.C.R.System.String.path
                {
                    description
                    {
                        A path.
                    }
                }
                returns System.IO.Path.GetExtension.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns the extension of the path.
                    }
                }
            }
            function System.IO.Path.GetFileName.C.R.System.String
            {
                description
                {
                    Returns the file name part of a path.
                }
                remarks
                {
                    If the given path is empty, or the last character of it is '/' or ':', returns empty string.
                    Otherwise, if the path contains a '/' character, returns the characters following the last '/' character.
                    Otherwise returns the path.
                }
                parameter System.IO.Path.GetFileName.C.R.System.String.path
                {
                    description
                    {
                        A path.
                    }
                }
                returns System.IO.Path.GetFileName.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns a path with extension removed.
                    }
                }
            }
            function System.IO.Path.GetFileNameWithoutExtension.C.R.System.String
            {
                description
                {
                    Returns the file name without an extension part of a path.
                }
                remarks
                {
                    First gets the file name part of the path.
                    If the file name has an extension, returns the file name with extension removed.
                    Otherwise returns the file name.
                }
                parameter System.IO.Path.GetFileNameWithoutExtension.C.R.System.String.path
                {
                    description
                    {
                        A path.
                    }
                }
                returns System.IO.Path.GetFileNameWithoutExtension.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns a file name without an extension.
                    }
                }
            }
            function System.IO.Path.GetParent.C.R.System.String
            {
                description
                {
                    Returns a given path with last component removed.
                }
                parameter System.IO.Path.GetParent.C.R.System.String.path
                {
                    description
                    {
                        A path.
                    }
                }
                returns System.IO.Path.GetParent.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns a given path with last component removed.
                    }
                }
            }
            function System.IO.Path.HasExtension.C.R.System.String
            {
                description
                {
                    Returns true, if the given path has an extension, false otherwise.
                }
                remarks
                {
                    If the path has no '.' character or the path ends with a '.' character, returns false.
                    Otherwise, if the path has a '/' or ':' character after the last '.' character, returns false.
                    Otherwise returns true.
                }
                parameter System.IO.Path.HasExtension.C.R.System.String.path
                {
                    description
                    {
                        A path.
                    }
                }
                returns System.IO.Path.HasExtension.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns true, if the given path has an extension, false otherwise.
                    }
                }
            }
            function System.IO.Path.IsAbsolute.C.R.System.String
            {
                description
                {
                    Returns true if the given path is absolute, false otherwise.
                }
                remarks
                {
                    If the given path is empty, returns false.
                    Otherwise, if the given path begins with the '/' character, returns true.
                    Otherwise, if the given path begins with an alphabetical letter followed by a ':' character followed by a '/' character,
                    returns true.
                    Otherwise returns false.
                }
                parameter System.IO.Path.IsAbsolute.C.R.System.String.path
                {
                    description
                    {
                        A path.
                    }
                }
                returns System.IO.Path.IsAbsolute.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns true if the given path is absolute, false otherwise.
                    }
                }
            }
            function System.IO.Path.IsRelative.C.R.System.String
            {
                description
                {
                    Returns true if the given path is relative, false otherwise.
                }
                remarks
                {
                    Returns the complement of the value returned by the System.IO.Path.IsAbsolute.System.String.const.ref function for the given path.
                }
                parameter System.IO.Path.IsRelative.C.R.System.String.path
                {
                    description
                    {
                        A path.
                    }
                }
                returns System.IO.Path.IsRelative.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns true if the given path is relative, false otherwise.
                    }
                }
            }
            function System.IO.Path.MakeCanonical.C.R.System.String
            {
                description
                {
                    Returns a canonical representation of a path.
                }
                remarks
                {
                    First replaces each '\verb|\|' character of the path with the '/' character.
                    Then, if the path consists of an alphabetical letter followed by the ':' character followed by the '/' character 
                    returns the path.
                    Otherwise, if the path consists of a '/' character, returns the path.
                    Otherwise, if the path ends with a '/' character, returns the path with last '/' character removed.
                    Otherwise returns the path.
                }
                parameter System.IO.Path.MakeCanonical.C.R.System.String.path
                {
                    description
                    {
                        A path.
                    }
                }
                returns System.IO.Path.MakeCanonical.C.R.System.String.returnValue
                {
                    description
                    {
                        Returns a canonical representation of the given path.
                    }
                }
            }
        }
        function System.IO.CreateDirectories.C.R.System.String
        {
            description
            {
                Creates all directories along the given directory path.
            }
            parameter System.IO.CreateDirectories.C.R.System.String.directoryPath
            {
                description
                {
                    A directory path.
                }
            }
        }
        function System.IO.DirectoryExists.C.R.System.String
        {
            description
            {
                Returns true if a directory with a given path name exists, false otherwise.
            }
            parameter System.IO.DirectoryExists.C.R.System.String.directoryPath
            {
                description
                {
                    A path to test.
                }
            }
            returns System.IO.DirectoryExists.C.R.System.String.returnValue
            {
                description
                {
                    Returns true if a directory with a given path name exists, false otherwise.
                }
            }
        }
        function System.IO.FileContentsEqual.C.R.System.String.C.R.System.String
        {
            description
            {
                Returns true if the given files have equal content, false otherwise.
            }
            parameter System.IO.FileContentsEqual.C.R.System.String.C.R.System.String.fileName1
            {
                description
                {
                    The first file.
                }
            }
            parameter System.IO.FileContentsEqual.C.R.System.String.C.R.System.String.fileName2
            {
                description
                {
                    The second file.
                }
            }
            returns System.IO.FileContentsEqual.C.R.System.String.C.R.System.String.returnValue
            {
                description
                {
                    Returns a given path with last component starting with '/' character removed.
                }
            }
        }
        function System.IO.FileExists.C.R.System.String
        {
            description
            {
                Returns true if a file with a given path name exists, false otherwise.
            }
            parameter System.IO.FileExists.C.R.System.String.filePath
            {
                description
                {
                    A path to test.
                }
            }
            returns System.IO.FileExists.C.R.System.String.returnValue
            {
                description
                {
                    Returns true if a file with a given path name exists, false otherwise.
                }
            }
        }
        function System.IO.GetCurrentWorkingDirectory
        {
            description
            {
                Returns a path to the current working directory.
            }
            returns System.IO.GetCurrentWorkingDirectory.returnValue
            {
                description
                {
                    Returns a path to the current working directory.
                }
            }
        }
        function System.IO.GetFullPath.C.R.System.String
        {
            description
            {
                Returns an absolute path corresponding to the given
                absolute or relative path.
            }
            remarks
            {
                If the given path is relative, prefixes it with the 
                path to current working directory.
            }
            parameter System.IO.GetFullPath.C.R.System.String.path
            {
                description
                {
                    A path.
                }
            }
            returns System.IO.GetFullPath.C.R.System.String.returnValue
            {
                description
                {
                    Returns an absolute path corresponding to the given
                    absolute or relative path.
                }
            }
        }
        function System.IO.PathExists.C.R.System.String
        {
            description
            {
                Returns true if the given path exists, false otherwise.
            }
            parameter System.IO.PathExists.C.R.System.String.path
            {
                description
                {
                    A path.
                }
            }
            returns System.IO.PathExists.C.R.System.String.returnValue
            {
                description
                {
                    Returns true if the given path exists, false otherwise.
                }
            }
        }
        function System.IO.ReadFile.C.R.System.String
        {
            description
            {
                Reads a file with the given name into a string and returns it.
            }
            parameter System.IO.ReadFile.C.R.System.String.fileName
            {
                description
                {
                    The name of the file to read.
                }
            }
            returns System.IO.ReadFile.C.R.System.String.returnValue
            {
                description
                {
                    Returns the contents of the given file.
                }
            }
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.System.Date
        {
            description
            {
                Writes the given date to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.System.Date.date
            {
                description
                {
                    A date to write.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.System.Date.s
            {
                description
                {
                    An output stream.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.System.Date.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.System.EndLine
        {
            description
            {
                Writes end line character to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.System.EndLine.__parameter1
            {
                description
                {
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.System.EndLine.s
            {
                description
                {
                    An output stream.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.System.EndLine.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.bool
        {
            description
            {
                Writes the given Boolean value to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.bool.b
            {
                description
                {
                    A Boolean to write.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.bool.s
            {
                description
                {
                    An output stream.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.bool.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.byte
        {
            description
            {
                Writes the given byte to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.byte.b
            {
                description
                {
                    A byte to write.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.byte.s
            {
                description
                {
                    An output stream.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.byte.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.char
        {
            description
            {
                Writes the given character to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.char.c
            {
                description
                {
                    A character to write.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.char.s
            {
                description
                {
                    An output stream.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.char.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.C.R.System.IO.OutputStream.C.R.C.where.C.is.ForwardContainer.and.C.ValueType.is.int
        {
            description
            {
                Writes the given forward container containing integers to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.C.R.System.IO.OutputStream.C.R.C.where.C.is.ForwardContainer.and.C.ValueType.is.int.c
            {
                description
                {
                    A forward container.
                }
            }
            parameter System.IO.operator.shiftLeft.C.R.System.IO.OutputStream.C.R.C.where.C.is.ForwardContainer.and.C.ValueType.is.int.s
            {
                description
                {
                    An output stream.
                }
            }
            returns System.IO.operator.shiftLeft.C.R.System.IO.OutputStream.C.R.C.where.C.is.ForwardContainer.and.C.ValueType.is.int.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.C.R.System.String
        {
            description
            {
                Writes the given string to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.C.R.System.String.s
            {
                description
                {
                    An output stream.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.C.R.System.String.str
            {
                description
                {
                    A string to write.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.C.R.System.String.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.C.P.char
        {
            description
            {
                Writes the given C-style string to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.C.P.char.s
            {
                description
                {
                    An output stream.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.C.P.char.str
            {
                description
                {
                    A C-style string.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.C.P.char.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.double
        {
            description
            {
                Writes the given double to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.double.d
            {
                description
                {
                    A double to write.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.double.s
            {
                description
                {
                    An output stream.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.double.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.float
        {
            description
            {
                Writes the given float to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.float.f
            {
                description
                {
                    A float to write.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.float.s
            {
                description
                {
                    An output stream.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.float.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.int
        {
            description
            {
                Writes the given int to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.int.i
            {
                description
                {
                    An int to write.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.int.s
            {
                description
                {
                    An output stream.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.int.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.long
        {
            description
            {
                Writes the given long to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.long.l
            {
                description
                {
                    A long to write.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.long.s
            {
                description
                {
                    A output stream.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.long.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.sbyte
        {
            description
            {
                Writes the given sbyte to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.sbyte.b
            {
                description
                {
                    An sbyte to write.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.sbyte.s
            {
                description
                {
                    An output stream.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.sbyte.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.short
        {
            description
            {
                Writes the given short to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.short.s
            {
                description
                {
                    An output stream.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.short.x
            {
                description
                {
                    A short to write.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.short.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.uint
        {
            description
            {
                Writes the given uint to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.uint.s
            {
                description
                {
                    An output stream.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.uint.u
            {
                description
                {
                    A uint to write.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.uint.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.ulong
        {
            description
            {
                Writes the given ulong to given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.ulong.s
            {
                description
                {
                    An output stream.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.ulong.u
            {
                description
                {
                    A ulong to write.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.ulong.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        function System.IO.operator.shiftLeft.R.System.IO.OutputStream.ushort
        {
            description
            {
                Writes the given ushort to the given output stream.
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.ushort.s
            {
                description
                {
                    An output stream.
                }
            }
            parameter System.IO.operator.shiftLeft.R.System.IO.OutputStream.ushort.u
            {
                description
                {
                    A ushort to write.
                }
            }
            returns System.IO.operator.shiftLeft.R.System.IO.OutputStream.ushort.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.IO.OutputStream;
        }
        enumType System.IO.OpenMode
        {
            description
            {
                An open mode for a binary file stream.
            }
            enumConstant System.IO.OpenMode.readOnly
            {
                description
                {
                    Open the file with read only access.
                }
            }
            enumConstant System.IO.OpenMode.readWrite
            {
                description
                {
                    Open the file with read and write access.
                }
            }
            enumConstant System.IO.OpenMode.writeOnly
            {
                description
                {
                    Open the file with write only access.
                    Truncates the file if it exists.
                }
            }
        }
    }
    namespace System.Security
    {
        description
        {
            Contains classes and functions for computing cryptographic hash functions.
        }
        class System.Security.Sha1
        {
            description
            {
                Class for computing SHA-1 hash value.
            }
            function System.Security.Sha1.constructor.P.System.Security.Sha1
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Security.Sha1.constructor.P.System.Security.Sha1.C.R.System.Security.Sha1
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Security.Sha1.constructor.P.System.Security.Sha1.C.R.System.Security.Sha1.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Security.Sha1.operator.assign.P.System.Security.Sha1.C.R.System.Security.Sha1
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Security.Sha1.operator.assign.P.System.Security.Sha1.C.R.System.Security.Sha1.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Security.Sha1.constructor.P.System.Security.Sha1.RR.System.Security.Sha1
            {
                description
                {
                    Move constructor.
                }
                parameter System.Security.Sha1.constructor.P.System.Security.Sha1.RR.System.Security.Sha1.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Security.Sha1.operator.assign.P.System.Security.Sha1.RR.System.Security.Sha1
            {
                description
                {
                    Move assignment.
                }
                parameter System.Security.Sha1.operator.assign.P.System.Security.Sha1.RR.System.Security.Sha1.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Security.Sha1.GetDigest.P.System.Security.Sha1
            {
                description
                {
                    Returns computed SHA-1 message digest as a hexadecimal string.
                }
                returns System.Security.Sha1.GetDigest.P.System.Security.Sha1.returnValue
                {
                    description
                    {
                        Returns computed SHA-1 message digest as a hexadecimal string.
                    }
                }
            }
            function System.Security.Sha1.Process.P.System.Security.Sha1.byte
            {
                description
                {
                    Process one byte.
                }
                parameter System.Security.Sha1.Process.P.System.Security.Sha1.byte.x
                {
                    description
                    {
                        A byte to process.
                    }
                }
            }
            function System.Security.Sha1.Process.P.System.Security.Sha1.C.P.void.C.P.void
            {
                description
                {
                    Process bytes in range System.Security.Sha1.Process.P.System.Security.Sha1.C.P.void.C.P.void.begin and
                    System.Security.Sha1.Process.P.System.Security.Sha1.C.P.void.C.P.void.end.
                }
                parameter System.Security.Sha1.Process.P.System.Security.Sha1.C.P.void.C.P.void.begin
                {
                    description
                    {
                        Pointer to the beginning of bytes to process.
                    }
                }
                parameter System.Security.Sha1.Process.P.System.Security.Sha1.C.P.void.C.P.void.end
                {
                    description
                    {
                        Pointer to the end of bytes to process.
                    }
                }
            }
            function System.Security.Sha1.Process.P.System.Security.Sha1.C.P.void.int
            {
                description
                {
                    Process a block of memory.
                }
                parameter System.Security.Sha1.Process.P.System.Security.Sha1.C.P.void.int.buf
                {
                    description
                    {
                        Pointer to memory buffer.
                    }
                }
                parameter System.Security.Sha1.Process.P.System.Security.Sha1.C.P.void.int.count
                {
                    description
                    {
                        Number of bytes to process.
                    }
                }
            }
            function System.Security.Sha1.Reset.P.System.Security.Sha1
            {
                description
                {
                    Reset SHA-1 computation ready for computing another message.
                }
            }
        }
        class System.Security.Sha256
        {
            description
            {
                Class for computing SHA-256 hash value.
            }
            function System.Security.Sha256.constructor.P.System.Security.Sha256
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Security.Sha256.constructor.P.System.Security.Sha256.C.R.System.Security.Sha256
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Security.Sha256.constructor.P.System.Security.Sha256.C.R.System.Security.Sha256.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Security.Sha256.operator.assign.P.System.Security.Sha256.C.R.System.Security.Sha256
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Security.Sha256.operator.assign.P.System.Security.Sha256.C.R.System.Security.Sha256.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Security.Sha256.constructor.P.System.Security.Sha256.RR.System.Security.Sha256
            {
                description
                {
                    Move constructor.
                }
                parameter System.Security.Sha256.constructor.P.System.Security.Sha256.RR.System.Security.Sha256.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Security.Sha256.operator.assign.P.System.Security.Sha256.RR.System.Security.Sha256
            {
                description
                {
                    Move assignment.
                }
                parameter System.Security.Sha256.operator.assign.P.System.Security.Sha256.RR.System.Security.Sha256.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Security.Sha256.GetDigest.P.System.Security.Sha256
            {
                description
                {
                    Returns computed SHA-256 message digest as a hexadecimal string.
                }
                returns System.Security.Sha256.GetDigest.P.System.Security.Sha256.returnValue
                {
                    description
                    {
                        Returns computed SHA-256 message digest as a hexadecimal string.
                    }
                }
            }
            function System.Security.Sha256.Process.P.System.Security.Sha256.byte
            {
                description
                {
                    Process one byte.
                }
                parameter System.Security.Sha256.Process.P.System.Security.Sha256.byte.x
                {
                    description
                    {
                        A byte to process.
                    }
                }
            }
            function System.Security.Sha256.Process.P.System.Security.Sha256.C.P.void.C.P.void
            {
                description
                {
                    Process bytes in range System.Security.Sha256.Process.P.System.Security.Sha256.C.P.void.C.P.void.begin and
                    System.Security.Sha256.Process.P.System.Security.Sha256.C.P.void.C.P.void.end.
                }
                parameter System.Security.Sha256.Process.P.System.Security.Sha256.C.P.void.C.P.void.begin
                {
                    description
                    {
                        Pointer to the beginning of bytes to process.
                    }
                }
                parameter System.Security.Sha256.Process.P.System.Security.Sha256.C.P.void.C.P.void.end
                {
                    description
                    {
                        Pointer to the end of bytes to process.
                    }
                }
            }
            function System.Security.Sha256.Process.P.System.Security.Sha256.C.P.void.int
            {
                description
                {
                    Process a block of memory.
                }
                parameter System.Security.Sha256.Process.P.System.Security.Sha256.C.P.void.int.buf
                {
                    description
                    {
                        Pointer to memory buffer.
                    }
                }
                parameter System.Security.Sha256.Process.P.System.Security.Sha256.C.P.void.int.count
                {
                    description
                    {
                        Number of bytes to process.
                    }
                }
            }
            function System.Security.Sha256.Reset.P.System.Security.Sha256
            {
                description
                {
                    Reset SHA-256 computation ready for computing another message.
                }
            }
        }
        class System.Security.Sha512
        {
            description
            {
                Class for computing SHA-512 hash value.
            }
            function System.Security.Sha512.constructor.P.System.Security.Sha512
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Security.Sha512.constructor.P.System.Security.Sha512.C.R.System.Security.Sha512
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Security.Sha512.constructor.P.System.Security.Sha512.C.R.System.Security.Sha512.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Security.Sha512.operator.assign.P.System.Security.Sha512.C.R.System.Security.Sha512
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Security.Sha512.operator.assign.P.System.Security.Sha512.C.R.System.Security.Sha512.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Security.Sha512.constructor.P.System.Security.Sha512.RR.System.Security.Sha512
            {
                description
                {
                    Move constructor.
                }
                parameter System.Security.Sha512.constructor.P.System.Security.Sha512.RR.System.Security.Sha512.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Security.Sha512.operator.assign.P.System.Security.Sha512.RR.System.Security.Sha512
            {
                description
                {
                    Move assignment.
                }
                parameter System.Security.Sha512.operator.assign.P.System.Security.Sha512.RR.System.Security.Sha512.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Security.Sha512.GetDigest.P.System.Security.Sha512
            {
                description
                {
                    Returns computed SHA-512 message digest as a hexadecimal string.
                }
                returns System.Security.Sha512.GetDigest.P.System.Security.Sha512.returnValue
                {
                    description
                    {
                        Returns computed SHA-512 message digest as a hexadecimal string.
                    }
                }
            }
            function System.Security.Sha512.Process.P.System.Security.Sha512.byte
            {
                description
                {
                    Process one byte.
                }
                parameter System.Security.Sha512.Process.P.System.Security.Sha512.byte.x
                {
                    description
                    {
                        A byte to process.
                    }
                }
            }
            function System.Security.Sha512.Process.P.System.Security.Sha512.C.P.void.C.P.void
            {
                description
                {
                    Process bytes in range System.Security.Sha512.Process.P.System.Security.Sha512.C.P.void.C.P.void.begin and
                    System.Security.Sha512.Process.P.System.Security.Sha512.C.P.void.C.P.void.end.
                }
                parameter System.Security.Sha512.Process.P.System.Security.Sha512.C.P.void.C.P.void.begin
                {
                    description
                    {
                        Pointer to the beginning of bytes to process.
                    }
                }
                parameter System.Security.Sha512.Process.P.System.Security.Sha512.C.P.void.C.P.void.end
                {
                    description
                    {
                        Pointer to the end of bytes to process.
                    }
                }
            }
            function System.Security.Sha512.Process.P.System.Security.Sha512.C.P.void.int
            {
                description
                {
                    Process a block of memory.
                }
                parameter System.Security.Sha512.Process.P.System.Security.Sha512.C.P.void.int.buf
                {
                    description
                    {
                        Pointer to memory buffer.
                    }
                }
                parameter System.Security.Sha512.Process.P.System.Security.Sha512.C.P.void.int.count
                {
                    description
                    {
                        Number of bytes to process.
                    }
                }
            }
            function System.Security.Sha512.Reset.P.System.Security.Sha512
            {
                description
                {
                    Reset SHA-512 computation ready for computing another message.
                }
            }
        }
        function System.Security.GetSha1FileDigest.C.R.System.String
        {
            description
            {
                Returns SHA-1 hash value for a contents of given file as a hexadecimal string.
            }
            parameter System.Security.GetSha1FileDigest.C.R.System.String.filePath
            {
                description
                {
                    A file path.
                }
            }
            returns System.Security.GetSha1FileDigest.C.R.System.String.returnValue
            {
                description
                {
                    Returns SHA-1 hash value for a contents of given file as a hexadecimal string.
                }
            }
        }
        function System.Security.GetSha1MessageDigest.C.R.System.String
        {
            description
            {
                Returns SHA-1 hash value for a given string as a hexadecimal string.
            }
            parameter System.Security.GetSha1MessageDigest.C.R.System.String.message
            {
                description
                {
                    A string.
                }
            }
            returns System.Security.GetSha1MessageDigest.C.R.System.String.returnValue
            {
                description
                {
                    Returns SHA-1 hash value for a given string as a hexadecimal string.
                }
            }
        }
        function System.Security.GetSha256FileDigest.C.R.System.String
        {
            description
            {
                Returns SHA-256 hash value for a contents of given file as a hexadecimal string.
            }
            parameter System.Security.GetSha256FileDigest.C.R.System.String.filePath
            {
                description
                {
                    A file path.
                }
            }
            returns System.Security.GetSha256FileDigest.C.R.System.String.returnValue
            {
                description
                {
                    A file path.
                }
            }
        }
        function System.Security.GetSha256MessageDigest.C.R.System.String
        {
            description
            {
                Returns SHA-256 hash value for a given string as a hexadecimal string.
            }
            parameter System.Security.GetSha256MessageDigest.C.R.System.String.message
            {
                description
                {
                    A string.
                }
            }
            returns System.Security.GetSha256MessageDigest.C.R.System.String.returnValue
            {
                description
                {
                    Returns SHA-256 hash value for a given string as a hexadecimal string.
                }
            }
        }
        function System.Security.GetSha512FileDigest.C.R.System.String
        {
            description
            {
                Returns SHA-512 hash value for a contents of given file as a hexadecimal string.
            }
            parameter System.Security.GetSha512FileDigest.C.R.System.String.filePath
            {
                description
                {
                    A file path.
                }
            }
            returns System.Security.GetSha512FileDigest.C.R.System.String.returnValue
            {
                description
                {
                    Returns SHA-512 hash value for a contents of given file as a hexadecimal string.
                }
            }
        }
        function System.Security.GetSha512MessageDigest.C.R.System.String
        {
            description
            {
                Returns SHA-512 hash value for a given string.
            }
            parameter System.Security.GetSha512MessageDigest.C.R.System.String.message
            {
                description
                {
                    A string.
                }
            }
            returns System.Security.GetSha512MessageDigest.C.R.System.String.returnValue
            {
                description
                {
                    Returns SHA-256 hash value for a given string.
                }
            }
        }
        function System.Security.LeftRotate.uint.uint
        {
            description
            {
                Rotates bits of given uint left by given amount.
            }
            parameter System.Security.LeftRotate.uint.uint.n
            {
                description
                {
                    Number of bits to rotate.
                }
            }
            parameter System.Security.LeftRotate.uint.uint.x
            {
                description
                {
                    Value to rotate.
                }
            }
            returns System.Security.LeftRotate.uint.uint.returnValue
            {
                description
                {
                    Returns rotated value.
                }
            }
        }
        function System.Security.RightRotate.uint.uint
        {
            description
            {
                Rotates bits of given uint right by given amount.
            }
            parameter System.Security.RightRotate.uint.uint.n
            {
                description
                {
                    Number of bits to rotate.
                }
            }
            parameter System.Security.RightRotate.uint.uint.x
            {
                description
                {
                    Value to rotate.
                }
            }
            returns System.Security.RightRotate.uint.uint.returnValue
            {
                description
                {
                    Returns rotated value.
                }
            }
        }
        function System.Security.RightRotate.ulong.ulong
        {
            description
            {
                Rotates bits of given ulong right by given amount.
            }
            parameter System.Security.RightRotate.ulong.ulong.n
            {
                description
                {
                    Number of bits to rotate.
                }
            }
            parameter System.Security.RightRotate.ulong.ulong.x
            {
                description
                {
                    Value to rotate.
                }
            }
            returns System.Security.RightRotate.ulong.ulong.returnValue
            {
                description
                {
                    Returns rotated value.
                }
            }
        }
    }
    namespace System.Support
    {
        description
        {
        }
    }
    namespace System.Text
    {
        description
        {
            Contains classes and functions for manipulating text.
        }
        class System.Text.CodeFormatter
        {
            description
            {
                A class for generating indented text.
            }
            function System.Text.CodeFormatter.constructor.P.System.Text.CodeFormatter
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Text.CodeFormatter.constructor.P.System.Text.CodeFormatter.R.System.IO.OutputStream
            {
                description
                {
                    Constructor. Initalizes the the code formatter with the given output stream.
                }
                parameter System.Text.CodeFormatter.constructor.P.System.Text.CodeFormatter.R.System.IO.OutputStream.stream_
                {
                    description
                    {
                        An output stream.
                    }
                }
            }
            function System.Text.CodeFormatter.CurrentIndent.C.P.System.Text.CodeFormatter
            {
                description
                {
                    Returns the current indent in characters.
                }
                returns System.Text.CodeFormatter.CurrentIndent.C.P.System.Text.CodeFormatter.returnValue
                {
                    description
                    {
                        Returns the current indent in characters.
                    }
                }
            }
            function System.Text.CodeFormatter.DecIndent.P.System.Text.CodeFormatter
            {
                description
                {
                    Decreases the indent.
                }
            }
            function System.Text.CodeFormatter.IncIndent.P.System.Text.CodeFormatter
            {
                description
                {
                    Increases the indent.
                }
            }
            function System.Text.CodeFormatter.Indent.C.P.System.Text.CodeFormatter
            {
                description
                {
                    Returns the indent level.
                }
                returns System.Text.CodeFormatter.Indent.C.P.System.Text.CodeFormatter.returnValue
                {
                    description
                    {
                        Returns the indent level.
                    }
                }
            }
            function System.Text.CodeFormatter.IndentSize.C.P.System.Text.CodeFormatter
            {
                description
                {
                    Returns the number of characters to indent.
                }
                returns System.Text.CodeFormatter.IndentSize.C.P.System.Text.CodeFormatter.returnValue
                {
                    description
                    {
                        Returns the number of characters to indent.
                    }
                }
            }
            function System.Text.CodeFormatter.Line.C.P.System.Text.CodeFormatter
            {
                description
                {
                    Returns current line number.
                }
                returns System.Text.CodeFormatter.Line.C.P.System.Text.CodeFormatter.returnValue
                {
                    description
                    {
                        Returns current line number.
                    }
                }
            }
            function System.Text.CodeFormatter.SetIndentSize.P.System.Text.CodeFormatter.int
            {
                description
                {
                    Sets the number of characters to indent.
                }
                parameter System.Text.CodeFormatter.SetIndentSize.P.System.Text.CodeFormatter.int.indentSize_
                {
                    description
                    {
                        The number of characters to indent.
                    }
                }
            }
            function System.Text.CodeFormatter.SetLine.P.System.Text.CodeFormatter.int
            {
                description
                {
                    Sets current line number.
                }
                parameter System.Text.CodeFormatter.SetLine.P.System.Text.CodeFormatter.int.line_
                {
                    description
                    {
                        Line number.
                    }
                }
            }
            function System.Text.CodeFormatter.Write.P.System.Text.CodeFormatter.C.R.System.String
            {
                description
                {
                    If at the beginning of a line, writes a string indented with the current indent.
                    Otherwise writes the given string.
                }
                parameter System.Text.CodeFormatter.Write.P.System.Text.CodeFormatter.C.R.System.String.text
                {
                    description
                    {
                        A string to write.
                    }
                }
            }
            function System.Text.CodeFormatter.WriteLine.P.System.Text.CodeFormatter
            {
                description
                {
                    Writes end-of-line character.
                }
            }
            function System.Text.CodeFormatter.WriteLine.P.System.Text.CodeFormatter.C.R.System.String
            {
                description
                {
                    Writes given string using System.Text.CodeFormatter.Write.System.String.const.ref function
                    and then writes end-of-line character.
                }
                parameter System.Text.CodeFormatter.WriteLine.P.System.Text.CodeFormatter.C.R.System.String.text
                {
                    description
                    {
                        A string to write
                    }
                }
            }
        }
        function System.Text.CharStr.char
        {
            description
            {
                Returns a string representation of a character.
            }
            remarks
            {
                If the character is one of the C escape characters, returns a string containing the character
                prefixed with the backslash.
                Otherwise if the character is printable, returns a string containing the character.
                Otherwise returns a string containing the hexadecimal escape of the character.
            }
            parameter System.Text.CharStr.char.c
            {
                description
                {
                    A character to convert.
                }
            }
            returns System.Text.CharStr.char.returnValue
            {
                description
                {
                    Returns the string representation of the given character.
                }
            }
        }
        function System.Text.HexEscape.char
        {
            description
            {
                Returns a hexadecimal representation of the given character.
            }
            parameter System.Text.HexEscape.char.c
            {
                description
                {
                    A character.
                }
            }
            returns System.Text.HexEscape.char.returnValue
            {
                description
                {
                    Returns a hexadecimal representation of the given character.
                }
            }
        }
        function System.Text.MakeCharLiteral.char
        {
            description
            {
                Returns a character literal representation of a character.
            }
            remarks
            {
                Returns the character enclosed in apostrophes and escaped if necessary.
            }
            parameter System.Text.MakeCharLiteral.char.c
            {
                description
                {
                    A character to convert.
                }
            }
            returns System.Text.MakeCharLiteral.char.returnValue
            {
                description
                {
                    Returns a character literal representation of a character.
                }
            }
        }
        function System.Text.MakeStringLiteral.C.R.System.String
        {
            description
            {
                Returns a string literal representation of a string.
            }
            remarks
            {
                Returns the string enclosed in quotes and characters escaped if necessary.
            }
            parameter System.Text.MakeStringLiteral.C.R.System.String.s
            {
                description
                {
                    A string to convert.
                }
            }
            returns System.Text.MakeStringLiteral.C.R.System.String.returnValue
            {
                description
                {
                    Returns a string literal representation of a string.
                }
            }
        }
        function System.Text.StringStr.C.R.System.String
        {
            description
            {
                Returns a string where control characters of given string are escaped.
            }
            parameter System.Text.StringStr.C.R.System.String.s
            {
                description
                {
                    A string.
                }
            }
            returns System.Text.StringStr.C.R.System.String.returnValue
            {
                description
                {
                    Returns a string where control characters of given string are escaped.
                }
            }
        }
        function System.Text.Trim.C.R.System.String
        {
            description
            {
                Returns a string where white space from the beginning and end of given string are removed.
            }
            parameter System.Text.Trim.C.R.System.String.s
            {
                description
                {
                    A string to trim.
                }
            }
            returns System.Text.Trim.C.R.System.String.returnValue
            {
                description
                {
                    Returns a string where white space from the beginning and end of given string are removed.
                }
            }
        }
        function System.Text.TrimAll.C.R.System.String
        {
            description
            {
                Returns a string where white space from the beginning, middle and end of given string are removed.
                Replaces occurrences of white space in the middle of the given string with one space character.
            }
            parameter System.Text.TrimAll.C.R.System.String.s
            {
                description
                {
                    A string to trim.
                }
            }
            returns System.Text.TrimAll.C.R.System.String.returnValue
            {
                description
                {
                    Returns a string where white space from the beginning, middle and end of given string are removed.
                }
            }
        }
    }
    namespace System.Threading
    {
        description
        {
            Contains classes and functions for controlling multiple threads of execution.
        }
        concept System.Threading.Lockable.M
        {
            description
            {
                Lockable class contains Lock() and Unlock() member functions.
            }
            models
            {
                System.Threading.Mutex and System.Threading.RecursiveMutex are models of lockable.
            }
        }
        class System.Threading.ConditionVariable
        {
            description
            {
                Condition variables can be used as a communication mechanism among threads.
            }
            function System.Threading.ConditionVariable.constructor.P.System.Threading.ConditionVariable
            {
                description
                {
                    Constructor. Initializes the condition variable.
                }
            }
            function System.Threading.ConditionVariable.NotifyAll.P.System.Threading.ConditionVariable
            {
                description
                {
                    Unblock all threads waiting on this condition variable.
                }
            }
            function System.Threading.ConditionVariable.NotifyOne.P.System.Threading.ConditionVariable
            {
                description
                {
                    Unblock one thread waiting on this condition variable.
                }
            }
            function System.Threading.ConditionVariable.Wait.P.System.Threading.ConditionVariable.R.System.Threading.Mutex
            {
                description
                {
                    Wait on a condition variable to become signaled (notified).
                    Before calling this function, the mutex associated with this condition variable
                    must be locked.
                }
                parameter System.Threading.ConditionVariable.Wait.P.System.Threading.ConditionVariable.R.System.Threading.Mutex.m
                {
                    description
                    {
                        Mutex associated with this condition variable.
                    }
                }
            }
            function System.Threading.ConditionVariable.WaitFor.P.System.Threading.ConditionVariable.R.System.Threading.Mutex.System.Duration
            {
                description
                {
                    Wait for specified duration that the condition variable to become signaled (notified).
                    Before calling this function, the mutex associated with this condition variable
                    must be locked.
                }
                parameter System.Threading.ConditionVariable.WaitFor.P.System.Threading.ConditionVariable.R.System.Threading.Mutex.System.Duration.d
                {
                    description
                    {
                        Duration to wait.
                    }
                }
                parameter System.Threading.ConditionVariable.WaitFor.P.System.Threading.ConditionVariable.R.System.Threading.Mutex.System.Duration.m
                {
                    description
                    {
                        Mutex associated with this condition variable.
                    }
                }
                returns System.Threading.ConditionVariable.WaitFor.P.System.Threading.ConditionVariable.R.System.Threading.Mutex.System.Duration.returnValue
                {
                    description
                    {
                        Returns true, if specified duration has elapsed without the condition variable to become signaled,
                        false otherwise.
                    }
                }
            }
            function System.Threading.ConditionVariable.WaitUntil.P.System.Threading.ConditionVariable.R.System.Threading.Mutex.System.TimePoint
            {
                description
                {
                    Wait until specified time point that the condition variable to become signaled (notified).
                    Before calling this function, the mutex associated with this condition variable
                    must be locked.
                }
                parameter System.Threading.ConditionVariable.WaitUntil.P.System.Threading.ConditionVariable.R.System.Threading.Mutex.System.TimePoint.m
                {
                    description
                    {
                        Mutex associated with this condition variable.
                    }
                }
                parameter System.Threading.ConditionVariable.WaitUntil.P.System.Threading.ConditionVariable.R.System.Threading.Mutex.System.TimePoint.tp
                {
                    description
                    {
                        Due time.
                    }
                }
                returns System.Threading.ConditionVariable.WaitUntil.P.System.Threading.ConditionVariable.R.System.Threading.Mutex.System.TimePoint.returnValue
                {
                    description
                    {
                        Returns true, if specified time point has been reached without the condition variable to become signaled,
                        false otherwise.
                    }
                }
            }
            function System.Threading.ConditionVariable.destructor.P.System.Threading.ConditionVariable
            {
                description
                {
                    Destructor. Destroys the condition variable.
                }
            }
        }
        class System.Threading.LockGuard.M
        {
            description
            {
                Helper class for locking and unlocking lockable object (mutex or recursive mutex).
            }
            function System.Threading.LockGuard.M.constructor.P.System.Threading.LockGuard.M
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Threading.LockGuard.M.GetLock.P.System.Threading.LockGuard.M
            {
                description
                {
                    Returns the lockable object.
                }
                returns System.Threading.LockGuard.M.GetLock.P.System.Threading.LockGuard.M.returnValue
                {
                    description
                    {
                        Returns the lockable object.
                    }
                }
            }
            function System.Threading.LockGuard.M.constructor.P.System.Threading.LockGuard.M.R.M
            {
                description
                {
                    Locks the lockable object.
                }
                parameter System.Threading.LockGuard.M.constructor.P.System.Threading.LockGuard.M.R.M.m_
                {
                    description
                    {
                        A lockable object.
                    }
                }
            }
            function System.Threading.LockGuard.M.destructor.P.System.Threading.LockGuard.M
            {
                description
                {
                    Unlocks the lockable object.
                }
            }
        }
        class System.Threading.Mutex
        {
            description
            {
                Mutexes are a synchronization mechanism for controlling threads' access to some data.
            }
            remarks
            {
                Basic mutex cannot be locked recursively many times by same thread.
            }
            function System.Threading.Mutex.constructor.P.System.Threading.Mutex
            {
                description
                {
                    Constructor. Initializes the mutex.
                }
            }
            function System.Threading.Mutex.Handle.C.P.System.Threading.Mutex
            {
                description
                {
                    Returns pointer to the mutex handle.
                }
                returns System.Threading.Mutex.Handle.C.P.System.Threading.Mutex.returnValue
                {
                    description
                    {
                        Returns pointer to the mutex handle.
                    }
                }
            }
            function System.Threading.Mutex.Lock.P.System.Threading.Mutex
            {
                description
                {
                    Locks the mutex.
                }
            }
            function System.Threading.Mutex.TryLock.P.System.Threading.Mutex
            {
                description
                {
                    If the mutex is currently unlocked, locks the mutex
                    and returns true.
                    Otherwise returns false.
                }
                returns System.Threading.Mutex.TryLock.P.System.Threading.Mutex.returnValue
                {
                    description
                    {
                        Returns true, if the mutex is currently unlocked,
                        false otherwise.
                    }
                }
            }
            function System.Threading.Mutex.Unlock.P.System.Threading.Mutex
            {
                description
                {
                    Unlocks the mutex.
                }
            }
            function System.Threading.Mutex.destructor.P.System.Threading.Mutex
            {
                description
                {
                    Destructor. Destroys the mutex.
                }
            }
        }
        class System.Threading.RecursiveMutex
        {
            description
            {
                Mutexes are a synchronization mechanism for controlling threads' access to some data.
                A recursive mutex allows the calling thread lock the mutex many times recursively.
            }
            function System.Threading.RecursiveMutex.constructor.P.System.Threading.RecursiveMutex
            {
                description
                {
                    Constructor. Initializes the recursive mutex.
                }
            }
            function System.Threading.RecursiveMutex.destructor.P.System.Threading.RecursiveMutex
            {
                description
                {
                    Destructor.
                }
            }
        }
        class System.Threading.Thread
        {
            description
            {
                Represents thread of execution.
            }
            function System.Threading.Thread.constructor.P.System.Threading.Thread
            {
                description
                {
                    Default constructor. Initializes a thread that is
                    not associated with operating system thread.
                }
            }
            function System.Threading.Thread.constructor.P.System.Threading.Thread.RR.System.Threading.Thread
            {
                description
                {
                    Move constructor.
                }
                parameter System.Threading.Thread.constructor.P.System.Threading.Thread.RR.System.Threading.Thread.that
                {
                    description
                    {
                        A thread to move from.
                    }
                }
            }
            function System.Threading.Thread.operator.assign.P.System.Threading.Thread.RR.System.Threading.Thread
            {
                description
                {
                    Move assignment.
                }
                parameter System.Threading.Thread.operator.assign.P.System.Threading.Thread.RR.System.Threading.Thread.that
                {
                    description
                    {
                        A thread to assign from.
                    }
                }
            }
            function System.Threading.Thread.Detach.P.System.Threading.Thread
            {
                description
                {
                    Detaches the thread.
                    Detached thread cannot be joined.
                }
            }
            function System.Threading.Thread.Handle.C.P.System.Threading.Thread
            {
                description
                {
                    Returns thread handle.
                }
                returns System.Threading.Thread.Handle.C.P.System.Threading.Thread.returnValue
                {
                    description
                    {
                        Returns thread handle.
                    }
                }
            }
            function System.Threading.Thread.Join.P.System.Threading.Thread
            {
                description
                {
                    Waits for the thread to terminate.
                }
            }
            function System.Threading.Thread.Joinable.C.P.System.Threading.Thread
            {
                description
                {
                    Returns true, if the thread can be joined, false otherwise.
                }
                returns System.Threading.Thread.Joinable.C.P.System.Threading.Thread.returnValue
                {
                    description
                    {
                        Returns true, if the thread can be joined, false otherwise.
                    }
                }
            }
            function System.Threading.Thread.constructor.P.System.Threading.Thread.System.Threading.ThreadFun.P.void
            {
                description
                {
                    Constructor. Associates the thread with an operating system thread and
                    starts executing the specified start function asynchronously.
                }
                parameter System.Threading.Thread.constructor.P.System.Threading.Thread.System.Threading.ThreadFun.P.void.arg
                {
                    description
                    {
                        Argument to the thread start function.
                    }
                }
                parameter System.Threading.Thread.constructor.P.System.Threading.Thread.System.Threading.ThreadFun.P.void.start
                {
                    description
                    {
                        A thread start function.
                    }
                }
            }
            function System.Threading.Thread.destructor.P.System.Threading.Thread
            {
                description
                {
                    If the thread is associated with an operating system thread and it is not joined or detached,
                    calls exit with System.Threading.EXIT_THREADS_NOT_JOINED exit status.
                }
            }
        }
        class System.Threading.ThreadingException
        {
            description
            {
                Exception class thrown when some thread operation fails.
            }
            function System.Threading.ThreadingException.constructor.P.System.Threading.ThreadingException
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Threading.ThreadingException.constructor.P.System.Threading.ThreadingException.C.R.System.Threading.ThreadingException
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Threading.ThreadingException.constructor.P.System.Threading.ThreadingException.C.R.System.Threading.ThreadingException.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Threading.ThreadingException.operator.assign.P.System.Threading.ThreadingException.C.R.System.Threading.ThreadingException
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Threading.ThreadingException.operator.assign.P.System.Threading.ThreadingException.C.R.System.Threading.ThreadingException.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Threading.ThreadingException.constructor.P.System.Threading.ThreadingException.RR.System.Threading.ThreadingException
            {
                description
                {
                    Move constructor.
                }
                parameter System.Threading.ThreadingException.constructor.P.System.Threading.ThreadingException.RR.System.Threading.ThreadingException.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Threading.ThreadingException.operator.assign.P.System.Threading.ThreadingException.RR.System.Threading.ThreadingException
            {
                description
                {
                    Move assignment.
                }
                parameter System.Threading.ThreadingException.operator.assign.P.System.Threading.ThreadingException.RR.System.Threading.ThreadingException.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Threading.ThreadingException.constructor.P.System.Threading.ThreadingException.C.R.System.String.C.R.System.String
            {
                description
                {
                    Constructor. Initializes the threading exception with the specified operation description and failure reason.
                }
                parameter System.Threading.ThreadingException.constructor.P.System.Threading.ThreadingException.C.R.System.String.C.R.System.String.operation
                {
                    description
                    {
                        Description of the thread operation.
                    }
                }
                parameter System.Threading.ThreadingException.constructor.P.System.Threading.ThreadingException.C.R.System.String.C.R.System.String.reason
                {
                    description
                    {
                        Reason for failure.
                    }
                }
            }
            function System.Threading.ThreadingException.destructor.P.System.Threading.ThreadingException
            {
                description
                {
                    Destructor.
                }
            }
        }
        function System.Threading.SleepFor.System.Duration
        {
            description
            {
                Puts the calling thread to sleep for specified duration.
            }
            parameter System.Threading.SleepFor.System.Duration.d
            {
                description
                {
                    Duration to sleep.
                }
            }
        }
        function System.Threading.SleepUntil.System.TimePoint
        {
            description
            {
                Puts the calling thread to sleep until specified time point has been reached.
            }
            parameter System.Threading.SleepUntil.System.TimePoint.tp
            {
                description
                {
                    Time point to sleep until.
                }
            }
        }
        function System.Threading.ThreadStart.P.void
        {
            description
            {
                Implementation detail.
            }
            parameter System.Threading.ThreadStart.P.void.arg
            {
                description
                {
                }
            }
        }
        function System.Threading.operator.equal.C.R.System.Threading.Thread.C.R.System.Threading.Thread
        {
            description
            {
                Returns true, if the specified threads are associated with the same operation system thread, false otherwise.
            }
            parameter System.Threading.operator.equal.C.R.System.Threading.Thread.C.R.System.Threading.Thread.t1
            {
                description
                {
                    The first thread.
                }
            }
            parameter System.Threading.operator.equal.C.R.System.Threading.Thread.C.R.System.Threading.Thread.t2
            {
                description
                {
                    The second thread.
                }
            }
            returns System.Threading.operator.equal.C.R.System.Threading.Thread.C.R.System.Threading.Thread.returnValue
            {
                description
                {
                    Returns true, if the specified threads are associated with the same operation system thread, false otherwise.
                }
            }
            owner System.Threading.Thread;
        }
        delegate System.Threading.ThreadFun
        {
            description
            {
                A thread start function delegate.
            }
            parameter System.Threading.ThreadFun.arg
            {
                description
                {
                    Argument given to the thread start function.
                }
            }
        }
        constant System.Threading.EXIT_THREADS_NOT_JOINED
        {
            description
            {
                Program exit status when all threads are not 
                joined or detached.
            }
        }
    }
}
