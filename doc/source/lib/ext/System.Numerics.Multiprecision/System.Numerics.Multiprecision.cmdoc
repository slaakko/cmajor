library System.Numerics.Multiprecision
{
    description
    {
        System.Numerics.Multiprecision is a multiple precision arithmetic library.
        The library is implemented using GNU Multiple Precision Arithmetic Library 
        ("\url{http://gmplib.org/}").
    }
    chapter <usage.tex>;
    chapter <compiling.tex>;
    namespace 
    {
        description
        {
        }
        concept Common.T.U
        {
            description
            {
            }
        }
        concept Convertible.T.U
        {
            description
            {
            }
        }
        concept Derived.T.U
        {
            description
            {
            }
        }
        concept ExplicitlyConvertible.T.U
        {
            description
            {
            }
        }
        concept NonReferenceType.T
        {
            description
            {
            }
        }
        concept Same.T.U
        {
            description
            {
            }
        }
    }
    namespace System
    {
        description
        {
        }
        class System.BinaryFun.System.String.char.System.String.char.bool
        {
            description
            {
            }
            function System.BinaryFun.System.String.char.System.String.char.bool.constructor.P.System.BinaryFun.System.String.char.System.String.char.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryFun.System.String.char.System.String.char.bool.constructor.P.System.BinaryFun.System.String.char.System.String.char.bool.C.R.System.BinaryFun.System.String.char.System.String.char.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryFun.System.String.char.System.String.char.bool.constructor.P.System.BinaryFun.System.String.char.System.String.char.bool.C.R.System.BinaryFun.System.String.char.System.String.char.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryFun.System.String.char.System.String.char.bool.operator.assign.P.System.BinaryFun.System.String.char.System.String.char.bool.C.R.System.BinaryFun.System.String.char.System.String.char.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryFun.System.String.char.System.String.char.bool.operator.assign.P.System.BinaryFun.System.String.char.System.String.char.bool.C.R.System.BinaryFun.System.String.char.System.String.char.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryFun.System.String.char.System.String.char.bool.constructor.P.System.BinaryFun.System.String.char.System.String.char.bool.RR.System.BinaryFun.System.String.char.System.String.char.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryFun.System.String.char.System.String.char.bool.constructor.P.System.BinaryFun.System.String.char.System.String.char.bool.RR.System.BinaryFun.System.String.char.System.String.char.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryFun.System.String.char.System.String.char.bool.operator.assign.P.System.BinaryFun.System.String.char.System.String.char.bool.RR.System.BinaryFun.System.String.char.System.String.char.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryFun.System.String.char.System.String.char.bool.operator.assign.P.System.BinaryFun.System.String.char.System.String.char.bool.RR.System.BinaryFun.System.String.char.System.String.char.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool
        {
            description
            {
            }
            function System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.constructor.P.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.constructor.P.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.C.R.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.constructor.P.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.C.R.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.operator.assign.P.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.C.R.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.operator.assign.P.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.C.R.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.constructor.P.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.RR.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.constructor.P.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.RR.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.operator.assign.P.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.RR.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.operator.assign.P.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.RR.System.BinaryFun.System.Unicode.Category.System.Unicode.Category.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.BinaryFun.uchar.uchar.bool
        {
            description
            {
            }
            function System.BinaryFun.uchar.uchar.bool.constructor.P.System.BinaryFun.uchar.uchar.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryFun.uchar.uchar.bool.constructor.P.System.BinaryFun.uchar.uchar.bool.C.R.System.BinaryFun.uchar.uchar.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryFun.uchar.uchar.bool.constructor.P.System.BinaryFun.uchar.uchar.bool.C.R.System.BinaryFun.uchar.uchar.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryFun.uchar.uchar.bool.operator.assign.P.System.BinaryFun.uchar.uchar.bool.C.R.System.BinaryFun.uchar.uchar.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryFun.uchar.uchar.bool.operator.assign.P.System.BinaryFun.uchar.uchar.bool.C.R.System.BinaryFun.uchar.uchar.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryFun.uchar.uchar.bool.constructor.P.System.BinaryFun.uchar.uchar.bool.RR.System.BinaryFun.uchar.uchar.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryFun.uchar.uchar.bool.constructor.P.System.BinaryFun.uchar.uchar.bool.RR.System.BinaryFun.uchar.uchar.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryFun.uchar.uchar.bool.operator.assign.P.System.BinaryFun.uchar.uchar.bool.RR.System.BinaryFun.uchar.uchar.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryFun.uchar.uchar.bool.operator.assign.P.System.BinaryFun.uchar.uchar.bool.RR.System.BinaryFun.uchar.uchar.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.BinaryPred.System.String.char.System.String.char
        {
            description
            {
            }
            function System.BinaryPred.System.String.char.System.String.char.constructor.P.System.BinaryPred.System.String.char.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryPred.System.String.char.System.String.char.constructor.P.System.BinaryPred.System.String.char.System.String.char.C.R.System.BinaryPred.System.String.char.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryPred.System.String.char.System.String.char.constructor.P.System.BinaryPred.System.String.char.System.String.char.C.R.System.BinaryPred.System.String.char.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryPred.System.String.char.System.String.char.operator.assign.P.System.BinaryPred.System.String.char.System.String.char.C.R.System.BinaryPred.System.String.char.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryPred.System.String.char.System.String.char.operator.assign.P.System.BinaryPred.System.String.char.System.String.char.C.R.System.BinaryPred.System.String.char.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryPred.System.String.char.System.String.char.constructor.P.System.BinaryPred.System.String.char.System.String.char.RR.System.BinaryPred.System.String.char.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryPred.System.String.char.System.String.char.constructor.P.System.BinaryPred.System.String.char.System.String.char.RR.System.BinaryPred.System.String.char.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryPred.System.String.char.System.String.char.operator.assign.P.System.BinaryPred.System.String.char.System.String.char.RR.System.BinaryPred.System.String.char.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryPred.System.String.char.System.String.char.operator.assign.P.System.BinaryPred.System.String.char.System.String.char.RR.System.BinaryPred.System.String.char.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.BinaryPred.System.Unicode.Category.System.Unicode.Category
        {
            description
            {
            }
            function System.BinaryPred.System.Unicode.Category.System.Unicode.Category.constructor.P.System.BinaryPred.System.Unicode.Category.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryPred.System.Unicode.Category.System.Unicode.Category.constructor.P.System.BinaryPred.System.Unicode.Category.System.Unicode.Category.C.R.System.BinaryPred.System.Unicode.Category.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryPred.System.Unicode.Category.System.Unicode.Category.constructor.P.System.BinaryPred.System.Unicode.Category.System.Unicode.Category.C.R.System.BinaryPred.System.Unicode.Category.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryPred.System.Unicode.Category.System.Unicode.Category.operator.assign.P.System.BinaryPred.System.Unicode.Category.System.Unicode.Category.C.R.System.BinaryPred.System.Unicode.Category.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryPred.System.Unicode.Category.System.Unicode.Category.operator.assign.P.System.BinaryPred.System.Unicode.Category.System.Unicode.Category.C.R.System.BinaryPred.System.Unicode.Category.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryPred.System.Unicode.Category.System.Unicode.Category.constructor.P.System.BinaryPred.System.Unicode.Category.System.Unicode.Category.RR.System.BinaryPred.System.Unicode.Category.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryPred.System.Unicode.Category.System.Unicode.Category.constructor.P.System.BinaryPred.System.Unicode.Category.System.Unicode.Category.RR.System.BinaryPred.System.Unicode.Category.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryPred.System.Unicode.Category.System.Unicode.Category.operator.assign.P.System.BinaryPred.System.Unicode.Category.System.Unicode.Category.RR.System.BinaryPred.System.Unicode.Category.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryPred.System.Unicode.Category.System.Unicode.Category.operator.assign.P.System.BinaryPred.System.Unicode.Category.System.Unicode.Category.RR.System.BinaryPred.System.Unicode.Category.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.BinaryPred.uchar.uchar
        {
            description
            {
            }
            function System.BinaryPred.uchar.uchar.constructor.P.System.BinaryPred.uchar.uchar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryPred.uchar.uchar.constructor.P.System.BinaryPred.uchar.uchar.C.R.System.BinaryPred.uchar.uchar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryPred.uchar.uchar.constructor.P.System.BinaryPred.uchar.uchar.C.R.System.BinaryPred.uchar.uchar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryPred.uchar.uchar.operator.assign.P.System.BinaryPred.uchar.uchar.C.R.System.BinaryPred.uchar.uchar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryPred.uchar.uchar.operator.assign.P.System.BinaryPred.uchar.uchar.C.R.System.BinaryPred.uchar.uchar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryPred.uchar.uchar.constructor.P.System.BinaryPred.uchar.uchar.RR.System.BinaryPred.uchar.uchar
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryPred.uchar.uchar.constructor.P.System.BinaryPred.uchar.uchar.RR.System.BinaryPred.uchar.uchar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryPred.uchar.uchar.operator.assign.P.System.BinaryPred.uchar.uchar.RR.System.BinaryPred.uchar.uchar
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryPred.uchar.uchar.operator.assign.P.System.BinaryPred.uchar.uchar.RR.System.BinaryPred.uchar.uchar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.EqualTo.System.String.char
        {
            description
            {
            }
            function System.EqualTo.System.String.char.constructor.P.System.EqualTo.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.EqualTo.System.String.char.constructor.P.System.EqualTo.System.String.char.C.R.System.EqualTo.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.EqualTo.System.String.char.constructor.P.System.EqualTo.System.String.char.C.R.System.EqualTo.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.EqualTo.System.String.char.operator.assign.P.System.EqualTo.System.String.char.C.R.System.EqualTo.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.EqualTo.System.String.char.operator.assign.P.System.EqualTo.System.String.char.C.R.System.EqualTo.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.EqualTo.System.String.char.constructor.P.System.EqualTo.System.String.char.RR.System.EqualTo.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.EqualTo.System.String.char.constructor.P.System.EqualTo.System.String.char.RR.System.EqualTo.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.EqualTo.System.String.char.operator.assign.P.System.EqualTo.System.String.char.RR.System.EqualTo.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.EqualTo.System.String.char.operator.assign.P.System.EqualTo.System.String.char.RR.System.EqualTo.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.EqualTo.System.Unicode.Category
        {
            description
            {
            }
            function System.EqualTo.System.Unicode.Category.constructor.P.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.EqualTo.System.Unicode.Category.constructor.P.System.EqualTo.System.Unicode.Category.C.R.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.EqualTo.System.Unicode.Category.constructor.P.System.EqualTo.System.Unicode.Category.C.R.System.EqualTo.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.EqualTo.System.Unicode.Category.operator.assign.P.System.EqualTo.System.Unicode.Category.C.R.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.EqualTo.System.Unicode.Category.operator.assign.P.System.EqualTo.System.Unicode.Category.C.R.System.EqualTo.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.EqualTo.System.Unicode.Category.constructor.P.System.EqualTo.System.Unicode.Category.RR.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.EqualTo.System.Unicode.Category.constructor.P.System.EqualTo.System.Unicode.Category.RR.System.EqualTo.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.EqualTo.System.Unicode.Category.operator.assign.P.System.EqualTo.System.Unicode.Category.RR.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.EqualTo.System.Unicode.Category.operator.assign.P.System.EqualTo.System.Unicode.Category.RR.System.EqualTo.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.EqualTo.uchar
        {
            description
            {
            }
            function System.EqualTo.uchar.constructor.P.System.EqualTo.uchar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.EqualTo.uchar.constructor.P.System.EqualTo.uchar.C.R.System.EqualTo.uchar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.EqualTo.uchar.constructor.P.System.EqualTo.uchar.C.R.System.EqualTo.uchar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.EqualTo.uchar.operator.assign.P.System.EqualTo.uchar.C.R.System.EqualTo.uchar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.EqualTo.uchar.operator.assign.P.System.EqualTo.uchar.C.R.System.EqualTo.uchar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.EqualTo.uchar.constructor.P.System.EqualTo.uchar.RR.System.EqualTo.uchar
            {
                description
                {
                    Move constructor.
                }
                parameter System.EqualTo.uchar.constructor.P.System.EqualTo.uchar.RR.System.EqualTo.uchar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.EqualTo.uchar.operator.assign.P.System.EqualTo.uchar.RR.System.EqualTo.uchar
            {
                description
                {
                    Move assignment.
                }
                parameter System.EqualTo.uchar.operator.assign.P.System.EqualTo.uchar.RR.System.EqualTo.uchar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool
        {
            description
            {
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.C.R.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.C.R.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.operator.assign.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.C.R.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.operator.assign.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.C.R.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.RR.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.RR.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.operator.assign.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.RR.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.operator.assign.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.RR.System.Pair.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool
        {
            description
            {
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.C.R.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.C.R.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.operator.assign.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.C.R.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.operator.assign.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.C.R.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.RR.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.RR.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.operator.assign.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.RR.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.operator.assign.P.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.RR.System.Pair.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool
        {
            description
            {
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.C.R.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.C.R.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.operator.assign.P.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.C.R.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.operator.assign.P.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.C.R.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.RR.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.constructor.P.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.RR.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.operator.assign.P.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.RR.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.operator.assign.P.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.RR.System.Pair.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.String.char.System.Unicode.Category
        {
            description
            {
            }
            function System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Pair.System.String.char.System.Unicode.Category.RR.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Pair.System.String.char.System.Unicode.Category.RR.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Pair.System.String.char.System.Unicode.Category.RR.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Pair.System.String.char.System.Unicode.Category.RR.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.Unicode.Category.System.String.char
        {
            description
            {
            }
            function System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Pair.System.Unicode.Category.System.String.char.RR.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Pair.System.Unicode.Category.System.String.char.RR.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Pair.System.Unicode.Category.System.String.char.RR.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Pair.System.Unicode.Category.System.String.char.RR.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.uhuge.System.uhuge
        {
            description
            {
            }
            function System.Pair.System.uhuge.System.uhuge.constructor.P.System.Pair.System.uhuge.System.uhuge
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.uhuge.System.uhuge.constructor.P.System.Pair.System.uhuge.System.uhuge.C.R.System.Pair.System.uhuge.System.uhuge
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.uhuge.System.uhuge.constructor.P.System.Pair.System.uhuge.System.uhuge.C.R.System.Pair.System.uhuge.System.uhuge.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.uhuge.System.uhuge.operator.assign.P.System.Pair.System.uhuge.System.uhuge.C.R.System.Pair.System.uhuge.System.uhuge
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.uhuge.System.uhuge.operator.assign.P.System.Pair.System.uhuge.System.uhuge.C.R.System.Pair.System.uhuge.System.uhuge.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.uhuge.System.uhuge.constructor.P.System.Pair.System.uhuge.System.uhuge.RR.System.Pair.System.uhuge.System.uhuge
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.uhuge.System.uhuge.constructor.P.System.Pair.System.uhuge.System.uhuge.RR.System.Pair.System.uhuge.System.uhuge.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.uhuge.System.uhuge.operator.assign.P.System.Pair.System.uhuge.System.uhuge.RR.System.Pair.System.uhuge.System.uhuge
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.uhuge.System.uhuge.operator.assign.P.System.Pair.System.uhuge.System.uhuge.RR.System.Pair.System.uhuge.System.uhuge.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.uhuge.uint
        {
            description
            {
            }
            function System.Pair.System.uhuge.uint.constructor.P.System.Pair.System.uhuge.uint
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.uhuge.uint.constructor.P.System.Pair.System.uhuge.uint.C.R.System.Pair.System.uhuge.uint
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.uhuge.uint.constructor.P.System.Pair.System.uhuge.uint.C.R.System.Pair.System.uhuge.uint.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.uhuge.uint.operator.assign.P.System.Pair.System.uhuge.uint.C.R.System.Pair.System.uhuge.uint
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.uhuge.uint.operator.assign.P.System.Pair.System.uhuge.uint.C.R.System.Pair.System.uhuge.uint.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.uhuge.uint.constructor.P.System.Pair.System.uhuge.uint.RR.System.Pair.System.uhuge.uint
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.uhuge.uint.constructor.P.System.Pair.System.uhuge.uint.RR.System.Pair.System.uhuge.uint.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.uhuge.uint.operator.assign.P.System.Pair.System.uhuge.uint.RR.System.Pair.System.uhuge.uint
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.uhuge.uint.operator.assign.P.System.Pair.System.uhuge.uint.RR.System.Pair.System.uhuge.uint.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.int.System.Handle
        {
            description
            {
            }
            function System.Pair.int.System.Handle.constructor.P.System.Pair.int.System.Handle
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.int.System.Handle.constructor.P.System.Pair.int.System.Handle.C.R.System.Pair.int.System.Handle
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.int.System.Handle.constructor.P.System.Pair.int.System.Handle.C.R.System.Pair.int.System.Handle.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.int.System.Handle.operator.assign.P.System.Pair.int.System.Handle.C.R.System.Pair.int.System.Handle
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.int.System.Handle.operator.assign.P.System.Pair.int.System.Handle.C.R.System.Pair.int.System.Handle.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.int.System.Handle.constructor.P.System.Pair.int.System.Handle.RR.System.Pair.int.System.Handle
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.int.System.Handle.constructor.P.System.Pair.int.System.Handle.RR.System.Pair.int.System.Handle.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.int.System.Handle.operator.assign.P.System.Pair.int.System.Handle.RR.System.Pair.int.System.Handle
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.int.System.Handle.operator.assign.P.System.Pair.int.System.Handle.RR.System.Pair.int.System.Handle.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.int.System.String.char
        {
            description
            {
            }
            function System.Pair.int.System.String.char.constructor.P.System.Pair.int.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.int.System.String.char.constructor.P.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.int.System.String.char.constructor.P.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.int.System.String.char.operator.assign.P.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.int.System.String.char.operator.assign.P.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.int.System.String.char.constructor.P.System.Pair.int.System.String.char.RR.System.Pair.int.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.int.System.String.char.constructor.P.System.Pair.int.System.String.char.RR.System.Pair.int.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.int.System.String.char.operator.assign.P.System.Pair.int.System.String.char.RR.System.Pair.int.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.int.System.String.char.operator.assign.P.System.Pair.int.System.String.char.RR.System.Pair.int.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.uchar.P.System.Unicode.CharacterInfo
        {
            description
            {
            }
            function System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle
        {
            description
            {
            }
            function System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.constructor.P.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.constructor.P.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.C.R.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.constructor.P.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.C.R.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.operator.assign.P.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.C.R.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.operator.assign.P.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.C.R.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.constructor.P.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.RR.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.constructor.P.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.RR.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.operator.assign.P.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.RR.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.operator.assign.P.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.RR.System.RandomAccessIter.System.Pair.int.System.Handle.R.System.Pair.int.System.Handle.P.System.Pair.int.System.Handle.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char
        {
            description
            {
            }
            function System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.constructor.P.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.constructor.P.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.C.R.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.constructor.P.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.C.R.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.operator.assign.P.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.C.R.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.operator.assign.P.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.C.R.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.constructor.P.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.RR.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.constructor.P.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.RR.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.operator.assign.P.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.RR.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.operator.assign.P.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.RR.System.RandomAccessIter.System.Pair.int.System.String.char.C.R.System.Pair.int.System.String.char.C.P.System.Pair.int.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.byte.C.R.byte.C.P.byte
        {
            description
            {
            }
            function System.RandomAccessIter.byte.C.R.byte.C.P.byte.constructor.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.byte.C.R.byte.C.P.byte.constructor.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.C.R.System.RandomAccessIter.byte.C.R.byte.C.P.byte
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.byte.C.R.byte.C.P.byte.constructor.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.C.R.System.RandomAccessIter.byte.C.R.byte.C.P.byte.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.byte.C.R.byte.C.P.byte.operator.assign.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.C.R.System.RandomAccessIter.byte.C.R.byte.C.P.byte
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.byte.C.R.byte.C.P.byte.operator.assign.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.C.R.System.RandomAccessIter.byte.C.R.byte.C.P.byte.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.byte.C.R.byte.C.P.byte.constructor.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.RR.System.RandomAccessIter.byte.C.R.byte.C.P.byte
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.byte.C.R.byte.C.P.byte.constructor.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.RR.System.RandomAccessIter.byte.C.R.byte.C.P.byte.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.byte.C.R.byte.C.P.byte.operator.assign.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.RR.System.RandomAccessIter.byte.C.R.byte.C.P.byte
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.byte.C.R.byte.C.P.byte.operator.assign.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.RR.System.RandomAccessIter.byte.C.R.byte.C.P.byte.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.char.R.char.P.char
        {
            description
            {
            }
            function System.RandomAccessIter.char.R.char.P.char.constructor.P.System.RandomAccessIter.char.R.char.P.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.char.R.char.P.char.constructor.P.System.RandomAccessIter.char.R.char.P.char.C.R.System.RandomAccessIter.char.R.char.P.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.char.R.char.P.char.constructor.P.System.RandomAccessIter.char.R.char.P.char.C.R.System.RandomAccessIter.char.R.char.P.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.char.R.char.P.char.operator.assign.P.System.RandomAccessIter.char.R.char.P.char.C.R.System.RandomAccessIter.char.R.char.P.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.char.R.char.P.char.operator.assign.P.System.RandomAccessIter.char.R.char.P.char.C.R.System.RandomAccessIter.char.R.char.P.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.char.R.char.P.char.constructor.P.System.RandomAccessIter.char.R.char.P.char.RR.System.RandomAccessIter.char.R.char.P.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.char.R.char.P.char.constructor.P.System.RandomAccessIter.char.R.char.P.char.RR.System.RandomAccessIter.char.R.char.P.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.char.R.char.P.char.operator.assign.P.System.RandomAccessIter.char.R.char.P.char.RR.System.RandomAccessIter.char.R.char.P.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.char.R.char.P.char.operator.assign.P.System.RandomAccessIter.char.R.char.P.char.RR.System.RandomAccessIter.char.R.char.P.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.char.C.R.char.C.P.char
        {
            description
            {
            }
            function System.RandomAccessIter.char.C.R.char.C.P.char.constructor.P.System.RandomAccessIter.char.C.R.char.C.P.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.char.C.R.char.C.P.char.constructor.P.System.RandomAccessIter.char.C.R.char.C.P.char.C.R.System.RandomAccessIter.char.C.R.char.C.P.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.char.C.R.char.C.P.char.constructor.P.System.RandomAccessIter.char.C.R.char.C.P.char.C.R.System.RandomAccessIter.char.C.R.char.C.P.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.char.C.R.char.C.P.char.operator.assign.P.System.RandomAccessIter.char.C.R.char.C.P.char.C.R.System.RandomAccessIter.char.C.R.char.C.P.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.char.C.R.char.C.P.char.operator.assign.P.System.RandomAccessIter.char.C.R.char.C.P.char.C.R.System.RandomAccessIter.char.C.R.char.C.P.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.char.C.R.char.C.P.char.constructor.P.System.RandomAccessIter.char.C.R.char.C.P.char.RR.System.RandomAccessIter.char.C.R.char.C.P.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.char.C.R.char.C.P.char.constructor.P.System.RandomAccessIter.char.C.R.char.C.P.char.RR.System.RandomAccessIter.char.C.R.char.C.P.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.char.C.R.char.C.P.char.operator.assign.P.System.RandomAccessIter.char.C.R.char.C.P.char.RR.System.RandomAccessIter.char.C.R.char.C.P.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.char.C.R.char.C.P.char.operator.assign.P.System.RandomAccessIter.char.C.R.char.C.P.char.RR.System.RandomAccessIter.char.C.R.char.C.P.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.int.C.R.int.C.P.int
        {
            description
            {
            }
            function System.RandomAccessIter.int.C.R.int.C.P.int.constructor.P.System.RandomAccessIter.int.C.R.int.C.P.int
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.int.C.R.int.C.P.int.constructor.P.System.RandomAccessIter.int.C.R.int.C.P.int.C.R.System.RandomAccessIter.int.C.R.int.C.P.int
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.int.C.R.int.C.P.int.constructor.P.System.RandomAccessIter.int.C.R.int.C.P.int.C.R.System.RandomAccessIter.int.C.R.int.C.P.int.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.int.C.R.int.C.P.int.operator.assign.P.System.RandomAccessIter.int.C.R.int.C.P.int.C.R.System.RandomAccessIter.int.C.R.int.C.P.int
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.int.C.R.int.C.P.int.operator.assign.P.System.RandomAccessIter.int.C.R.int.C.P.int.C.R.System.RandomAccessIter.int.C.R.int.C.P.int.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.int.C.R.int.C.P.int.constructor.P.System.RandomAccessIter.int.C.R.int.C.P.int.RR.System.RandomAccessIter.int.C.R.int.C.P.int
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.int.C.R.int.C.P.int.constructor.P.System.RandomAccessIter.int.C.R.int.C.P.int.RR.System.RandomAccessIter.int.C.R.int.C.P.int.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.int.C.R.int.C.P.int.operator.assign.P.System.RandomAccessIter.int.C.R.int.C.P.int.RR.System.RandomAccessIter.int.C.R.int.C.P.int
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.int.C.R.int.C.P.int.operator.assign.P.System.RandomAccessIter.int.C.R.int.C.P.int.RR.System.RandomAccessIter.int.C.R.int.C.P.int.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.int.R.int.P.int
        {
            description
            {
            }
            function System.RandomAccessIter.int.R.int.P.int.constructor.P.System.RandomAccessIter.int.R.int.P.int
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.int.R.int.P.int.constructor.P.System.RandomAccessIter.int.R.int.P.int.C.R.System.RandomAccessIter.int.R.int.P.int
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.int.R.int.P.int.constructor.P.System.RandomAccessIter.int.R.int.P.int.C.R.System.RandomAccessIter.int.R.int.P.int.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.int.R.int.P.int.operator.assign.P.System.RandomAccessIter.int.R.int.P.int.C.R.System.RandomAccessIter.int.R.int.P.int
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.int.R.int.P.int.operator.assign.P.System.RandomAccessIter.int.R.int.P.int.C.R.System.RandomAccessIter.int.R.int.P.int.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.int.R.int.P.int.constructor.P.System.RandomAccessIter.int.R.int.P.int.RR.System.RandomAccessIter.int.R.int.P.int
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.int.R.int.P.int.constructor.P.System.RandomAccessIter.int.R.int.P.int.RR.System.RandomAccessIter.int.R.int.P.int.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.int.R.int.P.int.operator.assign.P.System.RandomAccessIter.int.R.int.P.int.RR.System.RandomAccessIter.int.R.int.P.int
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.int.R.int.P.int.operator.assign.P.System.RandomAccessIter.int.R.int.P.int.RR.System.RandomAccessIter.int.R.int.P.int.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar
        {
            description
            {
            }
            function System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.constructor.P.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.constructor.P.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.C.R.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.constructor.P.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.C.R.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.operator.assign.P.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.C.R.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.operator.assign.P.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.C.R.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.constructor.P.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.RR.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.constructor.P.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.RR.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.operator.assign.P.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.RR.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.operator.assign.P.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.RR.System.RandomAccessIter.uchar.C.R.uchar.C.P.uchar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.uchar.R.uchar.P.uchar
        {
            description
            {
            }
            function System.RandomAccessIter.uchar.R.uchar.P.uchar.constructor.P.System.RandomAccessIter.uchar.R.uchar.P.uchar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.uchar.R.uchar.P.uchar.constructor.P.System.RandomAccessIter.uchar.R.uchar.P.uchar.C.R.System.RandomAccessIter.uchar.R.uchar.P.uchar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.uchar.R.uchar.P.uchar.constructor.P.System.RandomAccessIter.uchar.R.uchar.P.uchar.C.R.System.RandomAccessIter.uchar.R.uchar.P.uchar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.uchar.R.uchar.P.uchar.operator.assign.P.System.RandomAccessIter.uchar.R.uchar.P.uchar.C.R.System.RandomAccessIter.uchar.R.uchar.P.uchar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.uchar.R.uchar.P.uchar.operator.assign.P.System.RandomAccessIter.uchar.R.uchar.P.uchar.C.R.System.RandomAccessIter.uchar.R.uchar.P.uchar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.uchar.R.uchar.P.uchar.constructor.P.System.RandomAccessIter.uchar.R.uchar.P.uchar.RR.System.RandomAccessIter.uchar.R.uchar.P.uchar
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.uchar.R.uchar.P.uchar.constructor.P.System.RandomAccessIter.uchar.R.uchar.P.uchar.RR.System.RandomAccessIter.uchar.R.uchar.P.uchar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.uchar.R.uchar.P.uchar.operator.assign.P.System.RandomAccessIter.uchar.R.uchar.P.uchar.RR.System.RandomAccessIter.uchar.R.uchar.P.uchar
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.uchar.R.uchar.P.uchar.operator.assign.P.System.RandomAccessIter.uchar.R.uchar.P.uchar.RR.System.RandomAccessIter.uchar.R.uchar.P.uchar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Rel.System.String.char
        {
            description
            {
            }
            function System.Rel.System.String.char.constructor.P.System.Rel.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Rel.System.String.char.constructor.P.System.Rel.System.String.char.C.R.System.Rel.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Rel.System.String.char.constructor.P.System.Rel.System.String.char.C.R.System.Rel.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Rel.System.String.char.operator.assign.P.System.Rel.System.String.char.C.R.System.Rel.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Rel.System.String.char.operator.assign.P.System.Rel.System.String.char.C.R.System.Rel.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Rel.System.String.char.constructor.P.System.Rel.System.String.char.RR.System.Rel.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Rel.System.String.char.constructor.P.System.Rel.System.String.char.RR.System.Rel.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Rel.System.String.char.operator.assign.P.System.Rel.System.String.char.RR.System.Rel.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Rel.System.String.char.operator.assign.P.System.Rel.System.String.char.RR.System.Rel.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Rel.System.Unicode.Category
        {
            description
            {
            }
            function System.Rel.System.Unicode.Category.constructor.P.System.Rel.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Rel.System.Unicode.Category.constructor.P.System.Rel.System.Unicode.Category.C.R.System.Rel.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Rel.System.Unicode.Category.constructor.P.System.Rel.System.Unicode.Category.C.R.System.Rel.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Rel.System.Unicode.Category.operator.assign.P.System.Rel.System.Unicode.Category.C.R.System.Rel.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Rel.System.Unicode.Category.operator.assign.P.System.Rel.System.Unicode.Category.C.R.System.Rel.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Rel.System.Unicode.Category.constructor.P.System.Rel.System.Unicode.Category.RR.System.Rel.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.Rel.System.Unicode.Category.constructor.P.System.Rel.System.Unicode.Category.RR.System.Rel.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Rel.System.Unicode.Category.operator.assign.P.System.Rel.System.Unicode.Category.RR.System.Rel.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.Rel.System.Unicode.Category.operator.assign.P.System.Rel.System.Unicode.Category.RR.System.Rel.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Rel.uchar
        {
            description
            {
            }
            function System.Rel.uchar.constructor.P.System.Rel.uchar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Rel.uchar.constructor.P.System.Rel.uchar.C.R.System.Rel.uchar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Rel.uchar.constructor.P.System.Rel.uchar.C.R.System.Rel.uchar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Rel.uchar.operator.assign.P.System.Rel.uchar.C.R.System.Rel.uchar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Rel.uchar.operator.assign.P.System.Rel.uchar.C.R.System.Rel.uchar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Rel.uchar.constructor.P.System.Rel.uchar.RR.System.Rel.uchar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Rel.uchar.constructor.P.System.Rel.uchar.RR.System.Rel.uchar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Rel.uchar.operator.assign.P.System.Rel.uchar.RR.System.Rel.uchar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Rel.uchar.operator.assign.P.System.Rel.uchar.RR.System.Rel.uchar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.SelectFirst.System.String.char.System.Unicode.Category
        {
            description
            {
            }
            function System.SelectFirst.System.String.char.System.Unicode.Category.constructor.P.System.SelectFirst.System.String.char.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.SelectFirst.System.String.char.System.Unicode.Category.constructor.P.System.SelectFirst.System.String.char.System.Unicode.Category.C.R.System.SelectFirst.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.SelectFirst.System.String.char.System.Unicode.Category.constructor.P.System.SelectFirst.System.String.char.System.Unicode.Category.C.R.System.SelectFirst.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.SelectFirst.System.String.char.System.Unicode.Category.operator.assign.P.System.SelectFirst.System.String.char.System.Unicode.Category.C.R.System.SelectFirst.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.SelectFirst.System.String.char.System.Unicode.Category.operator.assign.P.System.SelectFirst.System.String.char.System.Unicode.Category.C.R.System.SelectFirst.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.SelectFirst.System.String.char.System.Unicode.Category.constructor.P.System.SelectFirst.System.String.char.System.Unicode.Category.RR.System.SelectFirst.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.SelectFirst.System.String.char.System.Unicode.Category.constructor.P.System.SelectFirst.System.String.char.System.Unicode.Category.RR.System.SelectFirst.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.SelectFirst.System.String.char.System.Unicode.Category.operator.assign.P.System.SelectFirst.System.String.char.System.Unicode.Category.RR.System.SelectFirst.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.SelectFirst.System.String.char.System.Unicode.Category.operator.assign.P.System.SelectFirst.System.String.char.System.Unicode.Category.RR.System.SelectFirst.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.SelectFirst.System.Unicode.Category.System.String.char
        {
            description
            {
            }
            function System.SelectFirst.System.Unicode.Category.System.String.char.constructor.P.System.SelectFirst.System.Unicode.Category.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.SelectFirst.System.Unicode.Category.System.String.char.constructor.P.System.SelectFirst.System.Unicode.Category.System.String.char.C.R.System.SelectFirst.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.SelectFirst.System.Unicode.Category.System.String.char.constructor.P.System.SelectFirst.System.Unicode.Category.System.String.char.C.R.System.SelectFirst.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.SelectFirst.System.Unicode.Category.System.String.char.operator.assign.P.System.SelectFirst.System.Unicode.Category.System.String.char.C.R.System.SelectFirst.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.SelectFirst.System.Unicode.Category.System.String.char.operator.assign.P.System.SelectFirst.System.Unicode.Category.System.String.char.C.R.System.SelectFirst.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.SelectFirst.System.Unicode.Category.System.String.char.constructor.P.System.SelectFirst.System.Unicode.Category.System.String.char.RR.System.SelectFirst.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.SelectFirst.System.Unicode.Category.System.String.char.constructor.P.System.SelectFirst.System.Unicode.Category.System.String.char.RR.System.SelectFirst.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.SelectFirst.System.Unicode.Category.System.String.char.operator.assign.P.System.SelectFirst.System.Unicode.Category.System.String.char.RR.System.SelectFirst.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.SelectFirst.System.Unicode.Category.System.String.char.operator.assign.P.System.SelectFirst.System.Unicode.Category.System.String.char.RR.System.SelectFirst.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.SelectFirst.uchar.P.System.Unicode.CharacterInfo
        {
            description
            {
            }
            function System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Default constructor.
                }
            }
            function System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.C.R.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy constructor.
                }
                parameter System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.C.R.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.C.R.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy assignment.
                }
                parameter System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.C.R.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.RR.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move constructor.
                }
                parameter System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.RR.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.RR.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move assignment.
                }
                parameter System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.RR.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.String.char
        {
            description
            {
            }
            function System.String.char.constructor.P.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.String.char.constructor.P.System.String.char.C.R.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.String.char.constructor.P.System.String.char.C.R.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.String.char.operator.assign.P.System.String.char.C.R.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.String.char.operator.assign.P.System.String.char.C.R.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.String.char.constructor.P.System.String.char.RR.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.String.char.constructor.P.System.String.char.RR.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.String.char.operator.assign.P.System.String.char.RR.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.String.char.operator.assign.P.System.String.char.RR.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.String.uchar
        {
            description
            {
            }
            function System.String.uchar.constructor.P.System.String.uchar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.String.uchar.constructor.P.System.String.uchar.C.R.System.String.uchar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.String.uchar.constructor.P.System.String.uchar.C.R.System.String.uchar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.String.uchar.operator.assign.P.System.String.uchar.C.R.System.String.uchar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.String.uchar.operator.assign.P.System.String.uchar.C.R.System.String.uchar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.String.uchar.constructor.P.System.String.uchar.RR.System.String.uchar
            {
                description
                {
                    Move constructor.
                }
                parameter System.String.uchar.constructor.P.System.String.uchar.RR.System.String.uchar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.String.uchar.operator.assign.P.System.String.uchar.RR.System.String.uchar
            {
                description
                {
                    Move assignment.
                }
                parameter System.String.uchar.operator.assign.P.System.String.uchar.RR.System.String.uchar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.String.wchar
        {
            description
            {
            }
            function System.String.wchar.constructor.P.System.String.wchar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.String.wchar.constructor.P.System.String.wchar.C.R.System.String.wchar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.String.wchar.constructor.P.System.String.wchar.C.R.System.String.wchar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.String.wchar.operator.assign.P.System.String.wchar.C.R.System.String.wchar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.String.wchar.operator.assign.P.System.String.wchar.C.R.System.String.wchar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.String.wchar.constructor.P.System.String.wchar.RR.System.String.wchar
            {
                description
                {
                    Move constructor.
                }
                parameter System.String.wchar.constructor.P.System.String.wchar.RR.System.String.wchar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.String.wchar.operator.assign.P.System.String.wchar.RR.System.String.wchar
            {
                description
                {
                    Move assignment.
                }
                parameter System.String.wchar.operator.assign.P.System.String.wchar.RR.System.String.wchar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char
        {
            description
            {
            }
            function System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.constructor.P.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.constructor.P.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.C.R.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.constructor.P.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.C.R.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.operator.assign.P.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.C.R.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.operator.assign.P.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.C.R.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.constructor.P.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.RR.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.constructor.P.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.RR.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.operator.assign.P.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.RR.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.operator.assign.P.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.RR.System.UnaryFun.System.Pair.System.String.char.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category
        {
            description
            {
            }
            function System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.constructor.P.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.constructor.P.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.C.R.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.constructor.P.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.C.R.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.operator.assign.P.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.C.R.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.operator.assign.P.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.C.R.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.constructor.P.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.RR.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.constructor.P.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.RR.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.operator.assign.P.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.RR.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.operator.assign.P.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.RR.System.UnaryFun.System.Pair.System.Unicode.Category.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar
        {
            description
            {
            }
            function System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.constructor.P.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.constructor.P.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.C.R.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.constructor.P.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.C.R.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.operator.assign.P.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.C.R.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.operator.assign.P.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.C.R.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.constructor.P.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.RR.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.constructor.P.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.RR.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.operator.assign.P.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.RR.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.operator.assign.P.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.RR.System.UnaryFun.System.Pair.uchar.P.System.Unicode.CharacterInfo.uchar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.System.String.char.ulong
        {
            description
            {
            }
            function System.UnaryFun.System.String.char.ulong.constructor.P.System.UnaryFun.System.String.char.ulong
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.System.String.char.ulong.constructor.P.System.UnaryFun.System.String.char.ulong.C.R.System.UnaryFun.System.String.char.ulong
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.System.String.char.ulong.constructor.P.System.UnaryFun.System.String.char.ulong.C.R.System.UnaryFun.System.String.char.ulong.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.System.String.char.ulong.operator.assign.P.System.UnaryFun.System.String.char.ulong.C.R.System.UnaryFun.System.String.char.ulong
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.System.String.char.ulong.operator.assign.P.System.UnaryFun.System.String.char.ulong.C.R.System.UnaryFun.System.String.char.ulong.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.System.String.char.ulong.constructor.P.System.UnaryFun.System.String.char.ulong.RR.System.UnaryFun.System.String.char.ulong
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.System.String.char.ulong.constructor.P.System.UnaryFun.System.String.char.ulong.RR.System.UnaryFun.System.String.char.ulong.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.System.String.char.ulong.operator.assign.P.System.UnaryFun.System.String.char.ulong.RR.System.UnaryFun.System.String.char.ulong
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.System.String.char.ulong.operator.assign.P.System.UnaryFun.System.String.char.ulong.RR.System.UnaryFun.System.String.char.ulong.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.System.Unicode.Category.ulong
        {
            description
            {
            }
            function System.UnaryFun.System.Unicode.Category.ulong.constructor.P.System.UnaryFun.System.Unicode.Category.ulong
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.System.Unicode.Category.ulong.constructor.P.System.UnaryFun.System.Unicode.Category.ulong.C.R.System.UnaryFun.System.Unicode.Category.ulong
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.System.Unicode.Category.ulong.constructor.P.System.UnaryFun.System.Unicode.Category.ulong.C.R.System.UnaryFun.System.Unicode.Category.ulong.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.System.Unicode.Category.ulong.operator.assign.P.System.UnaryFun.System.Unicode.Category.ulong.C.R.System.UnaryFun.System.Unicode.Category.ulong
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.System.Unicode.Category.ulong.operator.assign.P.System.UnaryFun.System.Unicode.Category.ulong.C.R.System.UnaryFun.System.Unicode.Category.ulong.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.System.Unicode.Category.ulong.constructor.P.System.UnaryFun.System.Unicode.Category.ulong.RR.System.UnaryFun.System.Unicode.Category.ulong
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.System.Unicode.Category.ulong.constructor.P.System.UnaryFun.System.Unicode.Category.ulong.RR.System.UnaryFun.System.Unicode.Category.ulong.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.System.Unicode.Category.ulong.operator.assign.P.System.UnaryFun.System.Unicode.Category.ulong.RR.System.UnaryFun.System.Unicode.Category.ulong
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.System.Unicode.Category.ulong.operator.assign.P.System.UnaryFun.System.Unicode.Category.ulong.RR.System.UnaryFun.System.Unicode.Category.ulong.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.uchar.ulong
        {
            description
            {
            }
            function System.UnaryFun.uchar.ulong.constructor.P.System.UnaryFun.uchar.ulong
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.uchar.ulong.constructor.P.System.UnaryFun.uchar.ulong.C.R.System.UnaryFun.uchar.ulong
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.uchar.ulong.constructor.P.System.UnaryFun.uchar.ulong.C.R.System.UnaryFun.uchar.ulong.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.uchar.ulong.operator.assign.P.System.UnaryFun.uchar.ulong.C.R.System.UnaryFun.uchar.ulong
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.uchar.ulong.operator.assign.P.System.UnaryFun.uchar.ulong.C.R.System.UnaryFun.uchar.ulong.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.uchar.ulong.constructor.P.System.UnaryFun.uchar.ulong.RR.System.UnaryFun.uchar.ulong
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.uchar.ulong.constructor.P.System.UnaryFun.uchar.ulong.RR.System.UnaryFun.uchar.ulong.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.uchar.ulong.operator.assign.P.System.UnaryFun.uchar.ulong.RR.System.UnaryFun.uchar.ulong
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.uchar.ulong.operator.assign.P.System.UnaryFun.uchar.ulong.RR.System.UnaryFun.uchar.ulong.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.IO.InputStream
        {
            description
            {
            }
            function System.UniquePtr.System.IO.InputStream.constructor.P.System.UniquePtr.System.IO.InputStream
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.IO.InputStream.constructor.P.System.UniquePtr.System.IO.InputStream.RR.System.UniquePtr.System.IO.InputStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.IO.InputStream.constructor.P.System.UniquePtr.System.IO.InputStream.RR.System.UniquePtr.System.IO.InputStream.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.IO.InputStream.operator.assign.P.System.UniquePtr.System.IO.InputStream.RR.System.UniquePtr.System.IO.InputStream
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.IO.InputStream.operator.assign.P.System.UniquePtr.System.IO.InputStream.RR.System.UniquePtr.System.IO.InputStream.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.IO.OutputStream
        {
            description
            {
            }
            function System.UniquePtr.System.IO.OutputStream.constructor.P.System.UniquePtr.System.IO.OutputStream
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.IO.OutputStream.constructor.P.System.UniquePtr.System.IO.OutputStream.RR.System.UniquePtr.System.IO.OutputStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.IO.OutputStream.constructor.P.System.UniquePtr.System.IO.OutputStream.RR.System.UniquePtr.System.IO.OutputStream.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.IO.OutputStream.operator.assign.P.System.UniquePtr.System.IO.OutputStream.RR.System.UniquePtr.System.IO.OutputStream
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.IO.OutputStream.operator.assign.P.System.UniquePtr.System.IO.OutputStream.RR.System.UniquePtr.System.IO.OutputStream.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Unicode.CategoryMap
        {
            description
            {
            }
            function System.UniquePtr.System.Unicode.CategoryMap.constructor.P.System.UniquePtr.System.Unicode.CategoryMap
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Unicode.CategoryMap.constructor.P.System.UniquePtr.System.Unicode.CategoryMap.RR.System.UniquePtr.System.Unicode.CategoryMap
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Unicode.CategoryMap.constructor.P.System.UniquePtr.System.Unicode.CategoryMap.RR.System.UniquePtr.System.Unicode.CategoryMap.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Unicode.CategoryMap.operator.assign.P.System.UniquePtr.System.Unicode.CategoryMap.RR.System.UniquePtr.System.Unicode.CategoryMap
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Unicode.CategoryMap.operator.assign.P.System.UniquePtr.System.Unicode.CategoryMap.RR.System.UniquePtr.System.Unicode.CategoryMap.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Unicode.CharacterInfo
        {
            description
            {
            }
            function System.UniquePtr.System.Unicode.CharacterInfo.constructor.P.System.UniquePtr.System.Unicode.CharacterInfo
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Unicode.CharacterInfo.constructor.P.System.UniquePtr.System.Unicode.CharacterInfo.RR.System.UniquePtr.System.Unicode.CharacterInfo
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Unicode.CharacterInfo.constructor.P.System.UniquePtr.System.Unicode.CharacterInfo.RR.System.UniquePtr.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Unicode.CharacterInfo.operator.assign.P.System.UniquePtr.System.Unicode.CharacterInfo.RR.System.UniquePtr.System.Unicode.CharacterInfo
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Unicode.CharacterInfo.operator.assign.P.System.UniquePtr.System.Unicode.CharacterInfo.RR.System.UniquePtr.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Unicode.CharacterInfoMap
        {
            description
            {
            }
            function System.UniquePtr.System.Unicode.CharacterInfoMap.constructor.P.System.UniquePtr.System.Unicode.CharacterInfoMap
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Unicode.CharacterInfoMap.constructor.P.System.UniquePtr.System.Unicode.CharacterInfoMap.RR.System.UniquePtr.System.Unicode.CharacterInfoMap
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Unicode.CharacterInfoMap.constructor.P.System.UniquePtr.System.Unicode.CharacterInfoMap.RR.System.UniquePtr.System.Unicode.CharacterInfoMap.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Unicode.CharacterInfoMap.operator.assign.P.System.UniquePtr.System.Unicode.CharacterInfoMap.RR.System.UniquePtr.System.Unicode.CharacterInfoMap
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Unicode.CharacterInfoMap.operator.assign.P.System.UniquePtr.System.Unicode.CharacterInfoMap.RR.System.UniquePtr.System.Unicode.CharacterInfoMap.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
    }
    namespace System.Collections
    {
        description
        {
        }
        class System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category
        {
            description
            {
            }
            function System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char
        {
            description
            {
            }
            function System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo
        {
            description
            {
            }
            function System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char
        {
            description
            {
            }
            function System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.constructor.P.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.constructor.P.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.C.R.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.constructor.P.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.C.R.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.operator.assign.P.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.C.R.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.operator.assign.P.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.C.R.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.constructor.P.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.RR.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.constructor.P.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.RR.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.operator.assign.P.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.RR.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.operator.assign.P.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.RR.System.Collections.HashMap.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category
        {
            description
            {
            }
            function System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.constructor.P.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.constructor.P.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.C.R.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.constructor.P.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.C.R.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.operator.assign.P.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.C.R.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.operator.assign.P.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.C.R.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.constructor.P.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.RR.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.constructor.P.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.RR.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.operator.assign.P.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.RR.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.operator.assign.P.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.RR.System.Collections.HashMap.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar
        {
            description
            {
            }
            function System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.constructor.P.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.constructor.P.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.C.R.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.constructor.P.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.C.R.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.operator.assign.P.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.C.R.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.operator.assign.P.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.C.R.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.constructor.P.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.RR.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.constructor.P.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.RR.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.operator.assign.P.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.RR.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.operator.assign.P.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.RR.System.Collections.HashMap.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Hasher.System.String.char
        {
            description
            {
            }
            function System.Collections.Hasher.System.String.char.constructor.P.System.Collections.Hasher.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Hasher.System.String.char.constructor.P.System.Collections.Hasher.System.String.char.C.R.System.Collections.Hasher.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Hasher.System.String.char.constructor.P.System.Collections.Hasher.System.String.char.C.R.System.Collections.Hasher.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Hasher.System.String.char.operator.assign.P.System.Collections.Hasher.System.String.char.C.R.System.Collections.Hasher.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Hasher.System.String.char.operator.assign.P.System.Collections.Hasher.System.String.char.C.R.System.Collections.Hasher.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Hasher.System.String.char.constructor.P.System.Collections.Hasher.System.String.char.RR.System.Collections.Hasher.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Hasher.System.String.char.constructor.P.System.Collections.Hasher.System.String.char.RR.System.Collections.Hasher.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Hasher.System.String.char.operator.assign.P.System.Collections.Hasher.System.String.char.RR.System.Collections.Hasher.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Hasher.System.String.char.operator.assign.P.System.Collections.Hasher.System.String.char.RR.System.Collections.Hasher.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Hasher.System.Unicode.Category
        {
            description
            {
            }
            function System.Collections.Hasher.System.Unicode.Category.constructor.P.System.Collections.Hasher.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Hasher.System.Unicode.Category.constructor.P.System.Collections.Hasher.System.Unicode.Category.C.R.System.Collections.Hasher.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Hasher.System.Unicode.Category.constructor.P.System.Collections.Hasher.System.Unicode.Category.C.R.System.Collections.Hasher.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Hasher.System.Unicode.Category.operator.assign.P.System.Collections.Hasher.System.Unicode.Category.C.R.System.Collections.Hasher.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Hasher.System.Unicode.Category.operator.assign.P.System.Collections.Hasher.System.Unicode.Category.C.R.System.Collections.Hasher.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Hasher.System.Unicode.Category.constructor.P.System.Collections.Hasher.System.Unicode.Category.RR.System.Collections.Hasher.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Hasher.System.Unicode.Category.constructor.P.System.Collections.Hasher.System.Unicode.Category.RR.System.Collections.Hasher.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Hasher.System.Unicode.Category.operator.assign.P.System.Collections.Hasher.System.Unicode.Category.RR.System.Collections.Hasher.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Hasher.System.Unicode.Category.operator.assign.P.System.Collections.Hasher.System.Unicode.Category.RR.System.Collections.Hasher.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Hasher.uchar
        {
            description
            {
            }
            function System.Collections.Hasher.uchar.constructor.P.System.Collections.Hasher.uchar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Hasher.uchar.constructor.P.System.Collections.Hasher.uchar.C.R.System.Collections.Hasher.uchar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Hasher.uchar.constructor.P.System.Collections.Hasher.uchar.C.R.System.Collections.Hasher.uchar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Hasher.uchar.operator.assign.P.System.Collections.Hasher.uchar.C.R.System.Collections.Hasher.uchar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Hasher.uchar.operator.assign.P.System.Collections.Hasher.uchar.C.R.System.Collections.Hasher.uchar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Hasher.uchar.constructor.P.System.Collections.Hasher.uchar.RR.System.Collections.Hasher.uchar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Hasher.uchar.constructor.P.System.Collections.Hasher.uchar.RR.System.Collections.Hasher.uchar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Hasher.uchar.operator.assign.P.System.Collections.Hasher.uchar.RR.System.Collections.Hasher.uchar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Hasher.uchar.operator.assign.P.System.Collections.Hasher.uchar.RR.System.Collections.Hasher.uchar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char
        {
            description
            {
            }
            function System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.constructor.P.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.constructor.P.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.C.R.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.constructor.P.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.C.R.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.operator.assign.P.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.C.R.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.operator.assign.P.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.C.R.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.constructor.P.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.RR.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.constructor.P.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.RR.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.operator.assign.P.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.RR.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.operator.assign.P.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.RR.System.Collections.Hashtable.System.String.char.System.Pair.System.String.char.System.Unicode.Category.System.SelectFirst.System.String.char.System.Unicode.Category.System.Collections.Hasher.System.String.char.System.EqualTo.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category
        {
            description
            {
            }
            function System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.constructor.P.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.constructor.P.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.C.R.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.constructor.P.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.C.R.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.operator.assign.P.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.C.R.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.operator.assign.P.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.C.R.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.constructor.P.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.RR.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.constructor.P.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.RR.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.operator.assign.P.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.RR.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.operator.assign.P.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.RR.System.Collections.Hashtable.System.Unicode.Category.System.Pair.System.Unicode.Category.System.String.char.System.SelectFirst.System.Unicode.Category.System.String.char.System.Collections.Hasher.System.Unicode.Category.System.EqualTo.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar
        {
            description
            {
            }
            function System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.constructor.P.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.constructor.P.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.C.R.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.constructor.P.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.C.R.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.operator.assign.P.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.C.R.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.operator.assign.P.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.C.R.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.constructor.P.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.RR.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.constructor.P.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.RR.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.operator.assign.P.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.RR.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.operator.assign.P.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.RR.System.Collections.Hashtable.uchar.System.Pair.uchar.P.System.Unicode.CharacterInfo.System.SelectFirst.uchar.P.System.Unicode.CharacterInfo.System.Collections.Hasher.uchar.System.EqualTo.uchar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category
        {
            description
            {
            }
            function System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.HashtableBase.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char
        {
            description
            {
            }
            function System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.HashtableBase.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo
        {
            description
            {
            }
            function System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.HashtableBase.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category
        {
            description
            {
            }
            function System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.R.System.Pair.System.String.char.System.Unicode.Category.P.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category
        {
            description
            {
            }
            function System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.HashtableIterator.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Pair.System.String.char.System.Unicode.Category.C.P.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char
        {
            description
            {
            }
            function System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.R.System.Pair.System.Unicode.Category.System.String.char.P.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char
        {
            description
            {
            }
            function System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.HashtableIterator.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Pair.System.Unicode.Category.System.String.char.C.P.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
        {
            description
            {
            }
            function System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
        {
            description
            {
            }
            function System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.HashtableIterator.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.P.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.System.CharClass
        {
            description
            {
            }
            function System.Collections.List.System.CharClass.constructor.P.System.Collections.List.System.CharClass
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.CharClass.constructor.P.System.Collections.List.System.CharClass.C.R.System.Collections.List.System.CharClass
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.CharClass.constructor.P.System.Collections.List.System.CharClass.C.R.System.Collections.List.System.CharClass.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.CharClass.operator.assign.P.System.Collections.List.System.CharClass.C.R.System.Collections.List.System.CharClass
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.CharClass.operator.assign.P.System.Collections.List.System.CharClass.C.R.System.Collections.List.System.CharClass.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.CharClass.constructor.P.System.Collections.List.System.CharClass.RR.System.Collections.List.System.CharClass
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.CharClass.constructor.P.System.Collections.List.System.CharClass.RR.System.Collections.List.System.CharClass.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.CharClass.operator.assign.P.System.Collections.List.System.CharClass.RR.System.Collections.List.System.CharClass
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.CharClass.operator.assign.P.System.Collections.List.System.CharClass.RR.System.Collections.List.System.CharClass.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category
        {
            description
            {
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.C.R.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.operator.assign.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.RR.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.String.char.System.Unicode.Category.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char
        {
            description
            {
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.C.R.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.operator.assign.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.RR.System.Collections.List.P.System.Collections.Bucket.System.Pair.System.Unicode.Category.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo
        {
            description
            {
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.C.R.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.constructor.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.RR.System.Collections.List.P.System.Collections.Bucket.System.Pair.uchar.P.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.System.Pair.int.System.Handle
        {
            description
            {
            }
            function System.Collections.List.System.Pair.int.System.Handle.constructor.P.System.Collections.List.System.Pair.int.System.Handle
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.Pair.int.System.Handle.constructor.P.System.Collections.List.System.Pair.int.System.Handle.C.R.System.Collections.List.System.Pair.int.System.Handle
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.Pair.int.System.Handle.constructor.P.System.Collections.List.System.Pair.int.System.Handle.C.R.System.Collections.List.System.Pair.int.System.Handle.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.Pair.int.System.Handle.operator.assign.P.System.Collections.List.System.Pair.int.System.Handle.C.R.System.Collections.List.System.Pair.int.System.Handle
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.Pair.int.System.Handle.operator.assign.P.System.Collections.List.System.Pair.int.System.Handle.C.R.System.Collections.List.System.Pair.int.System.Handle.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.Pair.int.System.Handle.constructor.P.System.Collections.List.System.Pair.int.System.Handle.RR.System.Collections.List.System.Pair.int.System.Handle
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.Pair.int.System.Handle.constructor.P.System.Collections.List.System.Pair.int.System.Handle.RR.System.Collections.List.System.Pair.int.System.Handle.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.Pair.int.System.Handle.operator.assign.P.System.Collections.List.System.Pair.int.System.Handle.RR.System.Collections.List.System.Pair.int.System.Handle
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.Pair.int.System.Handle.operator.assign.P.System.Collections.List.System.Pair.int.System.Handle.RR.System.Collections.List.System.Pair.int.System.Handle.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.System.Pair.int.System.String.char
        {
            description
            {
            }
            function System.Collections.List.System.Pair.int.System.String.char.constructor.P.System.Collections.List.System.Pair.int.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.Pair.int.System.String.char.constructor.P.System.Collections.List.System.Pair.int.System.String.char.C.R.System.Collections.List.System.Pair.int.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.Pair.int.System.String.char.constructor.P.System.Collections.List.System.Pair.int.System.String.char.C.R.System.Collections.List.System.Pair.int.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.Pair.int.System.String.char.operator.assign.P.System.Collections.List.System.Pair.int.System.String.char.C.R.System.Collections.List.System.Pair.int.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.Pair.int.System.String.char.operator.assign.P.System.Collections.List.System.Pair.int.System.String.char.C.R.System.Collections.List.System.Pair.int.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.Pair.int.System.String.char.constructor.P.System.Collections.List.System.Pair.int.System.String.char.RR.System.Collections.List.System.Pair.int.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.Pair.int.System.String.char.constructor.P.System.Collections.List.System.Pair.int.System.String.char.RR.System.Collections.List.System.Pair.int.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.Pair.int.System.String.char.operator.assign.P.System.Collections.List.System.Pair.int.System.String.char.RR.System.Collections.List.System.Pair.int.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.Pair.int.System.String.char.operator.assign.P.System.Collections.List.System.Pair.int.System.String.char.RR.System.Collections.List.System.Pair.int.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.System.String.char
        {
            description
            {
            }
            function System.Collections.List.System.String.char.constructor.P.System.Collections.List.System.String.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.String.char.constructor.P.System.Collections.List.System.String.char.C.R.System.Collections.List.System.String.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.String.char.constructor.P.System.Collections.List.System.String.char.C.R.System.Collections.List.System.String.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.String.char.operator.assign.P.System.Collections.List.System.String.char.C.R.System.Collections.List.System.String.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.String.char.operator.assign.P.System.Collections.List.System.String.char.C.R.System.Collections.List.System.String.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.String.char.constructor.P.System.Collections.List.System.String.char.RR.System.Collections.List.System.String.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.String.char.constructor.P.System.Collections.List.System.String.char.RR.System.Collections.List.System.String.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.String.char.operator.assign.P.System.Collections.List.System.String.char.RR.System.Collections.List.System.String.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.String.char.operator.assign.P.System.Collections.List.System.String.char.RR.System.Collections.List.System.String.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo
        {
            description
            {
            }
            function System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.constructor.P.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.constructor.P.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.C.R.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.constructor.P.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.C.R.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.C.R.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.C.R.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.constructor.P.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.RR.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.constructor.P.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.RR.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.RR.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.operator.assign.P.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.RR.System.Collections.List.System.UniquePtr.System.Unicode.CharacterInfo.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.byte
        {
            description
            {
            }
            function System.Collections.List.byte.constructor.P.System.Collections.List.byte
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.byte.constructor.P.System.Collections.List.byte.C.R.System.Collections.List.byte
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.byte.constructor.P.System.Collections.List.byte.C.R.System.Collections.List.byte.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.byte.operator.assign.P.System.Collections.List.byte.C.R.System.Collections.List.byte
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.byte.operator.assign.P.System.Collections.List.byte.C.R.System.Collections.List.byte.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.byte.constructor.P.System.Collections.List.byte.RR.System.Collections.List.byte
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.byte.constructor.P.System.Collections.List.byte.RR.System.Collections.List.byte.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.byte.operator.assign.P.System.Collections.List.byte.RR.System.Collections.List.byte
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.byte.operator.assign.P.System.Collections.List.byte.RR.System.Collections.List.byte.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.int
        {
            description
            {
            }
            function System.Collections.List.int.constructor.P.System.Collections.List.int
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.int.constructor.P.System.Collections.List.int.C.R.System.Collections.List.int
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.int.constructor.P.System.Collections.List.int.C.R.System.Collections.List.int.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.int.operator.assign.P.System.Collections.List.int.C.R.System.Collections.List.int
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.int.operator.assign.P.System.Collections.List.int.C.R.System.Collections.List.int.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.int.constructor.P.System.Collections.List.int.RR.System.Collections.List.int
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.int.constructor.P.System.Collections.List.int.RR.System.Collections.List.int.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.int.operator.assign.P.System.Collections.List.int.RR.System.Collections.List.int
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.int.operator.assign.P.System.Collections.List.int.RR.System.Collections.List.int.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.ulong
        {
            description
            {
            }
            function System.Collections.List.ulong.constructor.P.System.Collections.List.ulong
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.ulong.constructor.P.System.Collections.List.ulong.C.R.System.Collections.List.ulong
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.ulong.constructor.P.System.Collections.List.ulong.C.R.System.Collections.List.ulong.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.ulong.operator.assign.P.System.Collections.List.ulong.C.R.System.Collections.List.ulong
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.ulong.operator.assign.P.System.Collections.List.ulong.C.R.System.Collections.List.ulong.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.ulong.constructor.P.System.Collections.List.ulong.RR.System.Collections.List.ulong
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.ulong.constructor.P.System.Collections.List.ulong.RR.System.Collections.List.ulong.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.ulong.operator.assign.P.System.Collections.List.ulong.RR.System.Collections.List.ulong
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.ulong.operator.assign.P.System.Collections.List.ulong.RR.System.Collections.List.ulong.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
    }
    namespace System.Concepts
    {
        description
        {
        }
    }
    namespace System.IO
    {
        description
        {
        }
    }
    namespace System.Meta
    {
        description
        {
        }
        function System.Meta.IsBasicType.T0
        {
            description
            {
            }
            returns System.Meta.IsBasicType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsBoolType.T0
        {
            description
            {
            }
            returns System.Meta.IsBoolType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsByteType.T0
        {
            description
            {
            }
            returns System.Meta.IsByteType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsCharType.T0
        {
            description
            {
            }
            returns System.Meta.IsCharType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsCharacterType.T0
        {
            description
            {
            }
            returns System.Meta.IsCharacterType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsClassDelegateType.T0
        {
            description
            {
            }
            returns System.Meta.IsClassDelegateType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsClassType.T0
        {
            description
            {
            }
            returns System.Meta.IsClassType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsConstType.T0
        {
            description
            {
            }
            returns System.Meta.IsConstType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsDelegateType.T0
        {
            description
            {
            }
            returns System.Meta.IsDelegateType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsDoubleType.T0
        {
            description
            {
            }
            returns System.Meta.IsDoubleType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsEnumType.T0
        {
            description
            {
            }
            returns System.Meta.IsEnumType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsFloatType.T0
        {
            description
            {
            }
            returns System.Meta.IsFloatType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsFloatingPointType.T0
        {
            description
            {
            }
            returns System.Meta.IsFloatingPointType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsIntType.T0
        {
            description
            {
            }
            returns System.Meta.IsIntType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsIntegerType.T0
        {
            description
            {
            }
            returns System.Meta.IsIntegerType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsLongType.T0
        {
            description
            {
            }
            returns System.Meta.IsLongType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsLvalueReferenceType.T0
        {
            description
            {
            }
            returns System.Meta.IsLvalueReferenceType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonBasicType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonBasicType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonBoolType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonBoolType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonByteType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonByteType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonCharType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonCharType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonCharacterType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonCharacterType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonClassDelegateType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonClassDelegateType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonClassType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonClassType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonConstType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonConstType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonDelegateType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonDelegateType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonDoubleType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonDoubleType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonEnumType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonEnumType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonFloatType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonFloatType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonFloatingPointType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonFloatingPointType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonIntType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonIntType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonIntegerType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonIntegerType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonLongType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonLongType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonLvalueReferenceType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonLvalueReferenceType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonPointerType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonPointerType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonPolymorphic.T0
        {
            description
            {
            }
            returns System.Meta.IsNonPolymorphic.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonReferenceType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonReferenceType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonRvalueReferenceType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonRvalueReferenceType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonSByteType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonSByteType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonShortType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonShortType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonSignedType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonSignedType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonUCharType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonUCharType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonUIntType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonUIntType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonULongType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonULongType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonUShortType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonUShortType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonUnsignedType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonUnsignedType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonVoidType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonVoidType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsNonWCharType.T0
        {
            description
            {
            }
            returns System.Meta.IsNonWCharType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsPointerType.T0
        {
            description
            {
            }
            returns System.Meta.IsPointerType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsPolymorphic.T0
        {
            description
            {
            }
            returns System.Meta.IsPolymorphic.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsReferenceType.T0
        {
            description
            {
            }
            returns System.Meta.IsReferenceType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsRvalueReferenceType.T0
        {
            description
            {
            }
            returns System.Meta.IsRvalueReferenceType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsSByteType.T0
        {
            description
            {
            }
            returns System.Meta.IsSByteType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsShortType.T0
        {
            description
            {
            }
            returns System.Meta.IsShortType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsSignedType.T0
        {
            description
            {
            }
            returns System.Meta.IsSignedType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsUCharType.T0
        {
            description
            {
            }
            returns System.Meta.IsUCharType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsUIntType.T0
        {
            description
            {
            }
            returns System.Meta.IsUIntType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsULongType.T0
        {
            description
            {
            }
            returns System.Meta.IsULongType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsUShortType.T0
        {
            description
            {
            }
            returns System.Meta.IsUShortType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsUnsignedType.T0
        {
            description
            {
            }
            returns System.Meta.IsUnsignedType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsVoidType.T0
        {
            description
            {
            }
            returns System.Meta.IsVoidType.T0.returnValue
            {
                description
                {
                }
            }
        }
        function System.Meta.IsWCharType.T0
        {
            description
            {
            }
            returns System.Meta.IsWCharType.T0.returnValue
            {
                description
                {
                }
            }
        }
    }
    namespace System.Numerics
    {
        description
        {
        }
    }
    namespace System.Numerics.Multiprecision
    {
        description
        {
            Contains arbitrary precision integer type System.Numerics.Multiprecision.BigInt, arbitrary precision rational type System.Numerics.Multiprecision.BigRational and 
            arbitrary precision floating point type System.Numerics.Multiprecision.BigFloat.
        }
        class System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                An arbitrary precision floating point type.
            }
            function System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat
            {
                description
                {
                    Default constructor. Creates an instance of arbitrary precision floating point type and initializes it to zero.
                }
            }
            function System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.that
                {
                    description
                    {
                        A System.Numerics.Multiprecision.BigFloat to copy from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.that
                {
                    description
                    {
                        A System.Numerics.Multiprecision.BigFloat to assign from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.RR.System.Numerics.Multiprecision.BigFloat
            {
                description
                {
                    Move constructor.
                }
                parameter System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.RR.System.Numerics.Multiprecision.BigFloat.that
                {
                    description
                    {
                        A System.Numerics.Multiprecision.BigFloat to move from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.RR.System.Numerics.Multiprecision.BigFloat
            {
                description
                {
                    Move assignment.
                }
                parameter System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.RR.System.Numerics.Multiprecision.BigFloat.__parameter0
                {
                    description
                    {
                        A System.Numerics.Multiprecision.BigFloat to assign from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigInt
            {
                description
                {
                    Constructor. Creates an instance of arbitrary precision floating point type and initializes it from the given arbitrary precision integer type.
                }
                parameter System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigInt.that
                {
                    description
                    {
                        An arbitrary precision integer type value to construct from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigRational
            {
                description
                {
                    Constructor. Creates an instance of arbitrary precision floating point type and initializes it from the given arbitrary precision rational type.
                }
                parameter System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigRational.that
                {
                    description
                    {
                        An arbitrary precision rational type value to construct from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.Precision
            {
                description
                {
                    Constructor. Constructs an arbitrary precision floating point value with given precision.
                }
                parameter System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.Precision.prec
                {
                    description
                    {
                        Precision.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.String.char
            {
                description
                {
                    Constructor. Constructs an arbitrary precision floating point value from given decimal digits.
                }
                parameter System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.String.char.str
                {
                    description
                    {
                        Digit string.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.String.char.int
            {
                description
                {
                    Constructor. Constructs an arbitrary precision floating point value from given digits that are in given base.
                }
                parameter System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.String.char.int.base_
                {
                    description
                    {
                        Base of digits.
                    }
                }
                parameter System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.C.R.System.String.char.int.str
                {
                    description
                    {
                        Digit string.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.double
            {
                description
                {
                    Constructor. Constructs an arbitrary precision floating point value from given double precision value.
                }
                parameter System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.double.that
                {
                    description
                    {
                        A double precision value to initialize from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.int
            {
                description
                {
                    Constructor. Constructs an arbitrary precision floating point value from given integer value.
                }
                parameter System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.int.that
                {
                    description
                    {
                        An integer value to initialize from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.uint
            {
                description
                {
                    Constructor. Constructs an arbitrary precision floating point value from given unsigned integer value.
                }
                parameter System.Numerics.Multiprecision.BigFloat.constructor.P.System.Numerics.Multiprecision.BigFloat.uint.that
                {
                    description
                    {
                        An unsigned integer value to initialize from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.Handle.C.P.System.Numerics.Multiprecision.BigFloat
            {
                description
                {
                    Returns a handle to the GNU MP library arbitrary precision floating point number representation.
                }
                returns System.Numerics.Multiprecision.BigFloat.Handle.C.P.System.Numerics.Multiprecision.BigFloat.returnValue
                {
                    description
                    {
                        Returns a handle to the GNU MP library arbitrary precision floating point number representation.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.ToDouble.C.P.System.Numerics.Multiprecision.BigFloat
            {
                description
                {
                    Converts the arbitrary precision floating point number to a double precision value by truncating it.
                }
                returns System.Numerics.Multiprecision.BigFloat.ToDouble.C.P.System.Numerics.Multiprecision.BigFloat.returnValue
                {
                    description
                    {
                        Returns the arbitrary precision floating point number converted to a double precision value by truncating it.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.ToString.C.P.System.Numerics.Multiprecision.BigFloat
            {
                description
                {
                    Returns the value of the System.Numerics.Multiprecision.BigFloat as a string.
                }
                returns System.Numerics.Multiprecision.BigFloat.ToString.C.P.System.Numerics.Multiprecision.BigFloat.returnValue
                {
                    description
                    {
                        Returns the value of the System.Numerics.Multiprecision.BigFloat as a string.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.ToString.C.P.System.Numerics.Multiprecision.BigFloat.int
            {
                description
                {
                    Returns the value of the System.Numerics.Multiprecision.BigFloat as a string using given base.
                }
                parameter System.Numerics.Multiprecision.BigFloat.ToString.C.P.System.Numerics.Multiprecision.BigFloat.int.base_
                {
                    description
                    {
                        Base.
                    }
                }
                returns System.Numerics.Multiprecision.BigFloat.ToString.C.P.System.Numerics.Multiprecision.BigFloat.int.returnValue
                {
                    description
                    {
                        Returns the value of the System.Numerics.Multiprecision.BigFloat as a string using given base.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.ToString.C.P.System.Numerics.Multiprecision.BigFloat.int.uint
            {
                description
                {
                    Returns the value of the System.Numerics.Multiprecision.BigFloat as a string using given base and given number of digits.
                }
                parameter System.Numerics.Multiprecision.BigFloat.ToString.C.P.System.Numerics.Multiprecision.BigFloat.int.uint.base_
                {
                    description
                    {
                        Base.
                    }
                }
                parameter System.Numerics.Multiprecision.BigFloat.ToString.C.P.System.Numerics.Multiprecision.BigFloat.int.uint.numDigits
                {
                    description
                    {
                        Number of digits.
                    }
                }
                returns System.Numerics.Multiprecision.BigFloat.ToString.C.P.System.Numerics.Multiprecision.BigFloat.int.uint.returnValue
                {
                    description
                    {
                        Returns the value of the System.Numerics.Multiprecision.BigFloat as a string using given base and given number of digits.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigInt
            {
                description
                {
                    Assigns the value of the System.Numerics.Multiprecision.BigFloat from the given arbitrary precision integer.
                }
                parameter System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigInt.that
                {
                    description
                    {
                        An arbitrary precision integer to assign from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigRational
            {
                description
                {
                    Assigns the value of the System.Numerics.Multiprecision.BigFloat from the given arbitrary precision rational.
                }
                parameter System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigRational.that
                {
                    description
                    {
                        An arbitrary precision rational to assign from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.double
            {
                description
                {
                    Assigns the value of the System.Numerics.Multiprecision.BigFloat from the given double precision value.
                }
                parameter System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.double.that
                {
                    description
                    {
                        A double precision value to assign from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.int
            {
                description
                {
                    Assigns the value of the System.Numerics.Multiprecision.BigFloat from the given integer value.
                }
                parameter System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.int.that
                {
                    description
                    {
                        An integer value to assign from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.uint
            {
                description
                {
                    Assigns the value of the System.Numerics.Multiprecision.BigFloat from the given unsigned integer value.
                }
                parameter System.Numerics.Multiprecision.BigFloat.operator.assign.P.System.Numerics.Multiprecision.BigFloat.uint.that
                {
                    description
                    {
                        An unsigned integer value to assign from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigFloat.destructor.P.System.Numerics.Multiprecision.BigFloat
            {
                description
                {
                    Frees memory occupied by the System.Numerics.Multiprecision.BigFloat instance.
                }
            }
        }
        class System.Numerics.Multiprecision.BigFloatDefaultPrecisionSetter
        {
            description
            {
            }
            function System.Numerics.Multiprecision.BigFloatDefaultPrecisionSetter.Init
            {
                description
                {
                }
            }
        }
        class System.Numerics.Multiprecision.BigInt
        {
            description
            {
                An arbitrary precision signed integer type.
            }
            function System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt
            {
                description
                {
                    Default constructor. Creates an instance of arbitrary precision signed integer and initializes it to zero.
                }
            }
            function System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.that
                {
                    description
                    {
                        A System.Numerics.Multiprecision.BigInt to copy from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.operator.assign.P.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Numerics.Multiprecision.BigInt.operator.assign.P.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.that
                {
                    description
                    {
                        A System.Numerics.Multiprecision.BigInt to assign.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.RR.System.Numerics.Multiprecision.BigInt
            {
                description
                {
                    Move constructor.
                }
                parameter System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.RR.System.Numerics.Multiprecision.BigInt.that
                {
                    description
                    {
                        A System.Numerics.Multiprecision.BigInt to move from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.operator.assign.P.System.Numerics.Multiprecision.BigInt.RR.System.Numerics.Multiprecision.BigInt
            {
                description
                {
                    Move assignment.
                }
                parameter System.Numerics.Multiprecision.BigInt.operator.assign.P.System.Numerics.Multiprecision.BigInt.RR.System.Numerics.Multiprecision.BigInt.that
                {
                    description
                    {
                        A System.Numerics.Multiprecision.BigInt to assign.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.C.R.System.String.char
            {
                description
                {
                    Constructor. Constructs an arbitrary precision floating point value from given decimal digits.
                }
                parameter System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.C.R.System.String.char.str
                {
                    description
                    {
                        Decimal digit string.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.C.R.System.String.char.int
            {
                description
                {
                    Constructor. Constructs an arbitrary precision floating point value from given digits of given base.
                }
                parameter System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.C.R.System.String.char.int.base_
                {
                    description
                    {
                        Base of digits.
                    }
                }
                parameter System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.C.R.System.String.char.int.str
                {
                    description
                    {
                        Digit string.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.int
            {
                description
                {
                    Creates an instance of arbitrary precision signed integer and initializes it to given signed integer value.
                }
                parameter System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.int.that
                {
                    description
                    {
                        A signed integer value.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.uint
            {
                description
                {
                    Creates an instance of arbitrary precision signed integer and initializes it to given unsigned integer value.
                }
                parameter System.Numerics.Multiprecision.BigInt.constructor.P.System.Numerics.Multiprecision.BigInt.uint.that
                {
                    description
                    {
                        An unsigned integer value.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.Handle.C.P.System.Numerics.Multiprecision.BigInt
            {
                description
                {
                    Returns a handle to the GNU MP library arbitrary precision integer representation.
                }
                returns System.Numerics.Multiprecision.BigInt.Handle.C.P.System.Numerics.Multiprecision.BigInt.returnValue
                {
                    description
                    {
                        Returns a handle to the GNU MP library arbitrary precision integer representation.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.ToString.C.P.System.Numerics.Multiprecision.BigInt
            {
                description
                {
                    Returns the value of the System.Numerics.Multiprecision.BigInt as a string of decimal digits prefixed by minus sign if the value is negative.
                }
                returns System.Numerics.Multiprecision.BigInt.ToString.C.P.System.Numerics.Multiprecision.BigInt.returnValue
                {
                    description
                    {
                        Returns the value of the System.Numerics.Multiprecision.BigInt as a string of decimal digits prefixed by minus sign if the value is negative.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.ToString.C.P.System.Numerics.Multiprecision.BigInt.int
            {
                description
                {
                    Returns the value of the System.Numerics.Multiprecision.BigInt as a string of digits in given base prefixed by minus sign if the value is negative.
                }
                parameter System.Numerics.Multiprecision.BigInt.ToString.C.P.System.Numerics.Multiprecision.BigInt.int.base_
                {
                    description
                    {
                        Base of digits. Base may vary from 2 to 62.
                    }
                }
                returns System.Numerics.Multiprecision.BigInt.ToString.C.P.System.Numerics.Multiprecision.BigInt.int.returnValue
                {
                    description
                    {
                        Returns the value of the System.Numerics.Multiprecision.BigInt as a string of digits in given base prefixed by minus sign if the value is negative.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.operator.assign.P.System.Numerics.Multiprecision.BigInt.int
            {
                description
                {
                    Assigns the value of the System.Numerics.Multiprecision.BigInt to given signed integer value.
                }
                parameter System.Numerics.Multiprecision.BigInt.operator.assign.P.System.Numerics.Multiprecision.BigInt.int.that
                {
                    description
                    {
                        A signed integer value.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.operator.assign.P.System.Numerics.Multiprecision.BigInt.uint
            {
                description
                {
                    Assigns the value of the System.Numerics.Multiprecision.BigInt to given unsigned integer value.
                }
                parameter System.Numerics.Multiprecision.BigInt.operator.assign.P.System.Numerics.Multiprecision.BigInt.uint.that
                {
                    description
                    {
                        An unsigned integer value.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigInt.destructor.P.System.Numerics.Multiprecision.BigInt
            {
                description
                {
                    Frees memory occupied by the System.Numerics.Multiprecision.BigInt instance.
                }
            }
        }
        class System.Numerics.Multiprecision.BigRational
        {
            description
            {
                An arbitrary precision rational nunber type.
            }
            function System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational
            {
                description
                {
                    Default constructor. Creates an instance of arbitrary precision rational number and initializes it to zero.
                }
            }
            function System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational
            {
                description
                {
                    Copy constructor. 
                }
                parameter System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.that
                {
                    description
                    {
                        A System.Numerics.Multiprecision.BigRational to copy from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.operator.assign.P.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Numerics.Multiprecision.BigRational.operator.assign.P.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.that
                {
                    description
                    {
                        A System.Numerics.Multiprecision.BigRational to assign from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.RR.System.Numerics.Multiprecision.BigRational
            {
                description
                {
                    Move constructor.
                }
                parameter System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.RR.System.Numerics.Multiprecision.BigRational.that
                {
                    description
                    {
                        A System.Numerics.Multiprecision.BigRational to move from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.operator.assign.P.System.Numerics.Multiprecision.BigRational.RR.System.Numerics.Multiprecision.BigRational
            {
                description
                {
                    Move assignment.
                }
                parameter System.Numerics.Multiprecision.BigRational.operator.assign.P.System.Numerics.Multiprecision.BigRational.RR.System.Numerics.Multiprecision.BigRational.that
                {
                    description
                    {
                        A System.Numerics.Multiprecision.BigRational to assign from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigInt
            {
                description
                {
                    Constructor. Creates an instance of arbitrary precision rational type and initializes it from the given arbitrary precision integer type.
                }
                parameter System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigInt.that
                {
                    description
                    {
                        An arbitrary precision integer type value to initialize from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.C.R.System.String.char
            {
                description
                {
                    Constructor. Creates an instance of arbitrary precision rational type and initializes it from the given string.
                }
                parameter System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.C.R.System.String.char.str
                {
                    description
                    {
                        A string to initialize from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.C.R.System.String.char.int
            {
                description
                {
                    Constructor. Creates an instance of arbitrary precision rational type and initializes it from the given string of given base.
                }
                parameter System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.C.R.System.String.char.int.base_
                {
                    description
                    {
                        Base of string.
                    }
                }
                parameter System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.C.R.System.String.char.int.str
                {
                    description
                    {
                        A string to initialize from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.int
            {
                description
                {
                    Constructor. Creates an instance of arbitrary precision rational type and initializes it from the given integer value.
                }
                parameter System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.int.that
                {
                    description
                    {
                        An integer value to initalize from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.uint
            {
                description
                {
                    Constructor. Creates an instance of arbitrary precision rational type and initializes it from the given unsigned integer value.
                }
                parameter System.Numerics.Multiprecision.BigRational.constructor.P.System.Numerics.Multiprecision.BigRational.uint.that
                {
                    description
                    {
                        An unsigned integer value to initalize from.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.Denominator.C.P.System.Numerics.Multiprecision.BigRational
            {
                description
                {
                    Returns the denominator of the arbitrary precision ration number.
                }
                returns System.Numerics.Multiprecision.BigRational.Denominator.C.P.System.Numerics.Multiprecision.BigRational.returnValue
                {
                    description
                    {
                        Returns the denominator of the arbitrary precision ration number.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.Handle.C.P.System.Numerics.Multiprecision.BigRational
            {
                description
                {
                    Returns a handle to the GNU MP library arbitrary precision rational representation.
                }
                returns System.Numerics.Multiprecision.BigRational.Handle.C.P.System.Numerics.Multiprecision.BigRational.returnValue
                {
                    description
                    {
                        Returns a handle to the GNU MP library arbitrary precision rational representation.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.Numerator.C.P.System.Numerics.Multiprecision.BigRational
            {
                description
                {
                    Returns the numerator of the arbitrary precision ration number.
                }
                returns System.Numerics.Multiprecision.BigRational.Numerator.C.P.System.Numerics.Multiprecision.BigRational.returnValue
                {
                    description
                    {
                        Returns the numerator of the arbitrary precision ration number.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.ToString.C.P.System.Numerics.Multiprecision.BigRational
            {
                description
                {
                    Returns the value of the System.Numerics.Multiprecision.BigRational as a string.
                }
                returns System.Numerics.Multiprecision.BigRational.ToString.C.P.System.Numerics.Multiprecision.BigRational.returnValue
                {
                    description
                    {
                        Returns the value of the System.Numerics.Multiprecision.BigRational as a string.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.ToString.C.P.System.Numerics.Multiprecision.BigRational.int
            {
                description
                {
                    Returns the value of the System.Numerics.Multiprecision.BigRational as a string of given base.
                }
                parameter System.Numerics.Multiprecision.BigRational.ToString.C.P.System.Numerics.Multiprecision.BigRational.int.base_
                {
                    description
                    {
                        Base.
                    }
                }
                returns System.Numerics.Multiprecision.BigRational.ToString.C.P.System.Numerics.Multiprecision.BigRational.int.returnValue
                {
                    description
                    {
                        Returns the value of the System.Numerics.Multiprecision.BigRational as a string of given base.
                    }
                }
            }
            function System.Numerics.Multiprecision.BigRational.destructor.P.System.Numerics.Multiprecision.BigRational
            {
                description
                {
                    Frees memory occupied by the System.Numerics.Multiprecision.BigRational instance.
                }
            }
        }
        class System.Numerics.Multiprecision.Precision
        {
            description
            {
                Represents a precision of given number of digits.
            }
            function System.Numerics.Multiprecision.Precision.constructor.P.System.Numerics.Multiprecision.Precision
            {
                description
                {
                    Default constructor. Initializes the precision with zero digits.
                }
            }
            function System.Numerics.Multiprecision.Precision.constructor.P.System.Numerics.Multiprecision.Precision.C.R.System.Numerics.Multiprecision.Precision
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Numerics.Multiprecision.Precision.constructor.P.System.Numerics.Multiprecision.Precision.C.R.System.Numerics.Multiprecision.Precision.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Numerics.Multiprecision.Precision.operator.assign.P.System.Numerics.Multiprecision.Precision.C.R.System.Numerics.Multiprecision.Precision
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Numerics.Multiprecision.Precision.operator.assign.P.System.Numerics.Multiprecision.Precision.C.R.System.Numerics.Multiprecision.Precision.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Numerics.Multiprecision.Precision.constructor.P.System.Numerics.Multiprecision.Precision.RR.System.Numerics.Multiprecision.Precision
            {
                description
                {
                    Move constructor.
                }
                parameter System.Numerics.Multiprecision.Precision.constructor.P.System.Numerics.Multiprecision.Precision.RR.System.Numerics.Multiprecision.Precision.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Numerics.Multiprecision.Precision.operator.assign.P.System.Numerics.Multiprecision.Precision.RR.System.Numerics.Multiprecision.Precision
            {
                description
                {
                    Move assignment.
                }
                parameter System.Numerics.Multiprecision.Precision.operator.assign.P.System.Numerics.Multiprecision.Precision.RR.System.Numerics.Multiprecision.Precision.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Numerics.Multiprecision.Precision.constructor.P.System.Numerics.Multiprecision.Precision.uint
            {
                description
                {
                    Constructor. Initializes the precision with given number of digits.
                }
                parameter System.Numerics.Multiprecision.Precision.constructor.P.System.Numerics.Multiprecision.Precision.uint.prec_
                {
                    description
                    {
                        Number of digits.
                    }
                }
            }
            function System.Numerics.Multiprecision.Precision.operator_uint.C.P.System.Numerics.Multiprecision.Precision
            {
                description
                {
                    Returns the number of digits of this precision.
                }
                returns System.Numerics.Multiprecision.Precision.operator_uint.C.P.System.Numerics.Multiprecision.Precision.returnValue
                {
                    description
                    {
                        Returns the number of digits of this precision.
                    }
                }
            }
        }
        function System.Numerics.Multiprecision.Abs.C.R.System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                Returns the absolute value of the given System.Numerics.Multiprecision.BigFloat value.
            }
            parameter System.Numerics.Multiprecision.Abs.C.R.System.Numerics.Multiprecision.BigFloat.x
            {
                description
                {
                    Arbitrary precision floating point number.
                }
            }
            returns System.Numerics.Multiprecision.Abs.C.R.System.Numerics.Multiprecision.BigFloat.returnValue
            {
                description
                {
                    Returns the absolute value of the given System.Numerics.Multiprecision.BigFloat value.
                }
            }
            owner System.Numerics.Multiprecision.BigFloat;
        }
        function System.Numerics.Multiprecision.Abs.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns absolute value of given System.Numerics.Multiprecision.BigInt.
            }
            parameter System.Numerics.Multiprecision.Abs.C.R.System.Numerics.Multiprecision.BigInt.x
            {
                description
                {
                    A System.Numerics.Multiprecision.BigInt.
                }
            }
            returns System.Numerics.Multiprecision.Abs.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns absolute value of given System.Numerics.Multiprecision.BigInt.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.Abs.C.R.System.Numerics.Multiprecision.BigRational
        {
            description
            {
                Returns the absolute value of the given System.Numerics.Multiprecision.BigRational value.
            }
            parameter System.Numerics.Multiprecision.Abs.C.R.System.Numerics.Multiprecision.BigRational.x
            {
                description
                {
                    System.Numerics.Multiprecision.BigRational.
                }
            }
            returns System.Numerics.Multiprecision.Abs.C.R.System.Numerics.Multiprecision.BigRational.returnValue
            {
                description
                {
                    Returns the absolute value of the given System.Numerics.Multiprecision.BigRational value.
                }
            }
            owner System.Numerics.Multiprecision.BigRational;
        }
        function System.Numerics.Multiprecision.Ceil.C.R.System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                Returns the System.Numerics.Multiprecision.BigFloat rounded up to the next arbitrary precision integer value.
            }
            parameter System.Numerics.Multiprecision.Ceil.C.R.System.Numerics.Multiprecision.BigFloat.x
            {
                description
                {
                    System.Numerics.Multiprecision.BigFloat.
                }
            }
            returns System.Numerics.Multiprecision.Ceil.C.R.System.Numerics.Multiprecision.BigFloat.returnValue
            {
                description
                {
                    System.Numerics.Multiprecision.BigFloat
                }
            }
            owner System.Numerics.Multiprecision.BigFloat;
        }
        function System.Numerics.Multiprecision.ClearBit.R.System.Numerics.Multiprecision.BigInt.uint
        {
            description
            {
                Clear given bit of given System.Numerics.Multiprecision.BigInt.
            }
            parameter System.Numerics.Multiprecision.ClearBit.R.System.Numerics.Multiprecision.BigInt.uint.bitIndex
            {
                description
                {
                    Index of bit to clear.
                }
            }
            parameter System.Numerics.Multiprecision.ClearBit.R.System.Numerics.Multiprecision.BigInt.uint.x
            {
                description
                {
                    A reference to a System.Numerics.Multiprecision.BigInt.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.Floor.C.R.System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                Returns the System.Numerics.Multiprecision.BigFloat rounded down to the previous arbitrary precision integer value.
            }
            parameter System.Numerics.Multiprecision.Floor.C.R.System.Numerics.Multiprecision.BigFloat.x
            {
                description
                {
                    System.Numerics.Multiprecision.BigFloat.
                }
            }
            returns System.Numerics.Multiprecision.Floor.C.R.System.Numerics.Multiprecision.BigFloat.returnValue
            {
                description
                {
                    Returns the System.Numerics.Multiprecision.BigFloat rounded down to the previous arbitrary precision integer value.
                }
            }
            owner System.Numerics.Multiprecision.BigFloat;
        }
        function System.Numerics.Multiprecision.GetBigFloatDefaultPrecision
        {
            description
            {
            }
            returns System.Numerics.Multiprecision.GetBigFloatDefaultPrecision.returnValue
            {
                description
                {
                }
            }
        }
        function System.Numerics.Multiprecision.SetBit.R.System.Numerics.Multiprecision.BigInt.uint
        {
            description
            {
                Set given bit of given System.Numerics.Multiprecision.BigInt.
            }
            parameter System.Numerics.Multiprecision.SetBit.R.System.Numerics.Multiprecision.BigInt.uint.bitIndex
            {
                description
                {
                    Index of bit to set.
                }
            }
            parameter System.Numerics.Multiprecision.SetBit.R.System.Numerics.Multiprecision.BigInt.uint.x
            {
                description
                {
                    A reference to a System.Numerics.Multiprecision.BigInt.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.Sqrt.C.R.System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                Returns the square root of the given System.Numerics.Multiprecision.BigFloat number.
            }
            parameter System.Numerics.Multiprecision.Sqrt.C.R.System.Numerics.Multiprecision.BigFloat.x
            {
                description
                {
                    System.Numerics.Multiprecision.BigFloat.
                }
            }
            returns System.Numerics.Multiprecision.Sqrt.C.R.System.Numerics.Multiprecision.BigFloat.returnValue
            {
                description
                {
                    Returns the square root of the given System.Numerics.Multiprecision.BigFloat number.
                }
            }
            owner System.Numerics.Multiprecision.BigFloat;
        }
        function System.Numerics.Multiprecision.TestBit.R.System.Numerics.Multiprecision.BigInt.uint
        {
            description
            {
                Returns true if given bit of given System.Numerics.Multiprecision.BigInt is set, false otherwise.
            }
            parameter System.Numerics.Multiprecision.TestBit.R.System.Numerics.Multiprecision.BigInt.uint.bitIndex
            {
                description
                {
                    Index of bit to test.
                }
            }
            parameter System.Numerics.Multiprecision.TestBit.R.System.Numerics.Multiprecision.BigInt.uint.x
            {
                description
                {
                    A reference to a System.Numerics.Multiprecision.BigInt.
                }
            }
            returns System.Numerics.Multiprecision.TestBit.R.System.Numerics.Multiprecision.BigInt.uint.returnValue
            {
                description
                {
                    Returns true if given bit of given System.Numerics.Multiprecision.BigInt is set, false otherwise.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.ToggleBit.R.System.Numerics.Multiprecision.BigInt.uint
        {
            description
            {
                Toggle given bit of given System.Numerics.Multiprecision.BigInt.
            }
            parameter System.Numerics.Multiprecision.ToggleBit.R.System.Numerics.Multiprecision.BigInt.uint.bitIndex
            {
                description
                {
                    Index of bit to toggle.
                }
            }
            parameter System.Numerics.Multiprecision.ToggleBit.R.System.Numerics.Multiprecision.BigInt.uint.x
            {
                description
                {
                    A reference to a System.Numerics.Multiprecision.BigInt.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.Trunc.C.R.System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                Returns the System.Numerics.Multiprecision.BigFloat truncated towards zero.
            }
            parameter System.Numerics.Multiprecision.Trunc.C.R.System.Numerics.Multiprecision.BigFloat.x
            {
                description
                {
                    System.Numerics.Multiprecision.BigFloat.
                }
            }
            returns System.Numerics.Multiprecision.Trunc.C.R.System.Numerics.Multiprecision.BigFloat.returnValue
            {
                description
                {
                    Returns the System.Numerics.Multiprecision.BigFloat truncated towards zero.
                }
            }
            owner System.Numerics.Multiprecision.BigFloat;
        }
        function System.Numerics.Multiprecision.operator.remainder.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns the remainder when given System.Numerics.Multiprecision.BigInt is divided by another.
            }
            parameter System.Numerics.Multiprecision.operator.remainder.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.left
            {
                description
                {
                    Divisor.
                }
            }
            parameter System.Numerics.Multiprecision.operator.remainder.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.right
            {
                description
                {
                    Dividend.
                }
            }
            returns System.Numerics.Multiprecision.operator.remainder.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns the remainder when System.Numerics.Multiprecision.operator.remainder.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.left is divided by 
                    System.Numerics.Multiprecision.operator.remainder.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.right.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.operator.and.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns bitwise AND of two System.Numerics.Multiprecision.BigInt values.
            }
            parameter System.Numerics.Multiprecision.operator.and.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.and.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.and.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns bitwise AND of given System.Numerics.Multiprecision.BigInt values.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.operator.times.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                Returns the product of given System.Numerics.Multiprecision.BigFloat value multiplied by another.
            }
            parameter System.Numerics.Multiprecision.operator.times.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.times.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.times.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.returnValue
            {
                description
                {
                    Returns the product of given System.Numerics.Multiprecision.BigFloat value multiplied by another.
                }
            }
            owner System.Numerics.Multiprecision.BigFloat;
        }
        function System.Numerics.Multiprecision.operator.times.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns the product of given System.Numerics.Multiprecision.BigInt value multiplied by another.
            }
            parameter System.Numerics.Multiprecision.operator.times.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.times.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.times.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns the product of given System.Numerics.Multiprecision.BigInt value multiplied by another.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.operator.times.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational
        {
            description
            {
                Returns the product of given System.Numerics.Multiprecision.BigRational value multiplied by another.
            }
            parameter System.Numerics.Multiprecision.operator.times.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.times.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.times.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.returnValue
            {
                description
                {
                    Returns the product of given System.Numerics.Multiprecision.BigRational value multiplied by another.
                }
            }
            owner System.Numerics.Multiprecision.BigRational;
        }
        function System.Numerics.Multiprecision.operator.plus.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                Returns the sum of given System.Numerics.Multiprecision.BigFloat value added to another.
            }
            parameter System.Numerics.Multiprecision.operator.plus.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.plus.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.plus.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.returnValue
            {
                description
                {
                    Returns the sum of given System.Numerics.Multiprecision.BigFloat value added to another.
                }
            }
            owner System.Numerics.Multiprecision.BigFloat;
        }
        function System.Numerics.Multiprecision.operator.plus.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns the sum of given System.Numerics.Multiprecision.BigInt value added to another.
            }
            parameter System.Numerics.Multiprecision.operator.plus.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.plus.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.plus.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns the sum of given System.Numerics.Multiprecision.BigInt value added to another.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.operator.plus.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational
        {
            description
            {
                Returns the sum of given System.Numerics.Multiprecision.BigRational value added to another.
            }
            parameter System.Numerics.Multiprecision.operator.plus.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.plus.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.plus.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.returnValue
            {
                description
                {
                    Returns the sum of given System.Numerics.Multiprecision.BigRational value added to another.
                }
            }
            owner System.Numerics.Multiprecision.BigRational;
        }
        function System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                Returns the negation of System.Numerics.Multiprecision.BigFloat.
            }
            parameter System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigFloat.x
            {
                description
                {
                    A value.
                }
            }
            returns System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigFloat.returnValue
            {
                description
                {
                    Returns the negation of System.Numerics.Multiprecision.BigFloat.
                }
            }
            owner System.Numerics.Multiprecision.BigFloat;
        }
        function System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                Returns the difference of given System.Numerics.Multiprecision.BigFloat value subtracted from another.
            }
            parameter System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.returnValue
            {
                description
                {
                    Returns the difference of given System.Numerics.Multiprecision.BigFloat value subtracted from another.
                }
            }
            owner System.Numerics.Multiprecision.BigFloat;
        }
        function System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns the negation of System.Numerics.Multiprecision.BigInt.
            }
            parameter System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigInt.x
            {
                description
                {
                    A value.
                }
            }
            returns System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns the negation of System.Numerics.Multiprecision.BigInt.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns the difference of given System.Numerics.Multiprecision.BigInt value subtracted from another.
            }
            parameter System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns the difference of given System.Numerics.Multiprecision.BigInt value subtracted from another.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigRational
        {
            description
            {
                Returns the negation of System.Numerics.Multiprecision.BigRational.
            }
            parameter System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigRational.x
            {
                description
                {
                    System.Numerics.Multiprecision.BigRational.
                }
            }
            returns System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigRational.returnValue
            {
                description
                {
                    Returns the negation of System.Numerics.Multiprecision.BigRational.
                }
            }
            owner System.Numerics.Multiprecision.BigRational;
        }
        function System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational
        {
            description
            {
                Returns the difference of given System.Numerics.Multiprecision.BigRational value subtracted from another.
            }
            parameter System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.minus.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.returnValue
            {
                description
                {
                    Returns the difference of given System.Numerics.Multiprecision.BigRational value subtracted from another.
                }
            }
            owner System.Numerics.Multiprecision.BigRational;
        }
        function System.Numerics.Multiprecision.operator.divides.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                Returns the quotient when given System.Numerics.Multiprecision.BigFloat is divided by another.
            }
            parameter System.Numerics.Multiprecision.operator.divides.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.divides.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.divides.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.returnValue
            {
                description
                {
                    Returns the quotient when given System.Numerics.Multiprecision.BigFloat is divided by another.
                }
            }
            owner System.Numerics.Multiprecision.BigFloat;
        }
        function System.Numerics.Multiprecision.operator.divides.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns the quotient when given System.Numerics.Multiprecision.BigInt is divided by another.
            }
            remarks
            {
                Quotient is rounded towards zero.
            }
            parameter System.Numerics.Multiprecision.operator.divides.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.left
            {
                description
                {
                    Divisor.
                }
            }
            parameter System.Numerics.Multiprecision.operator.divides.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.right
            {
                description
                {
                    Dividend.
                }
            }
            returns System.Numerics.Multiprecision.operator.divides.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns the quotient when given System.Numerics.Multiprecision.BigInt is divided by another.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.operator.divides.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational
        {
            description
            {
                Returns the quotient when given System.Numerics.Multiprecision.BigRational is divided by another.
            }
            parameter System.Numerics.Multiprecision.operator.divides.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.left
            {
                description
                {
                    Divisor.
                }
            }
            parameter System.Numerics.Multiprecision.operator.divides.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.right
            {
                description
                {
                    Dividend.
                }
            }
            returns System.Numerics.Multiprecision.operator.divides.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.returnValue
            {
                description
                {
                    Returns the quotient when given System.Numerics.Multiprecision.BigRational is divided by another.
                }
            }
            owner System.Numerics.Multiprecision.BigRational;
        }
        function System.Numerics.Multiprecision.operator.less.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                Returns true if the first System.Numerics.Multiprecision.BigFloat is less than the second System.Numerics.Multiprecision.BigFloat, false otherwise.
            }
            parameter System.Numerics.Multiprecision.operator.less.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.less.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.less.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.returnValue
            {
                description
                {
                    Returns true if the first System.Numerics.Multiprecision.BigFloat is less than the second System.Numerics.Multiprecision.BigFloat, false otherwise.
                }
            }
            owner System.Numerics.Multiprecision.BigFloat;
        }
        function System.Numerics.Multiprecision.operator.less.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns true if the first System.Numerics.Multiprecision.BigInt is less than the second System.Numerics.Multiprecision.BigInt, false otherwise.
            }
            parameter System.Numerics.Multiprecision.operator.less.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.less.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.less.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns true if the first System.Numerics.Multiprecision.BigInt is less than the second System.Numerics.Multiprecision.BigInt, false otherwise.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.operator.less.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational
        {
            description
            {
                Returns true if the first System.Numerics.Multiprecision.BigRational is less than the second System.Numerics.Multiprecision.BigRational, false otherwise.
            }
            parameter System.Numerics.Multiprecision.operator.less.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.less.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.less.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.returnValue
            {
                description
                {
                    Returns true if the first System.Numerics.Multiprecision.BigRational is less than the second System.Numerics.Multiprecision.BigRational, false otherwise.
                }
            }
            owner System.Numerics.Multiprecision.BigRational;
        }
        function System.Numerics.Multiprecision.operator.shiftLeft.R.System.IO.OutputStream.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Puts the value of the given System.Numerics.Multiprecision.BigInt to the given output stream as string of decimal digits prefixed by minus sign if the value is negative.
            }
            parameter System.Numerics.Multiprecision.operator.shiftLeft.R.System.IO.OutputStream.C.R.System.Numerics.Multiprecision.BigInt.s
            {
                description
                {
                    An output stream.
                }
            }
            parameter System.Numerics.Multiprecision.operator.shiftLeft.R.System.IO.OutputStream.C.R.System.Numerics.Multiprecision.BigInt.x
            {
                description
                {
                    A System.Numerics.Multiprecision.BigInt value.
                }
            }
            returns System.Numerics.Multiprecision.operator.shiftLeft.R.System.IO.OutputStream.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.operator.shiftLeft.R.System.IO.OutputStream.C.R.System.Numerics.Multiprecision.BigRational
        {
            description
            {
                Puts the value of the given System.Numerics.Multiprecision.BigRational to the given output stream as string.
            }
            parameter System.Numerics.Multiprecision.operator.shiftLeft.R.System.IO.OutputStream.C.R.System.Numerics.Multiprecision.BigRational.s
            {
                description
                {
                    An output stream.
                }
            }
            parameter System.Numerics.Multiprecision.operator.shiftLeft.R.System.IO.OutputStream.C.R.System.Numerics.Multiprecision.BigRational.x
            {
                description
                {
                    A System.Numerics.Multiprecision.BigRational value.
                }
            }
            returns System.Numerics.Multiprecision.operator.shiftLeft.R.System.IO.OutputStream.C.R.System.Numerics.Multiprecision.BigRational.returnValue
            {
                description
                {
                    Returns a reference to the output stream.
                }
            }
            owner System.Numerics.Multiprecision.BigRational;
        }
        function System.Numerics.Multiprecision.operator.equal.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat
        {
            description
            {
                Returns true if the first System.Numerics.Multiprecision.BigFloat is equal to the second System.Numerics.Multiprecision.BigFloat, false otherwise.
            }
            parameter System.Numerics.Multiprecision.operator.equal.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.equal.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.equal.C.R.System.Numerics.Multiprecision.BigFloat.C.R.System.Numerics.Multiprecision.BigFloat.returnValue
            {
                description
                {
                    Returns true if the first System.Numerics.Multiprecision.BigFloat is equal to the second System.Numerics.Multiprecision.BigFloat, false otherwise.
                }
            }
            owner System.Numerics.Multiprecision.BigFloat;
        }
        function System.Numerics.Multiprecision.operator.equal.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns true if the first System.Numerics.Multiprecision.BigInt is equal to the second System.Numerics.Multiprecision.BigInt, false otherwise.
            }
            parameter System.Numerics.Multiprecision.operator.equal.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.equal.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.equal.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns true if the first System.Numerics.Multiprecision.BigInt is equal to the second System.Numerics.Multiprecision.BigInt, false otherwise.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.operator.equal.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational
        {
            description
            {
                Returns true if the first System.Numerics.Multiprecision.BigRational is equal to the second System.Numerics.Multiprecision.BigRational, false otherwise.
            }
            parameter System.Numerics.Multiprecision.operator.equal.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.equal.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.equal.C.R.System.Numerics.Multiprecision.BigRational.C.R.System.Numerics.Multiprecision.BigRational.returnValue
            {
                description
                {
                    Returns true if the first System.Numerics.Multiprecision.BigRational is equal to the second System.Numerics.Multiprecision.BigRational, false otherwise.
                }
            }
            owner System.Numerics.Multiprecision.BigRational;
        }
        function System.Numerics.Multiprecision.operator.xor.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns bitwise XOR of two System.Numerics.Multiprecision.BigInt values.
            }
            parameter System.Numerics.Multiprecision.operator.xor.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.xor.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.xor.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns bitwise XOR of two System.Numerics.Multiprecision.BigInt values.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.operator.or.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns bitwise inclusive OR of two System.Numerics.Multiprecision.BigInt values.
            }
            parameter System.Numerics.Multiprecision.operator.or.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.left
            {
                description
                {
                    Left operand.
                }
            }
            parameter System.Numerics.Multiprecision.operator.or.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.right
            {
                description
                {
                    Right operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.or.C.R.System.Numerics.Multiprecision.BigInt.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns bitwise inclusive OR of two System.Numerics.Multiprecision.BigInt values.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
        function System.Numerics.Multiprecision.operator.complement.C.R.System.Numerics.Multiprecision.BigInt
        {
            description
            {
                Returns bitwise complement of System.Numerics.Multiprecision.BigInt value.
            }
            parameter System.Numerics.Multiprecision.operator.complement.C.R.System.Numerics.Multiprecision.BigInt.x
            {
                description
                {
                    Operand.
                }
            }
            returns System.Numerics.Multiprecision.operator.complement.C.R.System.Numerics.Multiprecision.BigInt.returnValue
            {
                description
                {
                    Returns bitwise complement of System.Numerics.Multiprecision.BigInt value.
                }
            }
            owner System.Numerics.Multiprecision.BigInt;
        }
    }
    namespace System.Security
    {
        description
        {
        }
    }
    namespace System.Support
    {
        description
        {
        }
        class System.Support.ExDeleter.System.Exception
        {
            description
            {
            }
            function System.Support.ExDeleter.System.Exception.constructor.P.System.Support.ExDeleter.System.Exception
            {
                description
                {
                    Default constructor.
                }
            }
        }
    }
    namespace System.Text
    {
        description
        {
        }
    }
    namespace System.Threading
    {
        description
        {
        }
    }
    namespace System.Unicode
    {
        description
        {
        }
    }
}
