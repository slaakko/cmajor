library System.Net.Sockets
{
    description
    {
        Provides support for TCP sockets.
    }
    chapter <usage.tex>;
    copyright
    {
        ========================================================================
        Copyright (c) 2012-2016 Seppo Laakko
        http://sourceforge.net/projects/cmajor/
        
        Distributed under the GNU General Public License, version 3 (GPLv3).
        (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)
        
        ========================================================================
    }
    namespace 
    {
        description
        {
            Global namespace contains C functions for the implementation.
        }
        concept Common.T.U
        {
            description
            {
            }
        }
        concept Convertible.T.U
        {
            description
            {
            }
        }
        concept Derived.T.U
        {
            description
            {
            }
        }
        concept ExplicitlyConvertible.T.U
        {
            description
            {
            }
        }
        concept NonReferenceType.T
        {
            description
            {
            }
        }
        concept Same.T.U
        {
            description
            {
            }
        }
        function accept_socket.int
        {
            description
            {
            }
            parameter accept_socket.int.socket
            {
                description
                {
                }
            }
            returns accept_socket.int.returnValue
            {
                description
                {
                }
            }
        }
        function begin_connect
        {
            description
            {
            }
        }
        function begin_get_socket_error_str
        {
            description
            {
            }
        }
        function bind_socket.int.int
        {
            description
            {
            }
            parameter bind_socket.int.int.port
            {
                description
                {
                    Port number to bind.
                }
            }
            parameter bind_socket.int.int.socket
            {
                description
                {
                    The handle of the socket to bind.
                }
            }
            returns bind_socket.int.int.returnValue
            {
                description
                {
                    Returns 0 if the call succeeds, -1 otherwise.
                }
            }
        }
        function close_socket.int
        {
            description
            {
            }
            parameter close_socket.int.socket
            {
                description
                {
                    The handle of the socket to close.
                }
            }
            returns close_socket.int.returnValue
            {
                description
                {
                    Returns 0 if the call succeeds, -1 otherwise.
                }
            }
        }
        function connect_socket.C.P.char.C.P.char.P.int.P.int
        {
            description
            {
            }
            parameter connect_socket.C.P.char.C.P.char.P.int.P.int.getaddrinfofailed
            {
                description
                {
                    Set to 1, if getaddrinfo call failed, 0 otherwise.
                }
            }
            parameter connect_socket.C.P.char.C.P.char.P.int.P.int.node
            {
                description
                {
                    The name of the host to connect.
                }
            }
            parameter connect_socket.C.P.char.C.P.char.P.int.P.int.scktm
            {
                description
                {
                    Receives the handle of the connected socket.
                }
            }
            parameter connect_socket.C.P.char.C.P.char.P.int.P.int.service
            {
                description
                {
                    The protocol name or port number to connect.
                }
            }
            returns connect_socket.C.P.char.C.P.char.P.int.P.int.returnValue
            {
                description
                {
                    Returns 0 if the call succeeds or a nonzero error code otherwise.
                }
            }
        }
        function create_tcp_socket
        {
            description
            {
            }
            returns create_tcp_socket.returnValue
            {
                description
                {
                    Returns the handle of the created socket (positive integer) if the call succeeds, or -1 otherwise.
                }
            }
        }
        function done_sockets
        {
            description
            {
            }
        }
        function end_connect
        {
            description
            {
            }
        }
        function end_get_socket_error_str
        {
            description
            {
            }
        }
        function get_addrinfo_error.int
        {
            description
            {
            }
            parameter get_addrinfo_error.int.errorCode
            {
                description
                {
                    Error code returned by getaddrinfo call.
                }
            }
            returns get_addrinfo_error.int.returnValue
            {
                description
                {
                    Returns error description.
                }
            }
        }
        function get_last_socket_error
        {
            description
            {
            }
            returns get_last_socket_error.returnValue
            {
                description
                {
                    Returns the error code of the latest failed socket operation.
                }
            }
        }
        function get_socket_error_str.int
        {
            description
            {
            }
            parameter get_socket_error_str.int.errorCode
            {
                description
                {
                    Error code of the failed socket operation.
                }
            }
            returns get_socket_error_str.int.returnValue
            {
                description
                {
                    Returns an error description.
                }
            }
        }
        function init_sockets
        {
            description
            {
            }
            returns init_sockets.returnValue
            {
                description
                {
                    Returns 0 if the call succeeds, or -1 otherwise.
                }
            }
        }
        function listen_socket.int.int
        {
            description
            {
            }
            parameter listen_socket.int.int.backlog
            {
                description
                {
                    Number of pending connections.
                }
            }
            parameter listen_socket.int.int.socket
            {
                description
                {
                    The handle of a bound socket.
                }
            }
            returns listen_socket.int.int.returnValue
            {
                description
                {
                    Returns 0 if the call succeeds, or -1 otherwise.
                }
            }
        }
        function receive_socket.int.P.void.int.int
        {
            description
            {
            }
            parameter receive_socket.int.P.void.int.int.buf
            {
                description
                {
                    A buffer for the data.
                }
            }
            parameter receive_socket.int.P.void.int.int.flags
            {
                description
                {
                    Options for the operation.
                }
            }
            parameter receive_socket.int.P.void.int.int.len
            {
                description
                {
                    Maximum number of bytes to receive.
                }
            }
            parameter receive_socket.int.P.void.int.int.socket
            {
                description
                {
                    The handle of a connected socket.
                }
            }
            returns receive_socket.int.P.void.int.int.returnValue
            {
                description
                {
                    Returns the number of bytes received if the call succeeds, or -1 otherwise.
                    The number of bytes received might be less than the number of bytes requested.
                }
            }
        }
        function send_socket.int.C.P.void.int.int
        {
            description
            {
            }
            parameter send_socket.int.C.P.void.int.int.buf
            {
                description
                {
                    A buffer of data.
                }
            }
            parameter send_socket.int.C.P.void.int.int.flags
            {
                description
                {
                    Options for the operation.
                }
            }
            parameter send_socket.int.C.P.void.int.int.len
            {
                description
                {
                    Maximum number of bytes to send.
                }
            }
            parameter send_socket.int.C.P.void.int.int.socket
            {
                description
                {
                    The handle of a connected socket.
                }
            }
            returns send_socket.int.C.P.void.int.int.returnValue
            {
                description
                {
                    Returns the number of bytes sent if the call succeeds, or -1 otherwise.
                    The number of bytes sent might be less than the number of bytes requested.
                }
            }
        }
        function shutdown_socket.int.ShutdownMode
        {
            description
            {
            }
            parameter shutdown_socket.int.ShutdownMode.mode
            {
                description
                {
                    Mode for shut down operation.
                }
            }
            parameter shutdown_socket.int.ShutdownMode.socket
            {
                description
                {
                    The handle of the socket to shut down.
                }
            }
            returns shutdown_socket.int.ShutdownMode.returnValue
            {
                description
                {
                    Returns 0 if the call succeeds, or -1 otherwise.
                }
            }
        }
        enumType ShutdownMode
        {
            description
            {
                Mode for the shut down operation.
            }
            enumConstant ShutdownMode.both
            {
                description
                {
                    Shuts down both receiving and sending.
                }
            }
            enumConstant ShutdownMode.receive
            {
                description
                {
                    Shuts down receiving from a socket.
                }
            }
            enumConstant ShutdownMode.send
            {
                description
                {
                    Shuts down sending to a socket.
                }
            }
        }
    }
    namespace System
    {
        description
        {
        }
        class System.BinaryFun.System.String.System.String.bool
        {
            description
            {
            }
            function System.BinaryFun.System.String.System.String.bool.constructor.P.System.BinaryFun.System.String.System.String.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryFun.System.String.System.String.bool.constructor.P.System.BinaryFun.System.String.System.String.bool.C.R.System.BinaryFun.System.String.System.String.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryFun.System.String.System.String.bool.constructor.P.System.BinaryFun.System.String.System.String.bool.C.R.System.BinaryFun.System.String.System.String.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryFun.System.String.System.String.bool.operator.assign.P.System.BinaryFun.System.String.System.String.bool.C.R.System.BinaryFun.System.String.System.String.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryFun.System.String.System.String.bool.operator.assign.P.System.BinaryFun.System.String.System.String.bool.C.R.System.BinaryFun.System.String.System.String.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryFun.System.String.System.String.bool.constructor.P.System.BinaryFun.System.String.System.String.bool.RR.System.BinaryFun.System.String.System.String.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryFun.System.String.System.String.bool.constructor.P.System.BinaryFun.System.String.System.String.bool.RR.System.BinaryFun.System.String.System.String.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryFun.System.String.System.String.bool.operator.assign.P.System.BinaryFun.System.String.System.String.bool.RR.System.BinaryFun.System.String.System.String.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryFun.System.String.System.String.bool.operator.assign.P.System.BinaryFun.System.String.System.String.bool.RR.System.BinaryFun.System.String.System.String.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool
        {
            description
            {
            }
            function System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.constructor.P.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.constructor.P.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.C.R.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.constructor.P.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.C.R.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.operator.assign.P.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.C.R.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.operator.assign.P.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.C.R.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.constructor.P.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.RR.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.constructor.P.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.RR.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.operator.assign.P.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.RR.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.operator.assign.P.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.RR.System.BinaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool
        {
            description
            {
            }
            function System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.constructor.P.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.constructor.P.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.C.R.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.constructor.P.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.C.R.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.operator.assign.P.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.C.R.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.operator.assign.P.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.C.R.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.constructor.P.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.RR.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.constructor.P.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.RR.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.operator.assign.P.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.RR.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.operator.assign.P.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.RR.System.BinaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.BinaryPred.System.String.System.String
        {
            description
            {
            }
            function System.BinaryPred.System.String.System.String.constructor.P.System.BinaryPred.System.String.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryPred.System.String.System.String.constructor.P.System.BinaryPred.System.String.System.String.C.R.System.BinaryPred.System.String.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryPred.System.String.System.String.constructor.P.System.BinaryPred.System.String.System.String.C.R.System.BinaryPred.System.String.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryPred.System.String.System.String.operator.assign.P.System.BinaryPred.System.String.System.String.C.R.System.BinaryPred.System.String.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryPred.System.String.System.String.operator.assign.P.System.BinaryPred.System.String.System.String.C.R.System.BinaryPred.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryPred.System.String.System.String.constructor.P.System.BinaryPred.System.String.System.String.RR.System.BinaryPred.System.String.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryPred.System.String.System.String.constructor.P.System.BinaryPred.System.String.System.String.RR.System.BinaryPred.System.String.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryPred.System.String.System.String.operator.assign.P.System.BinaryPred.System.String.System.String.RR.System.BinaryPred.System.String.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryPred.System.String.System.String.operator.assign.P.System.BinaryPred.System.String.System.String.RR.System.BinaryPred.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.constructor.P.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.constructor.P.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.C.R.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.constructor.P.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.C.R.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.operator.assign.P.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.C.R.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.operator.assign.P.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.C.R.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.constructor.P.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.RR.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.constructor.P.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.RR.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.operator.assign.P.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.RR.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.operator.assign.P.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.RR.System.BinaryPred.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink
        {
            description
            {
            }
            function System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.constructor.P.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Default constructor.
                }
            }
            function System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.constructor.P.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.C.R.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy constructor.
                }
                parameter System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.constructor.P.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.C.R.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.operator.assign.P.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.C.R.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy assignment.
                }
                parameter System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.operator.assign.P.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.C.R.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.constructor.P.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.RR.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move constructor.
                }
                parameter System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.constructor.P.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.RR.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.operator.assign.P.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.RR.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move assignment.
                }
                parameter System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.operator.assign.P.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.RR.System.BinaryPred.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Identity.System.String
        {
            description
            {
            }
            function System.Identity.System.String.constructor.P.System.Identity.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Identity.System.String.constructor.P.System.Identity.System.String.C.R.System.Identity.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Identity.System.String.constructor.P.System.Identity.System.String.C.R.System.Identity.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Identity.System.String.operator.assign.P.System.Identity.System.String.C.R.System.Identity.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Identity.System.String.operator.assign.P.System.Identity.System.String.C.R.System.Identity.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Identity.System.String.constructor.P.System.Identity.System.String.RR.System.Identity.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Identity.System.String.constructor.P.System.Identity.System.String.RR.System.Identity.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Identity.System.String.operator.assign.P.System.Identity.System.String.RR.System.Identity.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Identity.System.String.operator.assign.P.System.Identity.System.String.RR.System.Identity.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Identity.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.Identity.P.System.Text.Parsing.Grammar.constructor.P.System.Identity.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Identity.P.System.Text.Parsing.Grammar.constructor.P.System.Identity.P.System.Text.Parsing.Grammar.C.R.System.Identity.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Identity.P.System.Text.Parsing.Grammar.constructor.P.System.Identity.P.System.Text.Parsing.Grammar.C.R.System.Identity.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Identity.P.System.Text.Parsing.Grammar.operator.assign.P.System.Identity.P.System.Text.Parsing.Grammar.C.R.System.Identity.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Identity.P.System.Text.Parsing.Grammar.operator.assign.P.System.Identity.P.System.Text.Parsing.Grammar.C.R.System.Identity.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Identity.P.System.Text.Parsing.Grammar.constructor.P.System.Identity.P.System.Text.Parsing.Grammar.RR.System.Identity.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Identity.P.System.Text.Parsing.Grammar.constructor.P.System.Identity.P.System.Text.Parsing.Grammar.RR.System.Identity.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Identity.P.System.Text.Parsing.Grammar.operator.assign.P.System.Identity.P.System.Text.Parsing.Grammar.RR.System.Identity.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Identity.P.System.Text.Parsing.Grammar.operator.assign.P.System.Identity.P.System.Text.Parsing.Grammar.RR.System.Identity.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Identity.P.System.Text.Parsing.RuleLink
        {
            description
            {
            }
            function System.Identity.P.System.Text.Parsing.RuleLink.constructor.P.System.Identity.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Identity.P.System.Text.Parsing.RuleLink.constructor.P.System.Identity.P.System.Text.Parsing.RuleLink.C.R.System.Identity.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Identity.P.System.Text.Parsing.RuleLink.constructor.P.System.Identity.P.System.Text.Parsing.RuleLink.C.R.System.Identity.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Identity.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Identity.P.System.Text.Parsing.RuleLink.C.R.System.Identity.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Identity.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Identity.P.System.Text.Parsing.RuleLink.C.R.System.Identity.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Identity.P.System.Text.Parsing.RuleLink.constructor.P.System.Identity.P.System.Text.Parsing.RuleLink.RR.System.Identity.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move constructor.
                }
                parameter System.Identity.P.System.Text.Parsing.RuleLink.constructor.P.System.Identity.P.System.Text.Parsing.RuleLink.RR.System.Identity.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Identity.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Identity.P.System.Text.Parsing.RuleLink.RR.System.Identity.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move assignment.
                }
                parameter System.Identity.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Identity.P.System.Text.Parsing.RuleLink.RR.System.Identity.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Less.System.String
        {
            description
            {
            }
            function System.Less.System.String.constructor.P.System.Less.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Less.System.String.constructor.P.System.Less.System.String.C.R.System.Less.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Less.System.String.constructor.P.System.Less.System.String.C.R.System.Less.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Less.System.String.operator.assign.P.System.Less.System.String.C.R.System.Less.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Less.System.String.operator.assign.P.System.Less.System.String.C.R.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Less.System.String.constructor.P.System.Less.System.String.RR.System.Less.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Less.System.String.constructor.P.System.Less.System.String.RR.System.Less.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Less.System.String.operator.assign.P.System.Less.System.String.RR.System.Less.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Less.System.String.operator.assign.P.System.Less.System.String.RR.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Less.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Less.P.System.Text.Parsing.Grammar.C.R.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Less.P.System.Text.Parsing.Grammar.C.R.System.Less.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Less.P.System.Text.Parsing.Grammar.operator.assign.P.System.Less.P.System.Text.Parsing.Grammar.C.R.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Less.P.System.Text.Parsing.Grammar.operator.assign.P.System.Less.P.System.Text.Parsing.Grammar.C.R.System.Less.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Less.P.System.Text.Parsing.Grammar.RR.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Less.P.System.Text.Parsing.Grammar.RR.System.Less.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Less.P.System.Text.Parsing.Grammar.operator.assign.P.System.Less.P.System.Text.Parsing.Grammar.RR.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Less.P.System.Text.Parsing.Grammar.operator.assign.P.System.Less.P.System.Text.Parsing.Grammar.RR.System.Less.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Less.P.System.Text.Parsing.RuleLink
        {
            description
            {
            }
            function System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Less.P.System.Text.Parsing.RuleLink.C.R.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Less.P.System.Text.Parsing.RuleLink.C.R.System.Less.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Less.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Less.P.System.Text.Parsing.RuleLink.C.R.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Less.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Less.P.System.Text.Parsing.RuleLink.C.R.System.Less.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Less.P.System.Text.Parsing.RuleLink.RR.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move constructor.
                }
                parameter System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Less.P.System.Text.Parsing.RuleLink.RR.System.Less.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Less.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Less.P.System.Text.Parsing.RuleLink.RR.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move assignment.
                }
                parameter System.Less.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Less.P.System.Text.Parsing.RuleLink.RR.System.Less.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool
        {
            description
            {
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool
        {
            description
            {
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool
        {
            description
            {
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool
        {
            description
            {
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool
        {
            description
            {
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool
        {
            description
            {
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool
        {
            description
            {
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.C.R.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.constructor.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.operator.assign.P.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.RR.System.Pair.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.String.System.String
        {
            description
            {
            }
            function System.Pair.System.String.System.String.constructor.P.System.Pair.System.String.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.String.System.String.constructor.P.System.Pair.System.String.System.String.C.R.System.Pair.System.String.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.String.System.String.constructor.P.System.Pair.System.String.System.String.C.R.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.String.System.String.operator.assign.P.System.Pair.System.String.System.String.C.R.System.Pair.System.String.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.String.System.String.operator.assign.P.System.Pair.System.String.System.String.C.R.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.String.System.String.constructor.P.System.Pair.System.String.System.String.RR.System.Pair.System.String.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.String.System.String.constructor.P.System.Pair.System.String.System.String.RR.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.String.System.String.operator.assign.P.System.Pair.System.String.System.String.RR.System.Pair.System.String.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.String.System.String.operator.assign.P.System.Pair.System.String.System.String.RR.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.String.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.C.R.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.C.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.C.R.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.C.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.String.P.System.Text.Parsing.Namespace
        {
            description
            {
            }
            function System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.C.R.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.C.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.C.R.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.C.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.String.P.System.Text.Parsing.ParsingObject
        {
            description
            {
            }
            function System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.uhuge.System.uhuge
        {
            description
            {
            }
            function System.Pair.System.uhuge.System.uhuge.constructor.P.System.Pair.System.uhuge.System.uhuge
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.uhuge.System.uhuge.constructor.P.System.Pair.System.uhuge.System.uhuge.C.R.System.Pair.System.uhuge.System.uhuge
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.uhuge.System.uhuge.constructor.P.System.Pair.System.uhuge.System.uhuge.C.R.System.Pair.System.uhuge.System.uhuge.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.uhuge.System.uhuge.operator.assign.P.System.Pair.System.uhuge.System.uhuge.C.R.System.Pair.System.uhuge.System.uhuge
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.uhuge.System.uhuge.operator.assign.P.System.Pair.System.uhuge.System.uhuge.C.R.System.Pair.System.uhuge.System.uhuge.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.uhuge.System.uhuge.constructor.P.System.Pair.System.uhuge.System.uhuge.RR.System.Pair.System.uhuge.System.uhuge
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.uhuge.System.uhuge.constructor.P.System.Pair.System.uhuge.System.uhuge.RR.System.Pair.System.uhuge.System.uhuge.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.uhuge.System.uhuge.operator.assign.P.System.Pair.System.uhuge.System.uhuge.RR.System.Pair.System.uhuge.System.uhuge
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.uhuge.System.uhuge.operator.assign.P.System.Pair.System.uhuge.System.uhuge.RR.System.Pair.System.uhuge.System.uhuge.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Pair.System.uhuge.uint
        {
            description
            {
            }
            function System.Pair.System.uhuge.uint.constructor.P.System.Pair.System.uhuge.uint
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Pair.System.uhuge.uint.constructor.P.System.Pair.System.uhuge.uint.C.R.System.Pair.System.uhuge.uint
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Pair.System.uhuge.uint.constructor.P.System.Pair.System.uhuge.uint.C.R.System.Pair.System.uhuge.uint.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Pair.System.uhuge.uint.operator.assign.P.System.Pair.System.uhuge.uint.C.R.System.Pair.System.uhuge.uint
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Pair.System.uhuge.uint.operator.assign.P.System.Pair.System.uhuge.uint.C.R.System.Pair.System.uhuge.uint.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Pair.System.uhuge.uint.constructor.P.System.Pair.System.uhuge.uint.RR.System.Pair.System.uhuge.uint
            {
                description
                {
                    Move constructor.
                }
                parameter System.Pair.System.uhuge.uint.constructor.P.System.Pair.System.uhuge.uint.RR.System.Pair.System.uhuge.uint.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Pair.System.uhuge.uint.operator.assign.P.System.Pair.System.uhuge.uint.RR.System.Pair.System.uhuge.uint
            {
                description
                {
                    Move assignment.
                }
                parameter System.Pair.System.uhuge.uint.operator.assign.P.System.Pair.System.uhuge.uint.RR.System.Pair.System.uhuge.uint.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String
        {
            description
            {
            }
            function System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.constructor.P.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.constructor.P.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.C.R.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.constructor.P.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.C.R.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.operator.assign.P.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.C.R.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.operator.assign.P.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.C.R.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.constructor.P.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.RR.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.constructor.P.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.RR.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.operator.assign.P.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.RR.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.operator.assign.P.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.RR.System.RandomAccessIter.System.String.C.R.System.String.C.P.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser
        {
            description
            {
            }
            function System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.C.R.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.C.R.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.C.R.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.C.R.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.RR.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.RR.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.RR.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.RR.System.RandomAccessIter.P.System.Text.Parsing.ActionParser.P.R.System.Text.Parsing.ActionParser.P.P.System.Text.Parsing.ActionParser.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable
        {
            description
            {
            }
            function System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.constructor.P.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.constructor.P.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.C.R.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.constructor.P.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.C.R.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.operator.assign.P.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.C.R.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.operator.assign.P.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.C.R.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.constructor.P.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.RR.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.constructor.P.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.RR.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.operator.assign.P.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.RR.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.operator.assign.P.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.RR.System.RandomAccessIter.System.Text.Parsing.AttrOrVariable.R.System.Text.Parsing.AttrOrVariable.P.System.Text.Parsing.AttrOrVariable.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject
        {
            description
            {
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.P.R.System.Text.Parsing.CmObjectModel.CmObject.P.P.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject
        {
            description
            {
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.CmObject.C.P.R.System.Text.Parsing.CmObjectModel.CmObject.C.P.P.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler
        {
            description
            {
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.R.System.Text.Parsing.CmObjectModel.ExceptionHandler.P.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement
        {
            description
            {
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.C.R.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.RR.System.RandomAccessIter.P.System.Text.Parsing.CmObjectModel.Statement.P.R.System.Text.Parsing.CmObjectModel.Statement.P.P.System.Text.Parsing.CmObjectModel.Statement.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace
        {
            description
            {
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.C.R.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.C.R.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.C.R.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.C.R.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.RR.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.RR.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.RR.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.RR.System.RandomAccessIter.P.System.Text.Parsing.Namespace.P.R.System.Text.Parsing.Namespace.P.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser
        {
            description
            {
            }
            function System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.C.R.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.C.R.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.C.R.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.C.R.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.RR.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.RR.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.RR.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.RR.System.RandomAccessIter.P.System.Text.Parsing.NonterminalParser.P.R.System.Text.Parsing.NonterminalParser.P.P.System.Text.Parsing.NonterminalParser.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule
        {
            description
            {
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.C.R.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.C.R.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.C.R.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.C.R.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.RR.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.RR.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.RR.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.RR.System.RandomAccessIter.P.System.Text.Parsing.Rule.P.R.System.Text.Parsing.Rule.P.P.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule
        {
            description
            {
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.C.R.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.C.R.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.C.R.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.C.R.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.RR.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.constructor.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.RR.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.RR.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.operator.assign.P.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.RR.System.RandomAccessIter.P.System.Text.Parsing.Rule.C.P.R.System.Text.Parsing.Rule.C.P.P.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object
        {
            description
            {
            }
            function System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.C.R.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.C.R.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.C.R.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.C.R.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.RR.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.RR.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.RR.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.RR.System.RandomAccessIter.System.UniquePtr.System.Text.Parsing.Object.R.System.UniquePtr.System.Text.Parsing.Object.P.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.byte.C.R.byte.C.P.byte
        {
            description
            {
            }
            function System.RandomAccessIter.byte.C.R.byte.C.P.byte.constructor.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.byte.C.R.byte.C.P.byte.constructor.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.C.R.System.RandomAccessIter.byte.C.R.byte.C.P.byte
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.byte.C.R.byte.C.P.byte.constructor.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.C.R.System.RandomAccessIter.byte.C.R.byte.C.P.byte.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.byte.C.R.byte.C.P.byte.operator.assign.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.C.R.System.RandomAccessIter.byte.C.R.byte.C.P.byte
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.byte.C.R.byte.C.P.byte.operator.assign.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.C.R.System.RandomAccessIter.byte.C.R.byte.C.P.byte.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.byte.C.R.byte.C.P.byte.constructor.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.RR.System.RandomAccessIter.byte.C.R.byte.C.P.byte
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.byte.C.R.byte.C.P.byte.constructor.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.RR.System.RandomAccessIter.byte.C.R.byte.C.P.byte.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.byte.C.R.byte.C.P.byte.operator.assign.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.RR.System.RandomAccessIter.byte.C.R.byte.C.P.byte
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.byte.C.R.byte.C.P.byte.operator.assign.P.System.RandomAccessIter.byte.C.R.byte.C.P.byte.RR.System.RandomAccessIter.byte.C.R.byte.C.P.byte.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.char.R.char.P.char
        {
            description
            {
            }
            function System.RandomAccessIter.char.R.char.P.char.constructor.P.System.RandomAccessIter.char.R.char.P.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.char.R.char.P.char.constructor.P.System.RandomAccessIter.char.R.char.P.char.C.R.System.RandomAccessIter.char.R.char.P.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.char.R.char.P.char.constructor.P.System.RandomAccessIter.char.R.char.P.char.C.R.System.RandomAccessIter.char.R.char.P.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.char.R.char.P.char.operator.assign.P.System.RandomAccessIter.char.R.char.P.char.C.R.System.RandomAccessIter.char.R.char.P.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.char.R.char.P.char.operator.assign.P.System.RandomAccessIter.char.R.char.P.char.C.R.System.RandomAccessIter.char.R.char.P.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.char.R.char.P.char.constructor.P.System.RandomAccessIter.char.R.char.P.char.RR.System.RandomAccessIter.char.R.char.P.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.char.R.char.P.char.constructor.P.System.RandomAccessIter.char.R.char.P.char.RR.System.RandomAccessIter.char.R.char.P.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.char.R.char.P.char.operator.assign.P.System.RandomAccessIter.char.R.char.P.char.RR.System.RandomAccessIter.char.R.char.P.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.char.R.char.P.char.operator.assign.P.System.RandomAccessIter.char.R.char.P.char.RR.System.RandomAccessIter.char.R.char.P.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.char.C.R.char.C.P.char
        {
            description
            {
            }
            function System.RandomAccessIter.char.C.R.char.C.P.char.constructor.P.System.RandomAccessIter.char.C.R.char.C.P.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.char.C.R.char.C.P.char.constructor.P.System.RandomAccessIter.char.C.R.char.C.P.char.C.R.System.RandomAccessIter.char.C.R.char.C.P.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.char.C.R.char.C.P.char.constructor.P.System.RandomAccessIter.char.C.R.char.C.P.char.C.R.System.RandomAccessIter.char.C.R.char.C.P.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.char.C.R.char.C.P.char.operator.assign.P.System.RandomAccessIter.char.C.R.char.C.P.char.C.R.System.RandomAccessIter.char.C.R.char.C.P.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.char.C.R.char.C.P.char.operator.assign.P.System.RandomAccessIter.char.C.R.char.C.P.char.C.R.System.RandomAccessIter.char.C.R.char.C.P.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.char.C.R.char.C.P.char.constructor.P.System.RandomAccessIter.char.C.R.char.C.P.char.RR.System.RandomAccessIter.char.C.R.char.C.P.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.char.C.R.char.C.P.char.constructor.P.System.RandomAccessIter.char.C.R.char.C.P.char.RR.System.RandomAccessIter.char.C.R.char.C.P.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.char.C.R.char.C.P.char.operator.assign.P.System.RandomAccessIter.char.C.R.char.C.P.char.RR.System.RandomAccessIter.char.C.R.char.C.P.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.char.C.R.char.C.P.char.operator.assign.P.System.RandomAccessIter.char.C.R.char.C.P.char.RR.System.RandomAccessIter.char.C.R.char.C.P.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.int.C.R.int.C.P.int
        {
            description
            {
            }
            function System.RandomAccessIter.int.C.R.int.C.P.int.constructor.P.System.RandomAccessIter.int.C.R.int.C.P.int
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.int.C.R.int.C.P.int.constructor.P.System.RandomAccessIter.int.C.R.int.C.P.int.C.R.System.RandomAccessIter.int.C.R.int.C.P.int
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.int.C.R.int.C.P.int.constructor.P.System.RandomAccessIter.int.C.R.int.C.P.int.C.R.System.RandomAccessIter.int.C.R.int.C.P.int.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.int.C.R.int.C.P.int.operator.assign.P.System.RandomAccessIter.int.C.R.int.C.P.int.C.R.System.RandomAccessIter.int.C.R.int.C.P.int
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.int.C.R.int.C.P.int.operator.assign.P.System.RandomAccessIter.int.C.R.int.C.P.int.C.R.System.RandomAccessIter.int.C.R.int.C.P.int.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.int.C.R.int.C.P.int.constructor.P.System.RandomAccessIter.int.C.R.int.C.P.int.RR.System.RandomAccessIter.int.C.R.int.C.P.int
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.int.C.R.int.C.P.int.constructor.P.System.RandomAccessIter.int.C.R.int.C.P.int.RR.System.RandomAccessIter.int.C.R.int.C.P.int.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.int.C.R.int.C.P.int.operator.assign.P.System.RandomAccessIter.int.C.R.int.C.P.int.RR.System.RandomAccessIter.int.C.R.int.C.P.int
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.int.C.R.int.C.P.int.operator.assign.P.System.RandomAccessIter.int.C.R.int.C.P.int.RR.System.RandomAccessIter.int.C.R.int.C.P.int.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.RandomAccessIter.int.R.int.P.int
        {
            description
            {
            }
            function System.RandomAccessIter.int.R.int.P.int.constructor.P.System.RandomAccessIter.int.R.int.P.int
            {
                description
                {
                    Default constructor.
                }
            }
            function System.RandomAccessIter.int.R.int.P.int.constructor.P.System.RandomAccessIter.int.R.int.P.int.C.R.System.RandomAccessIter.int.R.int.P.int
            {
                description
                {
                    Copy constructor.
                }
                parameter System.RandomAccessIter.int.R.int.P.int.constructor.P.System.RandomAccessIter.int.R.int.P.int.C.R.System.RandomAccessIter.int.R.int.P.int.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.RandomAccessIter.int.R.int.P.int.operator.assign.P.System.RandomAccessIter.int.R.int.P.int.C.R.System.RandomAccessIter.int.R.int.P.int
            {
                description
                {
                    Copy assignment.
                }
                parameter System.RandomAccessIter.int.R.int.P.int.operator.assign.P.System.RandomAccessIter.int.R.int.P.int.C.R.System.RandomAccessIter.int.R.int.P.int.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.RandomAccessIter.int.R.int.P.int.constructor.P.System.RandomAccessIter.int.R.int.P.int.RR.System.RandomAccessIter.int.R.int.P.int
            {
                description
                {
                    Move constructor.
                }
                parameter System.RandomAccessIter.int.R.int.P.int.constructor.P.System.RandomAccessIter.int.R.int.P.int.RR.System.RandomAccessIter.int.R.int.P.int.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.RandomAccessIter.int.R.int.P.int.operator.assign.P.System.RandomAccessIter.int.R.int.P.int.RR.System.RandomAccessIter.int.R.int.P.int
            {
                description
                {
                    Move assignment.
                }
                parameter System.RandomAccessIter.int.R.int.P.int.operator.assign.P.System.RandomAccessIter.int.R.int.P.int.RR.System.RandomAccessIter.int.R.int.P.int.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Rel.System.String
        {
            description
            {
            }
            function System.Rel.System.String.constructor.P.System.Rel.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Rel.System.String.constructor.P.System.Rel.System.String.C.R.System.Rel.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Rel.System.String.constructor.P.System.Rel.System.String.C.R.System.Rel.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Rel.System.String.operator.assign.P.System.Rel.System.String.C.R.System.Rel.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Rel.System.String.operator.assign.P.System.Rel.System.String.C.R.System.Rel.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Rel.System.String.constructor.P.System.Rel.System.String.RR.System.Rel.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Rel.System.String.constructor.P.System.Rel.System.String.RR.System.Rel.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Rel.System.String.operator.assign.P.System.Rel.System.String.RR.System.Rel.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Rel.System.String.operator.assign.P.System.Rel.System.String.RR.System.Rel.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Rel.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.Rel.P.System.Text.Parsing.Grammar.constructor.P.System.Rel.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Rel.P.System.Text.Parsing.Grammar.constructor.P.System.Rel.P.System.Text.Parsing.Grammar.C.R.System.Rel.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Rel.P.System.Text.Parsing.Grammar.constructor.P.System.Rel.P.System.Text.Parsing.Grammar.C.R.System.Rel.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Rel.P.System.Text.Parsing.Grammar.operator.assign.P.System.Rel.P.System.Text.Parsing.Grammar.C.R.System.Rel.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Rel.P.System.Text.Parsing.Grammar.operator.assign.P.System.Rel.P.System.Text.Parsing.Grammar.C.R.System.Rel.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Rel.P.System.Text.Parsing.Grammar.constructor.P.System.Rel.P.System.Text.Parsing.Grammar.RR.System.Rel.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Rel.P.System.Text.Parsing.Grammar.constructor.P.System.Rel.P.System.Text.Parsing.Grammar.RR.System.Rel.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Rel.P.System.Text.Parsing.Grammar.operator.assign.P.System.Rel.P.System.Text.Parsing.Grammar.RR.System.Rel.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Rel.P.System.Text.Parsing.Grammar.operator.assign.P.System.Rel.P.System.Text.Parsing.Grammar.RR.System.Rel.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Rel.P.System.Text.Parsing.RuleLink
        {
            description
            {
            }
            function System.Rel.P.System.Text.Parsing.RuleLink.constructor.P.System.Rel.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Rel.P.System.Text.Parsing.RuleLink.constructor.P.System.Rel.P.System.Text.Parsing.RuleLink.C.R.System.Rel.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Rel.P.System.Text.Parsing.RuleLink.constructor.P.System.Rel.P.System.Text.Parsing.RuleLink.C.R.System.Rel.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Rel.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Rel.P.System.Text.Parsing.RuleLink.C.R.System.Rel.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Rel.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Rel.P.System.Text.Parsing.RuleLink.C.R.System.Rel.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Rel.P.System.Text.Parsing.RuleLink.constructor.P.System.Rel.P.System.Text.Parsing.RuleLink.RR.System.Rel.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move constructor.
                }
                parameter System.Rel.P.System.Text.Parsing.RuleLink.constructor.P.System.Rel.P.System.Text.Parsing.RuleLink.RR.System.Rel.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Rel.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Rel.P.System.Text.Parsing.RuleLink.RR.System.Rel.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move assignment.
                }
                parameter System.Rel.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Rel.P.System.Text.Parsing.RuleLink.RR.System.Rel.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.SelectFirst.System.String.System.String
        {
            description
            {
            }
            function System.SelectFirst.System.String.System.String.constructor.P.System.SelectFirst.System.String.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.SelectFirst.System.String.System.String.constructor.P.System.SelectFirst.System.String.System.String.C.R.System.SelectFirst.System.String.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.SelectFirst.System.String.System.String.constructor.P.System.SelectFirst.System.String.System.String.C.R.System.SelectFirst.System.String.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.SelectFirst.System.String.System.String.operator.assign.P.System.SelectFirst.System.String.System.String.C.R.System.SelectFirst.System.String.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.SelectFirst.System.String.System.String.operator.assign.P.System.SelectFirst.System.String.System.String.C.R.System.SelectFirst.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.SelectFirst.System.String.System.String.constructor.P.System.SelectFirst.System.String.System.String.RR.System.SelectFirst.System.String.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.SelectFirst.System.String.System.String.constructor.P.System.SelectFirst.System.String.System.String.RR.System.SelectFirst.System.String.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.SelectFirst.System.String.System.String.operator.assign.P.System.SelectFirst.System.String.System.String.RR.System.SelectFirst.System.String.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.SelectFirst.System.String.System.String.operator.assign.P.System.SelectFirst.System.String.System.String.RR.System.SelectFirst.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.SelectFirst.System.String.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.C.R.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.C.R.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.C.R.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.C.R.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.RR.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.RR.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.RR.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.RR.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.SelectFirst.System.String.P.System.Text.Parsing.Namespace
        {
            description
            {
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Default constructor.
                }
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.C.R.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy constructor.
                }
                parameter System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.C.R.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.C.R.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy assignment.
                }
                parameter System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.C.R.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.RR.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move constructor.
                }
                parameter System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.RR.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.RR.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move assignment.
                }
                parameter System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.RR.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject
        {
            description
            {
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Copy constructor.
                }
                parameter System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Copy assignment.
                }
                parameter System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.RR.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.RR.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.RR.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.RR.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.System.Pair.System.String.System.String.System.String
        {
            description
            {
            }
            function System.UnaryFun.System.Pair.System.String.System.String.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.System.String.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.System.Pair.System.String.System.String.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.System.String.System.String.C.R.System.UnaryFun.System.Pair.System.String.System.String.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.System.Pair.System.String.System.String.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.System.String.System.String.C.R.System.UnaryFun.System.Pair.System.String.System.String.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.System.String.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.System.String.System.String.C.R.System.UnaryFun.System.Pair.System.String.System.String.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.System.Pair.System.String.System.String.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.System.String.System.String.C.R.System.UnaryFun.System.Pair.System.String.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.System.String.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.System.String.System.String.RR.System.UnaryFun.System.Pair.System.String.System.String.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.System.Pair.System.String.System.String.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.System.String.System.String.RR.System.UnaryFun.System.Pair.System.String.System.String.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.System.String.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.System.String.System.String.RR.System.UnaryFun.System.Pair.System.String.System.String.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.System.Pair.System.String.System.String.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.System.String.System.String.RR.System.UnaryFun.System.Pair.System.String.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String
        {
            description
            {
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.C.R.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.C.R.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.C.R.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.C.R.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.RR.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.RR.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.RR.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.RR.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String
        {
            description
            {
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.C.R.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.C.R.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.C.R.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.C.R.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.RR.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.RR.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.RR.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.RR.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String
        {
            description
            {
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.C.R.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.C.R.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.C.R.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.C.R.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.RR.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.constructor.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.RR.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.RR.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.operator.assign.P.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.RR.System.UnaryFun.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.System.String.System.String
        {
            description
            {
            }
            function System.UnaryFun.System.String.System.String.constructor.P.System.UnaryFun.System.String.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.System.String.System.String.constructor.P.System.UnaryFun.System.String.System.String.C.R.System.UnaryFun.System.String.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.System.String.System.String.constructor.P.System.UnaryFun.System.String.System.String.C.R.System.UnaryFun.System.String.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.System.String.System.String.operator.assign.P.System.UnaryFun.System.String.System.String.C.R.System.UnaryFun.System.String.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.System.String.System.String.operator.assign.P.System.UnaryFun.System.String.System.String.C.R.System.UnaryFun.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.System.String.System.String.constructor.P.System.UnaryFun.System.String.System.String.RR.System.UnaryFun.System.String.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.System.String.System.String.constructor.P.System.UnaryFun.System.String.System.String.RR.System.UnaryFun.System.String.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.System.String.System.String.operator.assign.P.System.UnaryFun.System.String.System.String.RR.System.UnaryFun.System.String.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.System.String.System.String.operator.assign.P.System.UnaryFun.System.String.System.String.RR.System.UnaryFun.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.constructor.P.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.constructor.P.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.C.R.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.constructor.P.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.C.R.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.operator.assign.P.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.C.R.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.operator.assign.P.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.C.R.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.constructor.P.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.RR.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.constructor.P.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.RR.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.operator.assign.P.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.RR.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.operator.assign.P.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.RR.System.UnaryFun.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink
        {
            description
            {
            }
            function System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.constructor.P.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.constructor.P.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.C.R.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy constructor.
                }
                parameter System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.constructor.P.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.C.R.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.operator.assign.P.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.C.R.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy assignment.
                }
                parameter System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.operator.assign.P.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.C.R.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.constructor.P.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.RR.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move constructor.
                }
                parameter System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.constructor.P.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.RR.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.operator.assign.P.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.RR.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move assignment.
                }
                parameter System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.operator.assign.P.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.RR.System.UnaryFun.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String
        {
            description
            {
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace
        {
            description
            {
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
        {
            description
            {
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Collections.RedBlackTreeNode.System.String
        {
            description
            {
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.String.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.String.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.String.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.System.String.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.String.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.System.String.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.String.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.System.String.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.System.String.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink
        {
            description
            {
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.constructor.P.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.operator.assign.P.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.RR.System.UniquePtr.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.IO.InputStream
        {
            description
            {
            }
            function System.UniquePtr.System.IO.InputStream.constructor.P.System.UniquePtr.System.IO.InputStream
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.IO.InputStream.constructor.P.System.UniquePtr.System.IO.InputStream.RR.System.UniquePtr.System.IO.InputStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.IO.InputStream.constructor.P.System.UniquePtr.System.IO.InputStream.RR.System.UniquePtr.System.IO.InputStream.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.IO.InputStream.operator.assign.P.System.UniquePtr.System.IO.InputStream.RR.System.UniquePtr.System.IO.InputStream
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.IO.InputStream.operator.assign.P.System.UniquePtr.System.IO.InputStream.RR.System.UniquePtr.System.IO.InputStream.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.IO.OutputStream
        {
            description
            {
            }
            function System.UniquePtr.System.IO.OutputStream.constructor.P.System.UniquePtr.System.IO.OutputStream
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.IO.OutputStream.constructor.P.System.UniquePtr.System.IO.OutputStream.RR.System.UniquePtr.System.IO.OutputStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.IO.OutputStream.constructor.P.System.UniquePtr.System.IO.OutputStream.RR.System.UniquePtr.System.IO.OutputStream.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.IO.OutputStream.operator.assign.P.System.UniquePtr.System.IO.OutputStream.RR.System.UniquePtr.System.IO.OutputStream
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.IO.OutputStream.operator.assign.P.System.UniquePtr.System.IO.OutputStream.RR.System.UniquePtr.System.IO.OutputStream.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Net.Sockets.SocketLibrary
        {
            description
            {
            }
            function System.UniquePtr.System.Net.Sockets.SocketLibrary.constructor.P.System.UniquePtr.System.Net.Sockets.SocketLibrary
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Net.Sockets.SocketLibrary.constructor.P.System.UniquePtr.System.Net.Sockets.SocketLibrary.RR.System.UniquePtr.System.Net.Sockets.SocketLibrary
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Net.Sockets.SocketLibrary.constructor.P.System.UniquePtr.System.Net.Sockets.SocketLibrary.RR.System.UniquePtr.System.Net.Sockets.SocketLibrary.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Net.Sockets.SocketLibrary.operator.assign.P.System.UniquePtr.System.Net.Sockets.SocketLibrary.RR.System.UniquePtr.System.Net.Sockets.SocketLibrary
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Net.Sockets.SocketLibrary.operator.assign.P.System.UniquePtr.System.Net.Sockets.SocketLibrary.RR.System.UniquePtr.System.Net.Sockets.SocketLibrary.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject
        {
            description
            {
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement
        {
            description
            {
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement.operator.assign.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement.operator.assign.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.CompoundStatement.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement
        {
            description
            {
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement.operator.assign.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement.operator.assign.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.RangeForStatement.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId
        {
            description
            {
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId.operator.assign.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId.operator.assign.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.TemplateId.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject
        {
            description
            {
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject.constructor.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject.operator.assign.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject.operator.assign.P.System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject.RR.System.UniquePtr.System.Text.Parsing.CmObjectModel.UsingObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Text.Parsing.FileInfo
        {
            description
            {
            }
            function System.UniquePtr.System.Text.Parsing.FileInfo.constructor.P.System.UniquePtr.System.Text.Parsing.FileInfo
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Text.Parsing.FileInfo.constructor.P.System.UniquePtr.System.Text.Parsing.FileInfo.RR.System.UniquePtr.System.Text.Parsing.FileInfo
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Text.Parsing.FileInfo.constructor.P.System.UniquePtr.System.Text.Parsing.FileInfo.RR.System.UniquePtr.System.Text.Parsing.FileInfo.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Text.Parsing.FileInfo.operator.assign.P.System.UniquePtr.System.Text.Parsing.FileInfo.RR.System.UniquePtr.System.Text.Parsing.FileInfo
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Text.Parsing.FileInfo.operator.assign.P.System.UniquePtr.System.Text.Parsing.FileInfo.RR.System.UniquePtr.System.Text.Parsing.FileInfo.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Text.Parsing.Object
        {
            description
            {
            }
            function System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.UniquePtr.System.Text.Parsing.Object.RR.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.UniquePtr.System.Text.Parsing.Object.RR.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.UniquePtr.System.Text.Parsing.Object.RR.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.UniquePtr.System.Text.Parsing.Object.RR.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Text.Parsing.ParsingDomain
        {
            description
            {
            }
            function System.UniquePtr.System.Text.Parsing.ParsingDomain.constructor.P.System.UniquePtr.System.Text.Parsing.ParsingDomain
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Text.Parsing.ParsingDomain.constructor.P.System.UniquePtr.System.Text.Parsing.ParsingDomain.RR.System.UniquePtr.System.Text.Parsing.ParsingDomain
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Text.Parsing.ParsingDomain.constructor.P.System.UniquePtr.System.Text.Parsing.ParsingDomain.RR.System.UniquePtr.System.Text.Parsing.ParsingDomain.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Text.Parsing.ParsingDomain.operator.assign.P.System.UniquePtr.System.Text.Parsing.ParsingDomain.RR.System.UniquePtr.System.Text.Parsing.ParsingDomain
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Text.Parsing.ParsingDomain.operator.assign.P.System.UniquePtr.System.Text.Parsing.ParsingDomain.RR.System.UniquePtr.System.Text.Parsing.ParsingDomain.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Text.Parsing.ParsingObject
        {
            description
            {
            }
            function System.UniquePtr.System.Text.Parsing.ParsingObject.constructor.P.System.UniquePtr.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Text.Parsing.ParsingObject.constructor.P.System.UniquePtr.System.Text.Parsing.ParsingObject.RR.System.UniquePtr.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Text.Parsing.ParsingObject.constructor.P.System.UniquePtr.System.Text.Parsing.ParsingObject.RR.System.UniquePtr.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Text.Parsing.ParsingObject.operator.assign.P.System.UniquePtr.System.Text.Parsing.ParsingObject.RR.System.UniquePtr.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Text.Parsing.ParsingObject.operator.assign.P.System.UniquePtr.System.Text.Parsing.ParsingObject.RR.System.UniquePtr.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Text.Parsing.Rule
        {
            description
            {
            }
            function System.UniquePtr.System.Text.Parsing.Rule.constructor.P.System.UniquePtr.System.Text.Parsing.Rule
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Text.Parsing.Rule.constructor.P.System.UniquePtr.System.Text.Parsing.Rule.RR.System.UniquePtr.System.Text.Parsing.Rule
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Text.Parsing.Rule.constructor.P.System.UniquePtr.System.Text.Parsing.Rule.RR.System.UniquePtr.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Text.Parsing.Rule.operator.assign.P.System.UniquePtr.System.Text.Parsing.Rule.RR.System.UniquePtr.System.Text.Parsing.Rule
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Text.Parsing.Rule.operator.assign.P.System.UniquePtr.System.Text.Parsing.Rule.RR.System.UniquePtr.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.UniquePtr.System.Text.Parsing.XmlLog
        {
            description
            {
            }
            function System.UniquePtr.System.Text.Parsing.XmlLog.constructor.P.System.UniquePtr.System.Text.Parsing.XmlLog
            {
                description
                {
                    Default constructor.
                }
            }
            function System.UniquePtr.System.Text.Parsing.XmlLog.constructor.P.System.UniquePtr.System.Text.Parsing.XmlLog.RR.System.UniquePtr.System.Text.Parsing.XmlLog
            {
                description
                {
                    Move constructor.
                }
                parameter System.UniquePtr.System.Text.Parsing.XmlLog.constructor.P.System.UniquePtr.System.Text.Parsing.XmlLog.RR.System.UniquePtr.System.Text.Parsing.XmlLog.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.UniquePtr.System.Text.Parsing.XmlLog.operator.assign.P.System.UniquePtr.System.Text.Parsing.XmlLog.RR.System.UniquePtr.System.Text.Parsing.XmlLog
            {
                description
                {
                    Move assignment.
                }
                parameter System.UniquePtr.System.Text.Parsing.XmlLog.operator.assign.P.System.UniquePtr.System.Text.Parsing.XmlLog.RR.System.UniquePtr.System.Text.Parsing.XmlLog.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
    }
    namespace System.Collections
    {
        description
        {
        }
        class System.Collections.List.System.CharClass
        {
            description
            {
            }
            function System.Collections.List.System.CharClass.constructor.P.System.Collections.List.System.CharClass
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.CharClass.constructor.P.System.Collections.List.System.CharClass.C.R.System.Collections.List.System.CharClass
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.CharClass.constructor.P.System.Collections.List.System.CharClass.C.R.System.Collections.List.System.CharClass.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.CharClass.operator.assign.P.System.Collections.List.System.CharClass.C.R.System.Collections.List.System.CharClass
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.CharClass.operator.assign.P.System.Collections.List.System.CharClass.C.R.System.Collections.List.System.CharClass.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.CharClass.constructor.P.System.Collections.List.System.CharClass.RR.System.Collections.List.System.CharClass
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.CharClass.constructor.P.System.Collections.List.System.CharClass.RR.System.Collections.List.System.CharClass.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.CharClass.operator.assign.P.System.Collections.List.System.CharClass.RR.System.Collections.List.System.CharClass
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.CharClass.operator.assign.P.System.Collections.List.System.CharClass.RR.System.Collections.List.System.CharClass.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.System.String
        {
            description
            {
            }
            function System.Collections.List.System.String.constructor.P.System.Collections.List.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.String.constructor.P.System.Collections.List.System.String.C.R.System.Collections.List.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.String.constructor.P.System.Collections.List.System.String.C.R.System.Collections.List.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.String.operator.assign.P.System.Collections.List.System.String.C.R.System.Collections.List.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.String.operator.assign.P.System.Collections.List.System.String.C.R.System.Collections.List.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.String.constructor.P.System.Collections.List.System.String.RR.System.Collections.List.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.String.constructor.P.System.Collections.List.System.String.RR.System.Collections.List.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.String.operator.assign.P.System.Collections.List.System.String.RR.System.Collections.List.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.String.operator.assign.P.System.Collections.List.System.String.RR.System.Collections.List.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.P.System.Text.Parsing.ActionParser
        {
            description
            {
            }
            function System.Collections.List.P.System.Text.Parsing.ActionParser.constructor.P.System.Collections.List.P.System.Text.Parsing.ActionParser
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.P.System.Text.Parsing.ActionParser.constructor.P.System.Collections.List.P.System.Text.Parsing.ActionParser.C.R.System.Collections.List.P.System.Text.Parsing.ActionParser
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.ActionParser.constructor.P.System.Collections.List.P.System.Text.Parsing.ActionParser.C.R.System.Collections.List.P.System.Text.Parsing.ActionParser.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.ActionParser.operator.assign.P.System.Collections.List.P.System.Text.Parsing.ActionParser.C.R.System.Collections.List.P.System.Text.Parsing.ActionParser
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.ActionParser.operator.assign.P.System.Collections.List.P.System.Text.Parsing.ActionParser.C.R.System.Collections.List.P.System.Text.Parsing.ActionParser.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.ActionParser.constructor.P.System.Collections.List.P.System.Text.Parsing.ActionParser.RR.System.Collections.List.P.System.Text.Parsing.ActionParser
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.ActionParser.constructor.P.System.Collections.List.P.System.Text.Parsing.ActionParser.RR.System.Collections.List.P.System.Text.Parsing.ActionParser.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.ActionParser.operator.assign.P.System.Collections.List.P.System.Text.Parsing.ActionParser.RR.System.Collections.List.P.System.Text.Parsing.ActionParser
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.ActionParser.operator.assign.P.System.Collections.List.P.System.Text.Parsing.ActionParser.RR.System.Collections.List.P.System.Text.Parsing.ActionParser.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.System.Text.Parsing.AttrOrVariable
        {
            description
            {
            }
            function System.Collections.List.System.Text.Parsing.AttrOrVariable.constructor.P.System.Collections.List.System.Text.Parsing.AttrOrVariable
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.Text.Parsing.AttrOrVariable.constructor.P.System.Collections.List.System.Text.Parsing.AttrOrVariable.C.R.System.Collections.List.System.Text.Parsing.AttrOrVariable
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.Text.Parsing.AttrOrVariable.constructor.P.System.Collections.List.System.Text.Parsing.AttrOrVariable.C.R.System.Collections.List.System.Text.Parsing.AttrOrVariable.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.Text.Parsing.AttrOrVariable.operator.assign.P.System.Collections.List.System.Text.Parsing.AttrOrVariable.C.R.System.Collections.List.System.Text.Parsing.AttrOrVariable
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.Text.Parsing.AttrOrVariable.operator.assign.P.System.Collections.List.System.Text.Parsing.AttrOrVariable.C.R.System.Collections.List.System.Text.Parsing.AttrOrVariable.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.Text.Parsing.AttrOrVariable.constructor.P.System.Collections.List.System.Text.Parsing.AttrOrVariable.RR.System.Collections.List.System.Text.Parsing.AttrOrVariable
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.Text.Parsing.AttrOrVariable.constructor.P.System.Collections.List.System.Text.Parsing.AttrOrVariable.RR.System.Collections.List.System.Text.Parsing.AttrOrVariable.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.Text.Parsing.AttrOrVariable.operator.assign.P.System.Collections.List.System.Text.Parsing.AttrOrVariable.RR.System.Collections.List.System.Text.Parsing.AttrOrVariable
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.Text.Parsing.AttrOrVariable.operator.assign.P.System.Collections.List.System.Text.Parsing.AttrOrVariable.RR.System.Collections.List.System.Text.Parsing.AttrOrVariable.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject
        {
            description
            {
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.RR.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.RR.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.RR.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.RR.System.Collections.List.P.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation
        {
            description
            {
            }
            function System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.constructor.P.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.constructor.P.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.C.R.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.constructor.P.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.C.R.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.operator.assign.P.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.C.R.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.operator.assign.P.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.C.R.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.constructor.P.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.RR.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.constructor.P.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.RR.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.operator.assign.P.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.RR.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.operator.assign.P.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.RR.System.Collections.List.System.Text.Parsing.CmObjectModel.Derivation.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler
        {
            description
            {
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.C.R.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.C.R.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.operator.assign.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.C.R.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.operator.assign.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.C.R.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.RR.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.RR.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.operator.assign.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.RR.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.operator.assign.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.RR.System.Collections.List.P.System.Text.Parsing.CmObjectModel.ExceptionHandler.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement
        {
            description
            {
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.C.R.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.C.R.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.operator.assign.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.C.R.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.operator.assign.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.C.R.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.RR.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.constructor.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.RR.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.operator.assign.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.RR.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.operator.assign.P.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.RR.System.Collections.List.P.System.Text.Parsing.CmObjectModel.Statement.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.P.System.Text.Parsing.Namespace
        {
            description
            {
            }
            function System.Collections.List.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.List.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.List.P.System.Text.Parsing.Namespace.C.R.System.Collections.List.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.List.P.System.Text.Parsing.Namespace.C.R.System.Collections.List.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.List.P.System.Text.Parsing.Namespace.C.R.System.Collections.List.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.List.P.System.Text.Parsing.Namespace.C.R.System.Collections.List.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.List.P.System.Text.Parsing.Namespace.RR.System.Collections.List.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.List.P.System.Text.Parsing.Namespace.RR.System.Collections.List.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.List.P.System.Text.Parsing.Namespace.RR.System.Collections.List.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.List.P.System.Text.Parsing.Namespace.RR.System.Collections.List.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.P.System.Text.Parsing.NonterminalParser
        {
            description
            {
            }
            function System.Collections.List.P.System.Text.Parsing.NonterminalParser.constructor.P.System.Collections.List.P.System.Text.Parsing.NonterminalParser
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.P.System.Text.Parsing.NonterminalParser.constructor.P.System.Collections.List.P.System.Text.Parsing.NonterminalParser.C.R.System.Collections.List.P.System.Text.Parsing.NonterminalParser
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.NonterminalParser.constructor.P.System.Collections.List.P.System.Text.Parsing.NonterminalParser.C.R.System.Collections.List.P.System.Text.Parsing.NonterminalParser.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.NonterminalParser.operator.assign.P.System.Collections.List.P.System.Text.Parsing.NonterminalParser.C.R.System.Collections.List.P.System.Text.Parsing.NonterminalParser
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.NonterminalParser.operator.assign.P.System.Collections.List.P.System.Text.Parsing.NonterminalParser.C.R.System.Collections.List.P.System.Text.Parsing.NonterminalParser.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.NonterminalParser.constructor.P.System.Collections.List.P.System.Text.Parsing.NonterminalParser.RR.System.Collections.List.P.System.Text.Parsing.NonterminalParser
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.NonterminalParser.constructor.P.System.Collections.List.P.System.Text.Parsing.NonterminalParser.RR.System.Collections.List.P.System.Text.Parsing.NonterminalParser.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.NonterminalParser.operator.assign.P.System.Collections.List.P.System.Text.Parsing.NonterminalParser.RR.System.Collections.List.P.System.Text.Parsing.NonterminalParser
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.NonterminalParser.operator.assign.P.System.Collections.List.P.System.Text.Parsing.NonterminalParser.RR.System.Collections.List.P.System.Text.Parsing.NonterminalParser.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.P.System.Text.Parsing.Rule
        {
            description
            {
            }
            function System.Collections.List.P.System.Text.Parsing.Rule.constructor.P.System.Collections.List.P.System.Text.Parsing.Rule
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.P.System.Text.Parsing.Rule.constructor.P.System.Collections.List.P.System.Text.Parsing.Rule.C.R.System.Collections.List.P.System.Text.Parsing.Rule
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.Rule.constructor.P.System.Collections.List.P.System.Text.Parsing.Rule.C.R.System.Collections.List.P.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.Rule.operator.assign.P.System.Collections.List.P.System.Text.Parsing.Rule.C.R.System.Collections.List.P.System.Text.Parsing.Rule
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.Rule.operator.assign.P.System.Collections.List.P.System.Text.Parsing.Rule.C.R.System.Collections.List.P.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.Rule.constructor.P.System.Collections.List.P.System.Text.Parsing.Rule.RR.System.Collections.List.P.System.Text.Parsing.Rule
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.P.System.Text.Parsing.Rule.constructor.P.System.Collections.List.P.System.Text.Parsing.Rule.RR.System.Collections.List.P.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.P.System.Text.Parsing.Rule.operator.assign.P.System.Collections.List.P.System.Text.Parsing.Rule.RR.System.Collections.List.P.System.Text.Parsing.Rule
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.P.System.Text.Parsing.Rule.operator.assign.P.System.Collections.List.P.System.Text.Parsing.Rule.RR.System.Collections.List.P.System.Text.Parsing.Rule.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject
        {
            description
            {
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.CmObjectModel.CmObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.System.UniquePtr.System.Text.Parsing.Object
        {
            description
            {
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain
        {
            description
            {
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingDomain.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject
        {
            description
            {
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.C.R.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.operator.assign.P.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.RR.System.Collections.List.System.UniquePtr.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.byte
        {
            description
            {
            }
            function System.Collections.List.byte.constructor.P.System.Collections.List.byte
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.byte.constructor.P.System.Collections.List.byte.C.R.System.Collections.List.byte
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.byte.constructor.P.System.Collections.List.byte.C.R.System.Collections.List.byte.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.byte.operator.assign.P.System.Collections.List.byte.C.R.System.Collections.List.byte
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.byte.operator.assign.P.System.Collections.List.byte.C.R.System.Collections.List.byte.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.byte.constructor.P.System.Collections.List.byte.RR.System.Collections.List.byte
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.byte.constructor.P.System.Collections.List.byte.RR.System.Collections.List.byte.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.byte.operator.assign.P.System.Collections.List.byte.RR.System.Collections.List.byte
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.byte.operator.assign.P.System.Collections.List.byte.RR.System.Collections.List.byte.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.int
        {
            description
            {
            }
            function System.Collections.List.int.constructor.P.System.Collections.List.int
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.int.constructor.P.System.Collections.List.int.C.R.System.Collections.List.int
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.int.constructor.P.System.Collections.List.int.C.R.System.Collections.List.int.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.int.operator.assign.P.System.Collections.List.int.C.R.System.Collections.List.int
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.int.operator.assign.P.System.Collections.List.int.C.R.System.Collections.List.int.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.int.constructor.P.System.Collections.List.int.RR.System.Collections.List.int
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.int.constructor.P.System.Collections.List.int.RR.System.Collections.List.int.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.int.operator.assign.P.System.Collections.List.int.RR.System.Collections.List.int
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.int.operator.assign.P.System.Collections.List.int.RR.System.Collections.List.int.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.List.ulong
        {
            description
            {
            }
            function System.Collections.List.ulong.constructor.P.System.Collections.List.ulong
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.List.ulong.constructor.P.System.Collections.List.ulong.C.R.System.Collections.List.ulong
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.List.ulong.constructor.P.System.Collections.List.ulong.C.R.System.Collections.List.ulong.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.List.ulong.operator.assign.P.System.Collections.List.ulong.C.R.System.Collections.List.ulong
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.List.ulong.operator.assign.P.System.Collections.List.ulong.C.R.System.Collections.List.ulong.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.List.ulong.constructor.P.System.Collections.List.ulong.RR.System.Collections.List.ulong
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.List.ulong.constructor.P.System.Collections.List.ulong.RR.System.Collections.List.ulong.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.List.ulong.operator.assign.P.System.Collections.List.ulong.RR.System.Collections.List.ulong
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.List.ulong.operator.assign.P.System.Collections.List.ulong.RR.System.Collections.List.ulong.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Map.System.String.System.String.System.Less.System.String
        {
            description
            {
            }
            function System.Collections.Map.System.String.System.String.System.Less.System.String.constructor.P.System.Collections.Map.System.String.System.String.System.Less.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Map.System.String.System.String.System.Less.System.String.constructor.P.System.Collections.Map.System.String.System.String.System.Less.System.String.C.R.System.Collections.Map.System.String.System.String.System.Less.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Map.System.String.System.String.System.Less.System.String.constructor.P.System.Collections.Map.System.String.System.String.System.Less.System.String.C.R.System.Collections.Map.System.String.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Map.System.String.System.String.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.System.String.System.Less.System.String.C.R.System.Collections.Map.System.String.System.String.System.Less.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Map.System.String.System.String.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.System.String.System.Less.System.String.C.R.System.Collections.Map.System.String.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Map.System.String.System.String.System.Less.System.String.constructor.P.System.Collections.Map.System.String.System.String.System.Less.System.String.RR.System.Collections.Map.System.String.System.String.System.Less.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Map.System.String.System.String.System.Less.System.String.constructor.P.System.Collections.Map.System.String.System.String.System.Less.System.String.RR.System.Collections.Map.System.String.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Map.System.String.System.String.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.System.String.System.Less.System.String.RR.System.Collections.Map.System.String.System.String.System.Less.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Map.System.String.System.String.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.System.String.System.Less.System.String.RR.System.Collections.Map.System.String.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String
        {
            description
            {
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.C.R.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.C.R.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.C.R.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.C.R.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.RR.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.RR.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.RR.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.RR.System.Collections.Map.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String
        {
            description
            {
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.C.R.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.C.R.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.C.R.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.C.R.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.RR.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.RR.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.RR.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.RR.System.Collections.Map.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String
        {
            description
            {
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.C.R.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.C.R.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.C.R.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.C.R.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.RR.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.constructor.P.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.RR.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.RR.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.operator.assign.P.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.RR.System.Collections.Map.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String
        {
            description
            {
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.System.String.System.SelectFirst.System.String.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String
        {
            description
            {
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Grammar.System.SelectFirst.System.String.P.System.Text.Parsing.Grammar.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String
        {
            description
            {
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.Namespace.System.SelectFirst.System.String.P.System.Text.Parsing.Namespace.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String
        {
            description
            {
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.System.SelectFirst.System.String.P.System.Text.Parsing.ParsingObject.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String
        {
            description
            {
            }
            function System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.C.R.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.constructor.P.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.operator.assign.P.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.RR.System.Collections.RedBlackTree.System.String.System.String.System.Identity.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTree.P.System.Text.Parsing.Grammar.P.System.Text.Parsing.Grammar.System.Identity.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink
        {
            description
            {
            }
            function System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.C.R.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.C.R.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.C.R.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.C.R.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.RR.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.RR.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.RR.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.RR.System.Collections.RedBlackTree.P.System.Text.Parsing.RuleLink.P.System.Text.Parsing.RuleLink.System.Identity.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.Collections.RedBlackTreeNode.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNode.System.String
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNode.System.String.constructor.P.System.Collections.RedBlackTreeNode.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNode.System.String.constructor.P.System.Collections.RedBlackTreeNode.System.String.C.R.System.Collections.RedBlackTreeNode.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNode.System.String.constructor.P.System.Collections.RedBlackTreeNode.System.String.C.R.System.Collections.RedBlackTreeNode.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.String.operator.assign.P.System.Collections.RedBlackTreeNode.System.String.C.R.System.Collections.RedBlackTreeNode.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNode.System.String.operator.assign.P.System.Collections.RedBlackTreeNode.System.String.C.R.System.Collections.RedBlackTreeNode.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.String.constructor.P.System.Collections.RedBlackTreeNode.System.String.RR.System.Collections.RedBlackTreeNode.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNode.System.String.constructor.P.System.Collections.RedBlackTreeNode.System.String.RR.System.Collections.RedBlackTreeNode.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.System.String.operator.assign.P.System.Collections.RedBlackTreeNode.System.String.RR.System.Collections.RedBlackTreeNode.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNode.System.String.operator.assign.P.System.Collections.RedBlackTreeNode.System.String.RR.System.Collections.RedBlackTreeNode.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.C.R.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.C.R.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.C.R.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.C.R.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.RR.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.RR.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.RR.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.RR.System.Collections.RedBlackTreeNode.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.System.String.R.System.Pair.System.String.System.String.P.System.Pair.System.String.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Grammar.R.System.Pair.System.String.P.System.Text.Parsing.Grammar.P.System.Pair.System.String.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.Namespace.R.System.Pair.System.String.P.System.Text.Parsing.Namespace.P.System.Pair.System.String.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.C.R.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.RR.System.Collections.RedBlackTreeNodeIterator.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.R.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.P.System.Pair.System.String.P.System.Text.Parsing.ParsingObject.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.C.R.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.C.R.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.C.R.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.C.R.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.RR.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.constructor.P.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.RR.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.RR.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.RR.System.Collections.RedBlackTreeNodeIterator.System.String.R.System.String.P.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.C.R.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.RR.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.Grammar.P.R.System.Text.Parsing.Grammar.P.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink
        {
            description
            {
            }
            function System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.C.R.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.C.R.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.C.R.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.C.R.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.RR.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.RR.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.RR.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.RR.System.Collections.RedBlackTreeNodeIterator.P.System.Text.Parsing.RuleLink.P.R.System.Text.Parsing.RuleLink.P.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Set.System.String.System.Less.System.String
        {
            description
            {
            }
            function System.Collections.Set.System.String.System.Less.System.String.constructor.P.System.Collections.Set.System.String.System.Less.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Set.System.String.System.Less.System.String.constructor.P.System.Collections.Set.System.String.System.Less.System.String.C.R.System.Collections.Set.System.String.System.Less.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Set.System.String.System.Less.System.String.constructor.P.System.Collections.Set.System.String.System.Less.System.String.C.R.System.Collections.Set.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Set.System.String.System.Less.System.String.operator.assign.P.System.Collections.Set.System.String.System.Less.System.String.C.R.System.Collections.Set.System.String.System.Less.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Set.System.String.System.Less.System.String.operator.assign.P.System.Collections.Set.System.String.System.Less.System.String.C.R.System.Collections.Set.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Set.System.String.System.Less.System.String.constructor.P.System.Collections.Set.System.String.System.Less.System.String.RR.System.Collections.Set.System.String.System.Less.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Set.System.String.System.Less.System.String.constructor.P.System.Collections.Set.System.String.System.Less.System.String.RR.System.Collections.Set.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Set.System.String.System.Less.System.String.operator.assign.P.System.Collections.Set.System.String.System.Less.System.String.RR.System.Collections.Set.System.String.System.Less.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Set.System.String.System.Less.System.String.operator.assign.P.System.Collections.Set.System.String.System.Less.System.String.RR.System.Collections.Set.System.String.System.Less.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar
        {
            description
            {
            }
            function System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.C.R.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.C.R.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.C.R.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.C.R.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.RR.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.constructor.P.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.RR.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.RR.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.operator.assign.P.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.RR.System.Collections.Set.P.System.Text.Parsing.Grammar.System.Less.P.System.Text.Parsing.Grammar.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink
        {
            description
            {
            }
            function System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.C.R.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.C.R.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.C.R.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.C.R.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.RR.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.constructor.P.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.RR.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.RR.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.operator.assign.P.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.RR.System.Collections.Set.P.System.Text.Parsing.RuleLink.System.Less.P.System.Text.Parsing.RuleLink.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Stack.P.System.Text.Parsing.Namespace
        {
            description
            {
            }
            function System.Collections.Stack.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.Stack.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Stack.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.Stack.P.System.Text.Parsing.Namespace.C.R.System.Collections.Stack.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Stack.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.Stack.P.System.Text.Parsing.Namespace.C.R.System.Collections.Stack.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Stack.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.Stack.P.System.Text.Parsing.Namespace.C.R.System.Collections.Stack.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Stack.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.Stack.P.System.Text.Parsing.Namespace.C.R.System.Collections.Stack.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Stack.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.Stack.P.System.Text.Parsing.Namespace.RR.System.Collections.Stack.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Stack.P.System.Text.Parsing.Namespace.constructor.P.System.Collections.Stack.P.System.Text.Parsing.Namespace.RR.System.Collections.Stack.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Stack.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.Stack.P.System.Text.Parsing.Namespace.RR.System.Collections.Stack.P.System.Text.Parsing.Namespace
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Stack.P.System.Text.Parsing.Namespace.operator.assign.P.System.Collections.Stack.P.System.Text.Parsing.Namespace.RR.System.Collections.Stack.P.System.Text.Parsing.Namespace.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object
        {
            description
            {
            }
            function System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.C.R.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.C.R.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.C.R.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.C.R.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.RR.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Move constructor.
                }
                parameter System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.constructor.P.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.RR.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.RR.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object
            {
                description
                {
                    Move assignment.
                }
                parameter System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.operator.assign.P.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.RR.System.Collections.Stack.System.UniquePtr.System.Text.Parsing.Object.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
    }
    namespace System.Concepts
    {
        description
        {
        }
    }
    namespace System.IO
    {
        description
        {
        }
    }
    namespace System.Net
    {
        description
        {
        }
    }
    namespace System.Net.Sockets
    {
        description
        {
            Provides support for TCP sockets.
        }
        class System.Net.Sockets.NetworkBuffer
        {
            description
            {
                A handle to a dynamically allocated memory.
            }
            function System.Net.Sockets.NetworkBuffer.constructor.P.System.Net.Sockets.NetworkBuffer.RR.System.Net.Sockets.NetworkBuffer
            {
                description
                {
                    Move constructor.
                }
                parameter System.Net.Sockets.NetworkBuffer.constructor.P.System.Net.Sockets.NetworkBuffer.RR.System.Net.Sockets.NetworkBuffer.that
                {
                    description
                    {
                    }
                }
            }
            function System.Net.Sockets.NetworkBuffer.operator.assign.P.System.Net.Sockets.NetworkBuffer.RR.System.Net.Sockets.NetworkBuffer
            {
                description
                {
                    Move assignment.
                }
                parameter System.Net.Sockets.NetworkBuffer.operator.assign.P.System.Net.Sockets.NetworkBuffer.RR.System.Net.Sockets.NetworkBuffer.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Net.Sockets.NetworkBuffer.Mem.C.P.System.Net.Sockets.NetworkBuffer
            {
                description
                {
                    Returns a pointer to the allocated memory block.
                }
                returns System.Net.Sockets.NetworkBuffer.Mem.C.P.System.Net.Sockets.NetworkBuffer.returnValue
                {
                    description
                    {
                        Returns a pointer to the allocated memory block.
                    }
                }
            }
            function System.Net.Sockets.NetworkBuffer.constructor.P.System.Net.Sockets.NetworkBuffer.int
            {
                description
                {
                    Constructor. Allocates specified number of bytes from the system.
                }
                parameter System.Net.Sockets.NetworkBuffer.constructor.P.System.Net.Sockets.NetworkBuffer.int.size_
                {
                    description
                    {
                        The number of bytes to allocate.
                    }
                }
            }
            function System.Net.Sockets.NetworkBuffer.Size.C.P.System.Net.Sockets.NetworkBuffer
            {
                description
                {
                    Returns the size of the allocated memory block.
                }
                returns System.Net.Sockets.NetworkBuffer.Size.C.P.System.Net.Sockets.NetworkBuffer.returnValue
                {
                    description
                    {
                        Returns the size of the allocated memory block.
                    }
                }
            }
            function System.Net.Sockets.NetworkBuffer.destructor.P.System.Net.Sockets.NetworkBuffer
            {
                description
                {
                    Destructor. Frees the allocated memory back to the system.
                }
            }
        }
        class System.Net.Sockets.SocketByteStream
        {
            description
            {
                Represent stream of bytes connected to a System.Net.Sockets.TcpSocket.
            }
            function System.Net.Sockets.SocketByteStream.constructor.P.System.Net.Sockets.SocketByteStream
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Net.Sockets.SocketByteStream.constructor.P.System.Net.Sockets.SocketByteStream.RR.System.Net.Sockets.SocketByteStream
            {
                description
                {
                    Move constructor.
                }
                parameter System.Net.Sockets.SocketByteStream.constructor.P.System.Net.Sockets.SocketByteStream.RR.System.Net.Sockets.SocketByteStream.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Net.Sockets.SocketByteStream.operator.assign.P.System.Net.Sockets.SocketByteStream.RR.System.Net.Sockets.SocketByteStream
            {
                description
                {
                    Move assignment.
                }
                parameter System.Net.Sockets.SocketByteStream.operator.assign.P.System.Net.Sockets.SocketByteStream.RR.System.Net.Sockets.SocketByteStream.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Net.Sockets.SocketByteStream.Read.P.System.Net.Sockets.SocketByteStream.P.byte.int
            {
                description
                {
                    Reads at most given number of bytes from the System.Net.Sockets.TcpSocket to the given buffer.
                    Returns the number of bytes read.
                }
                remarks
                {
                    Throws System.Net.Sockets.SocketError if reading fails.
                }
                parameter System.Net.Sockets.SocketByteStream.Read.P.System.Net.Sockets.SocketByteStream.P.byte.int.buf
                {
                    description
                    {
                        A buffer to read to.
                    }
                }
                parameter System.Net.Sockets.SocketByteStream.Read.P.System.Net.Sockets.SocketByteStream.P.byte.int.count
                {
                    description
                    {
                        Maximum number of bytes to read.
                    }
                }
                returns System.Net.Sockets.SocketByteStream.Read.P.System.Net.Sockets.SocketByteStream.P.byte.int.returnValue
                {
                    description
                    {
                        Returns number of bytes read.
                        Return value of 0 indicates peer has shut down the connection (end of stream).
                    }
                }
            }
            function System.Net.Sockets.SocketByteStream.ReadByte.P.System.Net.Sockets.SocketByteStream
            {
                description
                {
                    Reads one byte of data from the System.Net.Sockets.TcpSocket and returns it.
                    Return value of -1 indicates peer has shut down the connection (end of stream).
                }
                remarks
                {
                    Throws System.Net.Sockets.SocketError if reading fails.
                }
                returns System.Net.Sockets.SocketByteStream.ReadByte.P.System.Net.Sockets.SocketByteStream.returnValue
                {
                    description
                    {
                        Returns the byte read, or -1 if end of stream encountered.
                    }
                }
            }
            function System.Net.Sockets.SocketByteStream.constructor.P.System.Net.Sockets.SocketByteStream.RR.System.Net.Sockets.TcpSocket
            {
                description
                {
                    Constructor. Initializes the socket byte stream with the given System.Net.Sockets.TcpSocket.
                }
                parameter System.Net.Sockets.SocketByteStream.constructor.P.System.Net.Sockets.SocketByteStream.RR.System.Net.Sockets.TcpSocket.socket_
                {
                    description
                    {
                        A System.Net.Sockets.TcpSocket.
                    }
                }
            }
            function System.Net.Sockets.SocketByteStream.constructor.P.System.Net.Sockets.SocketByteStream.C.R.System.String.C.R.System.String
            {
                description
                {
                    Constructor. Initializes the socket byte stream by creating a TCP socket and connecting it to the specified node and service.
                }
                remarks
                {
                    Throws System.Net.Sockets.SocketError if connecting fails.
                }
                parameter System.Net.Sockets.SocketByteStream.constructor.P.System.Net.Sockets.SocketByteStream.C.R.System.String.C.R.System.String.node
                {
                    description
                    {
                        A host name or an IP address to connect.
                    }
                }
                parameter System.Net.Sockets.SocketByteStream.constructor.P.System.Net.Sockets.SocketByteStream.C.R.System.String.C.R.System.String.service
                {
                    description
                    {
                        A protocol name or port number to connect.
                    }
                }
            }
            function System.Net.Sockets.SocketByteStream.Write.P.System.Net.Sockets.SocketByteStream.byte
            {
                description
                {
                    Writes given byte to the socket byte stream.
                }
                remarks
                {
                    Throws System.Net.Sockets.SocketError if writing fails.
                }
                parameter System.Net.Sockets.SocketByteStream.Write.P.System.Net.Sockets.SocketByteStream.byte.x
                {
                    description
                    {
                        A byte to write.
                    }
                }
            }
            function System.Net.Sockets.SocketByteStream.Write.P.System.Net.Sockets.SocketByteStream.P.byte.int
            {
                description
                {
                    Writes given number of bytes from the given buffer to the socket byte stream.
                }
                remarks
                {
                    Throws System.Net.Sockets.SocketError if writing fails.
                }
                parameter System.Net.Sockets.SocketByteStream.Write.P.System.Net.Sockets.SocketByteStream.P.byte.int.buf
                {
                    description
                    {
                        A buffer of data to write.
                    }
                }
                parameter System.Net.Sockets.SocketByteStream.Write.P.System.Net.Sockets.SocketByteStream.P.byte.int.count
                {
                    description
                    {
                        Number of bytes to write.
                    }
                }
            }
            function System.Net.Sockets.SocketByteStream.destructor.P.System.Net.Sockets.SocketByteStream
            {
                description
                {
                    Destructor. Closes the socket.
                }
            }
        }
        class System.Net.Sockets.SocketError
        {
            description
            {
                An exception class throw when a socket operation fails.
            }
            function System.Net.Sockets.SocketError.constructor.P.System.Net.Sockets.SocketError
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Net.Sockets.SocketError.constructor.P.System.Net.Sockets.SocketError.C.R.System.Net.Sockets.SocketError
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Net.Sockets.SocketError.constructor.P.System.Net.Sockets.SocketError.C.R.System.Net.Sockets.SocketError.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Net.Sockets.SocketError.operator.assign.P.System.Net.Sockets.SocketError.C.R.System.Net.Sockets.SocketError
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Net.Sockets.SocketError.operator.assign.P.System.Net.Sockets.SocketError.C.R.System.Net.Sockets.SocketError.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Net.Sockets.SocketError.constructor.P.System.Net.Sockets.SocketError.RR.System.Net.Sockets.SocketError
            {
                description
                {
                    Move constructor.
                }
                parameter System.Net.Sockets.SocketError.constructor.P.System.Net.Sockets.SocketError.RR.System.Net.Sockets.SocketError.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Net.Sockets.SocketError.operator.assign.P.System.Net.Sockets.SocketError.RR.System.Net.Sockets.SocketError
            {
                description
                {
                    Move assignment.
                }
                parameter System.Net.Sockets.SocketError.operator.assign.P.System.Net.Sockets.SocketError.RR.System.Net.Sockets.SocketError.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Net.Sockets.SocketError.ErrorCode.C.P.System.Net.Sockets.SocketError
            {
                description
                {
                    Returns the error code.
                }
                returns System.Net.Sockets.SocketError.ErrorCode.C.P.System.Net.Sockets.SocketError.returnValue
                {
                    description
                    {
                        Returns the error code.
                    }
                }
            }
            function System.Net.Sockets.SocketError.constructor.P.System.Net.Sockets.SocketError.C.R.System.String.C.R.System.String.int
            {
                description
                {
                    Constructor. Initializes the socket error with the specified operation text, error description text and error code.
                }
                parameter System.Net.Sockets.SocketError.constructor.P.System.Net.Sockets.SocketError.C.R.System.String.C.R.System.String.int.errorCode_
                {
                    description
                    {
                        Error code.
                    }
                }
                parameter System.Net.Sockets.SocketError.constructor.P.System.Net.Sockets.SocketError.C.R.System.String.C.R.System.String.int.errorMessage
                {
                    description
                    {
                        Description of the error.
                    }
                }
                parameter System.Net.Sockets.SocketError.constructor.P.System.Net.Sockets.SocketError.C.R.System.String.C.R.System.String.int.operation
                {
                    description
                    {
                        Description of the failed operation.
                    }
                }
            }
            function System.Net.Sockets.SocketError.constructor.P.System.Net.Sockets.SocketError.C.R.System.String.int
            {
                description
                {
                    Constructor. Initializes the socket error with the specified operation text, retrieved error description and the specified error code.
                }
                parameter System.Net.Sockets.SocketError.constructor.P.System.Net.Sockets.SocketError.C.R.System.String.int.errorCode_
                {
                    description
                    {
                        Error code.
                    }
                }
                parameter System.Net.Sockets.SocketError.constructor.P.System.Net.Sockets.SocketError.C.R.System.String.int.operation
                {
                    description
                    {
                        Description of failed operation.
                    }
                }
            }
            function System.Net.Sockets.SocketError.destructor.P.System.Net.Sockets.SocketError
            {
                description
                {
                }
            }
        }
        class System.Net.Sockets.SocketLibrary
        {
            description
            {
                Represents the socket library initializer implemented as a singleton.
            }
            function System.Net.Sockets.SocketLibrary.Init.P.System.Net.Sockets.SocketLibrary
            {
                description
                {
                    Initializes the socket library.
                }
            }
            function System.Net.Sockets.SocketLibrary.Instance
            {
                description
                {
                    Returns a reference to the socket library singleton instance.
                }
                returns System.Net.Sockets.SocketLibrary.Instance.returnValue
                {
                    description
                    {
                        Returns a reference to the socket library singleton instance.
                    }
                }
            }
            function System.Net.Sockets.SocketLibrary.destructor.P.System.Net.Sockets.SocketLibrary
            {
                description
                {
                    Destructor. Uninitializes the socket library.
                }
            }
        }
        class System.Net.Sockets.SocketLibraryException
        {
            description
            {
                Exception class thrown when the initialization of the socket library fails.
            }
            function System.Net.Sockets.SocketLibraryException.constructor.P.System.Net.Sockets.SocketLibraryException
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Net.Sockets.SocketLibraryException.constructor.P.System.Net.Sockets.SocketLibraryException.C.R.System.Net.Sockets.SocketLibraryException
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Net.Sockets.SocketLibraryException.constructor.P.System.Net.Sockets.SocketLibraryException.C.R.System.Net.Sockets.SocketLibraryException.__parameter0
                {
                    description
                    {
                    }
                }
            }
            function System.Net.Sockets.SocketLibraryException.operator.assign.P.System.Net.Sockets.SocketLibraryException.C.R.System.Net.Sockets.SocketLibraryException
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Net.Sockets.SocketLibraryException.operator.assign.P.System.Net.Sockets.SocketLibraryException.C.R.System.Net.Sockets.SocketLibraryException.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Net.Sockets.SocketLibraryException.constructor.P.System.Net.Sockets.SocketLibraryException.RR.System.Net.Sockets.SocketLibraryException
            {
                description
                {
                    Move constructor.
                }
                parameter System.Net.Sockets.SocketLibraryException.constructor.P.System.Net.Sockets.SocketLibraryException.RR.System.Net.Sockets.SocketLibraryException.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Net.Sockets.SocketLibraryException.operator.assign.P.System.Net.Sockets.SocketLibraryException.RR.System.Net.Sockets.SocketLibraryException
            {
                description
                {
                    Move assignment.
                }
                parameter System.Net.Sockets.SocketLibraryException.operator.assign.P.System.Net.Sockets.SocketLibraryException.RR.System.Net.Sockets.SocketLibraryException.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
            function System.Net.Sockets.SocketLibraryException.constructor.P.System.Net.Sockets.SocketLibraryException.C.R.System.String
            {
                description
                {
                    Constructor. Initializes the socket library exception with the specified error message.
                }
                parameter System.Net.Sockets.SocketLibraryException.constructor.P.System.Net.Sockets.SocketLibraryException.C.R.System.String.message_
                {
                    description
                    {
                        An error message.
                    }
                }
            }
            function System.Net.Sockets.SocketLibraryException.destructor.P.System.Net.Sockets.SocketLibraryException
            {
                description
                {
                }
            }
        }
        class System.Net.Sockets.TcpSocket
        {
            description
            {
                Represents a TCP socket.
            }
            function System.Net.Sockets.TcpSocket.constructor.P.System.Net.Sockets.TcpSocket
            {
                description
                {
                    Default constructor. Creates an unbound TCP socket.
                }
            }
            function System.Net.Sockets.TcpSocket.constructor.P.System.Net.Sockets.TcpSocket.RR.System.Net.Sockets.TcpSocket
            {
                description
                {
                    Move constructor.
                }
                parameter System.Net.Sockets.TcpSocket.constructor.P.System.Net.Sockets.TcpSocket.RR.System.Net.Sockets.TcpSocket.that
                {
                    description
                    {
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.operator.assign.P.System.Net.Sockets.TcpSocket.RR.System.Net.Sockets.TcpSocket
            {
                description
                {
                    Move assignment.
                }
                parameter System.Net.Sockets.TcpSocket.operator.assign.P.System.Net.Sockets.TcpSocket.RR.System.Net.Sockets.TcpSocket.that
                {
                    description
                    {
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.Accept.P.System.Net.Sockets.TcpSocket
            {
                description
                {
                    Accepts a connection to a bound socket and returns a new connected TCP socket that represents the connection.
                }
                returns System.Net.Sockets.TcpSocket.Accept.P.System.Net.Sockets.TcpSocket.returnValue
                {
                    description
                    {
                        Returns a connected TCP socket that represents the connection.
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.Bind.P.System.Net.Sockets.TcpSocket.int
            {
                description
                {
                    Binds the socket to a port.
                }
                parameter System.Net.Sockets.TcpSocket.Bind.P.System.Net.Sockets.TcpSocket.int.port
                {
                    description
                    {
                        A port number to which to bind.
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.Close.P.System.Net.Sockets.TcpSocket
            {
                description
                {
                    Closes the socket.
                }
            }
            function System.Net.Sockets.TcpSocket.GetSocketHandle.C.P.System.Net.Sockets.TcpSocket
            {
                description
                {
                    Returns the socket handle.
                }
                returns System.Net.Sockets.TcpSocket.GetSocketHandle.C.P.System.Net.Sockets.TcpSocket.returnValue
                {
                    description
                    {
                        Returns the socket handle.
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.Listen.P.System.Net.Sockets.TcpSocket.int
            {
                description
                {
                    Begins listening connections to a bound TCP socket.
                }
                parameter System.Net.Sockets.TcpSocket.Listen.P.System.Net.Sockets.TcpSocket.int.backlog
                {
                    description
                    {
                        The number of pending connections.
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.Receive.P.System.Net.Sockets.TcpSocket.P.void.int
            {
                description
                {
                    Receives data from a connected socket.
                }
                remarks
                {
                    Throws System.Net.Sockets.SocketError if reading fails.
                }
                parameter System.Net.Sockets.TcpSocket.Receive.P.System.Net.Sockets.TcpSocket.P.void.int.buf
                {
                    description
                    {
                        A buffer.
                    }
                }
                parameter System.Net.Sockets.TcpSocket.Receive.P.System.Net.Sockets.TcpSocket.P.void.int.len
                {
                    description
                    {
                        Maximum number of bytes to receive.
                    }
                }
                returns System.Net.Sockets.TcpSocket.Receive.P.System.Net.Sockets.TcpSocket.P.void.int.returnValue
                {
                    description
                    {
                        Returns the number of bytes received.
                        This might be less than the number of bytes requested.
                        Return value of 0 indicates that the peer has shut down the connection.
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.ReceiveAll.P.System.Net.Sockets.TcpSocket
            {
                description
                {
                    Receives rest of data from a connected socket.
                    That is: receives data until the peer shuts down its sending side of the connection.
                }
                remarks
                {
                    Throws System.Net.Sockets.SocketError if reading fails.
                }
                returns System.Net.Sockets.TcpSocket.ReceiveAll.P.System.Net.Sockets.TcpSocket.returnValue
                {
                    description
                    {
                        Returns the received data as a string.
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.Send.P.System.Net.Sockets.TcpSocket.C.R.System.String
            {
                description
                {
                    Sends a string of data to a connected socket.
                }
                remarks
                {
                    Throws System.Net.Sockets.SocketError if sending fails.
                }
                parameter System.Net.Sockets.TcpSocket.Send.P.System.Net.Sockets.TcpSocket.C.R.System.String.s
                {
                    description
                    {
                        A string to send.
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.Send.P.System.Net.Sockets.TcpSocket.C.P.void.int
            {
                description
                {
                    Sends data to a connected socket.
                }
                remarks
                {
                    Throws System.Net.Sockets.SocketError if sending fails.
                }
                parameter System.Net.Sockets.TcpSocket.Send.P.System.Net.Sockets.TcpSocket.C.P.void.int.buf
                {
                    description
                    {
                        A buffer of data to send.
                    }
                }
                parameter System.Net.Sockets.TcpSocket.Send.P.System.Net.Sockets.TcpSocket.C.P.void.int.len
                {
                    description
                    {
                        Maximum number of bytes to send.
                    }
                }
                returns System.Net.Sockets.TcpSocket.Send.P.System.Net.Sockets.TcpSocket.C.P.void.int.returnValue
                {
                    description
                    {
                        Returns the number of bytes sent.
                        This might be less than the number of bytes requested.
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.Shutdown.P.System.Net.Sockets.TcpSocket.ShutdownMode
            {
                description
                {
                    Shuts down a connected socket.
                }
                parameter System.Net.Sockets.TcpSocket.Shutdown.P.System.Net.Sockets.TcpSocket.ShutdownMode.mode
                {
                    description
                    {
                        Shut down mode.
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.constructor.P.System.Net.Sockets.TcpSocket.C.R.System.String.C.R.System.String
            {
                description
                {
                    Constructor. Creates a TCP socket and connects it to the specified node and service.
                }
                parameter System.Net.Sockets.TcpSocket.constructor.P.System.Net.Sockets.TcpSocket.C.R.System.String.C.R.System.String.node
                {
                    description
                    {
                        A host name or an IP address to connect.
                    }
                }
                parameter System.Net.Sockets.TcpSocket.constructor.P.System.Net.Sockets.TcpSocket.C.R.System.String.C.R.System.String.service
                {
                    description
                    {
                        A protocol name or port number to connect.
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.constructor.P.System.Net.Sockets.TcpSocket.int
            {
                description
                {
                    Constructor. Initializes a TCP socket with an existing socket handle.
                }
                parameter System.Net.Sockets.TcpSocket.constructor.P.System.Net.Sockets.TcpSocket.int.socket_
                {
                    description
                    {
                        A handle of an existing TCP socket.
                    }
                }
            }
            function System.Net.Sockets.TcpSocket.destructor.P.System.Net.Sockets.TcpSocket
            {
                description
                {
                    Destructor. Closes the socket if it is bound or connected.
                }
            }
        }
        constant System.Net.Sockets.invalidSocketHandle
        {
            description
            {
                Represents invalid socket handle.
            }
        }
    }
    namespace System.Security
    {
        description
        {
        }
    }
    namespace System.Support
    {
        description
        {
        }
        class System.Support.ExDeleter.System.Exception
        {
            description
            {
            }
            function System.Support.ExDeleter.System.Exception.constructor.P.System.Support.ExDeleter.System.Exception
            {
                description
                {
                    Default constructor.
                }
            }
        }
        class System.Support.ExDeleter.System.Text.Parsing.ExpectationFailure
        {
            description
            {
            }
            function System.Support.ExDeleter.System.Text.Parsing.ExpectationFailure.constructor.P.System.Support.ExDeleter.System.Text.Parsing.ExpectationFailure
            {
                description
                {
                    Default constructor.
                }
            }
        }
        class System.Support.ExDeleter.System.Text.Parsing.ParsingException
        {
            description
            {
            }
            function System.Support.ExDeleter.System.Text.Parsing.ParsingException.constructor.P.System.Support.ExDeleter.System.Text.Parsing.ParsingException
            {
                description
                {
                    Default constructor.
                }
            }
        }
    }
    namespace System.Text
    {
        description
        {
        }
    }
    namespace System.Text.Parsing
    {
        description
        {
        }
        class System.Text.Parsing.ValueObject.System.String
        {
            description
            {
            }
            function System.Text.Parsing.ValueObject.System.String.constructor.P.System.Text.Parsing.ValueObject.System.String
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Text.Parsing.ValueObject.System.String.constructor.P.System.Text.Parsing.ValueObject.System.String.C.R.System.Text.Parsing.ValueObject.System.String
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Text.Parsing.ValueObject.System.String.constructor.P.System.Text.Parsing.ValueObject.System.String.C.R.System.Text.Parsing.ValueObject.System.String.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.System.String.operator.assign.P.System.Text.Parsing.ValueObject.System.String.C.R.System.Text.Parsing.ValueObject.System.String
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Text.Parsing.ValueObject.System.String.operator.assign.P.System.Text.Parsing.ValueObject.System.String.C.R.System.Text.Parsing.ValueObject.System.String.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.System.String.constructor.P.System.Text.Parsing.ValueObject.System.String.RR.System.Text.Parsing.ValueObject.System.String
            {
                description
                {
                    Move constructor.
                }
                parameter System.Text.Parsing.ValueObject.System.String.constructor.P.System.Text.Parsing.ValueObject.System.String.RR.System.Text.Parsing.ValueObject.System.String.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.System.String.operator.assign.P.System.Text.Parsing.ValueObject.System.String.RR.System.Text.Parsing.ValueObject.System.String
            {
                description
                {
                    Move assignment.
                }
                parameter System.Text.Parsing.ValueObject.System.String.operator.assign.P.System.Text.Parsing.ValueObject.System.String.RR.System.Text.Parsing.ValueObject.System.String.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Text.Parsing.ValueObject.bool
        {
            description
            {
            }
            function System.Text.Parsing.ValueObject.bool.constructor.P.System.Text.Parsing.ValueObject.bool
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Text.Parsing.ValueObject.bool.constructor.P.System.Text.Parsing.ValueObject.bool.C.R.System.Text.Parsing.ValueObject.bool
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Text.Parsing.ValueObject.bool.constructor.P.System.Text.Parsing.ValueObject.bool.C.R.System.Text.Parsing.ValueObject.bool.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.bool.operator.assign.P.System.Text.Parsing.ValueObject.bool.C.R.System.Text.Parsing.ValueObject.bool
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Text.Parsing.ValueObject.bool.operator.assign.P.System.Text.Parsing.ValueObject.bool.C.R.System.Text.Parsing.ValueObject.bool.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.bool.constructor.P.System.Text.Parsing.ValueObject.bool.RR.System.Text.Parsing.ValueObject.bool
            {
                description
                {
                    Move constructor.
                }
                parameter System.Text.Parsing.ValueObject.bool.constructor.P.System.Text.Parsing.ValueObject.bool.RR.System.Text.Parsing.ValueObject.bool.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.bool.operator.assign.P.System.Text.Parsing.ValueObject.bool.RR.System.Text.Parsing.ValueObject.bool
            {
                description
                {
                    Move assignment.
                }
                parameter System.Text.Parsing.ValueObject.bool.operator.assign.P.System.Text.Parsing.ValueObject.bool.RR.System.Text.Parsing.ValueObject.bool.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Text.Parsing.ValueObject.char
        {
            description
            {
            }
            function System.Text.Parsing.ValueObject.char.constructor.P.System.Text.Parsing.ValueObject.char
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Text.Parsing.ValueObject.char.constructor.P.System.Text.Parsing.ValueObject.char.C.R.System.Text.Parsing.ValueObject.char
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Text.Parsing.ValueObject.char.constructor.P.System.Text.Parsing.ValueObject.char.C.R.System.Text.Parsing.ValueObject.char.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.char.operator.assign.P.System.Text.Parsing.ValueObject.char.C.R.System.Text.Parsing.ValueObject.char
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Text.Parsing.ValueObject.char.operator.assign.P.System.Text.Parsing.ValueObject.char.C.R.System.Text.Parsing.ValueObject.char.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.char.constructor.P.System.Text.Parsing.ValueObject.char.RR.System.Text.Parsing.ValueObject.char
            {
                description
                {
                    Move constructor.
                }
                parameter System.Text.Parsing.ValueObject.char.constructor.P.System.Text.Parsing.ValueObject.char.RR.System.Text.Parsing.ValueObject.char.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.char.operator.assign.P.System.Text.Parsing.ValueObject.char.RR.System.Text.Parsing.ValueObject.char
            {
                description
                {
                    Move assignment.
                }
                parameter System.Text.Parsing.ValueObject.char.operator.assign.P.System.Text.Parsing.ValueObject.char.RR.System.Text.Parsing.ValueObject.char.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Text.Parsing.ValueObject.double
        {
            description
            {
            }
            function System.Text.Parsing.ValueObject.double.constructor.P.System.Text.Parsing.ValueObject.double
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Text.Parsing.ValueObject.double.constructor.P.System.Text.Parsing.ValueObject.double.C.R.System.Text.Parsing.ValueObject.double
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Text.Parsing.ValueObject.double.constructor.P.System.Text.Parsing.ValueObject.double.C.R.System.Text.Parsing.ValueObject.double.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.double.operator.assign.P.System.Text.Parsing.ValueObject.double.C.R.System.Text.Parsing.ValueObject.double
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Text.Parsing.ValueObject.double.operator.assign.P.System.Text.Parsing.ValueObject.double.C.R.System.Text.Parsing.ValueObject.double.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.double.constructor.P.System.Text.Parsing.ValueObject.double.RR.System.Text.Parsing.ValueObject.double
            {
                description
                {
                    Move constructor.
                }
                parameter System.Text.Parsing.ValueObject.double.constructor.P.System.Text.Parsing.ValueObject.double.RR.System.Text.Parsing.ValueObject.double.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.double.operator.assign.P.System.Text.Parsing.ValueObject.double.RR.System.Text.Parsing.ValueObject.double
            {
                description
                {
                    Move assignment.
                }
                parameter System.Text.Parsing.ValueObject.double.operator.assign.P.System.Text.Parsing.ValueObject.double.RR.System.Text.Parsing.ValueObject.double.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Text.Parsing.ValueObject.int
        {
            description
            {
            }
            function System.Text.Parsing.ValueObject.int.constructor.P.System.Text.Parsing.ValueObject.int
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Text.Parsing.ValueObject.int.constructor.P.System.Text.Parsing.ValueObject.int.C.R.System.Text.Parsing.ValueObject.int
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Text.Parsing.ValueObject.int.constructor.P.System.Text.Parsing.ValueObject.int.C.R.System.Text.Parsing.ValueObject.int.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.int.operator.assign.P.System.Text.Parsing.ValueObject.int.C.R.System.Text.Parsing.ValueObject.int
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Text.Parsing.ValueObject.int.operator.assign.P.System.Text.Parsing.ValueObject.int.C.R.System.Text.Parsing.ValueObject.int.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.int.constructor.P.System.Text.Parsing.ValueObject.int.RR.System.Text.Parsing.ValueObject.int
            {
                description
                {
                    Move constructor.
                }
                parameter System.Text.Parsing.ValueObject.int.constructor.P.System.Text.Parsing.ValueObject.int.RR.System.Text.Parsing.ValueObject.int.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.int.operator.assign.P.System.Text.Parsing.ValueObject.int.RR.System.Text.Parsing.ValueObject.int
            {
                description
                {
                    Move assignment.
                }
                parameter System.Text.Parsing.ValueObject.int.operator.assign.P.System.Text.Parsing.ValueObject.int.RR.System.Text.Parsing.ValueObject.int.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Text.Parsing.ValueObject.uint
        {
            description
            {
            }
            function System.Text.Parsing.ValueObject.uint.constructor.P.System.Text.Parsing.ValueObject.uint
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Text.Parsing.ValueObject.uint.constructor.P.System.Text.Parsing.ValueObject.uint.C.R.System.Text.Parsing.ValueObject.uint
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Text.Parsing.ValueObject.uint.constructor.P.System.Text.Parsing.ValueObject.uint.C.R.System.Text.Parsing.ValueObject.uint.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.uint.operator.assign.P.System.Text.Parsing.ValueObject.uint.C.R.System.Text.Parsing.ValueObject.uint
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Text.Parsing.ValueObject.uint.operator.assign.P.System.Text.Parsing.ValueObject.uint.C.R.System.Text.Parsing.ValueObject.uint.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.uint.constructor.P.System.Text.Parsing.ValueObject.uint.RR.System.Text.Parsing.ValueObject.uint
            {
                description
                {
                    Move constructor.
                }
                parameter System.Text.Parsing.ValueObject.uint.constructor.P.System.Text.Parsing.ValueObject.uint.RR.System.Text.Parsing.ValueObject.uint.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.uint.operator.assign.P.System.Text.Parsing.ValueObject.uint.RR.System.Text.Parsing.ValueObject.uint
            {
                description
                {
                    Move assignment.
                }
                parameter System.Text.Parsing.ValueObject.uint.operator.assign.P.System.Text.Parsing.ValueObject.uint.RR.System.Text.Parsing.ValueObject.uint.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
        class System.Text.Parsing.ValueObject.ulong
        {
            description
            {
            }
            function System.Text.Parsing.ValueObject.ulong.constructor.P.System.Text.Parsing.ValueObject.ulong
            {
                description
                {
                    Default constructor.
                }
            }
            function System.Text.Parsing.ValueObject.ulong.constructor.P.System.Text.Parsing.ValueObject.ulong.C.R.System.Text.Parsing.ValueObject.ulong
            {
                description
                {
                    Copy constructor.
                }
                parameter System.Text.Parsing.ValueObject.ulong.constructor.P.System.Text.Parsing.ValueObject.ulong.C.R.System.Text.Parsing.ValueObject.ulong.that
                {
                    description
                    {
                        Argument to copy.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.ulong.operator.assign.P.System.Text.Parsing.ValueObject.ulong.C.R.System.Text.Parsing.ValueObject.ulong
            {
                description
                {
                    Copy assignment.
                }
                parameter System.Text.Parsing.ValueObject.ulong.operator.assign.P.System.Text.Parsing.ValueObject.ulong.C.R.System.Text.Parsing.ValueObject.ulong.that
                {
                    description
                    {
                        Argument to assign.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.ulong.constructor.P.System.Text.Parsing.ValueObject.ulong.RR.System.Text.Parsing.ValueObject.ulong
            {
                description
                {
                    Move constructor.
                }
                parameter System.Text.Parsing.ValueObject.ulong.constructor.P.System.Text.Parsing.ValueObject.ulong.RR.System.Text.Parsing.ValueObject.ulong.that
                {
                    description
                    {
                        Argument to move from.
                    }
                }
            }
            function System.Text.Parsing.ValueObject.ulong.operator.assign.P.System.Text.Parsing.ValueObject.ulong.RR.System.Text.Parsing.ValueObject.ulong
            {
                description
                {
                    Move assignment.
                }
                parameter System.Text.Parsing.ValueObject.ulong.operator.assign.P.System.Text.Parsing.ValueObject.ulong.RR.System.Text.Parsing.ValueObject.ulong.that
                {
                    description
                    {
                        Argument to assign from.
                    }
                }
            }
        }
    }
    namespace System.Text.Parsing.CmObjectModel
    {
        description
        {
        }
    }
    namespace System.Threading
    {
        description
        {
        }
    }
}
