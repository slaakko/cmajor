/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

 [hpp]#include <Cm.Debugger/Type.hpp>
 
namespace Cm.Debugger 
{
    grammar TypeExprGrammar
    {
        using stdlib.identifier;
        using stdlib.qualified_id;
        using stdlib.spaces;

        skip spaces;

        TypeExpr: TypeExpr*
            ::= (BasicType{ value = BasicType; }
            |   TypeName{ value = new TypeExpr(TypeName); } (TypeArguments{ value->TypeArguments() = MakeTemplateArgumentList(TypeArguments); })?
            )
            (   "&&"{ value->Derivations().Add(Cm::Ast::Derivation::rvalueRef); }
            |   "&"{ value->Derivations().Add(Cm::Ast::Derivation::reference); }
            |   "*"{ value->Derivations().Add(Cm::Ast::Derivation::pointer); }
            )*
            ;

        TypeArguments: std::vector<TypeExpr*>
            ::= '<' (TypeExpr{ value.push_back(TypeExpr); } % ',') '>'
            ;

        BasicType: TypeExpr*
            ::= keyword_list(identifier, ["bool", "sbyte", "byte", "short", "ushort", "int", "uint", "long", "ulong", "char", "void"])
            { 
                value = new TypeExpr(std::string(matchBegin, matchEnd)); value->SetBasicTypeExpr(); 
            }
            ;

        TypeName: std::string
            ::= qualified_id{ value = qualified_id; }
            ;
    }
}
