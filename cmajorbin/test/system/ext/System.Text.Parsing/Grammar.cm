using System;
using System.Collections;
using System.Text.Parsing;

public class FilePathGrammar: System.Text.Parsing.Grammar
{
    public static FilePathGrammar* Create()
    {
        return Create(new ParsingDomain());
    }
    public static FilePathGrammar* Create(ParsingDomain* parsingDomain)
    {
        RegisterParsingDomain(parsingDomain);
        FilePathGrammar* grammar = new FilePathGrammar(parsingDomain);
        parsingDomain->AddGrammar(grammar);
        grammar->CreateRules();
        grammar->Link();
        return grammar;
    }
    private FilePathGrammar(ParsingDomain* parsingDomain): base("FilePathGrammar", parsingDomain->GetNamespaceScope(""), parsingDomain)
    {
        SetOwner(0);
    }
    public string Parse(const char* start, const char* end, int fileIndex, const string& fileName)
    {
        Scanner scanner(start, end, fileIndex, fileName, SkipRule());
        System.IO.OutputStream* log = Log();
        UniquePtr<XmlLog> xmlLog;
        if (log != null)
        {
            xmlLog.Reset(new XmlLog(*log, MaxLogLineLength()));
            scanner.SetLog(xmlLog.GetPtr());
            xmlLog->WriteBeginRule("parse");
        }
        Stack<UniquePtr<Object>> stack;
        Match match = Parse(scanner, stack);
        Span stop = scanner.GetSpan();
        if (log != null)
        {
            xmlLog->WriteEndRule("parse");
        }
        if (!match.Hit() || stop.Start() != int(end - start))
        {
            Rule* startRule = StartRule();
            if (startRule != null)
            {
                throw ExpectationFailure(startRule->Info(), fileName, stop, start, end);
            }
            else
            {
                throw ParsingException("grammar '" + Name() + "' has no start rule", fileName, stop, start, end);
            }
        }
        UniquePtr<Object> value = stack.Pop();
        string result = *cast<ValueObject<string>*>(value.GetPtr());
        return result;
    }
    private class SourceFileDeclarationRule: System.Text.Parsing.Rule
    {
        public SourceFileDeclarationRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
            base(name_, enclosingScope_, definition_), contextStack(), context()
        {
            SetValueTypeName("string");
        }
        public override void Enter(Stack<UniquePtr<Object>>& stack)
        {
            contextStack.Push(Rvalue(context));
            context = Context();
        }
        public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<string>(context.value)));
            }
            context = contextStack.Pop();
        }
        public override void Link()
        {
            ActionParser* a0ActionParser = GetAction("A0");
            a0ActionParser->SetAction(ParsingAction(A0Action));
            NonterminalParser* filePathNonterminalParser = GetNonterminal("FilePath");
            filePathNonterminalParser->SetPostCall(PostCall(PostFilePath));
        }
        public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
        {
            context.value = context.fromFilePath;
        }
        public throw void PostFilePath(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                UniquePtr<Object> fromFilePath_value = stack.Pop();
                context.fromFilePath = *cast<ValueObject<string>*>(fromFilePath_value.GetPtr());
            }
        }
        private class Context
        {
            public string value;
            public string fromFilePath;
        }
        private Stack<Context> contextStack;
        private Context context;
    }
    private class FilePathRule: System.Text.Parsing.Rule
    {
        public FilePathRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
            base(name_, enclosingScope_, definition_), contextStack(), context()
        {
            SetValueTypeName("string");
        }
        public override void Enter(Stack<UniquePtr<Object>>& stack)
        {
            contextStack.Push(Rvalue(context));
            context = Context();
        }
        public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<string>(context.value)));
            }
            context = contextStack.Pop();
        }
        public override void Link()
        {
            ActionParser* a0ActionParser = GetAction("A0");
            a0ActionParser->SetAction(ParsingAction(A0Action));
        }
        public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
        {
            context.value = match;
        }
        private class Context
        {
            public string value;
        }
        private Stack<Context> contextStack;
        private Context context;
    }
    public override void GetReferencedGrammars()
    {
    }
    public override void CreateRules()
    {
        AddRule(new SourceFileDeclarationRule("SourceFileDeclaration", GetScope(),
            new ActionParser("A0",
                new SequenceParser(
                    new SequenceParser(
                        new KeywordParser("source"),
                        new ExpectationParser(
                            new NonterminalParser("FilePath", "FilePath", 0))),
                    new ExpectationParser(
                        new CharParser(';'))))));
        AddRule(new FilePathRule("FilePath", GetScope(),
            new TokenParser(
                new SequenceParser(
                    new SequenceParser(
                        new CharParser('<'),
                        new ActionParser("A0",
                            new PositiveParser(
                                new CharSetParser(">", true)))),
                    new ExpectationParser(
                        new CharParser('>'))))));
    }
}
