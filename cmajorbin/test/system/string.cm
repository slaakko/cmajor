using System;

namespace Test
{
    public unit_test void StringTest()
    {
        string s0;
        #assert(s0.IsEmpty());
        #assert(s0.Length() == 0);
        #assert(s0.Capacity() == 0);
        #assert(s0.StartsWith(""));
        #assert(s0.EndsWith(""));
        #assert(s0.Find('a') == -1);
        #assert(s0.RFind('a') == -1);
        string t0(s0);
        #assert(t0.IsEmpty());
        #assert(t0.Length() == 0);
        #assert(t0.Capacity() == 0);
        #assert(s0 == t0);
        Swap(s0, t0);
        #assert(s0.IsEmpty());
        #assert(s0.Length() == 0);
        #assert(s0.Capacity() == 0);
        #assert(t0.IsEmpty());
        #assert(t0.Length() == 0);
        #assert(t0.Capacity() == 0);
        #assert(s0 == t0);
        #assert(!(s0 < t0));

        string s1("");
        #assert(s1.IsEmpty());
        #assert(s1.Length() == 0);
        #assert(s1.Capacity() == 0);
        #assert(s1.StartsWith(""));
        #assert(s1.EndsWith(""));
        #assert(s1.Find('a') == -1);
        #assert(s1.RFind('a') == -1);
        string t1(s1);
        #assert(t1.IsEmpty());
        #assert(t1.Length() == 0);
        #assert(t1.Capacity() == 0);
        #assert(s1 == t1);
        Swap(s1, t1);
        #assert(s1.IsEmpty());
        #assert(s1.Length() == 0);
        #assert(s1.Capacity() == 0);
        #assert(t1.IsEmpty());
        #assert(t1.Length() == 0);
        #assert(t1.Capacity() == 0);
        #assert(s1 == t1);
        s1 = t1;
        #assert(s1.Length() == 0);
        #assert(s1.Capacity() == 0);
        #assert(t1.IsEmpty());
        #assert(t1.Length() == 0);
        #assert(t1.Capacity() == 0);
        #assert(s1 == t1);
        #assert(!(s1 < t1));

        string s2("a");
        #assert(!s2.IsEmpty());
        #assert(s2.Length() == 1);
        #assert(s2.StartsWith(""));
        #assert(s2.EndsWith(""));
        #assert(s2.Find('a') == 0);
        #assert(s2.RFind('a') == 0);
        #assert(s2[0] == 'a');
        s2[0] = 'b';
        #assert(s2[0] == 'b');
        #assert(!s2.StartsWith("a"));
        #assert(!s2.EndsWith("a"));
        #assert(s2.StartsWith("b"));
        #assert(s2.EndsWith("b"));
        #assert(s2.Find('a') == -1);
        #assert(s2.RFind('a') == -1);
        string t2(s2);
        #assert(!t2.IsEmpty());
        #assert(t2.Length() == 1);
        #assert(s2 == t2);
        Swap(s2, t2);
        #assert(!s2.IsEmpty());
        #assert(s2.Length() == 1);
        #assert(!t2.IsEmpty());
        #assert(t2.Length() == 1);
        #assert(s2 == t2);
        s2 = t2;
        #assert(!s2.IsEmpty());
        #assert(s2.Length() == 1);
        #assert(!t2.IsEmpty());
        #assert(t2.Length() == 1);
        #assert(s2 == t2);
        #assert(s0 < s2);
        #assert(s2 < "ba");

        string s3("abcd", 2);
        #assert(!s3.IsEmpty());
        #assert(s3.Length() == 2);
        #assert(s3.StartsWith(""));
        #assert(s3.EndsWith(""));
        #assert(s3.Find('a') == 0);
        #assert(s3.RFind('a') == 0);
        #assert(s3[0] == 'a');
        #assert(s3.StartsWith("a"));
        #assert(!s3.EndsWith("a"));
        #assert(!s3.StartsWith("b"));
        #assert(s3.EndsWith("b"));
        #assert(s3.StartsWith("ab"));
        #assert(s3.EndsWith("ab"));
        #assert(!s3.StartsWith("abc"));
        #assert(!s3.EndsWith("abc"));
        #assert(s3.Find('b') == 1);
        #assert(s3.RFind('b') == 1);
        string t3(s3);
        #assert(!t3.IsEmpty());
        #assert(t3.Length() == 2);
        #assert(s3 == t3);
        Swap(s3, t3);
        #assert(!s3.IsEmpty());
        #assert(s3.Length() == 2);
        #assert(!t3.IsEmpty());
        #assert(t3.Length() == 2);
        #assert(s3 == t3);
        s3 = t3;
        #assert(!s3.IsEmpty());
        #assert(s3.Length() == 2);
        #assert(!t3.IsEmpty());
        #assert(t3.Length() == 2);
        #assert(s3 == t3);
        #assert(s2 > s3);
        #assert(s3 < "abcd");

        string s4('a');
        #assert(!s4.IsEmpty());
        #assert(s4.Length() == 1);
        #assert(s4.StartsWith(""));
        #assert(s4.EndsWith(""));
        #assert(s4.Find('a') == 0);
        #assert(s4.RFind('a') == 0);
        #assert(s4[0] == 'a');
        #assert(s4 < s3);

        string s5('x', 8);
        #assert(!s5.IsEmpty());
        #assert(s5.Length() == 8);
        #assert(s5.StartsWith(""));
        #assert(s5.EndsWith(""));
        #assert(s5.Find('a') == -1);
        #assert(s5.RFind('a') == -1);
        for (int i = 0; i < 8; ++i)
        {
            #assert(s5[i] == 'x');
        }
        for (char c : s5)
        {
            #assert(c == 'x');
        }
        #assert(s5.StartsWith("xxxx"));
        #assert(s5.EndsWith("xxxx"));
        #assert(s5.StartsWith("xxxxxxxx"));
        #assert(s5.EndsWith("xxxxxxxx"));
        #assert(!s5.StartsWith("xxxxxxxxx"));
        #assert(!s5.EndsWith("xxxxxxxxx"));
        string t5(s5);
        #assert(!t5.IsEmpty());
        #assert(t5.Length() == 8);
        #assert(s5 == t5);
        Swap(s5, t5);
        #assert(!s5.IsEmpty());
        #assert(s5.Length() == 8);
        #assert(!t5.IsEmpty());
        #assert(t5.Length() == 8);
        #assert(s5 == t5);
        s5 = t5;
        #assert(!s5.IsEmpty());
        #assert(s5.Length() == 8);
        #assert(!t5.IsEmpty());
        #assert(t5.Length() == 8);
        #assert(s5 == t5);
        #assert(s5 > s0);
        #assert(s5 > s1);
        #assert(s5 > s2);
        #assert(s5 > s3);
        #assert(s5 > s4);

        string s6("abradacabra");
        #assert(!s6.IsEmpty());
        #assert(s6.Length() == 11);
        #assert(s6.StartsWith(""));
        #assert(s6.EndsWith(""));
        #assert(s6.StartsWith("abra"));
        #assert(s6.EndsWith("cabra"));
        #assert(s6.StartsWith("abradacabra"));
        #assert(s6.EndsWith("abradacabra"));
        #assert(!s6.StartsWith("abradacabraa"));
        #assert(!s6.EndsWith("aabradacabra"));
        #assert(s6.Find('a') == 0);
        #assert(s6.RFind('a') == 10);
        #assert(s6[0] == 'a');
        #assert(s6[4] == 'd');
        #assert(s6[8] == 'b');
        #assert(s6[10] == 'a');
        s6.Append('x');
        #assert(s6 == "abradacabrax");
        s6.Append("yzzy");
        #assert(s6 == "abradacabraxyzzy");
        s6.Append("qwerty", 4);
        #assert(s6 == "abradacabraxyzzyqwer");
        s6.Append(string("ty"));
        #assert(s6 == "abradacabraxyzzyqwerty");
        s6.Replace('a', 'i');
        #assert(s6 == "ibridicibrixyzzyqwerty");
        #assert(s6.Substring(11) == "xyzzyqwerty");
        #assert(s6.Substring(11, 5) == "xyzzy");

        #assert(ToLower(s6) == s6);
        string s7 = ToUpper(s6);
        #assert(s7 == "IBRIDICIBRIXYZZYQWERTY");
        #assert(ToUpper(s7) == s7);
        #assert(ToLower(s7) == s6);

        string s8 = "alpha.beta.gamma";
        #assert(LastComponentsEqual(s8, "gamma", '.'));
        #assert(!LastComponentsEqual(s8, "gammax", '.'));
        #assert(!LastComponentsEqual(s8, "gamma.delta", '.'));
        #assert(LastComponentsEqual(s8, "beta.gamma", '.'));
        #assert(!LastComponentsEqual(s8, "beta.gammax", '.'));
        #assert(!LastComponentsEqual(s8, "betax.gamma", '.'));
        #assert(LastComponentsEqual(s8, "alpha.beta.gamma", '.'));
        #assert(!LastComponentsEqual(s8, "alpha.beta.gammax", '.'));
        #assert(!LastComponentsEqual(s8, "alpha.betax.gamma", '.'));
        #assert(!LastComponentsEqual(s8, "alphax.beta.gamma", '.'));
    }
}
