/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

[cpp]#include <Cm.Parsing.Syntax/Element.hpp>
[cpp]#include <Cm.Parsing.Syntax/Composite.hpp>
[hpp]#include <Cm.Parsing/Rule.hpp>

namespace Cm.Parsing.Syntax
{
    grammar RuleGrammar
    {
        using ElementGrammar.Identifier;
        using ElementGrammar.Signature;
        using CompositeGrammar.Alternative;
        using stdlib.string;

        Rule(Cm::Parsing::Scope* enclosingScope): Cm::Parsing::Rule*
                    ::= RuleHeader(enclosingScope){ value = RuleHeader; } "::=" RuleBody(value)
                    ;

        RuleHeader(Cm::Parsing::Scope* enclosingScope): Cm::Parsing::Rule*
                    ::= Identifier:name{value = new Rule(name, enclosingScope); value->SetSpan(span); } Signature(value) SynchronizeSpecification(value)?
                    ;

        SynchronizeSpecification(Cm::Parsing::Rule* rule)
                    ::= keyword("synchronize") '('! string:synChars{ rule->Synchronize(synChars); } ')'!
                    ;

        RuleBody(Cm::Parsing::Rule* rule)
                    ::= (Alternative(rule->GetScope()):definition! ';'!){ rule->SetDefinition(definition); }
                    ;
    }
}
