/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

 [hpp]#include <Cm.Debugger/Value.hpp>

 namespace Cm.Debugger 
{
    grammar ResultGrammar
    {
        using stdlib.spaces;
        using stdlib.real;
        using stdlib.int;
        using stdlib.char;
        using stdlib.bool;
        using stdlib.ulong;
        using stdlib.long;
        using stdlib.hex_literal;
        using stdlib.string;
        using stdlib.identifier;

        skip spaces;

        Result(std::string expr): Result*
            ::= (token('$' int:handle){ value = new Result(expr, handle); } '=' Value){ value->SetValue(Value); }
            ;

        Value: Value*
            ::= StringValue{ value = StringValue; }
            |   AddressValue{ value = AddressValue; }
            |   CharValue{ value = CharValue; }
            |   BoolValue{ value = BoolValue; }
            |   FloatingValue{ value = FloatingValue; }
            |   IntegerValue{ value = IntegerValue; }
            |   StructureValue{ value = StructureValue; }
            ;

        StringValue: Value*
            ::= hex_literal:x string:s{ value = new StringValue(s); }
            ;

        ParenthesizedExpr
            ::= '(' (anychar - [()])* ParenthesizedExpr? ')'
            ;

        AddressValue: Value*
            ::= ParenthesizedExpr? hex_literal:x{ value = new AddressValue(x); } token('<' identifier '>')?
            ;

        OctalDigit: int
            ::= [0-7]{ value = *matchBegin - '0'; }
            ;

        OctalEscape: char
            ::= token("'\\" OctalDigit:x OctalDigit:y OctalDigit:z "'"){ value = static_cast<char>(64 * x + 8 * y + z); }
            ;

        CharValue: Value*
            ::= int:charCode (OctalEscape:o{ value = new CharValue(o); } | char:ch{ value = new CharValue(ch); })
            ;

        BoolValue: Value*
            ::= bool:b{ value = new BoolValue(b); }
            ;

        FloatingValue: Value*
            ::= real:r{ value = new FloatingValue(r); }
            ;

        IntegerValue: Value*
            ::= ulong:u{ value = new IntegerValue(u, false); }
            |   long:l{ value = MakeIntegerValue(l); }
            ;

        Field: Field*
            ::= (identifier:fieldName '=' Value:fieldValue){ value = new Field(fieldName, fieldValue); }
            ;

        StructureValue: StructureValue*
            ::= '{'{ value = new StructureValue(); } (Field{ value->AddField(std::move(*Field)); delete Field; } % ',') '}'
            ;

    }
}
