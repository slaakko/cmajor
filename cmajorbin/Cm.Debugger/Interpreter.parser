/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

[hpp]#include <Cm.Debugger/Command.hpp>
[cpp]#include <Cm.Core/CDebugInfo.hpp>

namespace Cm.Debugger 
{
    grammar InterpreterGrammar
    {
        using stdlib.spaces;
        using stdlib.int;
        using stdlib.qualified_id;
        skip spaces;
        
        Command: CommandPtr
            ::= (keyword("start")){ value = CommandPtr(new StartCommand(-1)); }
            |   (keyword("quit") | keyword("q")){ value = CommandPtr(new QuitCommand(-1)); }
            |   (keyword("help") | keyword("h")){ value = CommandPtr(new HelpCommand()); }
            |   (keyword("continue") | keyword("c")){ value = CommandPtr(new ContinueCommand(-1)); }
            |   (keyword("next") | keyword("n")){ value = CommandPtr(new NextCommand(-1)); }
            |   (keyword("step") | keyword("s")){ value = CommandPtr(new StepCommand(-1)); }
            |   (keyword("out") | keyword("o")){ value = CommandPtr(new OutCommand(-1)); }
            |   ((keyword("break") | keyword("b")) SourceFileLine:bsfl){ value = CommandPtr(new BreakCommand(-1, bsfl)); }
            |   ((keyword("clear") | keyword("cl")) int:bp){ value = CommandPtr(new ClearCommand(-1, bp)); }
            |   ((keyword("inspect") | keyword("i")) InspectExpr:expr){ value = CommandPtr(new InspectCommand(-1, expr)); } 
            |   (keyword("list") | keyword("l"))
                (   SourceFileLine:lsfl{ value = CommandPtr(new ListCommand(lsfl)); } 
                |   '*'{ value = CommandPtr(new ListCommand("*")); } 
                |   ('+' | empty){ value = CommandPtr(new ListCommand("+")); }
                )
            |   (keyword("callstack") | keyword("ca")){ value = CommandPtr(new CallStackCommand(-1)); }
            |   ((keyword("frame") | keyword("f")) int:frame){ value = CommandPtr(new FrameCommand(-1, frame)); }
            |   (keyword("show") keyword("breakpoints")){ value = CommandPtr(new ShowBreakpointsCommand(-1)); }
            |   keyword("set") keyword("break") keyword("on") keyword("throw") 
                    (keyword("on"){ value = CommandPtr(new SetBreakOnThrowCommand(-1, true)); }
                |   keyword("off"){ value = CommandPtr(new SetBreakOnThrowCommand(-1, false)); }
                )
            |   empty{ value = CommandPtr(); }
            ;

        SourceFileLine(var std::string filePath): Cm::Core::SourceFileLine
            ::= token(((FilePath:file ':'){ filePath = file; })? int:line){ value = Cm::Core::SourceFileLine(filePath, line); }
            ;

        FilePath: std::string
            ::= token(Drive? (anychar - ':')+){ value = std::string(matchBegin, matchEnd); }
            ;

        Drive
            ::= letter ':'
            ;

        InspectExpr: std::string
            ::= token(anychar+){ value = std::string(matchBegin, matchEnd); }
            ;
    }

} // namespace Cm.Debugger
