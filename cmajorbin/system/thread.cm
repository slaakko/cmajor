/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;

namespace System.Threading
{
    public nothrow int HardwareConcurrency()
    {
        return get_hardware_concurrency();
    }
    
    public const int EXIT_THREADS_NOT_JOINED = 250;

    public class ThreadingException: Exception
    {
        public ThreadingException(const string& operation, const string& reason): base(operation + ": " + reason)
        {
        }
    }

    public delegate void ThreadFun(void* arg);

    internal class ThreadData
    {
        public nothrow ThreadData(ThreadFun start_, void* arg_): start(start_), arg(arg_)
        {
        }
        public ThreadFun start;
        public void* arg;
    }

    public nothrow void ThreadStart(void* arg)
    {
        allocate_thread_data(this_thread());
        ThreadData* threadData = cast<ThreadData*>(arg);
        try
        {
            ThreadFun start = threadData->start;
            void* arg = threadData->arg;
            start(arg);
        }
        catch (const Exception& ex)
        {
            try
            {
                Console.Error() << ex.ToString() << endl();
            }
            catch (const Exception& ex)
            {
            }
        }
        delete threadData;
        free_thread_data(this_thread());
    }

    public class Thread
    {
        public Thread(): handle()
        {
        }
        public Thread(ThreadFun start, void* arg)
        {
            ThreadData* threadData = new ThreadData(start, arg);
            thread_fun outerStart = ThreadStart;
            int result = create_thread(&handle, outerStart, threadData);
            if (result != 0)
            {
                delete threadData;
                string reason = strerror(result);
                throw ThreadingException("could not start a thread", reason);
            }
        }
        public Thread(Thread&& that): handle(that.handle)
        {
            that.handle = thread_t();
        }
        public void operator=(Thread&& that)
        {
            Swap(handle, that.handle);
        }
        public ~Thread()
        {
        }
        public thread_t Handle() const
        {
            return handle;
        }
        public void Join()
        {
            int result = join_thread(handle, null);
            if (result != 0)
            {
                string reason = strerror(result);
                throw ThreadingException("could not join a thread", reason);
            }
        }
        public void Detach()
        {
            int result = detach_thread(handle);
            if (result != 0)
            {
                string reason = strerror(result);
                throw ThreadingException("could not detach a thread", reason);
            }
        }
        private thread_t handle;
    }

    public bool operator==(const Thread& t1, const Thread& t2)
    {
        return equal_thread(t1.Handle(), t2.Handle());
    }

    public void SleepFor(Duration d)
    {
        long secs = d.Rep() / 1000000000;
        int nanosecs = cast<int>(d.Rep() % 1000000000);
        int result = cmsleep(secs, nanosecs);
        if (result != 0)
        {
            string reason = strerror(result);
            throw ThreadingException("could not sleep", reason);
        }
    }

    public void SleepUntil(TimePoint tp)
    {
        Duration d = tp - Now();
        SleepFor(d);
    }
}
