/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

using System;
using System.Collections;

namespace System.Text.Json.Data
{
    public abstract class JsonValue
    {
        public nothrow virtual ~JsonValue()
        {
        }
        public default nothrow JsonValue(const JsonValue&);
        public default nothrow JsonValue(JsonValue&&);
        public default nothrow void operator=(const JsonValue&);
        public default nothrow void operator=(JsonValue&&);
        public abstract string ToString() const;
    }
    
    public class JsonObject: JsonValue
    {
        public JsonObject()
        {
        }
        suppress JsonObject(const JsonObject&);
        suppress void operator=(const JsonObject&);
        suppress JsonObject(JsonObject&&);
        suppress void operator=(JsonObject&&);
        public void AddField(JsonString&& name, JsonValue* value)
        {
            values.Add(UniquePtr<JsonValue>(value));
            fields[name] = value;
        }
        public JsonValue* GetField(const JsonString& name) const
        {
            Map<JsonString, JsonValue*>.Iterator i = fields.Find(name);
            if (i != fields.End())
            {
                return i->second;
            }
            return null;
        }
        public override string ToString() const
        {
            string s = "{";
            bool first = true;
            for (const Pair<JsonString, JsonValue*>& field : fields)
            {
                const JsonString& name = field.first;
                JsonValue* value = field.second;
                if (first)
                {
                    first = false;
                }
                else
                {
                    s.Append(", ");
                }
                s.Append(name.ToString());
                s.Append(":");
                s.Append(value->ToString());
            }
            s.Append("}");
            return s;
        }
        private Map<JsonString, JsonValue*> fields;
        private List<UniquePtr<JsonValue>> values;
    }
    
    public class JsonArray: JsonValue
    {
        public JsonArray()
        {
        }
        suppress JsonArray(const JsonArray&);
        suppress void operator=(const JsonArray&);
        suppress JsonArray(JsonArray&&);
        suppress void operator=(JsonArray&&);
        public void AddItem(JsonValue* item)
        {
            items.Add(item);
            values.Add(UniquePtr<JsonValue>(item));
        }
        public nothrow JsonValue* GetItem(int index) const
        {
            return items[index];
        }
        public nothrow JsonValue* operator[](int index) const
        {
            return items[index]; 
        }
        public nothrow int Count() const
        {
            return items.Count();
        }
        public override string ToString() const
        {
            string s = "[";
            bool first = true;
            for (JsonValue* item : items)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    s.Append(", ");
                }
                s.Append(item->ToString());
            }
            s.Append("]");
            return s;
        }
        private List<JsonValue*> items;
        private List<UniquePtr<JsonValue>> values;
    }
    
    public class JsonString: JsonValue
    {
        public JsonString()
        {
        }
        public default JsonString(const JsonString&);
        public JsonString(const string& value_): value(value_)
        {
        }
        public void Append(char c)
        {
            value.Append(c);
        }
        public void Append(const string& s)
        {
            value.Append(s);
        }
        public nothrow const string& Value() const
        {
            return value;
        }
        public void SetValue(const string& value_)
        {
            value = value_;
        }
        public override string ToString() const
        {
            string s = "\"";
            for (char c : value)
            {
                if (IsPrintable(c))
                {
                    s.Append(c);
                }
                else
                {
                    s.Append("\\u");
                    s.Append(ToHexString(cast<ushort>(c)));
                }
            }
            s.Append("\"");
            return s;
        }
        private string value;
    }
    
    public nothrow bool operator==(const JsonString& left, const JsonString& right) 
    {
        return left.Value() == right.Value();
    }
    
    public nothrow bool operator<(const JsonString& left, const JsonString& right)
    {
        return left.Value() < right.Value();
    }
    
    public class JsonNumber: JsonValue
    {
        public JsonNumber(): value(0)
        {
        }
        public nothrow JsonNumber(double value_): value(value_)
        {
        }
        public override string ToString() const
        {
            return ToString(value); 
        }
        public nothrow inline double Value() const
        {
            return value;
        }
        public void SetValue(double value_)
        {
            value = value_;
        }
        private double value;
    }
    
    public class JsonBool: JsonValue
    {
        public JsonBool(): value(false)
        {
        }
        public nothrow JsonBool(bool value_): value(value_)
        {
        }
        public override string ToString() const
        {
            return ToString(value);
        }
        public nothrow inline bool Value() const
        {
            return value;
        }
        public void SetValue(bool value_)
        {
            value = value_;
        }
        private bool value;
    }
    
    public class JsonNull: JsonValue
    {
        public override string ToString() const
        {
            return "null";
        }
    }
}
