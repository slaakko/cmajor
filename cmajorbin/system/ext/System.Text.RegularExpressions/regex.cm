using System;

namespace System.Text.RegularExpressions
{
    public enum RegExFlags
    {
        none = 0, compiled = 1, matchLine = 2
    }
    
    public class RegEx
    {
        public RegEx(const string& pattern_): this(pattern_, RegExFlags.none)
        {
        }
        public RegEx(const string& pattern_, RegExFlags flags): pattern(pattern_), nfa(ToNfa(pattern, flags)), dfa(), compiled(false)
        {
            if ((flags & RegExFlags.compiled) != RegExFlags.none)
            {
                dfa = ToDfa(nfa);
                compiled = true;
            }
        }
        public nothrow const string& Pattern() const
        {
            return pattern;
        }
        public nothrow const Nfa& GetNfa() const 
        {
            return nfa;
        }
        public nothrow const Dfa& GetDfa() const
        {
            return dfa;
        }
        public nothrow bool Compiled() const
        {
            return compiled;
        }
        public bool Matches(const string& s)
        {
            if (compiled)
            {
                return Matches(s, dfa);
            }
            else
            {
                return Matches(s, nfa);
            }            
        }
        private string pattern;
        private Nfa nfa;
        private Dfa dfa;
        private bool compiled;
    }
}
