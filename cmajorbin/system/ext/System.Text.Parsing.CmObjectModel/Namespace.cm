/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;
using System.Text;

namespace System.Text.Parsing.CmObjectModel
{
    public abstract class UsingObject: CmObject
    {
        public UsingObject(const string& name_): base(name_)
        {
        }
    }
    
    public typedef UsingObject* UsingObjectPtr;
    public typedef UniquePtr<UsingObject> UniqueUsingObjectPtr;
    
    public class NamespaceImport: UsingObject
    {
        public NamespaceImport(const string& namespaceName_): base(namespaceName_)
        {
        }
        public override void Print(CodeFormatter& formatter)
        {
            formatter.WriteLine("using " + Name() + ";");
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public class Alias: UsingObject
    {
        public Alias(const string& name_, const string& referred_): base(name_), referred(referred_)
        {
        }
        public override void Print(CodeFormatter& formatter)
        {
            formatter.WriteLine("using " + Name() + " = " + referred + ";");
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private string referred;
    }
}
