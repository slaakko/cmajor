/*========================================================================
    Copyright (c) 2012-2014 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;
using System.Text;

namespace System.Text.Parsing.CmObjectModel
{
    public class Identifier: CmObject
    {
        public Identifier(const string& name_): base(name_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    
    public typedef TemplateId* TemplateIdPtr;
    public typedef UniquePtr<TemplateId> UniqueTemplateIdPtr;
    
    public class TemplateId: CmObject
    {
        public TemplateId(const string& name_): base(name_)
        {
        }
        public void AddTemplateArg(CmObject* templateArg)
        {
            templateArgs.Add(templateArg);
            Own(templateArg);
        }
        public override void Print(CodeFormatter& formatter)
        {
            formatter.Write(Name() + "<");
            bool first = true;
            for (CmObject* templateArg : templateArgs)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    formatter.Write(", ");
                }
                templateArg->Print(formatter);
            }
            formatter.Write(">");
        }
        public override string ToString() const
        {
            string s = Name();
            s.Append("<");
            bool first = true;
            for (CmObject* templateArg : templateArgs)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    s.Append(", ");
                }
                s.Append(templateArg->ToString());
            }
            s.Append(">");
            return s;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
            for (CmObject* templateArg : templateArgs)
            {
                templateArg->Accept(visitor);
            }
        }
        private ExpressionList templateArgs;
    }
}
