/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

using System;
using System.IO;

namespace System.Numerics.Multiprecision
{
    public class BigInt
    {
        public nothrow BigInt() : mpz(create_mpz())
        {
        }
        public nothrow BigInt(int that) : mpz(create_mpz())
        {
            assign_mpz_si(mpz, that);
        }
        public nothrow BigInt(uint that) : mpz(create_mpz())
        {
            assign_mpz_ui(mpz, that);
        }
        public BigInt(const string& str) : this(str, 10)
        {
        }
        public BigInt(const string& str, int base_) : mpz(create_mpz())
        {
            int result = assign_mpz_str(mpz, str.Chars(), base_);
            if (result != 0)
            {
                throw ConversionException("invalid digit string for initializing BigInt");
            }
        }
        public nothrow ~BigInt()
        {
            if (mpz != null)
            {
                destroy_mpz(mpz);
            }        
        }
        public nothrow BigInt(const BigInt& that) : mpz(create_mpz())
        {
            assign_mpz(mpz, that.mpz);
        }
        public nothrow BigInt(BigInt&& that) : mpz(that.mpz)
        {
            that.mpz = null;
        }
        public nothrow void operator=(const BigInt& that)
        {
            if (mpz != null)
            {
                destroy_mpz(mpz);
            }            
            mpz = create_mpz();
            assign_mpz(mpz, that.mpz);
        }
        public default nothrow void operator=(BigInt&& that);
        public nothrow void operator=(int that)
        {
            if (mpz != null)
            {
                destroy_mpz(mpz);
            }            
            mpz = create_mpz();
            assign_mpz_si(mpz, that);
        }
        public nothrow void operator=(uint that)
        {
            if (mpz != null)
            {
                destroy_mpz(mpz);
            }            
            mpz = create_mpz();
            assign_mpz_ui(mpz, that);
        }
        public nothrow string ToString() const
        {
            return this->ToString(10);
        }
        public nothrow string ToString(int base_) const
        {
            char* str = get_mpz_str(mpz, base_);
            string s(str);
            free(str);
            return s;
        }
        public nothrow inline void* Handle() const
        {
            return mpz;
        }    
        private void* mpz;
    }
    
    public nothrow BigInt operator-(const BigInt& x)
    {
        BigInt result;
        neg_mpz(result.Handle(), x.Handle());
        return result;
    }
    
    public nothrow BigInt Abs(const BigInt& x)
    {
        BigInt result;
        abs_mpz(result.Handle(), x.Handle());
        return result;
    }
    
    public nothrow BigInt operator+(const BigInt& left, const BigInt& right)
    {
        BigInt result;
        add_mpz(result.Handle(), left.Handle(), right.Handle());
        return result;
    }
    
    public nothrow BigInt operator-(const BigInt& left, const BigInt& right)
    {
        BigInt result;
        sub_mpz(result.Handle(), left.Handle(), right.Handle());
        return result;
    }
    
    public nothrow BigInt operator*(const BigInt& left, const BigInt& right)
    {
        BigInt result;
        mul_mpz(result.Handle(), left.Handle(), right.Handle());
        return result;
    }
    
    public nothrow BigInt operator/(const BigInt& left, const BigInt& right)
    {
        BigInt result;
        div_mpz(result.Handle(), left.Handle(), right.Handle());
        return result;
    }
    
    public nothrow BigInt operator%(const BigInt& left, const BigInt& right)
    {
        BigInt result;
        rem_mpz(result.Handle(), left.Handle(), right.Handle());
        return result;
    }
    
    public nothrow bool operator==(const BigInt& left, const BigInt& right)
    {
        return cmp_mpz(left.Handle(), right.Handle()) == 0;
    }

    public nothrow bool operator<(const BigInt& left, const BigInt& right)
    {
        return cmp_mpz(left.Handle(), right.Handle()) < 0;
    }
    
    public nothrow BigInt operator&(const BigInt& left, const BigInt& right)
    {
        BigInt result;
        and_mpz(result.Handle(), left.Handle(), right.Handle());
        return result;
    }

    public nothrow BigInt operator|(const BigInt& left, const BigInt& right)
    {
        BigInt result;
        or_mpz(result.Handle(), left.Handle(), right.Handle());
        return result;
    }

    public nothrow BigInt operator^(const BigInt& left, const BigInt& right)
    {
        BigInt result;
        xor_mpz(result.Handle(), left.Handle(), right.Handle());
        return result;
    }

    public nothrow BigInt operator~(const BigInt& x)
    {
        BigInt result;
        cpl_mpz(result.Handle(), x.Handle());
        return result;
    }

    public nothrow void SetBit(BigInt& x, uint bitIndex)
    {
        setbit_mpz(x.Handle(), bitIndex);
    }

    public nothrow void ClearBit(BigInt& x, uint bitIndex)
    {
        clrbit_mpz(x.Handle(), bitIndex);
    }

    public nothrow void ToggleBit(BigInt& x, uint bitIndex)
    {
        cplbit_mpz(x.Handle(), bitIndex);
    }
    
    public nothrow bool TestBit(BigInt& x, uint bitIndex)
    {
        return tstbit_mpz(x.Handle(), bitIndex) == 1;
    }
    
    public OutputStream& operator<<(OutputStream& s, const BigInt& x)
    {
        s << x.ToString();
        return s;
    }
}
