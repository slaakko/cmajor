/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;
using System.Collections;
using System.IO;

namespace System.Text.Parsing
{
    public class ParsingException: Exception
    {
        public nothrow ParsingException(const string& message_, const string& fileName_, const Span& span_, const char* start_, const char* end_):
            base(message_ + " in file '" + fileName_ + "' at line " + ToString(span_.LineNumber()) + ":\n" + GetErrorLines(start_, end_, span_)), 
            msg(message_), fileName(fileName_), span(span_), start(start_), end(end_)
        {
        }
        public const string& Msg() const
        {
            return msg;
        }
        public nothrow const string& FileName() const
        {
            return fileName;
        }
        public nothrow const Span& GetSpan() const
        {
            return span;
        }
        public nothrow const char* Start() const
        {
            return start;
        }
        public nothrow const char* End() const
        {
            return end;
        }
        private string msg;
        private string fileName;
        private Span span;
        private const char* start;
        private const char* end;
    }
    
    public class ExpectationFailure: Exception
    {
        public nothrow ExpectationFailure(const string& info_, const string& fileName_, const Span& span_, const char* start_, const char* end_):
            base("Parsing file '" + fileName_ + "' failed at line " + ToString(span_.LineNumber()) + ":\n" + info_ + " expected:\n" + 
            GetErrorLines(start_, end_, span_)), info(info_), fileName(fileName_), span(span_), start(start_), end(end_)
        {
        }
        public nothrow const string& Info() const
        {
            return info;
        }
        public nothrow const string& FileName() const
        {
            return fileName;
        }
        public nothrow const Span& GetSpan() const
        {
            return span;
        }
        public nothrow const char* Start() const
        {
            return start;
        }
        public nothrow const char* End() const
        {
            return end;
        }
        private string info;
        private string fileName;
        private Span span;
        private const char* start;
        private const char* end;
    }
    
    public class FileInfo
    {
        static nothrow FileInfo(): instance(new FileInfo())
        {
        }
        public nothrow FileInfo()
        {
        }
        public static nothrow FileInfo& Instance()
        {
            return *instance;
        }
        public void SetFiles(const List<string>& files_)
        {
            files = files_;
        }
        public nothrow string GetFilePath(int index) const
        {
            if (index >= 0 && index < files.Count())
            {
                return files[index];
            }
            return string();
        }
        private static UniquePtr<FileInfo> instance;
        private List<string> files;
    }
    
    public nothrow string NarrowString(const char* start, const char* end)
    {
        string s;
        s.Reserve(end - start);
        while (start != end)
        {
            if (*start != '\r')
            {
                s.Append(*start);
            }
            ++start;
        }
        return s;
    }
    
    public nothrow const char* LineStart(const char* start, const char* pos)
    {
        while (pos > start && *pos != '\n')
        {
            --pos;
        }
        if (*pos == '\n')
        {
            ++pos;
        }
        return pos;
    }
    
    public nothrow const char* LineEnd(const char* end, const char* pos)
    {
        while (pos < end && *pos != '\r' && *pos != '\n')
        {
            ++pos;
        }
        return pos;
    }
    
    public void ThrowException(const string& message, const Span& span)
    {
        string filePath = FileInfo.Instance().GetFilePath(span.FileIndex());
        if (!filePath.IsEmpty())
        {
            System.IO.FileMapping file(filePath);
            throw ParsingException(message, filePath, span, file.Begin(), file.End());
        }
        throw Exception(message);
    }

    public nothrow string GetErrorLines(const char* start, const char* end, const Span& span)
    {
        const char* startPos = start + span.Start();
        if (startPos < start || startPos >= end)
        {
            return string();
        }
        const char* lineStart = LineStart(start, startPos);
        int cols = cast<int>(startPos - lineStart);
        if (cols < 0)
        {
            cols = 0;
        }
        const char* lineEnd = LineEnd(end, startPos);
        if (lineEnd < lineStart)
        {
            lineEnd = lineStart;
        }
        int lineLength = lineEnd - lineStart;
        string lines = NarrowString(lineStart, lineEnd);
        int spanCols = Max(int(1), Min(span.End() - span.Start(), lineLength - cols));
        lines.Append('\n').Append(' ', cols).Append('^', spanCols);
        return lines;
    }
}
