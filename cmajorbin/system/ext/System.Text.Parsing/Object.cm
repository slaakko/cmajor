/*========================================================================
    Copyright (c) 2012-2014 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;
using System.Collections;
using System.Concepts;

namespace System.Text.Parsing
{
    public class Object
    {
        public virtual ~Object()
        {
        }
    }

    public typedef UniquePtr<Object> UniqueObjectPtr;
    
    public typedef Stack<UniqueObjectPtr> ObjectStack;

    public class ValueObject<T>: Object where T is Semiregular
    {
        public default ValueObject();
        public ValueObject(const T& value_): value(value_)
        {
        }
        public void operator=(const T& value_)
        {
            value = value_;
        }
        public default ValueObject(const ValueObject<T>&);
        public default ValueObject(ValueObject<T>&&);
        public default void operator=(const ValueObject<T>&);
        public default void operator=(ValueObject<T>&&);
        public default nothrow ValueObject(ValueObject<T>&& that);
        public default nothrow void operator=(ValueObject<T>&& that);
        public override default ~ValueObject();
        public nothrow operator T&() const
        {
            return value;
        }
        public operator T() const
        {
            return value;
        }
        private T value;
    }
}
