/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;
using System.Collections;

namespace System.Text.Parsing
{
    public abstract class UnaryParser: Parser
    {
        public UnaryParser(const string& name_, Parser* child_, const string& info_): base(name_, info_), child(child_)
        {
            Own(child);
        }
        public nothrow inline Parser* Child() const
        {
            return child;
        }
        private Parser* child;
    }
    
    public abstract class BinaryParser: Parser
    {
        public BinaryParser(const string& name_, Parser* left_, Parser* right_, const string& info_): base(name_, info_), left(left_), right(right_)
        {
            Own(left);
            Own(right);
        }
        public nothrow inline Parser* Left() const
        {
            return left;
        }
        public nothrow inline Parser* Right() const
        {
            return right;
        }
        private Parser* left;
        private Parser* right;
    }
    
    public class OptionalParser: UnaryParser
    {
        public explicit OptionalParser(Parser* child_): base("optional", child_, child_->Info() + "?")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack)
        {
            Span save = scanner.GetSpan();
            Match match = Child()->Parse(scanner, stack);
            if (match.Hit())
            {
                return match;
            }
            scanner.SetSpan(save);
            return Match.Empty();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            Child()->Accept(visitor);
            visitor.EndVisit(*this);
        }
    }
    
    public class PositiveParser: UnaryParser
    {
        public explicit PositiveParser(Parser* child_): base("positive", child_, child_->Info() + "+")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack)
        {
            Match match = Child()->Parse(scanner, stack);
            if (match.Hit())
            {
                for (;;)
                {
                    Span save = scanner.GetSpan();
                    scanner.Skip();
                    Match next = Child()->Parse(scanner, stack);
                    if (next.Hit())
                    {
                        match.Concatenate(next);
                    }
                    else
                    {
                        scanner.SetSpan(save);
                        break;
                    }
                }
            }
            return match;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            Child()->Accept(visitor);
            visitor.EndVisit(*this);
        }
    }
    
    public class KleeneStarParser: UnaryParser
    {
        public explicit KleeneStarParser(Parser* child_): base("kleene", child_, child_->Info())
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack)
        {
            Match match = Match.Empty();
            bool first = true;
            for (;;)
            {
                Span save = scanner.GetSpan();
                if (first)
                {
                    first = false;
                }
                else
                {
                    scanner.Skip();
                }
                Match next = Child()->Parse(scanner, stack);
                if (next.Hit())
                {
                    match.Concatenate(next);
                }
                else
                {
                    scanner.SetSpan(save);
                    break;
                }
            }
            return match;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            Child()->Accept(visitor);
            visitor.EndVisit(*this);
        }
    }
    
    public class ExpectationParser: UnaryParser
    {
        public explicit ExpectationParser(Parser* child_): base("expectation", child_, child_->Info() + "!")
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack)
        {
            Span expectationSpan = scanner.GetSpan();
            Match match = Match.Nothing();
            try
            {
                match = Child()->Parse(scanner, stack);
            }
            catch (const ExpectationFailure& ex)
            {
                throw ExpectationFailure(Child()->Info() + ex.Info(), ex.FileName(), ex.GetSpan(), ex.Start(), ex.End());
            }
            if (match.Hit())
            {
                return match;
            }
            else
            {
                throw ExpectationFailure(Child()->Info(), scanner.FileName(), expectationSpan, scanner.Start(), scanner.End());
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            Child()->Accept(visitor);
            visitor.EndVisit(*this);
        }
    }
    
    public class TokenParser: UnaryParser
    {
        public explicit TokenParser(Parser* child_): base("token", child_, child_->Info())
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack)
        {
            scanner.BeginToken();
            Match match = Child()->Parse(scanner, stack);
            scanner.EndToken();
            return match;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            Child()->Accept(visitor);
            visitor.EndVisit(*this);
        }
    }
    
    public class SequenceParser: BinaryParser
    {
        public SequenceParser(Parser* left_, Parser* right_): base("sequence", left_, right_, left_->Info())
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack)
        {
            Match left = Left()->Parse(scanner, stack);
            if (left.Hit())
            {
                scanner.Skip();
                Match right = Right()->Parse(scanner, stack);
                if (right.Hit())
                {
                    left.Concatenate(right);
                    return left;
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            Left()->Accept(visitor);
            visitor.Visit(*this);
            Right()->Accept(visitor);
            visitor.EndVisit(*this);
        }
    }
    
    public class AlternativeParser: BinaryParser
    {
        public AlternativeParser(Parser* left_, Parser* right_): base("alternative", left_, right_, left_->Info() + " | " + right_->Info())
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack)
        {            
            Span save = scanner.GetSpan();
            Match left = Left()->Parse(scanner, stack);
            if (left.Hit())
            {
                return left;
            }
            scanner.SetSpan(save);
            return Right()->Parse(scanner, stack);
        }
        public override void Accept(Visitor& visitor)
        {            
            visitor.BeginVisit(*this);
            Left()->Accept(visitor);
            visitor.Visit(*this);
            Right()->Accept(visitor);
            visitor.EndVisit(*this);
        }
    }
    
    public class DifferenceParser: BinaryParser
    {
        public DifferenceParser(Parser* left_, Parser* right_): base("difference", left_, right_, left_->Info() + " - " + right_->Info())
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack)
        {
            Span save = scanner.GetSpan();
            Match left = Left()->Parse(scanner, stack);
            if (left.Hit())
            {
                Span tmp = scanner.GetSpan();
                scanner.SetSpan(save);
                save = tmp;
                Match right = Right()->Parse(scanner, stack);
                if (!right.Hit() || right.Length() < left.Length())
                {
                    scanner.SetSpan(save);
                    return left;
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            Left()->Accept(visitor);
            visitor.Visit(*this);
            Right()->Accept(visitor);
            visitor.EndVisit(*this);
        }
    }
    
    public class ExclusiveOrParser: BinaryParser
    {
        public ExclusiveOrParser(Parser* left_, Parser* right_): base("exclusive_or", left_, right_, left_->Info() + " ^ " + right_->Info())
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack)
        {
            Span save = scanner.GetSpan();
            Match left = Left()->Parse(scanner, stack);
            Span tmp = scanner.GetSpan();
            scanner.SetSpan(save);
            save = tmp;
            Match right = Right()->Parse(scanner, stack);
            bool hit = right.Hit();
            if (left.Hit())
            {
                hit = !right.Hit();
            }
            if (hit)
            {
                if (left.Hit())
                {
                    scanner.SetSpan(save);
                    return left;
                }
                return right;
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            Left()->Accept(visitor);
            visitor.Visit(*this);
            Right()->Accept(visitor);
            visitor.EndVisit(*this);
        }
    }
    
    public class IntersectionParser: BinaryParser
    {
        public IntersectionParser(Parser* left_, Parser* right_): base("intersection", left_, right_, left_->Info() + " & " + right_->Info())
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack)
        {
            Span save = scanner.GetSpan();
            Match left = Left()->Parse(scanner, stack);
            if (left.Hit())
            {
                scanner.SetSpan(save);
                Match right = Right()->Parse(scanner, stack);
                if (left.Length() == right.Length())
                {
                    return left;
                }
            }
            return Match.Nothing();
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            Left()->Accept(visitor);
            visitor.Visit(*this);
            Right()->Accept(visitor);
            visitor.EndVisit(*this);
        }
    }
    
    public class ListParser: UnaryParser
    {
        public ListParser(Parser* left_, Parser* right_): 
            base("list", new SequenceParser(left_, new KleeneStarParser(new SequenceParser(right_, left_))),
                left_->Info() + " % " + right_->Info()), left(left_), right(right_)
        {
        }
        public override Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack)
        {
            return Child()->Parse(scanner, stack);
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            left->Accept(visitor);
            visitor.Visit(*this);
            right->Accept(visitor);
            visitor.EndVisit(*this);
        }
        private Parser* left;
        private Parser* right;
    }
}
