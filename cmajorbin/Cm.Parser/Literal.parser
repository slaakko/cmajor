/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

[hpp]#include <Cm.Ast/Literal.hpp>

namespace Cm.Parser
{
    [cpp]using namespace Cm::Ast;

    grammar LiteralGrammar
    {
        using stdlib.bool;
        using stdlib.ureal;
        using stdlib.ulong;
        using stdlib.hex_literal;
        using stdlib.char;
        using stdlib.string;
        start IntegerLiteral;

        Literal: Cm::Ast::Node*
            ::= BooleanLiteral{ value = BooleanLiteral; }
            |   FloatingLiteral{ value = FloatingLiteral; }
            |   IntegerLiteral{ value = IntegerLiteral; }
            |   CharLiteral{ value = CharLiteral; }
            |   StringLiteral{ value = StringLiteral; }
            |   NullLiteral{ value = NullLiteral; }
            ;

        BooleanLiteral: Cm::Ast::Node*
            ::= bool:b{ value = new BooleanLiteralNode(span, b); }
            ;

        IntegerLiteral(var int start): Cm::Ast::Node*
            ::= token(
                    hex_literal{ start = span.Start(); } 
                    (    ('u' | 'U'){ value = CreateIntegerLiteralNode(Span(span.FileIndex(), span.LineNumber(), start, span.End()), hex_literal, true); } 
                    |    empty{ value = CreateIntegerLiteralNode(Span(span.FileIndex(), span.LineNumber(), start, span.End()), hex_literal, false); }
                    )
                )
            |   token(
                    ulong{ start = span.Start(); } 
                    (    ('u' | 'U'){ value = CreateIntegerLiteralNode(Span(span.FileIndex(), span.LineNumber(), start, span.End()), ulong, true); } 
                    |    empty{ value = CreateIntegerLiteralNode(Span(span.FileIndex(), span.LineNumber(), start, span.End()), ulong, false); }
                    )
                )
            ;

        FloatingLiteral(var int start): Cm::Ast::Node*
            ::= token(
                    ureal{ start = span.Start(); }
                    (    ('f' | 'F'){ value = CreateFloatingLiteralNode(Span(span.FileIndex(), span.LineNumber(), start, span.End()), ureal, true); }
                    |    empty{ value = CreateFloatingLiteralNode(Span(span.FileIndex(), span.LineNumber(), start, span.End()), ureal, false); }
                    )
                )
            ;

        CharLiteral: Cm::Ast::Node*
            ::= char:c{ value = new CharLiteralNode(span, c); }
            ;

        StringLiteral(var std::string r): Cm::Ast::Node*
            ::= string:s{ value = new StringLiteralNode(span, s); }
            |    ('@' token('"' ([^"]*){ r = std::string(matchBegin, matchEnd); } '"')){ value = new StringLiteralNode(span, r); }
            ;

        NullLiteral: Cm::Ast::Node*
            ::= keyword("null"){ value = new NullLiteralNode(span); }
            ;
    }
}
