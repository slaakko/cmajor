/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

[hpp]#include <Cm.Parser/ParsingContext.hpp>
[hpp]#include <Cm.Ast/Node.hpp>
[cpp]#include <Cm.Ast/Constant.hpp>
[cpp]#include <Cm.Parser/Expression.hpp>
[cpp]#include <Cm.Parser/Identifier.hpp>
[cpp]#include <Cm.Parser/Specifier.hpp>
[cpp]#include <Cm.Parser/TypeExpr.hpp>

namespace Cm.Parser
{
    using namespace Cm::Ast;

    grammar ConstantGrammar
    {
        using ExpressionGrammar.Expression;
        using IdentifierGrammar.Identifier;
        using SpecifierGrammar.Specifiers;
        using TypeExprGrammar.TypeExpr;
        using stdlib.spaces_and_comments;
        skip spaces_and_comments;

        Constant(ParsingContext* ctx, var std::unique_ptr<Node> typeExpr, var std::unique_ptr<IdentifierNode> id): Cm::Ast::Node*
            ::= (Specifiers keyword("const") TypeExpr(ctx){ typeExpr.reset(TypeExpr); } Identifier{ id.reset(Identifier); } '=' Expression(ctx)! ';'!)
                { 
                    value = new ConstantNode(span, Specifiers, typeExpr.release(), id.release(), Expression); 
                }
            ;
    }
}
