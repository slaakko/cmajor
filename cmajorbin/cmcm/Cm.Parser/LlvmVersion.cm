using System;
using System.Collections;
using System.Text.Parsing;
using Cm.Ast;

namespace Cm.Parser
{
    public class LlvmVersionGrammar: System.Text.Parsing.Grammar
    {
        public static LlvmVersionGrammar* Create()
        {
            return Create(new ParsingDomain());
        }
        public static LlvmVersionGrammar* Create(ParsingDomain* parsingDomain)
        {
            RegisterParsingDomain(parsingDomain);
            LlvmVersionGrammar* grammar = new LlvmVersionGrammar(parsingDomain);
            parsingDomain->AddGrammar(grammar);
            grammar->CreateRules();
            grammar->Link();
            return grammar;
        }
        private LlvmVersionGrammar(ParsingDomain* parsingDomain): base("LlvmVersionGrammar", parsingDomain->GetNamespaceScope("Cm.Parser"), parsingDomain)
        {
            SetOwner(0);
        }
        public ProgramVersion Parse(const char* start, const char* end, int fileIndex, const string& fileName)
        {
            Scanner scanner(start, end, fileIndex, fileName, SkipRule());
            System.IO.OutputStream* log = Log();
            UniquePtr<XmlLog> xmlLog;
            if (log != null)
            {
                xmlLog.Reset(new XmlLog(*log, MaxLogLineLength()));
                scanner.SetLog(xmlLog.GetPtr());
                xmlLog->WriteBeginRule("parse");
            }
            Stack<UniquePtr<Object>> stack;
            Match match = Parse(scanner, stack);
            Span stop = scanner.GetSpan();
            if (log != null)
            {
                xmlLog->WriteEndRule("parse");
            }
            if (!match.Hit() || stop.Start() != int(end - start))
            {
                Rule* startRule = StartRule();
                if (startRule != null)
                {
                    throw ExpectationFailure(startRule->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + Name() + "' has no start rule", fileName, stop, start, end);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            ProgramVersion result = *cast<ValueObject<ProgramVersion>*>(value.GetPtr());
            return result;
        }
        private class LlvmVersionRule: System.Text.Parsing.Rule
        {
            public LlvmVersionRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("ProgramVersion");
                AddLocalVariable(AttrOrVariable("string", "versionText"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ProgramVersion>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                NonterminalParser* majorNonterminalParser = GetNonterminal("Major");
                majorNonterminalParser->SetPostCall(PostCall(PostMajor));
                NonterminalParser* minorNonterminalParser = GetNonterminal("Minor");
                minorNonterminalParser->SetPostCall(PostCall(PostMinor));
                NonterminalParser* revisionNonterminalParser = GetNonterminal("Revision");
                revisionNonterminalParser->SetPostCall(PostCall(PostRevision));
                NonterminalParser* buildNonterminalParser = GetNonterminal("Build");
                buildNonterminalParser->SetPostCall(PostCall(PostBuild));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = ProgramVersion(context.fromMajor, context.fromMinor, context.fromRevision, context.fromBuild, context.versionText);
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.versionText = string(matchBegin, matchEnd);
            }
            public throw void PostMajor(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromMajor_value = stack.Pop();
                    context.fromMajor = *cast<ValueObject<int>*>(fromMajor_value.GetPtr());
                }
            }
            public throw void PostMinor(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromMinor_value = stack.Pop();
                    context.fromMinor = *cast<ValueObject<int>*>(fromMinor_value.GetPtr());
                }
            }
            public throw void PostRevision(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromRevision_value = stack.Pop();
                    context.fromRevision = *cast<ValueObject<int>*>(fromRevision_value.GetPtr());
                }
            }
            public throw void PostBuild(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromBuild_value = stack.Pop();
                    context.fromBuild = *cast<ValueObject<int>*>(fromBuild_value.GetPtr());
                }
            }
            private class Context
            {
                public ProgramVersion value;
                public string versionText;
                public int fromMajor;
                public int fromMinor;
                public int fromRevision;
                public int fromBuild;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain* parsingDomain = GetParsingDomain();
            Grammar* grammar0 = parsingDomain->GetGrammar("System.Text.Parsing.stdlib");
            if (grammar0 == null)
            {
                grammar0 = System.Text.Parsing.stdlib.Create(parsingDomain);
            }
            AddGrammarReference(grammar0);
            Grammar* grammar1 = parsingDomain->GetGrammar("Cm.Parser.VersionNumberGrammar");
            if (grammar1 == null)
            {
                grammar1 = Cm.Parser.VersionNumberGrammar.Create(parsingDomain);
            }
            AddGrammarReference(grammar1);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("newline", this, "System.Text.Parsing.stdlib.newline"));
            AddRuleLink(new RuleLink("Major", this, "VersionNumberGrammar.Major"));
            AddRuleLink(new RuleLink("Minor", this, "VersionNumberGrammar.Minor"));
            AddRuleLink(new RuleLink("Revision", this, "VersionNumberGrammar.Revision"));
            AddRuleLink(new RuleLink("Build", this, "VersionNumberGrammar.Build"));
            AddRule(new LlvmVersionRule("LlvmVersion", GetScope(),
                new ActionParser("A0",
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new SequenceParser(
                                            new StringParser("LLVM"),
                                            new KleeneStarParser(
                                                new DifferenceParser(
                                                    new AnyCharParser(),
                                                    new NonterminalParser("newline", "newline", 0))
                                                )),
                                        new NonterminalParser("newline", "newline", 0)),
                                    new StringParser("  LLVM version ")),
                                new ActionParser("A1",
                                    new SequenceParser(
                                        new SequenceParser(
                                            new SequenceParser(
                                                new SequenceParser(
                                                    new NonterminalParser("Major", "Major", 0),
                                                    new CharParser('.')),
                                                new NonterminalParser("Minor", "Minor", 0)),
                                            new OptionalParser(
                                                new SequenceParser(
                                                    new SequenceParser(
                                                        new CharParser('.'),
                                                        new NonterminalParser("Revision", "Revision", 0)),
                                                    new OptionalParser(
                                                        new SequenceParser(
                                                            new CharParser('.'),
                                                            new NonterminalParser("Build", "Build", 0)))))),
                                        new KleeneStarParser(
                                            new DifferenceParser(
                                                new AnyCharParser(),
                                                new NonterminalParser("newline", "newline", 0))
                                            )))),
                            new NonterminalParser("newline", "newline", 0)),
                        new KleeneStarParser(
                            new AnyCharParser())))));
        }
    }
    public class VersionNumberGrammar: System.Text.Parsing.Grammar
    {
        public static VersionNumberGrammar* Create()
        {
            return Create(new ParsingDomain());
        }
        public static VersionNumberGrammar* Create(ParsingDomain* parsingDomain)
        {
            RegisterParsingDomain(parsingDomain);
            VersionNumberGrammar* grammar = new VersionNumberGrammar(parsingDomain);
            parsingDomain->AddGrammar(grammar);
            grammar->CreateRules();
            grammar->Link();
            return grammar;
        }
        private VersionNumberGrammar(ParsingDomain* parsingDomain): base("VersionNumberGrammar", parsingDomain->GetNamespaceScope("Cm.Parser"), parsingDomain)
        {
            SetOwner(0);
        }
        public ProgramVersion Parse(const char* start, const char* end, int fileIndex, const string& fileName)
        {
            Scanner scanner(start, end, fileIndex, fileName, SkipRule());
            System.IO.OutputStream* log = Log();
            UniquePtr<XmlLog> xmlLog;
            if (log != null)
            {
                xmlLog.Reset(new XmlLog(*log, MaxLogLineLength()));
                scanner.SetLog(xmlLog.GetPtr());
                xmlLog->WriteBeginRule("parse");
            }
            Stack<UniquePtr<Object>> stack;
            Match match = Parse(scanner, stack);
            Span stop = scanner.GetSpan();
            if (log != null)
            {
                xmlLog->WriteEndRule("parse");
            }
            if (!match.Hit() || stop.Start() != int(end - start))
            {
                Rule* startRule = StartRule();
                if (startRule != null)
                {
                    throw ExpectationFailure(startRule->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + Name() + "' has no start rule", fileName, stop, start, end);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            ProgramVersion result = *cast<ValueObject<ProgramVersion>*>(value.GetPtr());
            return result;
        }
        private class VersionNumberRule: System.Text.Parsing.Rule
        {
            public VersionNumberRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("ProgramVersion");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<ProgramVersion>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* majorNonterminalParser = GetNonterminal("Major");
                majorNonterminalParser->SetPostCall(PostCall(PostMajor));
                NonterminalParser* minorNonterminalParser = GetNonterminal("Minor");
                minorNonterminalParser->SetPostCall(PostCall(PostMinor));
                NonterminalParser* revisionNonterminalParser = GetNonterminal("Revision");
                revisionNonterminalParser->SetPostCall(PostCall(PostRevision));
                NonterminalParser* buildNonterminalParser = GetNonterminal("Build");
                buildNonterminalParser->SetPostCall(PostCall(PostBuild));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = ProgramVersion(context.fromMajor, context.fromMinor, context.fromRevision, context.fromBuild, "");
            }
            public throw void PostMajor(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromMajor_value = stack.Pop();
                    context.fromMajor = *cast<ValueObject<int>*>(fromMajor_value.GetPtr());
                }
            }
            public throw void PostMinor(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromMinor_value = stack.Pop();
                    context.fromMinor = *cast<ValueObject<int>*>(fromMinor_value.GetPtr());
                }
            }
            public throw void PostRevision(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromRevision_value = stack.Pop();
                    context.fromRevision = *cast<ValueObject<int>*>(fromRevision_value.GetPtr());
                }
            }
            public throw void PostBuild(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromBuild_value = stack.Pop();
                    context.fromBuild = *cast<ValueObject<int>*>(fromBuild_value.GetPtr());
                }
            }
            private class Context
            {
                public ProgramVersion value;
                public int fromMajor;
                public int fromMinor;
                public int fromRevision;
                public int fromBuild;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class MajorRule: System.Text.Parsing.Rule
        {
            public MajorRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("int");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<int>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* majorNonterminalParser = GetNonterminal("major");
                majorNonterminalParser->SetPostCall(PostCall(Postmajor));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.frommajor;
            }
            public throw void Postmajor(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> frommajor_value = stack.Pop();
                    context.frommajor = *cast<ValueObject<int>*>(frommajor_value.GetPtr());
                }
            }
            private class Context
            {
                public int value;
                public int frommajor;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class MinorRule: System.Text.Parsing.Rule
        {
            public MinorRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("int");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<int>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* minorNonterminalParser = GetNonterminal("minor");
                minorNonterminalParser->SetPostCall(PostCall(Postminor));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromminor;
            }
            public throw void Postminor(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromminor_value = stack.Pop();
                    context.fromminor = *cast<ValueObject<int>*>(fromminor_value.GetPtr());
                }
            }
            private class Context
            {
                public int value;
                public int fromminor;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class RevisionRule: System.Text.Parsing.Rule
        {
            public RevisionRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("int");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<int>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* revisionNonterminalParser = GetNonterminal("revision");
                revisionNonterminalParser->SetPostCall(PostCall(Postrevision));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromrevision;
            }
            public throw void Postrevision(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromrevision_value = stack.Pop();
                    context.fromrevision = *cast<ValueObject<int>*>(fromrevision_value.GetPtr());
                }
            }
            private class Context
            {
                public int value;
                public int fromrevision;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class BuildRule: System.Text.Parsing.Rule
        {
            public BuildRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("int");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<int>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* buildNonterminalParser = GetNonterminal("build");
                buildNonterminalParser->SetPostCall(PostCall(Postbuild));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.frombuild;
            }
            public throw void Postbuild(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> frombuild_value = stack.Pop();
                    context.frombuild = *cast<ValueObject<int>*>(frombuild_value.GetPtr());
                }
            }
            private class Context
            {
                public int value;
                public int frombuild;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain* parsingDomain = GetParsingDomain();
            Grammar* grammar0 = parsingDomain->GetGrammar("System.Text.Parsing.stdlib");
            if (grammar0 == null)
            {
                grammar0 = System.Text.Parsing.stdlib.Create(parsingDomain);
            }
            AddGrammarReference(grammar0);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("int", this, "System.Text.Parsing.stdlib.int"));
            AddRule(new VersionNumberRule("VersionNumber", GetScope(),
                new ActionParser("A0",
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new NonterminalParser("Major", "Major", 0),
                                new CharParser('.')),
                            new NonterminalParser("Minor", "Minor", 0)),
                        new OptionalParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new CharParser('.'),
                                    new NonterminalParser("Revision", "Revision", 0)),
                                new OptionalParser(
                                    new SequenceParser(
                                        new CharParser('.'),
                                        new NonterminalParser("Build", "Build", 0)))))))));
            AddRule(new MajorRule("Major", GetScope(),
                new ActionParser("A0",
                    new NonterminalParser("major", "int", 0))));
            AddRule(new MinorRule("Minor", GetScope(),
                new ActionParser("A0",
                    new NonterminalParser("minor", "int", 0))));
            AddRule(new RevisionRule("Revision", GetScope(),
                new ActionParser("A0",
                    new NonterminalParser("revision", "int", 0))));
            AddRule(new BuildRule("Build", GetScope(),
                new ActionParser("A0",
                    new NonterminalParser("build", "int", 0))));
        }
    }
}
