using System;
using System.Collections;
using System.Text.Parsing;
using Cm.Ast;

namespace Cm.Parser
{
    public class BasicTypeGrammar: System.Text.Parsing.Grammar
    {
        public static BasicTypeGrammar* Create()
        {
            return Create(new ParsingDomain());
        }
        public static BasicTypeGrammar* Create(ParsingDomain* parsingDomain)
        {
            RegisterParsingDomain(parsingDomain);
            BasicTypeGrammar* grammar = new BasicTypeGrammar(parsingDomain);
            parsingDomain->AddGrammar(grammar);
            grammar->CreateRules();
            grammar->Link();
            return grammar;
        }
        private BasicTypeGrammar(ParsingDomain* parsingDomain): base("BasicTypeGrammar", parsingDomain->GetNamespaceScope("Cm.Parser"), parsingDomain)
        {
            SetOwner(0);
        }
        public Node* Parse(const string& content, int fileIndex, const string& fileName)
        {
            Scanner scanner(content, fileIndex, fileName, Skip());
            System.IO.OutputStream* log = Log();
            UniquePtr<XmlLog> xmlLog;
            if (log != null)
            {
                xmlLog.Reset(new XmlLog(*log, MaxLogLineLength()));
                scanner.SetLog(xmlLog.GetPtr());
                xmlLog->WriteBeginRule("parse");
            }
            Stack<UniquePtr<Object>> stack;
            Match match = Parse(scanner, stack);
            Position stop = scanner.GetPosition();
            if (log != null)
            {
                xmlLog->WriteEndRule("parse");
            }
            if (!match.Hit() || stop.Index() != content.Length())
            {
                Rule* start = Start();
                if (start != null)
                {
                    throw ExpectationFailure(start->Info(), content, scanner.GetPosition(), fileName);
                }
                else
                {
                    throw ParsingException("grammar '" + Name() + "' has no start rule", content, scanner.GetPosition(), fileName);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            Node* result = *cast<ValueObject<Node*>*>(value.GetPtr());
            return result;
        }
        private class BasicTypeRule: System.Text.Parsing.Rule
        {
            public BasicTypeRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("Node*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                ActionParser* a2ActionParser = GetAction("A2");
                a2ActionParser->SetAction(ParsingAction(A2Action));
                ActionParser* a3ActionParser = GetAction("A3");
                a3ActionParser->SetAction(ParsingAction(A3Action));
                ActionParser* a4ActionParser = GetAction("A4");
                a4ActionParser->SetAction(ParsingAction(A4Action));
                ActionParser* a5ActionParser = GetAction("A5");
                a5ActionParser->SetAction(ParsingAction(A5Action));
                ActionParser* a6ActionParser = GetAction("A6");
                a6ActionParser->SetAction(ParsingAction(A6Action));
                ActionParser* a7ActionParser = GetAction("A7");
                a7ActionParser->SetAction(ParsingAction(A7Action));
                ActionParser* a8ActionParser = GetAction("A8");
                a8ActionParser->SetAction(ParsingAction(A8Action));
                ActionParser* a9ActionParser = GetAction("A9");
                a9ActionParser->SetAction(ParsingAction(A9Action));
                ActionParser* a10ActionParser = GetAction("A10");
                a10ActionParser->SetAction(ParsingAction(A10Action));
                ActionParser* a11ActionParser = GetAction("A11");
                a11ActionParser->SetAction(ParsingAction(A11Action));
                ActionParser* a12ActionParser = GetAction("A12");
                a12ActionParser->SetAction(ParsingAction(A12Action));
            }
            public throw void A0Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new BoolNode(span);
            }
            public throw void A1Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new SByteNode(span);
            }
            public throw void A2Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new ByteNode(span);
            }
            public throw void A3Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new ShortNode(span);
            }
            public throw void A4Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new UShortNode(span);
            }
            public throw void A5Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new IntNode(span);
            }
            public throw void A6Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new UIntNode(span);
            }
            public throw void A7Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new LongNode(span);
            }
            public throw void A8Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new ULongNode(span);
            }
            public throw void A9Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FloatNode(span);
            }
            public throw void A10Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new DoubleNode(span);
            }
            public throw void A11Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new CharNode(span);
            }
            public throw void A12Action(const string& match, const string& content, const Position& position, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new VoidNode(span);
            }
            private class Context
            {
                public Node* value;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRule(new BasicTypeRule("BasicType", GetScope(),
                new AlternativeParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new AlternativeParser(
                                            new AlternativeParser(
                                                new AlternativeParser(
                                                    new AlternativeParser(
                                                        new AlternativeParser(
                                                            new AlternativeParser(
                                                                new ActionParser("A0",
                                                                    new KeywordParser("bool")),
                                                                new ActionParser("A1",
                                                                    new KeywordParser("sbyte"))),
                                                            new ActionParser("A2",
                                                                new KeywordParser("byte"))),
                                                        new ActionParser("A3",
                                                            new KeywordParser("short"))),
                                                    new ActionParser("A4",
                                                        new KeywordParser("ushort"))),
                                                new ActionParser("A5",
                                                    new KeywordParser("int"))),
                                            new ActionParser("A6",
                                                new KeywordParser("uint"))),
                                        new ActionParser("A7",
                                            new KeywordParser("long"))),
                                    new ActionParser("A8",
                                        new KeywordParser("ulong"))),
                                new ActionParser("A9",
                                    new KeywordParser("float"))),
                            new ActionParser("A10",
                                new KeywordParser("double"))),
                        new ActionParser("A11",
                            new KeywordParser("char"))),
                    new ActionParser("A12",
                        new KeywordParser("void")))));
        }
    }
}
