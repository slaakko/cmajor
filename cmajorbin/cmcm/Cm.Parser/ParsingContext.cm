/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.Parser
{
    public class ParsingContext
    {
        public nothrow inline bool ParsingTypeExpr() const
        {
            return parsingTypeExpr;
        }
        public void BeginParsingTypeExpr()
        {
            parsingTypeExprStack.Push(parsingTypeExpr);
            parsingTypeExpr = true;
        }
        public void EndParsingTypeExpr()
        {
            parsingTypeExpr = parsingTypeExprStack.Pop();
        }
        public nothrow inline bool ParsingConcept() const
        {
            return parsingConcept;
        }
        public void BeginParsingConcept()
        {
            parsingConceptStack.Push(parsingConcept);
            parsingConcept = true;
        }
        public void EndParsingConcept()
        {
            parsingConcept = parsingConceptStack.Pop();
        }
        public nothrow inline bool ParsingTemplateId() const
        {
            return parsingTemplateId;
        }
        public void BeginParsingTemplateId()
        {
            parsingTemplateIdStack.Push(parsingTemplateId);
            parsingTemplateId = true;
        }
        public void EndParsingTemplateId()
        {
            parsingTemplateId = parsingTemplateIdStack.Pop();
        }
        public nothrow inline bool ParsingSimpleStatement() const
        {
            return parsingSimpleStatement;
        }
        public void PushParsingSimpleStatement(bool enable)
        {
            parsingSimpleStatementStack.Push(parsingSimpleStatement);
            parsingSimpleStatement = enable;
        }
        public void PopParsingSimpleStatement()
        {
            parsingSimpleStatement = parsingSimpleStatementStack.Pop();
        }
        public nothrow inline bool ParsingLvalue() const
        {
            return parsingLvalue;
        }
        public void PushParsingLvalue(bool enable)
        {
            parsingLvalueStack.Push(parsingLvalue);
            parsingLvalue = enable;
        }
        public void PopParsingLvalue()
        {
            parsingLvalue = parsingLvalueStack.Pop();
        }
        public nothrow bool ParsingArguments() const
        {
            return parsingArguments;
        }
        public void BeginParsingArguments()
        {
            parsingArgumentsStack.Push(parsingArguments);
            parsingArguments = true;
        }
        public void EndParsingArguments()
        {
            parsingArguments = parsingArgumentsStack.Pop();
        }
        private bool parsingTypeExpr;
        private Stack<bool> parsingTypeExprStack;
        private bool parsingConcept;
        private Stack<bool> parsingConceptStack;
        private bool parsingTemplateId;
        private Stack<bool> parsingTemplateIdStack;
        private bool parsingSimpleStatement;
        private Stack<bool> parsingSimpleStatementStack;
        private bool parsingLvalue;
        private Stack<bool> parsingLvalueStack;
        private bool parsingArguments;
        private Stack<bool> parsingArgumentsStack;
    }
}
