/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using Cm.Ast;

namespace Cm.Parser
{
    grammar FunctionGrammar
    {
        using stdlib.identifier;
        using KeywordGrammar.Keyword;
        using TypeExprGrammar.TypeExpr;
        using SpecifierGrammar.Specifiers;
        using TemplateGrammar.TemplateParameterList;
        using ParameterGrammar.ParameterList;
        using ConceptGrammar.WhereConstraint;
        using StatementGrammar.CompoundStatement;
        using stdlib.spaces_and_comments;
        skip spaces_and_comments;
        
        Function(ParsingContext* ctx, var UniquePtr<FunctionNode> fun, var Span s) : FunctionNode*
            ::= (Specifiers TypeExpr(ctx) FunctionGroupId(ctx){ fun.Reset(new FunctionNode(span, Specifiers, TypeExpr, FunctionGroupId)); }
                TemplateParameterList(ctx, fun.GetPtr())? ParameterList(ctx, fun.GetPtr()) (WhereConstraint(ctx){ fun->SetConstraint(WhereConstraint); })?){ s = span; } (CompoundStatement(ctx) | ';')
            {
                fun->SetBody(CompoundStatement); 
                fun->GetSpan().SetEnd(s.End());
                value = fun.Release();
            }
            ;
        
        FunctionGroupId(ParsingContext* ctx) : FunctionGroupIdNode*
            ::= token(identifier - Keyword){ value = new FunctionGroupIdNode(span, string(matchBegin, matchEnd)); }
            |   OperatorFunctionGroupId(ctx){ value = OperatorFunctionGroupId; }
            ;
            
        OperatorFunctionGroupId(ParsingContext* ctx, var UniquePtr<Node> typeExpr) : FunctionGroupIdNode*
            ::= keyword("operator")
            (   ("<<" - ('<' '<' (TypeExpr(ctx){ typeExpr.Reset(TypeExpr); } % ',') '>')){ value = new FunctionGroupIdNode(span, "operator<<"); }
            |   ">>"{ value = new FunctionGroupIdNode(span, "operator>>"); }
            |   "=="{ value = new FunctionGroupIdNode(span, "operator=="); }
            |   '='{ value = new FunctionGroupIdNode(span, "operator="); }
            |   '<'{ value = new FunctionGroupIdNode(span, "operator<"); }
            |   "++"{ value = new FunctionGroupIdNode(span, "operator++"); }
            |   "--"{ value = new FunctionGroupIdNode(span, "operator--"); }
            |   "->"{ value = new FunctionGroupIdNode(span, "operator->"); }
            |   '+'{ value = new FunctionGroupIdNode(span, "operator+"); }
            |   '-'{ value = new FunctionGroupIdNode(span, "operator-"); }
            |   '*'{ value = new FunctionGroupIdNode(span, "operator*"); }
            |   '/'{ value = new FunctionGroupIdNode(span, "operator/"); }
            |   '%'{ value = new FunctionGroupIdNode(span, "operator%"); }
            |   '&'{ value = new FunctionGroupIdNode(span, "operator&"); }
            |   '|'{ value = new FunctionGroupIdNode(span, "operator|"); }
            |   '^'{ value = new FunctionGroupIdNode(span, "operator^"); }
            |   '!'{ value = new FunctionGroupIdNode(span, "operator!"); }
            |   '~'{ value = new FunctionGroupIdNode(span, "operator~"); }
            |   "[]"{ value = new FunctionGroupIdNode(span, "operator[]"); }
            |   "()"{ value = new FunctionGroupIdNode(span, "operator()"); }
            )
            ;
    }
}
