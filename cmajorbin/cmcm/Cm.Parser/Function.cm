using System;
using System.Collections;
using System.Text.Parsing;
using Cm.Ast;

namespace Cm.Parser
{
    public class FunctionGrammar: System.Text.Parsing.Grammar
    {
        public static FunctionGrammar* Create()
        {
            return Create(new ParsingDomain());
        }
        public static FunctionGrammar* Create(ParsingDomain* parsingDomain)
        {
            RegisterParsingDomain(parsingDomain);
            FunctionGrammar* grammar = new FunctionGrammar(parsingDomain);
            parsingDomain->AddGrammar(grammar);
            grammar->CreateRules();
            grammar->Link();
            return grammar;
        }
        private FunctionGrammar(ParsingDomain* parsingDomain): base("FunctionGrammar", parsingDomain->GetNamespaceScope("Cm.Parser"), parsingDomain)
        {
            SetOwner(0);
        }
        public FunctionNode* Parse(const char* start, const char* end, int fileIndex, const string& fileName, ParsingContext* ctx)
        {
            Scanner scanner(start, end, fileIndex, fileName, SkipRule());
            System.IO.OutputStream* log = Log();
            UniquePtr<XmlLog> xmlLog;
            if (log != null)
            {
                xmlLog.Reset(new XmlLog(*log, MaxLogLineLength()));
                scanner.SetLog(xmlLog.GetPtr());
                xmlLog->WriteBeginRule("parse");
            }
            Stack<UniquePtr<Object>> stack;
            stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(ctx)));
            Match match = Parse(scanner, stack);
            Span stop = scanner.GetSpan();
            if (log != null)
            {
                xmlLog->WriteEndRule("parse");
            }
            if (!match.Hit() || stop.Start() != int(end - start))
            {
                Rule* startRule = StartRule();
                if (startRule != null)
                {
                    throw ExpectationFailure(startRule->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + Name() + "' has no start rule", fileName, stop, start, end);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            FunctionNode* result = *cast<ValueObject<FunctionNode*>*>(value.GetPtr());
            return result;
        }
        private class FunctionRule: System.Text.Parsing.Rule
        {
            public FunctionRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("FunctionNode*");
                AddLocalVariable(AttrOrVariable("UniquePtr<FunctionNode>", "fun"));
                AddLocalVariable(AttrOrVariable("Span", "s"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<FunctionNode*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                ActionParser* a2ActionParser = GetAction("A2");
                a2ActionParser->SetAction(ParsingAction(A2Action));
                ActionParser* a3ActionParser = GetAction("A3");
                a3ActionParser->SetAction(ParsingAction(A3Action));
                NonterminalParser* specifiersNonterminalParser = GetNonterminal("Specifiers");
                specifiersNonterminalParser->SetPostCall(PostCall(PostSpecifiers));
                NonterminalParser* typeExprNonterminalParser = GetNonterminal("TypeExpr");
                typeExprNonterminalParser->SetPreCall(PreCall(PreTypeExpr));
                typeExprNonterminalParser->SetPostCall(PostCall(PostTypeExpr));
                NonterminalParser* functionGroupIdNonterminalParser = GetNonterminal("FunctionGroupId");
                functionGroupIdNonterminalParser->SetPreCall(PreCall(PreFunctionGroupId));
                functionGroupIdNonterminalParser->SetPostCall(PostCall(PostFunctionGroupId));
                NonterminalParser* templateParameterListNonterminalParser = GetNonterminal("TemplateParameterList");
                templateParameterListNonterminalParser->SetPreCall(PreCall(PreTemplateParameterList));
                NonterminalParser* parameterListNonterminalParser = GetNonterminal("ParameterList");
                parameterListNonterminalParser->SetPreCall(PreCall(PreParameterList));
                NonterminalParser* whereConstraintNonterminalParser = GetNonterminal("WhereConstraint");
                whereConstraintNonterminalParser->SetPreCall(PreCall(PreWhereConstraint));
                whereConstraintNonterminalParser->SetPostCall(PostCall(PostWhereConstraint));
                NonterminalParser* compoundStatementNonterminalParser = GetNonterminal("CompoundStatement");
                compoundStatementNonterminalParser->SetPreCall(PreCall(PreCompoundStatement));
                compoundStatementNonterminalParser->SetPostCall(PostCall(PostCompoundStatement));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.s = span;
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.fun.Reset(new FunctionNode(span, context.fromSpecifiers, context.fromTypeExpr, context.fromFunctionGroupId));
            }
            public throw void A2Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.fun->SetConstraint(context.fromWhereConstraint);
            }
            public throw void A3Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.fun->SetBody(context.fromCompoundStatement);
                context.fun->GetSpan().SetEnd(context.s.End());
                context.value = context.fun.Release();
            }
            public throw void PostSpecifiers(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromSpecifiers_value = stack.Pop();
                    context.fromSpecifiers = *cast<ValueObject<Specifiers>*>(fromSpecifiers_value.GetPtr());
                }
            }
            public throw void PreTypeExpr(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void PostTypeExpr(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromTypeExpr_value = stack.Pop();
                    context.fromTypeExpr = *cast<ValueObject<Node*>*>(fromTypeExpr_value.GetPtr());
                }
            }
            public throw void PreFunctionGroupId(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void PostFunctionGroupId(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromFunctionGroupId_value = stack.Pop();
                    context.fromFunctionGroupId = *cast<ValueObject<FunctionGroupIdNode*>*>(fromFunctionGroupId_value.GetPtr());
                }
            }
            public throw void PreTemplateParameterList(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context.fun.GetPtr())));
            }
            public throw void PreParameterList(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
                stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context.fun.GetPtr())));
            }
            public throw void PreWhereConstraint(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void PostWhereConstraint(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromWhereConstraint_value = stack.Pop();
                    context.fromWhereConstraint = *cast<ValueObject<WhereConstraintNode*>*>(fromWhereConstraint_value.GetPtr());
                }
            }
            public throw void PreCompoundStatement(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void PostCompoundStatement(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromCompoundStatement_value = stack.Pop();
                    context.fromCompoundStatement = *cast<ValueObject<CompoundStatementNode*>*>(fromCompoundStatement_value.GetPtr());
                }
            }
            private class Context
            {
                public ParsingContext* ctx;
                public FunctionNode* value;
                public UniquePtr<FunctionNode> fun;
                public Span s;
                public Specifiers fromSpecifiers;
                public Node* fromTypeExpr;
                public FunctionGroupIdNode* fromFunctionGroupId;
                public WhereConstraintNode* fromWhereConstraint;
                public CompoundStatementNode* fromCompoundStatement;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class FunctionGroupIdRule: System.Text.Parsing.Rule
        {
            public FunctionGroupIdRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("FunctionGroupIdNode*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<FunctionGroupIdNode*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                NonterminalParser* identifierNonterminalParser = GetNonterminal("identifier");
                identifierNonterminalParser->SetPostCall(PostCall(Postidentifier));
                NonterminalParser* operatorFunctionGroupIdNonterminalParser = GetNonterminal("OperatorFunctionGroupId");
                operatorFunctionGroupIdNonterminalParser->SetPreCall(PreCall(PreOperatorFunctionGroupId));
                operatorFunctionGroupIdNonterminalParser->SetPostCall(PostCall(PostOperatorFunctionGroupId));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, string(matchBegin, matchEnd));
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromOperatorFunctionGroupId;
            }
            public throw void Postidentifier(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromidentifier_value = stack.Pop();
                    context.fromidentifier = *cast<ValueObject<string>*>(fromidentifier_value.GetPtr());
                }
            }
            public throw void PreOperatorFunctionGroupId(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void PostOperatorFunctionGroupId(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromOperatorFunctionGroupId_value = stack.Pop();
                    context.fromOperatorFunctionGroupId = *cast<ValueObject<FunctionGroupIdNode*>*>(fromOperatorFunctionGroupId_value.GetPtr());
                }
            }
            private class Context
            {
                public ParsingContext* ctx;
                public FunctionGroupIdNode* value;
                public string fromidentifier;
                public FunctionGroupIdNode* fromOperatorFunctionGroupId;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class OperatorFunctionGroupIdRule: System.Text.Parsing.Rule
        {
            public OperatorFunctionGroupIdRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("FunctionGroupIdNode*");
                AddLocalVariable(AttrOrVariable("UniquePtr<Node>", "typeExpr"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<FunctionGroupIdNode*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                ActionParser* a2ActionParser = GetAction("A2");
                a2ActionParser->SetAction(ParsingAction(A2Action));
                ActionParser* a3ActionParser = GetAction("A3");
                a3ActionParser->SetAction(ParsingAction(A3Action));
                ActionParser* a4ActionParser = GetAction("A4");
                a4ActionParser->SetAction(ParsingAction(A4Action));
                ActionParser* a5ActionParser = GetAction("A5");
                a5ActionParser->SetAction(ParsingAction(A5Action));
                ActionParser* a6ActionParser = GetAction("A6");
                a6ActionParser->SetAction(ParsingAction(A6Action));
                ActionParser* a7ActionParser = GetAction("A7");
                a7ActionParser->SetAction(ParsingAction(A7Action));
                ActionParser* a8ActionParser = GetAction("A8");
                a8ActionParser->SetAction(ParsingAction(A8Action));
                ActionParser* a9ActionParser = GetAction("A9");
                a9ActionParser->SetAction(ParsingAction(A9Action));
                ActionParser* a10ActionParser = GetAction("A10");
                a10ActionParser->SetAction(ParsingAction(A10Action));
                ActionParser* a11ActionParser = GetAction("A11");
                a11ActionParser->SetAction(ParsingAction(A11Action));
                ActionParser* a12ActionParser = GetAction("A12");
                a12ActionParser->SetAction(ParsingAction(A12Action));
                ActionParser* a13ActionParser = GetAction("A13");
                a13ActionParser->SetAction(ParsingAction(A13Action));
                ActionParser* a14ActionParser = GetAction("A14");
                a14ActionParser->SetAction(ParsingAction(A14Action));
                ActionParser* a15ActionParser = GetAction("A15");
                a15ActionParser->SetAction(ParsingAction(A15Action));
                ActionParser* a16ActionParser = GetAction("A16");
                a16ActionParser->SetAction(ParsingAction(A16Action));
                ActionParser* a17ActionParser = GetAction("A17");
                a17ActionParser->SetAction(ParsingAction(A17Action));
                ActionParser* a18ActionParser = GetAction("A18");
                a18ActionParser->SetAction(ParsingAction(A18Action));
                ActionParser* a19ActionParser = GetAction("A19");
                a19ActionParser->SetAction(ParsingAction(A19Action));
                ActionParser* a20ActionParser = GetAction("A20");
                a20ActionParser->SetAction(ParsingAction(A20Action));
                NonterminalParser* typeExprNonterminalParser = GetNonterminal("TypeExpr");
                typeExprNonterminalParser->SetPreCall(PreCall(PreTypeExpr));
                typeExprNonterminalParser->SetPostCall(PostCall(PostTypeExpr));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator<<");
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.typeExpr.Reset(context.fromTypeExpr);
            }
            public throw void A2Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator>>");
            }
            public throw void A3Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator==");
            }
            public throw void A4Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator=");
            }
            public throw void A5Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator<");
            }
            public throw void A6Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator++");
            }
            public throw void A7Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator--");
            }
            public throw void A8Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator->");
            }
            public throw void A9Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator+");
            }
            public throw void A10Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator-");
            }
            public throw void A11Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator*");
            }
            public throw void A12Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator/");
            }
            public throw void A13Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator%");
            }
            public throw void A14Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator&");
            }
            public throw void A15Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator|");
            }
            public throw void A16Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator^");
            }
            public throw void A17Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator!");
            }
            public throw void A18Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator~");
            }
            public throw void A19Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator[]");
            }
            public throw void A20Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FunctionGroupIdNode(span, "operator()");
            }
            public throw void PreTypeExpr(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void PostTypeExpr(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromTypeExpr_value = stack.Pop();
                    context.fromTypeExpr = *cast<ValueObject<Node*>*>(fromTypeExpr_value.GetPtr());
                }
            }
            private class Context
            {
                public ParsingContext* ctx;
                public FunctionGroupIdNode* value;
                public UniquePtr<Node> typeExpr;
                public Node* fromTypeExpr;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain* parsingDomain = GetParsingDomain();
            Grammar* grammar0 = parsingDomain->GetGrammar("System.Text.Parsing.stdlib");
            if (grammar0 == null)
            {
                grammar0 = System.Text.Parsing.stdlib.Create(parsingDomain);
            }
            AddGrammarReference(grammar0);
            Grammar* grammar1 = parsingDomain->GetGrammar("Cm.Parser.ConceptGrammar");
            if (grammar1 == null)
            {
                grammar1 = Cm.Parser.ConceptGrammar.Create(parsingDomain);
            }
            AddGrammarReference(grammar1);
            Grammar* grammar2 = parsingDomain->GetGrammar("Cm.Parser.KeywordGrammar");
            if (grammar2 == null)
            {
                grammar2 = Cm.Parser.KeywordGrammar.Create(parsingDomain);
            }
            AddGrammarReference(grammar2);
            Grammar* grammar3 = parsingDomain->GetGrammar("Cm.Parser.ParameterGrammar");
            if (grammar3 == null)
            {
                grammar3 = Cm.Parser.ParameterGrammar.Create(parsingDomain);
            }
            AddGrammarReference(grammar3);
            Grammar* grammar4 = parsingDomain->GetGrammar("Cm.Parser.SpecifierGrammar");
            if (grammar4 == null)
            {
                grammar4 = Cm.Parser.SpecifierGrammar.Create(parsingDomain);
            }
            AddGrammarReference(grammar4);
            Grammar* grammar5 = parsingDomain->GetGrammar("Cm.Parser.TypeExprGrammar");
            if (grammar5 == null)
            {
                grammar5 = Cm.Parser.TypeExprGrammar.Create(parsingDomain);
            }
            AddGrammarReference(grammar5);
            Grammar* grammar6 = parsingDomain->GetGrammar("Cm.Parser.StatementGrammar");
            if (grammar6 == null)
            {
                grammar6 = Cm.Parser.StatementGrammar.Create(parsingDomain);
            }
            AddGrammarReference(grammar6);
            Grammar* grammar7 = parsingDomain->GetGrammar("Cm.Parser.TemplateGrammar");
            if (grammar7 == null)
            {
                grammar7 = Cm.Parser.TemplateGrammar.Create(parsingDomain);
            }
            AddGrammarReference(grammar7);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("TypeExpr", this, "TypeExprGrammar.TypeExpr"));
            AddRuleLink(new RuleLink("Specifiers", this, "SpecifierGrammar.Specifiers"));
            AddRuleLink(new RuleLink("spaces_and_comments", this, "System.Text.Parsing.stdlib.spaces_and_comments"));
            AddRuleLink(new RuleLink("TemplateParameterList", this, "TemplateGrammar.TemplateParameterList"));
            AddRuleLink(new RuleLink("ParameterList", this, "ParameterGrammar.ParameterList"));
            AddRuleLink(new RuleLink("Keyword", this, "KeywordGrammar.Keyword"));
            AddRuleLink(new RuleLink("WhereConstraint", this, "ConceptGrammar.WhereConstraint"));
            AddRuleLink(new RuleLink("CompoundStatement", this, "StatementGrammar.CompoundStatement"));
            AddRuleLink(new RuleLink("identifier", this, "System.Text.Parsing.stdlib.identifier"));
            AddRule(new FunctionRule("Function", GetScope(),
                new SequenceParser(
                    new ActionParser("A0",
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new SequenceParser(
                                            new NonterminalParser("Specifiers", "Specifiers", 0),
                                            new NonterminalParser("TypeExpr", "TypeExpr", 1)),
                                        new ActionParser("A1",
                                            new NonterminalParser("FunctionGroupId", "FunctionGroupId", 1))),
                                    new OptionalParser(
                                        new NonterminalParser("TemplateParameterList", "TemplateParameterList", 2))),
                                new NonterminalParser("ParameterList", "ParameterList", 2)),
                            new OptionalParser(
                                new ActionParser("A2",
                                    new NonterminalParser("WhereConstraint", "WhereConstraint", 1))))),
                    new ActionParser("A3",
                        new AlternativeParser(
                            new NonterminalParser("CompoundStatement", "CompoundStatement", 1),
                            new CharParser(';'))))));
            AddRule(new FunctionGroupIdRule("FunctionGroupId", GetScope(),
                new AlternativeParser(
                    new ActionParser("A0",
                        new TokenParser(
                            new DifferenceParser(
                                new NonterminalParser("identifier", "identifier", 0),
                                new NonterminalParser("Keyword", "Keyword", 0))
                            )),
                    new ActionParser("A1",
                        new NonterminalParser("OperatorFunctionGroupId", "OperatorFunctionGroupId", 1)))));
            AddRule(new OperatorFunctionGroupIdRule("OperatorFunctionGroupId", GetScope(),
                new SequenceParser(
                    new KeywordParser("operator"),
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new AlternativeParser(
                                            new AlternativeParser(
                                                new AlternativeParser(
                                                    new AlternativeParser(
                                                        new AlternativeParser(
                                                            new AlternativeParser(
                                                                new AlternativeParser(
                                                                    new AlternativeParser(
                                                                        new AlternativeParser(
                                                                            new AlternativeParser(
                                                                                new AlternativeParser(
                                                                                    new AlternativeParser(
                                                                                        new AlternativeParser(
                                                                                            new AlternativeParser(
                                                                                                new ActionParser("A0",
                                                                                                    new DifferenceParser(
                                                                                                        new StringParser("<<"),
                                                                                                        new SequenceParser(
                                                                                                            new SequenceParser(
                                                                                                                new SequenceParser(
                                                                                                                    new CharParser('<'),
                                                                                                                    new CharParser('<')),
                                                                                                                new ListParser(
                                                                                                                    new ActionParser("A1",
                                                                                                                        new NonterminalParser("TypeExpr", "TypeExpr", 1)),
                                                                                                                    new CharParser(','))),
                                                                                                            new CharParser('>')))
                                                                                                    ),
                                                                                                new ActionParser("A2",
                                                                                                    new StringParser(">>"))),
                                                                                            new ActionParser("A3",
                                                                                                new StringParser("=="))),
                                                                                        new ActionParser("A4",
                                                                                            new CharParser('='))),
                                                                                    new ActionParser("A5",
                                                                                        new CharParser('<'))),
                                                                                new ActionParser("A6",
                                                                                    new StringParser("++"))),
                                                                            new ActionParser("A7",
                                                                                new StringParser("--"))),
                                                                        new ActionParser("A8",
                                                                            new StringParser("->"))),
                                                                    new ActionParser("A9",
                                                                        new CharParser('+'))),
                                                                new ActionParser("A10",
                                                                    new CharParser('-'))),
                                                            new ActionParser("A11",
                                                                new CharParser('*'))),
                                                        new ActionParser("A12",
                                                            new CharParser('/'))),
                                                    new ActionParser("A13",
                                                        new CharParser('%'))),
                                                new ActionParser("A14",
                                                    new CharParser('&'))),
                                            new ActionParser("A15",
                                                new CharParser('|'))),
                                        new ActionParser("A16",
                                            new CharParser('^'))),
                                    new ActionParser("A17",
                                        new CharParser('!'))),
                                new ActionParser("A18",
                                    new CharParser('~'))),
                            new ActionParser("A19",
                                new StringParser("[]"))),
                        new ActionParser("A20",
                            new StringParser("()"))))));
            SetSkipRuleName("spaces_and_comments");
        }
    }
}
