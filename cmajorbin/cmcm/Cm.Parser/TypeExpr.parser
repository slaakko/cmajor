/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using Cm.Ast;

namespace Cm.Parser
{
    grammar TypeExprGrammar
    {
        using BasicTypeGrammar.BasicType;
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.QualifiedId;
        using TemplateGrammar.TemplateId;
        using ExpressionGrammar.Expression;
        
        TypeExpr(ParsingContext* ctx, var UniquePtr<DerivedTypeExprNode> node) : Node*
            ::= empty{ ctx->BeginParsingTypeExpr(); node.Reset(new DerivedTypeExprNode(span)); }
                PrefixTypeExpr(ctx, node.GetPtr()){ node->GetSpan().SetEnd(span.End()); value = MakeTypeExprNode(node.Release()); ctx->EndParsingTypeExpr(); } / { ctx->EndParsingTypeExpr(); }
            ;
            
        PrefixTypeExpr(ParsingContext* ctx, DerivedTypeExprNode* node)
            ::= keyword("const"){ node->AddConst(); } PostfixTypeExpr(ctx, node):c
            |   PostfixTypeExpr(ctx, node)
            ;
            
        PostfixTypeExpr(ParsingContext* ctx, DerivedTypeExprNode* node, var Span s)
            ::= PrimaryTypeExpr(ctx, node){ s = span; }
            (   '.' Identifier:dotMemberId!{ s.SetEnd(span.End()); node->SetBaseTypeExpr(new DotNode(s, node->ReleaseBaseTypeExprNode(), dotMemberId)); }
            |   "&&"{ node->AddRvalueRef(); }
            |   "&"{ node->AddReference(); }
            |   "*"{ node->AddPointer(); }
            |   '['{ node->AddArray(); } Expression(ctx):dim{ node->AddArrayDimensionNode(dim); } ']'
            )*
            ;
            
        PrimaryTypeExpr(ParsingContext* ctx, DerivedTypeExprNode* node)
            ::= BasicType{ node->SetBaseTypeExpr(BasicType); }
            |   TemplateId(ctx){ node->SetBaseTypeExpr(TemplateId); }
            |   Identifier{ node->SetBaseTypeExpr(Identifier); }
            |   '('{ node->AddLeftParen(); } PrefixTypeExpr(ctx, node) ')'{ node->AddRightParen(); }
            ;
    }
}
