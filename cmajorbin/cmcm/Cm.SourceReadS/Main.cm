/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.IO;
using Cm.Ast;
using Cm.Parser;

namespace Cm.SourceRead
{
    internal void ReadCompileUnit(CompileUnitGrammar* compileUnitGrammar, const string& sourceFilePath)
    {
        string content(ReadFile(sourceFilePath));
        Console.Out() << "> " << sourceFilePath << " : " << endl();
    }
    
    internal void ReadProject(ProjectGrammar* projectGrammar, CompileUnitGrammar* compileUnitGrammar, const string& projectFilePath)
    {
        FileMapping projectFile(projectFilePath);
        UniquePtr<Project> project(projectGrammar->Parse(projectFile.Begin(), projectFile.End(), 0, projectFilePath, "debug", "llvm", "windows"));
        project->ResolveDeclarations();
        Console.Out() << projectFilePath << ": " << project->Name() << endl();
        Console.Out() << "===============================================================" << endl();
        for (const string& sourceFilePath : project->SourceFilePaths())
        {
            ReadCompileUnit(compileUnitGrammar, sourceFilePath);
        }
        Console.Out() << "===============================================================" << endl();
    }
    
    internal void ReadSolution(SolutionGrammar* solutionGrammar, ProjectGrammar* projectGrammar, CompileUnitGrammar* compileUnitGrammar, const string& solutionFilePath)
    {
        FileMapping solutionFile(solutionFilePath);
        UniquePtr<Solution> solution(solutionGrammar->Parse(solutionFile.Begin(), solutionFile.End(), 0, solutionFilePath));
        solution->ResolveDeclarations();
        Console.Out() << solutionFilePath << ": " << solution->Name() << endl();
        Console.Out() << "===============================================================" << endl();
        for (const string& projectFilePath : solution->ProjectFilePaths())
        {
            ReadProject(projectGrammar, compileUnitGrammar, projectFilePath);
        }
        Console.Out() << "===============================================================" << endl();
    }
}

const char* Version() 
{
    return "1.0";
}

internal int main(int argc, const char** argv)
{
    if (argc < 2)
    {
        Console.Out() << "Cmajor Source Reader String version " << Version() << endl();
        Console.Out() << "usage: cmsreads { file.cms | file.cmp | file.cm }" << endl();
        return 0;
    }
    try
    {
        SolutionGrammar* solutionGrammar = SolutionGrammar.Create();
        ProjectGrammar* projectGrammar = ProjectGrammar.Create();
        CompileUnitGrammar* compileUnitGrammar = CompileUnitGrammar.Create();
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            string ext = Path.GetExtension(arg);
            if (ext == ".cms")
            {
                Cm.SourceRead.ReadSolution(solutionGrammar, projectGrammar, compileUnitGrammar, arg);
            }
            else if (ext == ".cmp")
            {
                Cm.SourceRead.ReadProject(projectGrammar, compileUnitGrammar, arg);
            }
            else if (ext == ".cm")
            {
                Cm.SourceRead.ReadCompileUnit(compileUnitGrammar, arg);
            }
            else
            {
                throw Exception("argument '" + arg + "' is not Cmajor solution, project or source file");
            }
        }
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        return 1;
    }
    return 0;
}
