/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;

namespace Cm.Core
{
    public class GlobalSettings
    {
        static nothrow GlobalSettings() : instance(new GlobalSettings())
        {
        }
        public static nothrow GlobalSettings& Instance()
        {
            return *instance;
        }
        private nothrow GlobalSettings() : config("debug"), optimizationLevel(-1)
        {
        }
        public nothrow void SetCurrentProjectName(const string& currentProjectName_)
        {
            currentProjectName = currentProjectName_;
        }
        public nothrow const string& CurrentProjectName() const
        {
            return currentProjectName;
        }
        public nothrow void SetConfig(const string& config_)
        {
            config = config_;
        }
        public nothrow const string& Config() const
        {
            return config;
        }
        public nothrow void SetOptimizationLevel(int optimizationLevel_)
        {
            optimizationLevel = optimizationLevel_;
        }
        public nothrow int OptimizationLevel() const
        {
            if (optimizationLevel == -1)
            {
                if (config == "debug")
                {
                    return 0;
                }
                else if (config == "release" || config == "profile" || config == "full")
                {
                    return 3;
                }
                else
                {
                    return 0;
                }
            }
            return optimizationLevel;
        }
        public nothrow void SetTargetTriple(const string& targetTriple_)
        {
            targetTriple = targetTriple_;
        }
        public nothrow const string& TargetTriple() const
        {
            return targetTriple;
        }
        public nothrow void SetDatalayout(const string& datalayout_)
        {
            datalayout = datalayout_;
        }
        public nothrow const string& DataLayout() const
        {
            return datalayout;
        }
        public nothrow void SetClassHierarchyDotFileName(const string& classHierarchyDotFileName_)
        {
            classHierarchyDotFileName = classHierarchyDotFileName_;
        }
        public nothrow const string& ClassHierarchyDotFileName() const
        {
            return classHierarchyDotFileName;
        }
        public nothrow void SetTpgDotFileName(const string& tpgDotFileName_)
        {
            tpgDotFileName = tpgDotFileName_;
        }
        public nothrow const string& TpgDotFileName() const
        {
            return tpgDotFileName;
        }
        public nothrow void SetVirtualCallFilename(const string& virtualCallFileName_)
        {
            virtualCallFileName = virtualCallFileName_;
        }
        public nothrow const string& VirtualCallFileName() const
        {
            return virtualCallFileName;
        }
        public nothrow const Cm.Ast.ProgramVersion& GetLlvmVersion() const
        {
            return llvmVersion;
        }
        public nothrow void SetLlvmVersion(const Cm.Ast.ProgramVersion& llvmVersion_)
        {
            llvmVersion = llvmVersion_;
        }
        private static UniquePtr<GlobalSettings> instance;
        private string currentProjectName;
        private string config;
        private int optimizationLevel;
        private string targetTriple;
        private string datalayout;
        private string classHierarchyDotFileName;
        private string tpgDotFileName;
        private string virtualCallFileName;
        private Cm.Ast.ProgramVersion llvmVersion;
    }
    
    public nothrow const string& GetConfig()
    {
        return GlobalSettings.Instance().Config();
    }
}
