/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using CodeFormatter = System.Text.CodeFormatter;

namespace Cm.Core
{
    public abstract class IrInterfaceTypeRepository
    {
        public virtual ~IrInterfaceTypeRepository()
        {
        }
        public void Add(Cm.Sym.InterfaceTypeSymbol* interfaceType)
        {
            interfaceTypes.Insert(interfaceType);
        }
        public nothrow inline HashSet<Cm.Sym.InterfaceTypeSymbol*>& InterfaceTypes() const
        {
            return interfaceTypes;
        }
        public abstract void Write(CodeFormatter& codeFormatter);
        private HashSet<Cm.Sym.InterfaceTypeSymbol*> interfaceTypes;
    }
    
    public class LlvmIrInterfaceTypeRepository : IrInterfaceTypeRepository
    {
        public override void Write(CodeFormatter& formatter) 
        {
            for (Cm.Sym.InterfaceTypeSymbol* intf : InterfaceTypes())
            {
                string tagName = intf->GetMangleId() + "_";
                List<Ir.Intf.Type*> memberTypes;
                List<string> memberNames;
                for (const Cm.Sym.MemberVariableSymbol* memberVar : intf->MemberVars())
                {
                    memberTypes.Add(memberVar->GetType()->IrType()->Clone());
                    memberNames.Add(memberVar->Name());
                }
                UniquePtr<Ir.Intf.Type> irTypeDeclaration(Cm.IrIntf.Structure(tagName, memberTypes, memberNames));
                string typeDeclaration = intf->IrType()->Name() + " = type " + irTypeDeclaration->Name();
                formatter.WriteLine(typeDeclaration);
            }
        }
    }

    public class CIrInterfaceTypeRepository : IrInterfaceTypeRepository
    {
        public override void Write(CodeFormatter& formatter) 
        {
            for (Cm.Sym.InterfaceTypeSymbol* intf : InterfaceTypes())
            {
                string tagName = intf->GetMangleId() + "_";
                List<Ir.Intf.Type*> memberTypes;
                List<string> memberNames;
                for (const Cm.Sym.MemberVariableSymbol* memberVar : intf->MemberVars())
                {
                    memberTypes.Add(memberVar->GetType()->IrType()->Clone());
                    memberNames.Add(memberVar->Name());
                }
                UniquePtr<Ir.Intf.Type> irTypeDeclaration(Cm.IrIntf.Structure(tagName, memberTypes, memberNames));
                UniquePtr<Ir.Intf.Type> typeName(Cm.IrIntf.CreateClassTypeName(intf->FullName()));
                formatter.WriteLine("typedef struct " + intf->GetMangleId() + "_" + typeName->Name() + ";");
                formatter.WriteLine("typedef " + irTypeDeclaration->Name() + " " + typeName->Name() + ";");
            }
        }
    }
}
