/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.Core
{
    public class GlobalConceptData
    {
        public static void SetInstance(GlobalConceptData* instance_)
        {
            instance = instance_;
        }
        public static GlobalConceptData* Instance() 
        {
            return instance;
        }
        public GlobalConceptData()
        {
            intrinsicConcepts.Add(UniquePtr<Cm.Ast.ConceptNode>(new Cm.Ast.SameConceptNode()));
            intrinsicConcepts.Add(UniquePtr<Cm.Ast.ConceptNode>(new Cm.Ast.DerivedConceptNode()));
            intrinsicConcepts.Add(UniquePtr<Cm.Ast.ConceptNode>(new Cm.Ast.ConvertibleConceptNode()));
            intrinsicConcepts.Add(UniquePtr<Cm.Ast.ConceptNode>(new Cm.Ast.ExplicitlyConvertibleConceptNode()));
            intrinsicConcepts.Add(UniquePtr<Cm.Ast.ConceptNode>(new Cm.Ast.CommonConceptNode()));
            memberFunctionGroups.Insert("operator<<");
            memberFunctionGroups.Insert("operator>>");
            memberFunctionGroups.Insert("operator==");
            memberFunctionGroups.Insert("operator=");
            memberFunctionGroups.Insert("operator<");
            memberFunctionGroups.Insert("operator++");
            memberFunctionGroups.Insert("operator--");
            memberFunctionGroups.Insert("operator->");
            memberFunctionGroups.Insert("operator+");
            memberFunctionGroups.Insert("operator-");
            memberFunctionGroups.Insert("operator*");
            memberFunctionGroups.Insert("operator/");
            memberFunctionGroups.Insert("operator%");
            memberFunctionGroups.Insert("operator&");
            memberFunctionGroups.Insert("operator|");
            memberFunctionGroups.Insert("operator^");
            memberFunctionGroups.Insert("operator!");
            memberFunctionGroups.Insert("operator~");
            memberFunctionGroups.Insert("operator[]");
            memberFunctionGroups.Insert("operator()");
        }
        public void AddIntrinsicConceptsToSymbolTable(Cm.Sym.SymbolTable& symbolTable)
        {
            for (const UniquePtr<Cm.Ast.ConceptNode>& conceptNode : intrinsicConcepts)
            {
                Cm.Sym.ConceptSymbol* intrinsicConceptSymbol = symbolTable.BeginConceptScope(conceptNode.GetPtr());
                intrinsicConceptSymbol->SetIntrinsicConcept();
                symbolTable.EndConceptScope();
            }
        }
        public bool IsMemberFunctionGroup(const string& groupName) const
        {
            return memberFunctionGroups.CFind(groupName) != memberFunctionGroups.CEnd();
        }
        private static GlobalConceptData* instance;
        private List<UniquePtr<Cm.Ast.ConceptNode>> intrinsicConcepts;
        private HashSet<string> memberFunctionGroups;
    }
}
