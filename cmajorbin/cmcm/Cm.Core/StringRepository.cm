/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using CodeFormatter = System.Text.CodeFormatter;

namespace Cm.Core
{
    public abstract class StringRepository
    {
        public virtual ~StringRepository()
        {
        }
        public int Install(const string& str)
        {
            HashMap<string, int>.ConstIterator i = stringIntMap.CFind(str);
            if (i != stringIntMap.CEnd())
            {
                return i->second;
            }
            int id = stringObjects.Count();
            Ir.Intf.Object* stringConstant = Cm.IrIntf.MakeStringConstant(str);
            stringConstant->SetOwned();
            stringConstants.Add(UniquePtr<Ir.Intf.Object>(stringConstant));
            string stringObjectName = Cm.IrIntf.GetStringValuePrefix() + ToString(id);
            Ir.Intf.Object* stringObject = Cm.IrIntf.MakeGlobal(stringObjectName, stringConstant->GetType());
            stringObject->SetOwned();
            stringObjects.Add(UniquePtr<Ir.Intf.Object>(stringObject));
            stringIntMap[str] = id;
            return id;
        }
        public nothrow inline Ir.Intf.Object* GetStringConstant(int id) const
        {
            #assert(id >= 0 && id < stringConstants.Count());
            return stringConstants[id].GetPtr();
        }    
        public nothrow inline Ir.Intf.Object* GetStringObject(int id) const
        {
            #assert(id >= 0 && id < stringObjects.Count());
            return stringObjects[id].GetPtr();
        }
        public abstract void Write(CodeFormatter& codeFormatter);
        protected inline const List<UniquePtr<Ir.Intf.Object>>& StringConstants() const
        {
            return stringConstants;
        }
        protected inline const List<UniquePtr<Ir.Intf.Object>>& StringObjects() const
        {
            return stringObjects;
        }
        private HashMap<string, int> stringIntMap;
        private List<UniquePtr<Ir.Intf.Object>> stringConstants;
        private List<UniquePtr<Ir.Intf.Object>> stringObjects;
    }
    
    public class LlvmStringRepository : StringRepository
    {
        public override void Write(CodeFormatter& codeFormatter)
        {
            int n = StringObjects().Count();
            for (int i = 0; i < n; ++i)
            {
                Ir.Intf.Object* stringObject = StringObjects()[i].GetPtr();
                Ir.Intf.Object* stringConstant = StringConstants()[i].GetPtr();
                codeFormatter.WriteLine(stringObject->Name() + " = private unnamed_addr constant " + stringConstant->GetType()->Name() + " " + stringConstant->Name());
            }
        }
    }

    public class CStringRepository : StringRepository
    {
        public override void Write(CodeFormatter& codeFormatter)
        {
            int n = StringObjects().Count();
            for (int i = 0; i < n; ++i)
            {
                Ir.Intf.Object* stringObject = StringObjects()[i].GetPtr();
                Ir.Intf.Object* stringConstant = StringConstants()[i].GetPtr();
                codeFormatter.WriteLine("static " + stringConstant->GetType()->Name() + " " + stringObject->Name() + " = " + stringConstant->Name() + ";");
            }
        }
    }
}
