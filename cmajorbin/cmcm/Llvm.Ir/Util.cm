/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;

namespace Llvm
{
    public inline void Init(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Object* from, Ir.Intf.Object* to)
    {
        from->InitTo(emitter, type, to);
    }
    
    public inline void Assign(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Object* from, Ir.Intf.Object* to)
    {
        from->AssignTo(emitter, type, to);
    }
    
    public Ir.Intf.Object* SizeOf(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type)
    {
        PointerType* ptrType = MakePointerType(type);
        emitter.Own(ptrType);
        Ir.Intf.Object* ptrSize = MakeTemporaryRegVar(ptrType);
        emitter.Own(ptrSize);
        Ir.Intf.Object* null_ = MakeNull(ptrType);
        emitter.Own(null_);
        Ir.Intf.Object* one = MakeI64Constant(1);
        emitter.Own(one);
        emitter.Emit(GetElementPtr(ptrType, ptrSize, null_, one));
        Ir.Intf.Object* size = MakeTemporaryRegVar(Ir.Intf.Factory.Instance()->GetI64());
        emitter.Own(size);
        emitter.Emit(Ptrtoint(ptrType, size, ptrSize, Ir.Intf.Factory.Instance()->GetI64()));
        return size;
    }
}
