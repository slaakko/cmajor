/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;

namespace Llvm
{
    public class RefVar : Ir.Intf.RefVar
    {
        public nothrow RefVar(const string& name_, Ir.Intf.Type* pointerType_) : base("%" + name_, pointerType_)
        {
        }
        public override void InitTo(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Object* to)
        {
            to->InitFrom(emitter, type, *this);
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Constant& constant)
        {
            ThrowNotImplemented();
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Global& global)
        {
            emitter.Emit(Store(type, &global, this));
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.RegVar& regVar)
        {
            Ir.Intf.Type* ptrType = MakePointerType(type);
            emitter.Own(ptrType);
            if (GetType()->Name() == ptrType->Name())
            {
                emitter.Emit(Store(type, &regVar, this));
            }
            else
            {
                Ir.Intf.RegVar* reg = MakeTemporaryRegVar(ptrType);
                emitter.Own(reg);
                emitter.Own(reg);
                emitter.Emit(Store(type, &regVar, reg));
            }
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.StackVar& stackVar)
        {
            emitter.Emit(Store(type, &stackVar, this));
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.MemberVar& memberVar)
        {
            Ir.Intf.Type* ptrType = MakePointerType(type);
            emitter.Own(ptrType);
            Ir.Intf.Object* ptr = MakeTemporaryRegVar(ptrType);
            emitter.Own(ptr);
            Ir.Intf.Object* zero = MakeI32Constant(0);
            emitter.Own(zero);
            Ir.Intf.Object* index = MakeI32Constant(memberVar.Index());
            emitter.Own(index);
            emitter.Emit(GetElementPtr(memberVar.Ptr()->GetType(), ptr, memberVar.Ptr(), zero, index));
            emitter.Emit(Store(type, ptr, this));
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.RefVar& refVar)
        {
            PointerType* ptrType = MakePointerType(type);
            emitter.Own(ptrType);
            Ir.Intf.RegVar* refReg = MakeTemporaryRegVar(ptrType);
            emitter.Own(refReg);
            emitter.Emit(Load(ptrType, refReg, &refVar));
            emitter.Emit(Store(type, refReg, this));
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Parameter& parameter)
        {
            emitter.Emit(Store(type, &parameter, this));
        }
        public override void AssignTo(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Object* to)
        {
            to->AssignFrom(emitter, type, *this);
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Constant& constant)
        {
            PointerType* ptrType = MakePointerType(type);
            emitter.Own(ptrType);
            Ir.Intf.RegVar* reg = MakeTemporaryRegVar(ptrType);
            emitter.Own(reg);
            emitter.Emit(Load(type, reg, this));
            emitter.Emit(Store(type, &constant, reg));
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Global& global)
        {
            PointerType* ptrType = MakePointerType(type);
            emitter.Own(ptrType);
            Ir.Intf.RegVar* reg = MakeTemporaryRegVar(ptrType);
            emitter.Own(reg);
            emitter.Emit(Load(ptrType, reg, &global));
            Ir.Intf.RegVar* ptr = MakeTemporaryRegVar(ptrType);
            emitter.Own(ptr);
            emitter.Emit(Load(type, ptr, this));
            emitter.Emit(Store(type, reg, ptr));
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.RegVar& regVar)
        {
            PointerType* ptrType = MakePointerType(type);
            emitter.Own(ptrType);
            Ir.Intf.RegVar* reg = MakeTemporaryRegVar(ptrType);
            emitter.Own(reg);
            PointerType* ptrPtrType = MakePointerType(ptrType);
            emitter.Own(ptrPtrType);
            emitter.Emit(Load(ptrPtrType, reg, this));
            emitter.Emit(Store(type, &regVar, reg));
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.StackVar& stackVar)
        {
            PointerType* ptrType = MakePointerType(type);
            emitter.Own(ptrType);
            Ir.Intf.RegVar* reg = MakeTemporaryRegVar(ptrType);
            emitter.Own(reg);
            emitter.Emit(Load(type, reg, &stackVar));
            Ir.Intf.RegVar* ptr = MakeTemporaryRegVar(ptrType);
            emitter.Own(ptr);
            emitter.Emit(Load(type, ptr, this));
            emitter.Emit(Store(type, reg, ptr));
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.MemberVar& memberVar)
        {
            PointerType* ptrType = MakePointerType(type);
            emitter.Own(ptrType);
            Ir.Intf.RegVar* ptr = MakeTemporaryRegVar(ptrType);
            emitter.Own(ptr);
            Ir.Intf.Object* zero = MakeI32Constant(0);
            emitter.Own(zero);
            Ir.Intf.Object* index = MakeI32Constant(memberVar.Index());
            emitter.Own(index);
            emitter.Emit(GetElementPtr(memberVar.Ptr()->GetType(), ptr, memberVar.Ptr(), zero, index));
            Ir.Intf.RegVar* value = MakeTemporaryRegVar(type);
            emitter.Own(value);
            emitter.Emit(Load(type, value, ptr));
            Ir.Intf.RegVar* refPtr = MakeTemporaryRegVar(ptrType);
            emitter.Own(refPtr);
            emitter.Emit(Load(ptrType, refPtr, this));
            emitter.Emit(Store(type, value, refPtr));
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.RefVar& refVar)
        {
            PointerType* ptrType = MakePointerType(type);
            emitter.Own(ptrType);
            Ir.Intf.RegVar* refReg = MakeTemporaryRegVar(ptrType);
            emitter.Own(refReg);
            emitter.Emit(Load(ptrType, refReg, &refVar));
            Ir.Intf.RegVar* reg = MakeTemporaryRegVar(type);
            emitter.Own(reg);
            emitter.Emit(Load(type, reg, refReg));
            Ir.Intf.RegVar* ptr = MakeTemporaryRegVar(ptrType);
            emitter.Own(ptr);
            emitter.Emit(Load(ptrType, ptr, this));
            emitter.Emit(Store(type, reg, ptr));
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Parameter& parameter)
        {
            ThrowNotImplemented();
        }
        public override Ir.Intf.Object* CreateAddr(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type)
        {
            PointerType* ptrType = MakePointerType(type);
            emitter.Own(ptrType);
            Ir.Intf.RegVar* refReg = MakeTemporaryRegVar(ptrType);
            emitter.Own(refReg);
            emitter.Emit(Load(ptrType, refReg, this));
            return refReg;
        }
    }
}
