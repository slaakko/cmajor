/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;

namespace C
{
    public class StackVar : Ir.Intf.StackVar
    {
        public nothrow StackVar(const string& name_, Ir.Intf.Type* pointerType_) : base("_V_" + name_, pointerType_)
        {
        }
        public override void InitTo(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Object* to)
        {
            to->InitFrom(emitter, type, *this);
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Constant& constant)
        {
            emitter.Emit(Store(type, &constant, this, Ir.Intf.Indirection.none, Ir.Intf.Indirection.none));
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Global& global)
        {
            emitter.Emit(Store(type, &global, this, Ir.Intf.Indirection.none, Ir.Intf.Indirection.none));
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.RegVar& regVar)
        {
            PointerType* ptrType = MakePointerType(type);
            emitter.Own(ptrType);
            if (regVar.GetType()->Name() == ptrType->Name())
            {
                emitter.Emit(Store(type, &regVar, this, Ir.Intf.Indirection.deref, Ir.Intf.Indirection.none));
            }
            else
            {
                emitter.Emit(Store(type, &regVar, this, Ir.Intf.Indirection.none, Ir.Intf.Indirection.none));
            }
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.StackVar& stackVar)
        {
            PointerType* ptrType = MakePointerType(stackVar.GetType());
            emitter.Own(ptrType);
            if (GetType()->Name() == ptrType->Name())
            {
                emitter.Emit(Load(type, this, &stackVar, Ir.Intf.Indirection.none, Ir.Intf.Indirection.addr));
            }
            else
            {
                emitter.Emit(Store(type, &stackVar, this, Ir.Intf.Indirection.none, Ir.Intf.Indirection.none));
            }
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.MemberVar& memberVar)
        {
            emitter.Emit(Store(type, &memberVar, this, Ir.Intf.Indirection.none, Ir.Intf.Indirection.none));
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.RefVar& refVar)
        {
            emitter.Emit(Store(type, &refVar, this, Ir.Intf.Indirection.deref, Ir.Intf.Indirection.none));
        }
        public override void InitFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Parameter& parameter)
        {
            emitter.Emit(Store(type, &parameter, this, Ir.Intf.Indirection.none, Ir.Intf.Indirection.none));
        }
        public override void AssignTo(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Object* to)
        {
            to->AssignFrom(emitter, type, *this);
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Constant& constant)
        {
            emitter.Emit(Store(type, &constant, this, Ir.Intf.Indirection.none, Ir.Intf.Indirection.none));
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Global& global)
        {
            emitter.Emit(Store(type, &global, this, Ir.Intf.Indirection.none, Ir.Intf.Indirection.none));
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.RegVar& regVar)
        {
            emitter.Emit(Store(type, &regVar, this, Ir.Intf.Indirection.none, Ir.Intf.Indirection.none));
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.StackVar& stackVar)
        {
            PointerType* ptrType = MakePointerType(stackVar.GetType());
            emitter.Own(ptrType);
            if (stackVar.GetType()->Name() == ptrType->Name())
            {
                emitter.Emit(Store(type, &stackVar, this, Ir.Intf.Indirection.deref, Ir.Intf.Indirection.none));
            }
            else
            {
                emitter.Emit(Store(type, &stackVar, this, Ir.Intf.Indirection.none, Ir.Intf.Indirection.none));
            }
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.MemberVar& memberVar)
        {
            emitter.Emit(Store(type, &memberVar, this, Ir.Intf.Indirection.none, Ir.Intf.Indirection.none));
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.RefVar& refVar)
        {
            emitter.Emit(Store(type, &refVar, this, Ir.Intf.Indirection.deref, Ir.Intf.Indirection.none));
        }
        public override void AssignFrom(Ir.Intf.Emitter& emitter, Ir.Intf.Type* type, Ir.Intf.Parameter& parameter)
        {
            emitter.Emit(Store(type, &parameter, this, Ir.Intf.Indirection.none, Ir.Intf.Indirection.none));
        }
        public override Ir.Intf.Object* CreateAddr(Ir.Intf.Emitter& emitter, Ir.Intf.Type* pointerType)
        {
            return this;
        }
    }
}
