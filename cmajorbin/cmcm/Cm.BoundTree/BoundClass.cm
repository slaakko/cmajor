/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.BoundTree
{
    public class BoundClass : BoundNode
    {
        public nothrow BoundClass() : base(), classTypeSymbol(null)
        {
        }
        public nothrow BoundClass(Cm.Sym.ClassTypeSymbol* classTypeSymbol_, Cm.Ast.ClassNode* classNode_) : base(classNode_), classTypeSymbol(classTypeSymbol_)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            for (const UniquePtr<BoundNode>& member : members)
            {
                member->Accept(visitor);
            }
            visitor.EndVisit(*this);
        }
        public void AddMember(BoundNode* member)
        {
            members.Add(UniquePtr<BoundNode>(member));
        }
        public nothrow inline Cm.Sym.ClassTypeSymbol* Symbol() const
        {
            return classTypeSymbol;
        }
        private Cm.Sym.ClassTypeSymbol* classTypeSymbol;
        private List<UniquePtr<BoundNode>> members;
    }
}
