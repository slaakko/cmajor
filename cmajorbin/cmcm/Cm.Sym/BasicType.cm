/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public enum ShortBasicTypeId : byte
    {
        boolId = 1u, charId, wcharId, ucharId, voidId, sbyteId, byteId, shortId, ushortId, intId, uintId, longId, ulongId, floatId, doubleId, nullPtrId, max
    }
    
    public abstract class BasicTypeSymbol : TypeSymbol
    {
        public nothrow BasicTypeSymbol(const string& name_, ShortBasicTypeId id_) : base(Span(), name_, TypeId(id_))
        {
            SetBound();
            SetSource(SymbolSource.library);
            SetPublic();
        }
        public nothrow override const char* TypeString() const
        {
            return "basic type";
        }
        public nothrow override SymbolAccess DeclaredAccess() const
        {
            return SymbolAccess.public_;
        }
        public nothrow override bool IsValueTypeSymbol() const
        {
            return true;
        }
    }
    
    public class BoolTypeSymbol : BasicTypeSymbol
    {
        public BoolTypeSymbol() : base("bool", ShortBasicTypeId.boolId)
        {
            SetIrType(Cm.IrIntf.I1());
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.boolSymbol;
        }
        public override string GetMangleId() const
        {
            return "bo";
        }
    }
    
    public class CharTypeSymbol : BasicTypeSymbol
    {
        public CharTypeSymbol() : base("char", ShortBasicTypeId.charId)
        {
            Cm.IrIntf.Backend backend = Cm.IrIntf.GetBackend();
            if (backend == Cm.IrIntf.Backend.llvm)
            {
                SetIrType(Cm.IrIntf.I8());
            }            
            else if (backend == Cm.IrIntf.Backend.c)
            {
                SetIrType(Cm.IrIntf.Char());
            }
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.charSymbol;
        }
        public override string GetMangleId() const
        {
            return "ch";
        }
    }
    
    public class WCharTypeSymbol : BasicTypeSymbol
    {
        public WCharTypeSymbol() : base("wchar", ShortBasicTypeId.wcharId)
        {
            Cm.IrIntf.Backend backend = Cm.IrIntf.GetBackend();
            if (backend == Cm.IrIntf.Backend.llvm)
            {
                SetIrType(Cm.IrIntf.I16());
            }            
            else if (backend == Cm.IrIntf.Backend.c)
            {
                SetIrType(Cm.IrIntf.UI16());
            }
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.wcharSymbol;
        }
        public override string GetMangleId() const
        {
            return "wc";
        }
    }

    public class UCharTypeSymbol : BasicTypeSymbol
    {
        public UCharTypeSymbol() : base("uchar", ShortBasicTypeId.ucharId)
        {
            Cm.IrIntf.Backend backend = Cm.IrIntf.GetBackend();
            if (backend == Cm.IrIntf.Backend.llvm)
            {
                SetIrType(Cm.IrIntf.I32());
            }            
            else if (backend == Cm.IrIntf.Backend.c)
            {
                SetIrType(Cm.IrIntf.UI32());
            }
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.ucharSymbol;
        }
        public override string GetMangleId() const
        {
            return "uc";
        }
    }

    public class VoidTypeSymbol : BasicTypeSymbol
    {
        public VoidTypeSymbol() : base("void", ShortBasicTypeId.voidId)
        {
            SetIrType(Cm.IrIntf.Void());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.voidSymbol;
        }
        public override string GetMangleId() const
        {
            return "vo";
        }
    }

    public class SByteTypeSymbol : BasicTypeSymbol
    {
        public SByteTypeSymbol() : base("sbyte", ShortBasicTypeId.sbyteId)
        {
            SetIrType(Cm.IrIntf.I8());
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.sbyteSymbol;
        }
        public nothrow override bool IsIntegerTypeSymbol() const
        {
            return true;
        }
        public nothrow override bool IsSignedType() const
        {
            return true;
        }
        public override string GetMangleId() const
        {
            return "sb";
        }
    }

    public class ByteTypeSymbol : BasicTypeSymbol
    {
        public ByteTypeSymbol() : base("byte", ShortBasicTypeId.byteId)
        {
            SetIrType(Cm.IrIntf.UI8());
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.byteSymbol;
        }
        public nothrow override bool IsIntegerTypeSymbol() const
        {
            return true;
        }
        public override string GetMangleId() const
        {
            return "by";
        }
    }

    public class ShortTypeSymbol : BasicTypeSymbol
    {
        public ShortTypeSymbol() : base("short", ShortBasicTypeId.shortId)
        {
            SetIrType(Cm.IrIntf.I16());
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.shortSymbol;
        }
        public nothrow override bool IsIntegerTypeSymbol() const
        {
            return true;
        }
        public nothrow override bool IsSignedType() const
        {
            return true;
        }
        public override string GetMangleId() const
        {
            return "sh";
        }
    }

    public class UShortTypeSymbol : BasicTypeSymbol
    {
        public UShortTypeSymbol() : base("ushort", ShortBasicTypeId.ushortId)
        {
            SetIrType(Cm.IrIntf.UI16());
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.ushortSymbol;
        }
        public nothrow override bool IsIntegerTypeSymbol() const
        {
            return true;
        }
        public override string GetMangleId() const
        {
            return "us";
        }
    }

    public class IntTypeSymbol : BasicTypeSymbol
    {
        public IntTypeSymbol() : base("int", ShortBasicTypeId.intId)
        {
            SetIrType(Cm.IrIntf.I32());
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.intSymbol;
        }
        public nothrow override bool IsIntegerTypeSymbol() const
        {
            return true;
        }
        public nothrow override bool IsSignedType() const
        {
            return true;
        }
        public override string GetMangleId() const
        {
            return "in";
        }
    }

    public class UIntTypeSymbol : BasicTypeSymbol
    {
        public UIntTypeSymbol() : base("uint", ShortBasicTypeId.uintId)
        {
            SetIrType(Cm.IrIntf.UI32());
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.uintSymbol;
        }
        public nothrow override bool IsIntegerTypeSymbol() const
        {
            return true;
        }
        public override string GetMangleId() const
        {
            return "ui";
        }
    }
    
    public class LongTypeSymbol : BasicTypeSymbol
    {
        public LongTypeSymbol() : base("long", ShortBasicTypeId.longId)
        {
            SetIrType(Cm.IrIntf.I64());
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.longSymbol;
        }
        public nothrow override bool IsIntegerTypeSymbol() const
        {
            return true;
        }
        public nothrow override bool IsSignedType() const
        {
            return true;
        }
        public override string GetMangleId() const
        {
            return "lo";
        }
    }

    public class ULongTypeSymbol : BasicTypeSymbol
    {
        public ULongTypeSymbol() : base("ulong", ShortBasicTypeId.ulongId)
        {
            SetIrType(Cm.IrIntf.UI64());
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.ulongSymbol;
        }
        public nothrow override bool IsIntegerTypeSymbol() const
        {
            return true;
        }
        public override string GetMangleId() const
        {
            return "ul";
        }
    }

    public class FloatTypeSymbol : BasicTypeSymbol
    {
        public FloatTypeSymbol() : base("float", ShortBasicTypeId.floatId)
        {
            SetIrType(Cm.IrIntf.Float());
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.floatSymbol;
        }
        public nothrow override bool IsFloatingPointTypeSymbol() const
        {
            return true;
        }
        public override string GetMangleId() const
        {
            return "fl";
        }
    }

    public class DoubleTypeSymbol : BasicTypeSymbol
    {
        public DoubleTypeSymbol() : base("double", ShortBasicTypeId.doubleId)
        {
            SetIrType(Cm.IrIntf.Double());
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.doubleSymbol;
        }
        public nothrow override bool IsFloatingPointTypeSymbol() const
        {
            return true;
        }
        public override string GetMangleId() const
        {
            return "do";
        }
    }

    public class NullPtrTypeSymbol : BasicTypeSymbol
    {
        public NullPtrTypeSymbol() : base("@nullptrtype", ShortBasicTypeId.nullPtrId)
        {
            Cm.IrIntf.Backend backend = Cm.IrIntf.GetBackend();
            if (backend == Cm.IrIntf.Backend.llvm)
            {
                SetIrType(Cm.IrIntf.Pointer(Cm.IrIntf.I8(), 1u));
            }
            else if (backend == Cm.IrIntf.Backend.c)
            {
                SetIrType(Cm.IrIntf.Pointer(Cm.IrIntf.Void(), 1u));
            }
            SetDefaultIrValue(IrType()->CreateDefaultValue());
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.nullptrSymbol;
        }
        public override string GetMangleId() const
        {
            return "np";
        }
    }
}
