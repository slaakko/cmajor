/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public class EnumTypeSymbol : TypeSymbol
    {
        public nothrow EnumTypeSymbol(const Span& span_, const string& name_) : base(span_, name_), underlyingType(null)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.enumTypeSymbol;
        }
        public nothrow override const char* TypeString() const
        {
            return "enum type";
        }
        public nothrow override string GetMangleId() const
        {
            return FullName();
            // todo: return MakeAssemblyName(FullName());
        }
        public nothrow override bool IsExportSymbol() const
        {
            if (Parent()->IsClassTemplateSymbol()) return false;
            if (Parent() is TemplateTypeSymbol*) return false;
            return base->IsExportSymbol();
        }
        public nothrow inline TypeSymbol* GetUnderlyingType() const
        {
            return underlyingType;
        }
        public nothrow inline void SetUnderlyingType(TypeSymbol* underlyingType_)
        {
            underlyingType = underlyingType_;
        }
        public override void MakeIrType()
        {
            // todo
        }
        public nothrow override bool IsValueTypeSymbol() const 
        {   
            return true; 
        }
        public override void SetType(TypeSymbol* type, int index)
        {
            SetUnderlyingType(type);
        }
        public override void Read(Reader& reader)
        {
            base->Read(reader);
            reader.FetchTypeFor(this, 0);
            reader.EnqueueMakeIrTypeFor(this);
        }
        public override void Write(Writer& writer)
        {
            base->Write(writer);
            writer.Write(underlyingType->Id());
        }
        private TypeSymbol* underlyingType;
    }
    
    public class EnumConstantSymbol : Symbol
    {
        public nothrow EnumConstantSymbol(const Span& span_, const string& name_) : base(span_, name_), evaluating(false)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.enumConstantSymbol;
        }
        public nothrow override const char* TypeString() const
        {
            return "enum constant";
        }
        public nothrow override bool IsExportSymbol() const
        {
            return true;
        }
        public nothrow override SymbolAccess DeclaredAccess() const
        {
            return SymbolAccess.public_;
        }
        public nothrow inline Value* GetValue() const
        {
            return value.GetPtr();
        }
        public nothrow inline void SetValue(Value* value_)
        {
            value.Reset(value_);
        }
        public nothrow inline bool Evaluating() const
        {
            return evaluating;
        }
        public nothrow inline void SetEvaluating()
        {
            evaluating = true;
        }
        public nothrow inline void ResetEvaluating()
        {
            evaluating = false;
        }
        public override void Read(Reader& reader)
        {
            base->Read(reader);
            SetValue(reader.ReadValue());
        }
        public override void Write(Writer& writer)
        {
            base->Write(writer);
            writer.Write(value.GetPtr());
        }
        private UniquePtr<Value> value;
        private bool evaluating;
    }
}
