/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public class DerivationCounts
    {
        public nothrow DerivationCounts() : consts(0u), refs(0u), rvalueRefs(0u), pointers(0u)
        {
        }
        public nothrow inline void AddConst()
        {
            ++consts;
        }
        public nothrow inline void AddRef()
        {
            ++refs;
        }
        public nothrow inline void AddRvalueRef()
        {
            ++rvalueRefs;
        }
        public nothrow inline void AddPointer()
        {
            ++pointers;
        }
        public nothrow inline byte Consts() const
        {
            return consts;
        }
        public nothrow inline byte Refs() const
        {
            return refs;
        }
        public nothrow inline byte RvalueRefs() const
        {
            return rvalueRefs;
        }
        public nothrow inline byte Pointers() const
        {
            return pointers;
        }
        private byte consts;
        private byte refs;
        private byte rvalueRefs;
        private byte pointers;
    }
    
    public nothrow bool operator<(const DerivationCounts& left, const DerivationCounts& right)
    {
        if (left.Consts() < right.Consts())
        {
            return true;
        }
        else if (left.Consts() > right.Consts())
        {
            return false;
        }
        else if (left.Refs() < right.Refs())
        {
            return true;
        }
        else if (left.Refs() > right.Refs())
        {
            return false;
        }
        else if (left.RvalueRefs() < right.RvalueRefs())
        {
            return true;
        }
        else if (left.RvalueRefs() > right.RvalueRefs())
        {
            return false;
        }
        else if (left.Pointers() < right.Pointers())
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    public abstract class TypeSymbol : ContainerSymbol
    {
        public nothrow TypeSymbol(const Span& span_, const string& name_) : base(span_, name_)
        {
        }
        public nothrow TypeSymbol(const Span& span_, const string& name_, const TypeId& id_) : base(span_, name_), id(id_)
        {
        }
        public override void Read(Reader& reader) 
        {
            base->Read(reader);
            id = reader.ReadTypeId();
            reader.BackpatchType(this);
        }
        public override void Write(Writer& writer)
        {
            base->Write(writer);
            writer.Write(id);
        }
        public nothrow inline const TypeId& Id() const
        {
            return id;
        }
        public nothrow inline void SetId(const TypeId& id_)
        {
            id = id_;
        }
        public nothrow virtual bool IsValueTypeSymbol() const
        {
            return false;
        }
        public nothrow virtual bool IsSignedType() const
        {
            return false;
        }
        public nothrow virtual bool IsAbstract() const
        {
            return false;
        }
        public nothrow virtual TypeSymbol* GetBaseType() const
        {
            return this;
        }
        public nothrow virtual bool IsPointerType() const
        {
            return false;
        }
        public nothrow virtual bool IsFunctionType() const
        {
            return false;
        }
        public nothrow virtual bool IsPointerTypeClassType() const
        {
            return false;
        }
        public nothrow virtual bool IsPointerToTemplateType() const
        {
            return false;
        }
        public nothrow virtual bool IsReferenceType() const
        {
            return false;
        }
        public nothrow virtual bool IsNonConstReferenceType() const
        {
            return false;
        }
        public nothrow virtual bool IsConstType() const
        {
            return false;
        }
        public nothrow virtual bool IsRvalueRefType() const
        {
            return false;
        }
        public nothrow virtual bool IsConstReferenceType() const
        {
            return false;
        }
        public nothrow virtual bool IsNonClassReferenceType() const
        {
            return false;
        }
        public nothrow virtual bool IsNonReferencePointerType() const
        {
            return false;
        }
        public nothrow virtual bool IsVoidPtrType() const
        {
            return false;
        }
        public nothrow virtual bool IsNullPtrType() const
        {
            return false;
        }
        public nothrow virtual bool IsULongType() const
        {
            return false;
        }
        public nothrow virtual bool IsArrayType() const
        {
            return false;
        }
        public nothrow virtual bool IsPureArrayType() const
        {
            return false;
        }
        public nothrow virtual bool IsPrimitiveSingleDimensionArrayType() const
        {
            return false;
        }
        public nothrow virtual int GetLastArrayDimension() const
        {
            return 0;
        }
        public virtual nothrow int GetPointerCount() const
        {
            return 0;
        }
        public virtual nothrow int GetPointerCountAfterArray() const
        {
            return 0;
        }
        public virtual nothrow DerivationCounts GetDerivationCounts() const
        {
            return DerivationCounts();
        }
        public void AddDependentType(TypeSymbol* dependentType)
        {
            dependentTypes.InsertFront(dependentType);   
        }
        public nothrow inline const ForwardList<TypeSymbol*>& DependentTypes() const
        {
            return dependentTypes;
        }
        public nothrow inline ForwardList<TypeSymbol*>& DependentTypes() 
        {
            return dependentTypes;
        }
        public nothrow virtual Cm.Ast.DerivationList Derivations() const
        {
            return Cm.Ast.DerivationList();
        }
        public abstract string GetMangleId() const;
        public void SetIrType(Ir.Intf.Type* irType_)
        {
            if (IrTypeMade())
            {
                throw Exception("ir type already made");
            }
            if (irType_->Owned())
            {
                throw Exception("ir type already owned");
            }
            irType.Reset(irType_);
            irType->SetOwned();
            SetIrTypeMade();
        }
        public nothrow inline Ir.Intf.Type* IrType() const
        {
            return irType.GetPtr();
        }
        public virtual void RecomputeIrType() const
        {
        }
        public void SetDefaultIrValue(Ir.Intf.Object* defaultIrValue_)
        {
            if (defaultIrValue_->Owned())
            {
                throw Exception("default ir value already owned");
            }
            defaultIrValue.Reset(defaultIrValue_);
            defaultIrValue->SetOwned();
        }
        public nothrow inline Ir.Intf.Object* DefaultIrValue() const
        {
            return defaultIrValue.GetPtr();
        }
        public nothrow inline ulong GetHashCode() const
        {
            return id.GetHashCode();
        }
        private TypeId id;
        private UniquePtr<Ir.Intf.Type> irType;
        private UniquePtr<Ir.Intf.Object> defaultIrValue;
        private ForwardList<TypeSymbol*> dependentTypes;
    }
    
    public nothrow inline bool TypesEqual(TypeSymbol* left, TypeSymbol* right)
    {
        return left->Id() == right->Id();
    }
}
