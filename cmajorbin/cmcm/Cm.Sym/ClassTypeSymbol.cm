/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public const ulong noCid = cast<ulong>(-1);
    
    public enum ClassTypeSymbolFlags : uint
    {
        none = 0u,
        virtual_ = 1u << 0u,
        abstract_ = 1u << 1u,
        vtblInitialized = 1u << 2u,
        hasUserDefinedConstructor = 1u << 3u,
        hasUserDefinedDefaultConstructor = 1u << 4u,
        hasUserDefinedCopyConstructor = 1u << 5u,
        hasUserDefinedMoveConstructor = 1u << 6u,
        hasUserDefinedStaticConstructor = 1u << 7u,
        hasUserDefinedCopyAssignment = 1u << 8u,
        hasUserDefinedMoveAssignment = 1u << 9u,
        hasUserDefinedDestructor = 1u << 10u,
        hasSuppressedDefaultConstructor = 1u << 11u,
        hasSuppressedCopyConstructor = 1u << 12u,
        hasSuppressedMoveConstructor = 1u << 13u,
        hasSuppressedCopyAssignment = 1u << 14u,
        hasSuppressedMoveAssignment = 1u << 15u,
        generateDefaultConstructor = 1u << 16u,
        generateCopyConstructor = 1u << 17u,
        generateMoveConstructor = 1u << 18u,
        generateCopyAssignment = 1u << 19u,
        generateMoveAssignment = 1u << 20u,
        generateDestructor = 1u << 21u,
        debugInfoGenerated = 1u << 22u
    }
    
    public class PersistentClassData
    {
        public ulong classNodePos;
        public ulong classNodeSize;
        public string cmlFilePath;
        public Cm.Ast.NodeList<Cm.Ast.Node> usingNodes;
        public UniquePtr<Cm.Ast.ClassNode> classNode;
    }
    
    public nothrow TypeId GetClassTypeId(bool getNextId, ulong cid)
    {
        if (getNextId)
        {
            return TypeId(cid);
        }
        return TypeId();
    }
    
    public class ClassTypeSymbol : TypeSymbol
    {
        public nothrow ClassTypeSymbol(const Span& span_, const string& name_) : 
            base(span_, name_, TypeId()), cid(noCid), key(0u), level(0), priority(0), flags(ClassTypeSymbolFlags.none), baseClass(null)
        {
        }
        public nothrow ClassTypeSymbol(const Span& span_, const string& name_, bool getNextId_, ulong cid_) : 
            base(span_, name_, GetClassTypeId(getNextId_, cid_)), cid(cid_), key(0u), level(0), priority(0), flags(ClassTypeSymbolFlags.none), baseClass(null)
        {
        }
        public nothrow ClassTypeSymbol(const Span& span_, const string& name_, const TypeId& id_) :
            base(span_, name_, id_), cid(noCid), key(0u), level(0), priority(0), flags(ClassTypeSymbolFlags.none), baseClass(null)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.classSymbol;
        }
        public nothrow override const char* TypeString() const
        {
            return "class";
        }
        public override string GetMangleId() const
        {
            return Cm.IrIntf.MakeAssemblyName(FullName());
        }
        public override void MakeIrType()
        {
            if (IrTypeMade()) return;
            SetIrType(Cm.IrIntf.CreateClassTypeName(FullName()));
        }
        public nothrow override bool IsExportSymbol() const
        {
            if (Parent()->IsClassTemplateSymbol()) return false;
            if (Parent() is TemplateTypeSymbol*) return false;
            return base->IsExportSymbol();
        }
        public nothrow bool IsVirtual() const
        {
            return GetFlag(ClassTypeSymbolFlags.virtual_) || baseClass != null && baseClass->IsVirtual();
        }
        public nothrow void SetVirtual()
        {
            SetFlag(ClassTypeSymbolFlags.virtual_);
        }
        public nothrow override bool IsAbstract() const
        {
            return GetFlag(ClassTypeSymbolFlags.abstract_);
        }
        public nothrow void SetAbstract()
        {
            SetFlag(ClassTypeSymbolFlags.abstract_);
        }
        public nothrow inline bool HasUserDefinedConstructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasUserDefinedConstructor);
        }
        public nothrow inline void SetHasUserDefinedConstructor() 
        {
            SetFlag(ClassTypeSymbolFlags.hasUserDefinedConstructor);
        }
        public nothrow inline bool HasUserDefinedDefaultConstructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasUserDefinedDefaultConstructor);
        }
        public nothrow inline void SetHasUserDefinedDefaultConstructor()
        {
            SetFlag(ClassTypeSymbolFlags.hasUserDefinedDefaultConstructor);
        }
        public nothrow inline bool HasUserDefinedCopyConstructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasUserDefinedCopyConstructor);
        }
        public nothrow inline void SetHasUserDefinedCopyConstructor()
        {
            SetFlag(ClassTypeSymbolFlags.hasUserDefinedCopyConstructor);
        }
        public nothrow inline bool HasUserDefinedMoveConstructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasUserDefinedMoveConstructor);
        }
        public nothrow inline void SetHasUserDefinedMoveConstructor()
        {
            SetFlag(ClassTypeSymbolFlags.hasUserDefinedMoveConstructor);
        }
        public nothrow inline bool HasUserDefinedStaticConstructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasUserDefinedStaticConstructor);
        }
        public nothrow inline void SetHasUserDefinedStaticConstructor()
        {
            SetFlag(ClassTypeSymbolFlags.hasUserDefinedStaticConstructor);
        }
        public nothrow inline bool HasUserDefinedCopyAssignment() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasUserDefinedCopyAssignment);
        }
        public nothrow inline void SetHasUserDefinedCopyAssignment()
        {
            SetFlag(ClassTypeSymbolFlags.hasUserDefinedCopyAssignment);
        }
        public nothrow inline bool HasUserDefinedMoveAssignment() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasUserDefinedMoveAssignment);
        }
        public nothrow inline void SetHasUserDefinedMoveAssignment()
        {
            SetFlag(ClassTypeSymbolFlags.hasUserDefinedMoveAssignment);
        }
        public nothrow inline bool HasUserDefinedDestructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasUserDefinedDestructor);
        }
        public nothrow inline void SetHasUserDefinedDestructor()
        {
            SetFlag(ClassTypeSymbolFlags.hasUserDefinedDestructor);
        }
        public nothrow inline bool HasSuppressedDefaultConstructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasSuppressedDefaultConstructor);
        }
        public nothrow inline void SetHasSuppressedDefaultConstructor()
        {
            SetFlag(ClassTypeSymbolFlags.hasSuppressedDefaultConstructor);
        }
        public nothrow inline bool HasSuppressedCopyConstructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasSuppressedCopyConstructor);
        }
        public nothrow inline void SetHasSuppressedCopyConstructor()
        {
            SetFlag(ClassTypeSymbolFlags.hasSuppressedCopyConstructor);
        }
        public nothrow inline bool HasSuppressedMoveConstructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasSuppressedMoveConstructor);
        }
        public nothrow inline void SetHasSuppressedMoveConstructor()
        {
            SetFlag(ClassTypeSymbolFlags.hasSuppressedMoveConstructor);
        }
        public nothrow inline bool HasSuppressedCopyAssignment() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasSuppressedCopyAssignment);
        }
        public nothrow inline void SetHasSuppressedCopyAssignment()
        {
            SetFlag(ClassTypeSymbolFlags.hasSuppressedCopyAssignment);
        }
        public nothrow inline bool HasSuppressedMoveAssignment() const
        {
            return GetFlag(ClassTypeSymbolFlags.hasSuppressedMoveAssignment);
        }
        public nothrow inline void SetHasSuppressedMoveAssignment()
        {
            SetFlag(ClassTypeSymbolFlags.hasSuppressedMoveAssignment);
        }
        public nothrow inline bool GenerateDefaultConstructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.generateDefaultConstructor);
        }
        public nothrow inline void SetGenerateDefaultConstructor()
        {
            SetFlag(ClassTypeSymbolFlags.generateDefaultConstructor);
        }
        public nothrow inline bool GenerateCopyConstructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.generateCopyConstructor);
        }
        public nothrow inline void SetGenerateCopyConstructor()
        {
            SetFlag(ClassTypeSymbolFlags.generateCopyConstructor);
        }
        public nothrow inline bool GenerateMoveConstructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.generateMoveConstructor);
        }
        public nothrow inline void SetGenerateMoveConstructor()
        {
            SetFlag(ClassTypeSymbolFlags.generateMoveConstructor);
        }
        public nothrow inline bool GenerateCopyAssignment() const
        {
            return GetFlag(ClassTypeSymbolFlags.generateCopyAssignment);
        }
        public nothrow inline void SetGenerateCopyAssignment()
        {
            SetFlag(ClassTypeSymbolFlags.generateCopyAssignment);
        }
        public nothrow inline bool GenerateMoveAssignment() const
        {
            return GetFlag(ClassTypeSymbolFlags.generateMoveAssignment);
        }
        public nothrow inline void SetGenerateMoveAssignment()
        {
            SetFlag(ClassTypeSymbolFlags.generateMoveAssignment);
        }
        public nothrow inline bool GenerateDestructor() const
        {
            return GetFlag(ClassTypeSymbolFlags.generateDestructor);
        }
        public nothrow inline void SetGenerateDestructor()
        {
            SetFlag(ClassTypeSymbolFlags.generateDestructor);
        }
        public nothrow inline bool DebugInfoGenerated() const
        {
            return GetFlag(ClassTypeSymbolFlags.debugInfoGenerated);
        }
        public nothrow inline void SetDebugInfoGenerated()
        {
            SetFlag(ClassTypeSymbolFlags.debugInfoGenerated);
        }
        public nothrow inline ClassTypeSymbol* BaseClass() const
        {
            return baseClass;
        }
        public nothrow inline void SetBaseClass(ClassTypeSymbol* baseClass_)
        {
            baseClass = baseClass_;
        }
        public nothrow override bool IsClassTemplateSymbol() const 
        { 
            return !typeParameters.IsEmpty(); 
        }
        public override void AddSymbol(Symbol* symbol)
        {
            base->AddSymbol(symbol);
            if (symbol is MemberVariableSymbol*)
            {
                MemberVariableSymbol* memberVariableSymbol = cast<MemberVariableSymbol*>(symbol);
                if (memberVariableSymbol->IsStatic())
                {
                    staticMemberVariables.Add(memberVariableSymbol);
                }
                else
                {
                    memberVariables.Add(memberVariableSymbol);
                }
            }
            else if (symbol is FunctionSymbol*)
            {
                FunctionSymbol* functionSymbol = cast<FunctionSymbol*>(symbol);
                if (functionSymbol->IsDestructor())
                {
                    destructor = functionSymbol;
                }
                else if (functionSymbol->IsStaticConstructor())
                {
                    staticConstructor = functionSymbol;
                }
                else if (functionSymbol->IsConvertingConstructor())
                {
                    AddConversion(functionSymbol);
                }
                else if (functionSymbol->IsConversionFunction())
                {
                    AddConversion(functionSymbol);
                }
            }
            else if (symbol is TypeParameterSymbol*)
            {
                typeParameters.Add(cast<TypeParameterSymbol*>(symbol));
            }
        }
        public void AddConversion(FunctionSymbol* functionSymbol)
        {
            conversions.Insert(functionSymbol);
        }
        public override void Read(Reader& reader)
        {
            base->Read(reader);
            cid = reader.GetBinaryReader().ReadULong();
            flags = cast<ClassTypeSymbolFlags>(reader.GetBinaryReader().ReadUInt());
            bool hasBaseClass = reader.GetBinaryReader().ReadBool();
            if (hasBaseClass)
            {
                reader.FetchTypeFor(this, -2);
            }
            bool hasInitializedVar = reader.GetBinaryReader().ReadBool();
            if (hasInitializedVar)
            {
                Symbol* symbol = reader.ReadSymbol();
                if (symbol is MemberVariableSymbol*)
                {
                    MemberVariableSymbol* memberVarSymbol = cast<MemberVariableSymbol*>(symbol);
                    initializedVar.Reset(memberVarSymbol);
                    initializedVar->SetParent(this);
                }
                else
                {
                    throw Exception("member variable symbol expected");
                }
            }
            if (IsClassTemplateSymbol())
            {
                if (persistentClassData.IsNull())
                {
                    persistentClassData.Reset(new PersistentClassData());
                }
                persistentClassData->usingNodes.Read(reader.GetAstReader());
                persistentClassData->classNodeSize = reader.GetBinaryReader().ReadULong();
                persistentClassData->classNodePos = reader.GetBinaryReader().Pos();
                persistentClassData->cmlFilePath = reader.GetBinaryReader().FileName();
                reader.GetBinaryReader().Skip(persistentClassData->classNodeSize);
            }
            reader.EnqueueMakeIrTypeFor(this);
            sourceFilePath = reader.GetBinaryReader().ReadString();
        }
        public override void Write(Writer& writer)
        {
            base->Write(writer);
            writer.GetBinaryWriter().Write(cid);
            uint outputFlags = flags & ~ClassTypeSymbolFlags.vtblInitialized;
            writer.GetBinaryWriter().Write(outputFlags);
            bool hasBaseClass = baseClass != null;
            writer.GetBinaryWriter().Write(hasBaseClass);
            if (hasBaseClass)
            {
                writer.Write(baseClass->Id());
            }
            bool hasInitializedVar = !initializedVar.IsNull();
            writer.GetBinaryWriter().Write(hasInitializedVar);
            if (hasInitializedVar)
            {
                writer.Write(initializedVar.GetPtr());
            }
            if (IsClassTemplateSymbol())
            {
                if (persistentClassData.IsNull())
                {
                    throw Exception("no persistent class data");
                }
                persistentClassData->usingNodes.Write(writer.GetAstWriter());
                Cm.Ast.Node* node = writer.GetSymbolTable().GetNode(this);
                if (node is Cm.Ast.ClassNode*)
                {
                    ulong sizePos = writer.GetBinaryWriter().Pos();
                    writer.GetBinaryWriter().Write(ulong(0u));
                    ulong classNodePos = writer.GetBinaryWriter().Pos();
                    writer.GetAstWriter().Write(node);
                    ulong classNodeEndPos = writer.GetBinaryWriter().Pos();
                    ulong classNodeSize = classNodeEndPos - classNodePos;
                    writer.GetBinaryWriter().Seek(sizePos);
                    writer.GetBinaryWriter().Write(classNodeSize);
                    writer.GetBinaryWriter().Seek(classNodeEndPos);
                }
                else
                {
                    throw Exception("not class node");
                }
            }
            if (!(this is TemplateTypeSymbol*) && !(this is ClassDelegateTypeSymbol*) && sourceFilePath.IsEmpty())
            {
                throw Exception("source file path not set");
            }
            writer.GetBinaryWriter().Write(sourceFilePath);
        }        
        public override void SetType(TypeSymbol* typeSymbol, int index)
        {
            if (index == -2)
            {
                baseClass = cast<ClassTypeSymbol*>(typeSymbol);
                GetContainerScope()->SetBase(baseClass->GetContainerScope());
            }            
        }
        public nothrow bool HasBaseClass(ClassTypeSymbol* cls) const
        {
            return baseClass == cls || baseClass != null && baseClass->HasBaseClass(cls);
        }
        public nothrow bool HasBaseClass(ClassTypeSymbol* cls, int& distance) const
        {
            if (baseClass == null) return false;
            distance = distance + 1;
            if (baseClass == cls) return true;
            return baseClass->HasBaseClass(cls, distance);
        }
        public nothrow inline short VPtrIndex() const
        {
            return vptrIndex;
        }
        public nothrow inline void SetVPtrIndex(short vptrIndex_)
        {
            vptrIndex = vptrIndex_;
        }
        public void InitVtbl()
        {
            if (GetFlag(ClassTypeSymbolFlags.vtblInitialized)) return;
            if (IsReplica())
            {
                SetFlag(ClassTypeSymbolFlags.vtblInitialized);
                return;
            }            
            if (!IsBound() && (this is TemplateTypeSymbol*))
            {
                return;
            }
            SetFlag(ClassTypeSymbolFlags.vtblInitialized);
            if (baseClass != null)
            {
                baseClass->InitVtbl();
                if (baseClass->IsVirtual())
                {
                    SetVirtual();
                }
            }
            if (IsVirtual())
            {
                if (baseClass == null || !baseClass->IsVirtual())
                {
                    if (baseClass != null)
                    {
                        SetVPtrIndex(1);
                    }
                    else
                    {
                        SetVPtrIndex(0);
                    }
                }
                InitVtbl(vtbl);
                for (FunctionSymbol* virtualFunction : vtbl)
                {
                    if (virtualFunction != null && virtualFunction->IsAbstract())
                    {
                        if (!IsAbstract())
                        {
                            throw Error("class containing abstract member functions must be declared abstract", GetSpan(), virtualFunction->GetSpan());
                        }
                    }
                }
            }
        }
        public void SetUsingNodes(const List<Cm.Ast.Node*>& usingNodes)
        {
            if (persistentClassData.IsNull())
            {
                persistentClassData.Reset(new PersistentClassData());
            }
            for (Cm.Ast.Node* usingNode : usingNodes)
            {
                Cm.Ast.CloneContext cloneContext;
                persistentClassData->usingNodes.Add(usingNode->Clone(cloneContext));
            }
        }
        public nothrow inline bool GetFlag(ClassTypeSymbolFlags flag) const
        {
            return (flags & flag) != ClassTypeSymbolFlags.none;
        }
        public nothrow inline void SetFlag(ClassTypeSymbolFlags flag)
        {
            flags = cast<ClassTypeSymbolFlags>(flags | flag);
        }
        private void InitVtbl(List<FunctionSymbol*>& vtblToInit)
        {
            if (!IsVirtual()) return;
            if (baseClass != null)
            {
                baseClass->InitVtbl(vtblToInit);
            }
            if (vtblToInit.IsEmpty())
            {
                vtblToInit.Add(null); // first entry is reserved for class name
            }
            List<FunctionSymbol*> virtualFunctions;
            if (destructor != null)
            {
                if (destructor->IsVirtual() || destructor->IsOverride())
                {
                    virtualFunctions.Add(destructor);
                }
            }
            for (Symbol* symbol : Symbols())
            {
                if (symbol is FunctionSymbol*)
                {
                    FunctionSymbol* functionSymbol = cast<FunctionSymbol*>(symbol);
                    if (functionSymbol->IsDestructor()) continue;
                    if (functionSymbol->IsVirtualAbstractOrOverride())
                    {
                        virtualFunctions.Add(functionSymbol);
                    }
                }
            }
            short n = cast<short>(virtualFunctions.Count()) + 1;    // number of virtual functions + class name entry
            for (short i = 1; i < n; ++i)
            {
                FunctionSymbol* f = virtualFunctions[i - 1];
                bool found = false;
                short m = cast<short>(vtblToInit.Count());
                for (short j = 1; j < m; ++j)
                {
                    FunctionSymbol* v = vtblToInit[j];
                    if (Overrides(f, v))
                    {
                        if (!f->IsOverride())
                        {
                            throw Error("overriding function should be declared with override specifier", f->GetSpan());
                        }
                        if (!f->CanThrow() && v->CanThrow() || f->CanThrow() && !v->CanThrow())
                        {
                            throw Error("overriding function has conflicting nothrow specification compared to base class virtual function", f->GetSpan(), v->GetSpan());
                        }
                        f->SetVtblIndex(j);
                        vtblToInit[j] = f;
                        found = true;
                        f->SetOverriddenFunction(v);
                        v->AddToOverrideSet(f);
                        break;
                    }
                }
                if (!found)
                {
                    if (f->IsOverride())
                    {
                        throw Error("no suitable function to override ('" + f->FullName() + "')", f->GetSpan());
                    }
                    f->SetVtblIndex(m);
                    vtblToInit.Add(f);
                }
            }
        }
        public inline nothrow ulong Cid() const
        {
            return cid;
        }
        public inline nothrow void SetCid(ulong cid_)
        {
            cid = cid_;
        }
        public inline nothrow ulong Key() const
        {
            return key;
        }
        public inline nothrow void SetKey(ulong key_)
        {
            key = key_;
        }
        public inline nothrow int Level() const
        {
            return level;
        }
        public inline nothrow void SetLevel(int level_)
        {
            level = level_;
        }
        public inline nothrow int Priority() const
        {
            return priority;
        }
        public inline nothrow void SetPriority(int priority_)
        {
            priority = priority_;
        }
        public inline void SetCompileUnit(Cm.Ast.CompileUnitNode* compileUnit_)
        {
            compileUnit = compileUnit_;
        }
        public nothrow override void ReplaceReplicaTypes()
        {
            if (IsClassTemplateSymbol()) return;
            base->ReplaceReplicaTypes();
            if (baseClass != null && baseClass->IsReplica() && (baseClass is TemplateTypeSymbol*))
            {
                TemplateTypeSymbol* replica = cast<TemplateTypeSymbol*>(baseClass);
                baseClass = replica->GetPrimaryTemplateTypeSymbol();
            }
        }
        public override void InitVirtualFunctionTables()
        {
            base->InitVirtualFunctionTables();
            InitVtbl();
        }
        public nothrow inline const List<MemberVariableSymbol*>& MemberVariables() const
        {
            return memberVariables;
        }
        public nothrow inline const List<FunctionSymbol*>& Vtbl() const
        {
            return vtbl;
        }
        public nothrow inline FunctionSymbol* Destructor() const
        {
            return destructor;
        }
        public nothrow inline const List<TypeParameterSymbol*>& TypeParameters() const
        {
            return typeParameters;
        }
        public nothrow inline const string& SourceFilePath() const
        {
            return sourceFilePath;
        }
        public nothrow inline void SetSourceFilePath(const string& sourceFilePath_)
        {
            sourceFilePath = sourceFilePath_;
        }
        private ulong cid;
        private ulong key;
        private int level;
        private int priority;
        private ClassTypeSymbolFlags flags;
        private ClassTypeSymbol* baseClass;
        private UniquePtr<PersistentClassData> persistentClassData;
        private string sourceFilePath;
        private List<MemberVariableSymbol*> memberVariables;
        private List<MemberVariableSymbol*> staticMemberVariables;
        private List<TypeParameterSymbol*> typeParameters;
        private FunctionSymbol* destructor;
        private FunctionSymbol* staticConstructor;
        private UniquePtr<MemberVariableSymbol> initializedVar;
        private short vptrIndex;
        private List<FunctionSymbol*> vtbl;
        private HashSet<FunctionSymbol*> conversions;
        private Cm.Ast.CompileUnitNode* compileUnit;
        
    }
    
    public nothrow bool Overrides(FunctionSymbol* f, FunctionSymbol* g)
    {
        if (!f->IsMemberFunctionSymbol() || !g->IsMemberFunctionSymbol()) return false;
        if (f->GroupName() != g->GroupName()) return false;
        int n = f->Parameters().Count();
        if (n != g->Parameters().Count()) return false;
        for (int i = 1; i < n; ++i)
        {
            ParameterSymbol* p = f->Parameters()[i];
            ParameterSymbol* q = g->Parameters()[i];
            if (!TypesEqual(p->GetType(), q->GetType()))
            {
                return false;
            }
        }
        return true;
    }
}
