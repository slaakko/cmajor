/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public class MemberVariableSymbol : VariableSymbol
    {
        public nothrow MemberVariableSymbol(const Span& span_, const string& name_) : base(span_, name_), layoutIndex(-1)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.memberVariableSymbol;
        }
        public nothrow override const char* TypeString() const
        {
            return "member variable";
        }
        public nothrow override bool IsExportSymbol() const
        {
            if (Parent()->IsClassTemplateSymbol()) return false;
            if (Parent() is TemplateTypeSymbol*) return false;
            return true; 
        }
        public nothrow inline int LayoutIndex() const
        {
            return layoutIndex;
        }
        public nothrow inline void SetLayoutIndex(int layoutIndex_)
        {
            layoutIndex = layoutIndex_;
        }
	 public override void CollectExportedDerivedTypes(HashSet<Symbol*>& collected, HashSet<TypeSymbol*>& exportedDerivedTypes) 
        {
            TypeSymbol* type = GetType();
            if (type is DerivedTypeSymbol*)
            {
                if (collected.CFind(type) == collected.CEnd())
                {
                    collected.Insert(type);
                    type->CollectExportedDerivedTypes(collected, exportedDerivedTypes);
                }
            }
        }
        public override void CollectExportedTemplateTypes(HashSet<Symbol*>& collected, HashMap<TypeId, TemplateTypeSymbol*>& exportedTemplateTypes)
        {
            TypeSymbol* type = GetType();
            if (type is TemplateTypeSymbol* || type is DerivedTypeSymbol*)
            {
                if (collected.CFind(type) == collected.CEnd())
                {
                    collected.Insert(type);
                    type->CollectExportedTemplateTypes(collected, exportedTemplateTypes);
                }
            }
        }
        public nothrow override void ReplaceReplicaTypes()
        {
            TypeSymbol* type = GetType();
            if (type->IsReplica() && type is TemplateTypeSymbol*)
            {
                TemplateTypeSymbol* replica = cast<TemplateTypeSymbol*>(type);
                type = replica->GetPrimaryTemplateTypeSymbol();
            }
        }
        private int layoutIndex;
    }
}
