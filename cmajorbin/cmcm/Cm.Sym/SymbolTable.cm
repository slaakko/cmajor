/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public class SymbolTable
    {
        public Cm.Ast.Node* GetNode(Symbol* symbol) const
        {
            return GetNode(symbol, true);            
        }
        public Cm.Ast.Node* GetNode(Symbol* symbol, bool throw_) const
        {
            HashMap<Symbol*, Cm.Ast.Node*>.ConstIterator i = symbolNodeMap.CFind(symbol);
            if (i != symbolNodeMap.CEnd())
            {
                return i->second;
            }
            else if (throw_)
            {
                throw Error("node for symbol '" + symbol->FullName() + "' not found in the symbol table", symbol->GetSpan());
            }
            else
            {
                return null;
            }
        }
        public void SetNode(Symbol* symbol, Cm.Ast.Node* node)
        {
            symbolNodeMap[symbol] = node;
        }
        public TypeRepository& GetTypeRepository() 
        {
            return typeRepository;
        }
        private HashMap<Symbol*, Cm.Ast.Node*> symbolNodeMap;
        private TypeRepository typeRepository;
    }
}
