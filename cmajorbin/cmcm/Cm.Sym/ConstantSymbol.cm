/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public class ConstantSymbol : Symbol
    {
        public nothrow ConstantSymbol(const Span& span_, const string& name_) : base(span_, name_), type(null), evaluating(false)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.constantSymbol;
        }
        public nothrow override const char* TypeString() const
        {
            return "constant";
        }
        public override void Read(Reader& reader)
        {
            base->Read(reader);
            reader.FetchTypeFor(this, 0);
            value.Reset(reader.ReadValue());
        }
        public override void Write(Writer& writer)
        {
            base->Write(writer);
            writer.Write(type->Id());
            writer.Write(value.GetPtr());
        }
        public nothrow inline TypeSymbol* GetType() const
        {
            return type;
        }
        public nothrow inline void SetType(TypeSymbol* type_)
        {
            type = type_;
        }
        public override void SetType(TypeSymbol* type_, int index)
        {
            SetType(type_);
        }
        public nothrow override bool IsExportSymbol() const
        {
            if (Parent()->IsClassTemplateSymbol()) return false;
            return base->IsExportSymbol();
        }
        public nothrow void SetValue(Value* value_)
        {
            value.Reset(value_);
        }
        public nothrow inline Value* GetValue() const
        {
            return value.GetPtr();
        }
        public nothrow inline bool Evaluating() const
        {
            return evaluating;
        }
        public nothrow inline void SetEvaluating()
        {
            evaluating = true;
        }
        public nothrow inline void ResetEvaluating()
        {
            evaluating = false;
        }
        public nothrow override void ReplaceReplicaTypes()
        {
            if (type->IsReplica() && (type is TemplateTypeSymbol*))
            {
                TemplateTypeSymbol* replica = cast<TemplateTypeSymbol*>(type);
                type = replica->GetPrimaryTemplateTypeSymbol();
            }
        }
        private TypeSymbol* type;
        private UniquePtr<Value> value;
        private bool evaluating;
    }
}
