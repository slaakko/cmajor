/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;

namespace Cm.Sym
{
    public class TypeId
    {
        public const int count = 16;
        
        public nothrow TypeId() : hashCode(0u), hashCodeValid(false)
        {
            SetRep(0, Rand());
            SetRep(4, Rand());
            SetRep(8, Rand());
            SetRep(12, Rand());
        }
        public nothrow TypeId(ulong cid) : hashCode(0u), hashCodeValid(false)
        {
            SetRep(0, Rand());
            SetRep(4, Rand());
            uint high = cast<uint>(cid >> 32u);
            uint low = cast<uint>(cid & 0xFFFFFFFFu);
            SetRep(8, high);
            SetRep(12, low);
        }
        public nothrow TypeId(byte leader) : hashCode(0u), hashCodeValid(false)
        {
            rep[0] = leader;
        }
        public nothrow inline byte operator[](int index) const
        {
            #assert(index >= 0 && index < count);
            return rep[index];
        }
        public nothrow inline void SetByte(int index, byte b)
        {
            #assert(index >= 0 && index < count);
            hashCodeValid = false;
            rep[index] = b;
        }
        public nothrow ulong GetHashCode() const
        {
            if (!hashCodeValid)
            {
                ComputeHashCode();
            }
            return hashCode;
        }
        private nothrow void ComputeHashCode()
        {
            hashCode = 14695981039346656037u;
            for (int i = 0; i < count; ++i)
            {
                hashCode = hashCode ^ cast<ulong>(rep[i]);
                hashCode = hashCode * 1099511628211u;
            }
            hashCodeValid = true;
        }
        private nothrow void SetRep(int index, uint r)
        {
            rep[index] = cast<byte>(r >> 24u);
            rep[index + 1] = cast<byte>(r >> 16u);
            rep[index + 2] = cast<byte>(r >> 8u);
            rep[index + 3] = cast<byte>(r);
        }
        public nothrow byte* Rep() const
        {
            return &rep[0];
        }
        private byte[count] rep;
        private ulong hashCode;
        private bool hashCodeValid;
    }    
    
    public nothrow inline ulong GetHashCode(const TypeId& x)
    {
        return x.GetHashCode();
    }
    
    public nothrow inline bool operator==(const TypeId& left, const TypeId& right)
    {
        for (int i = 0; i < TypeId.count; ++i)
        {
            if (left[i] != right[i]) return false;
        }
        return true;
    }
}
