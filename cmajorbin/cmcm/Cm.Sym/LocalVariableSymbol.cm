/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public class LocalVariableSymbol : Symbol
    {
        public nothrow LocalVariableSymbol(const Span& span_, const string& name_) : base(span_, name_), type(null), used(false)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.localVariableSymbol;
        }
        public nothrow override bool IsLocalVariableSymbol() const
        {
            return true;
        }
        public nothrow override SymbolAccess DeclaredAccess() const
        {
            return SymbolAccess.public_;
        }
        public nothrow override const char* TypeString() const
        {
            return "local variable";
        }
        public nothrow override bool IsExportSymbol() const
        {
            return false;
        }
        public nothrow inline void SetType(TypeSymbol* type_)
        {
            type = type_;
        }
        public nothrow inline TypeSymbol* GetType() const
        {
            return type;
        }
        public nothrow inline bool Used() const
        {
            return used;
        }
        public nothrow inline void SetUsed()
        {
            used = true;
        }
        public nothrow inline void SetUseSpan(const Span& useSpan_)
        {
            useSpan = useSpan_;
        }
        public nothrow inline const Span& GetUseSpan() const
        {
            return useSpan;
        }
        public nothrow override void ReplaceReplicaTypes()
        {
            if (type->IsReplica() && type->IsTemplateTypeSymbol())
            {
                TemplateTypeSymbol* replica = cast<TemplateTypeSymbol*>(type);
                type = replica->GetPrimaryTemplateTypeSymbol();
            }
        }
        private TypeSymbol* type;
        private bool used;
        private Span useSpan;
    }
}
