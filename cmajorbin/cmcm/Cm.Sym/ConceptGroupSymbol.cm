/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public class ConceptGroupSymbol : Symbol
    {
        public nothrow ConceptGroupSymbol(const Span& span_, const string& name_, ContainerScope* containerScope_) : base(span_, name_), containerScope(containerScope_)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.conceptGroupSymbol;
        }
        public nothrow override bool IsExportSymbol() const
        {
            return false;
        }
        public nothrow override const char* TypeString() const
        {
            return "concept group";
        }
        public nothrow override SymbolAccess DeclaredAccess() const
        {
            return SymbolAccess.public_;
        }
        public nothrow override ContainerScope* GetContainerScope() const
        {
            return containerScope;
        }
        public void AddConcept(ConceptSymbol* conceptSymbol)
        {
            if (conceptSymbol->GroupName() != Name())
            {
                throw Exception("attempt to insert a concept with group name '" + conceptSymbol->GroupName() + "' to wrong concept group '" + Name() + "'");
            }
            int arity = conceptSymbol->Arity();
            HashMap<int, ConceptSymbol*>.ConstIterator i = arityConceptMap.CFind(arity);
            if (i != arityConceptMap.CEnd())
            {
                throw Error("concept group '" + Name() + "' already has concept with arity " + ToString(arity), GetSpan(), conceptSymbol->GetSpan());
            }
            arityConceptMap[arity] = conceptSymbol;
        }
        public ConceptSymbol* GetConcept(int arity) const
        {
            HashMap<int, ConceptSymbol*>.ConstIterator i = arityConceptMap.CFind(arity);
            if (i != arityConceptMap.CEnd())
            {
                return i->second;
            }
            else
            {
                throw Error("concept with arity " + ToString(arity) + " not found in concept group '" + Name() + "'", GetSpan());
            }
        }
        private ContainerScope* containerScope;
        private HashMap<int, ConceptSymbol*> arityConceptMap;
    }
}
