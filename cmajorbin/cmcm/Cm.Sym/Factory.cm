/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public abstract class SymbolCreator
    {
        public virtual nothrow ~SymbolCreator()
        {
        }
        public abstract Symbol* CreateSymbol(const Span& span, const string& name);
    }
    
    public class SymbolFactory
    {
        static SymbolFactory() : instance(new SymbolFactory())
        {
        }
        private SymbolFactory()
        {
            creators.Resize(int(SymbolType.maxSymbol));
        }
        public static nothrow SymbolFactory& Instance()
        {
            return *instance;
        }
        public Symbol* CreateSymbol(SymbolType symbolType, const Span& span, const string& name)
        {
            const UniquePtr<SymbolCreator>& creator = creators[int(symbolType)];
            if (creator.IsNull())
            {
                throw Exception("no creator for symbol type '" + string(SymbolTypeStr(symbolType)) + "'");
            }
            Symbol* value = creator->CreateSymbol(span, name);
            if (value != null)
            {
                return value;
            }
            else
            {
                throw Exception("could not create symbol '" + name + "'");
            }
        }
        private static UniquePtr<SymbolFactory> instance;
        private List<UniquePtr<SymbolCreator>> creators;
    }
}
