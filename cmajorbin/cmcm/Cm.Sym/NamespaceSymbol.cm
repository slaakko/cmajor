/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public class NamespaceSymbol : ContainerSymbol
    {
        public nothrow NamespaceSymbol(const Span& span_, const string& name_) : base(span_, name_)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.namespaceSymbol;
        }
        public nothrow override const char* TypeString() const
        {
            return "namespace";
        }
        public nothrow override bool IsNamespaceSymbol() const
        {
            return true;
        }
        public nothrow inline bool IsGlobalNamespace() const
        {
            return Name().IsEmpty();
        }
        public nothrow override bool IsExportSymbol() const
        {
            return true;
        }
        public nothrow override SymbolAccess DeclaredAccess() const
        {
            return SymbolAccess.public_;
        }
        public void Import(NamespaceSymbol* that, SymbolTable& symbolTable)
        {
            symbolTable.BeginNamespaceScope(that->Name(), that->GetSpan());
            for (UniquePtr<Symbol>& ownedSymbol : that->Symbols())
            {
                if (ownedSymbol->IsNamespaceSymbol())
                {
                    NamespaceSymbol* thatNs = cast<NamespaceSymbol*>(ownedSymbol.GetPtr());
                    Import(thatNs, symbolTable);
                }
                else
                {
                    if (!ownedSymbol->IsFunctionGroupSymbol() && !ownedSymbol->IsConceptGroupSymbol())
                    {
                        Symbol* symbol = ownedSymbol.Release();
                        symbolTable.Container()->AddSymbol(symbol);
                    }
                }
            }
            symbolTable.EndNamespaceScope();
        }
    }
}
