/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public abstract class VariableSymbol : Symbol
    {
        public nothrow VariableSymbol(const Span& span_, const string& name_) : base(span_, name_), type(null), hasType(false)
        {
        }
        public override nothrow TypeSymbol* GetType() const
        {
            return type;
        }
        public nothrow void SetType(TypeSymbol* type_)
        {
            type = type_;
        }
        public override void SetType(TypeSymbol* type_, int index) 
        {
            SetType(type_);
        }
        public nothrow inline bool HasType() const
        {
            return hasType;
        }
        public nothrow string UniqueFullName() const
        {
            if (Parent() != null)
            {
                return Parent()->FullName() + "." + UniqueName();
            }
            return UniqueName();
        }
        public nothrow virtual string UniqueName() const 
        { 
            return Name(); 
        }
        public override void Write(Writer& writer) 
        {
            base->Write(writer);
            bool hasType = type != null;
            writer.GetBinaryWriter().Write(hasType);
            if (hasType)
            {
                writer.Write(type->Id());
            }
        }
        public override void Read(Reader& reader) 
        {
            base->Read(reader);
            hasType = reader.GetBinaryReader().ReadBool();
            if (hasType)
            {
                reader.FetchTypeFor(this, 0);
            }
        }
        private TypeSymbol* type;
        private bool hasType;
    }
}
