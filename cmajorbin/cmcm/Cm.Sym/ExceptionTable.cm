/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using System.IO;
using CodeFormatter = System.Text.CodeFormatter;

namespace Cm.Sym
{
    public class ExceptionRecord
    {
        public nothrow ExceptionRecord(TypeSymbol* exceptionType_, SymbolSource source_) : exceptionType(exceptionType_), source(source_)
        {
        }
        public nothrow inline TypeSymbol* ExceptionType() const
        {
            return exceptionType;
        }
        public nothrow inline SymbolSource Source() const
        {
            return source;
        }
        private TypeSymbol* exceptionType;
        private SymbolSource source;
    }
    
    public class ExceptionTable
    {
        public static nothrow void SetInstance(ExceptionTable* instance_)
        {
            instance = instance_;
        }
        public static nothrow ExceptionTable* Instance() const
        {
            #assert(instance != null);
            return instance;
        }
        public void AddLibraryException(TypeSymbol* exceptionType)
        {
            HashMap<TypeSymbol*, int>.ConstIterator i = exceptionMap.CFind(exceptionType);
            if (i == exceptionMap.CEnd())
            {
                int exceptionId = exceptions.Count() + 1;
                exceptions.Add(ExceptionRecord(exceptionType, SymbolSource.library));
                exceptionMap[exceptionType] = exceptionId;
            }
        }
        public void AddProjectException(TypeSymbol* exceptionType)
        {
            HashMap<TypeSymbol*, int>.ConstIterator i = exceptionMap.CFind(exceptionType);
            if (i == exceptionMap.CEnd())
            {
                int exceptionId = exceptions.Count() + 1;
                exceptions.Add(ExceptionRecord(exceptionType, SymbolSource.project));
                exceptionMap[exceptionType] = exceptionId;
            }
        }
        public List<TypeSymbol*> GetProjectExceptions() const
        {
            List<TypeSymbol*> projectExceptions;
            for (const ExceptionRecord& exceptionRec : exceptions)
            {
                if (exceptionRec.Source() == SymbolSource.project)
                {
                    projectExceptions.Add(exceptionRec.ExceptionType());
                }
            }
            return projectExceptions;
        }
        public int GetExceptionId(TypeSymbol* exceptionType) const
        {
            HashMap<TypeSymbol*, int>.ConstIterator i = exceptionMap.CFind(exceptionType);
            if (i != exceptionMap.CEnd())
            {
                return i->second;
            }
            throw Exception("exception id for exception type '" + exceptionType->FullName() + "' not found");
        }
        public nothrow inline int GetNumberOfExceptions() const
        {
            return exceptions.Count();
        }
        public void GenerateExceptionTableUnit(const string& exceptionTableFilePath)
        {
            Cm.IrIntf.Backend backend = Cm.IrIntf.GetBackend();
            if (backend == Cm.IrIntf.Backend.llvm)
            {
                OutputFileStream exceptionTableFile(exceptionTableFilePath);
                CodeFormatter formatter(exceptionTableFile);
                int n = exceptions.Count();
                UniquePtr<Ir.Intf.Type> exceptionBaseIdArrayType(Cm.IrIntf.Array(Cm.IrIntf.I32(), n));
                exceptionBaseIdArrayType->SetOwned();
                formatter.WriteLine("@$exception$base$id$table = constant " + exceptionBaseIdArrayType->Name());
                formatter.WriteLine("[");
                formatter.IncIndent();
                for (int i = 0; i < n; ++i)
                {
                    Cm.Sym.TypeSymbol* exceptionType = exceptions[i].ExceptionType();
                    if (!(exceptionType is Cm.Sym.ClassTypeSymbol*))
                    {
                        throw Exception("exception type is not class type");
                    }
                    Cm.Sym.ClassTypeSymbol* exceptionClassType = cast<Cm.Sym.ClassTypeSymbol*>(exceptionType);
                    int baseId = 0;
                    Cm.Sym.ClassTypeSymbol* baseClassType = exceptionClassType->BaseClass();
                    if (baseClassType != null)
                    {
                        baseId = GetExceptionId(baseClassType);
                    }
                    string baseIdStr;
                    baseIdStr.Append(Ir.Intf.Factory.Instance()->GetI32()->Name()).Append(' ').Append(ToString(baseId));
                    if (i < n - 1)
                    {
                        baseIdStr.Append(',');
                    }
                    formatter.WriteLine(baseIdStr);
                }
                formatter.DecIndent();
                formatter.WriteLine("]");
                UniquePtr<Ir.Intf.Type> pointerToExceptionTable(Cm.IrIntf.Pointer(exceptionBaseIdArrayType.GetPtr(), 1u));
                pointerToExceptionTable->SetOwned();
                formatter.WriteLine("@$exception$base$id$table$addr = constant i32* bitcast (" + pointerToExceptionTable->Name() + " @$exception$base$id$table to i32*)");
            }
            else if (backend == Cm.IrIntf.Backend.c)
            {
                OutputFileStream exceptionTableFile(exceptionTableFilePath);
                CodeFormatter formatter(exceptionTableFile);
                int n = exceptions.Count();
                formatter.WriteLine("int _X_exception_X_base_X_id_X_table[" + ToString(n) + "] =");
                formatter.WriteLine("{");
                formatter.IncIndent();
                for (int i = 0; i < n; ++i)
                {
                    Cm.Sym.TypeSymbol* exceptionType = exceptions[i].ExceptionType();
                    if (!(exceptionType is Cm.Sym.ClassTypeSymbol*))
                    {
                        throw Exception("exception type is not class type");
                    }
                    Cm.Sym.ClassTypeSymbol* exceptionClassType = cast<Cm.Sym.ClassTypeSymbol*>(exceptionType);
                    int baseId = 0;
                    Cm.Sym.ClassTypeSymbol* baseClassType = exceptionClassType->BaseClass();
                    if (baseClassType != null)
                    {
                        baseId = GetExceptionId(baseClassType);
                    }
                    string baseIdStr;
                    baseIdStr.Append(ToString(baseId));
                    if (i < n - 1)
                    {
                        baseIdStr.Append(',');
                    }
                    formatter.WriteLine(baseIdStr);
                }
                formatter.DecIndent();
                formatter.WriteLine("};");
                formatter.WriteLine("int* _X_exception_X_base_X_id_X_table_X_addr = _X_exception_X_base_X_id_X_table;");
            }
        }
        private static ExceptionTable* instance;
        private HashMap<TypeSymbol*, int> exceptionMap;
        private List<ExceptionRecord> exceptions;
    }
    
    public void EraseExceptionIdFile(const string& irFilePath)
    {
        string exceptionFilePath = Path.ChangeExtension(irFilePath, ".exc");
        remove(exceptionFilePath.Chars());
    }
    
    public void WriteExceptionIdToFile(const string& irFilePath, const string& exceptionTypeFullName)
    {
        string exceptionFilePath = Path.ChangeExtension(irFilePath, ".exc");
        OutputFileStream exceptionFile(exceptionFilePath, true);
        exceptionFile << exceptionTypeFullName << endl();
    }
    
    public void ProcessExceptionIdFile(const string& irFilePath, SymbolTable& symbolTable)
    {
        string exceptionFilePath = Path.ChangeExtension(irFilePath, ".exc");
        if (FileExists(exceptionFilePath))
        {
            InputFileStream exceptionFile(exceptionFilePath);
            while (!exceptionFile.EndOfStream())
            {
                string exceptionTypeFullName = exceptionFile.ReadLine();
                if (!exceptionTypeFullName.IsEmpty())
                {
                    Symbol* exceptionSymbol = symbolTable.GlobalScope()->Lookup(exceptionTypeFullName);
                    if (exceptionSymbol == null)
                    {
                        throw Exception("exception symbol '" + exceptionTypeFullName + "' not found");
                    }
                    if (!(exceptionSymbol is TypeSymbol*))
                    {
                        throw Exception("exception symbol '" + exceptionTypeFullName + "' is not type symbol");
                    }
                    TypeSymbol* exceptionTypeSymbol = cast<TypeSymbol*>(exceptionSymbol);
                    ExceptionTable.Instance()->AddProjectException(exceptionTypeSymbol);
                }            
            }            
        }
    }
}