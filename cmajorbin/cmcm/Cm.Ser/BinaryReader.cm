/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.IO;

namespace Cm.Ser
{
    public class BinaryReader
    {
        public BinaryReader(const string& fileName_): fileName(fileName_), file(fileName), begin(file.Begin()), end(file.End()), pos(begin)
        {
        }
        public nothrow const string& FileName() const
        {
            return fileName;
        }
        public inline nothrow ulong Pos() const
        {
            return cast<ulong>(pos - begin);
        }
        public void SetPos(ulong pos_)
        {
            pos = begin + cast<int>(pos_);
        }
        public void Skip(ulong size)
        {
            pos = pos + cast<int>(size);
            if (pos > end)
            {
                throw Exception("unexpected end of file '" + fileName + "' while skipping size " + ToString(size));
            }
        }
        public bool ReadBool()
        {
            if (pos >= end)
            {
                ThrowUnexpectedEnd("bool");
            }
            return *cast<const bool*>(pos++);
        }
        public sbyte ReadSByte()
        {
            if (pos >= end)
            {
                ThrowUnexpectedEnd("sbyte");
            }
            return *cast<const sbyte*>(pos++);
        }
        public byte ReadByte()
        {
            if (pos >= end)
            {
                ThrowUnexpectedEnd("byte");
            }
            return *cast<const byte*>(pos++);
        }
        public short ReadShort()
        {
            if (pos + cast<int>(sizeof(short)) > end)
            {
                ThrowUnexpectedEnd("short");
            }
            short value = *cast<const short*>(pos);
            pos = pos + cast<int>(sizeof(short));
            return value;
        }
        public ushort ReadUShort()
        {
            if (pos + cast<int>(sizeof(ushort)) > end)
            {
                ThrowUnexpectedEnd("ushort");
            }
            ushort value = *cast<const ushort*>(pos);
            pos = pos + cast<int>(sizeof(ushort));
            return value;
        }
        public int ReadInt()
        {
            if (pos + cast<int>(sizeof(int)) > end)
            {
                ThrowUnexpectedEnd("int");
            }
            int value = *cast<const int*>(pos);
            pos = pos + cast<int>(sizeof(int));
            return value;
        }
        public uint ReadUInt()
        {
            if (pos + cast<int>(sizeof(uint)) > end)
            {
                ThrowUnexpectedEnd("uint");
            }
            uint value = *cast<const uint*>(pos);
            pos = pos + cast<int>(sizeof(uint));
            return value;
        }
        public long ReadLong()
        {
            if (pos + cast<int>(sizeof(long)) > end)
            {
                ThrowUnexpectedEnd("long");
            }
            long value = *cast<const long*>(pos);
            pos = pos + cast<int>(sizeof(long));
            return value;
        }
        public ulong ReadULong()
        {
            if (pos + cast<int>(sizeof(ulong)) > end)
            {
                ThrowUnexpectedEnd("ulong");
            }
            ulong value = *cast<const ulong*>(pos);
            pos = pos + cast<int>(sizeof(ulong));
            return value;
        }
        public float ReadFloat()
        {
            if (pos + cast<int>(sizeof(float)) > end)
            {
                ThrowUnexpectedEnd("float");
            }
            float value = *cast<const float*>(pos);
            pos = pos + cast<int>(sizeof(float));
            return value;
        }
        public double ReadDouble()
        {
            if (pos + cast<int>(sizeof(double)) > end)
            {
                ThrowUnexpectedEnd("double");
            }
            double value = *cast<const double*>(pos);
            pos = pos + cast<int>(sizeof(double));
            return value;
        }
        public char ReadChar()
        {
            if (pos >= end)
            {
                ThrowUnexpectedEnd("char");
            }
            return *pos++;
        }
        public string ReadString()
        {
            string value;
            char c = ReadChar();
            while (c != '\0')
            {
                value.Append(c);
                c = ReadChar();
            }
            return value;
        }
        public void Read(void* buf, ulong size)
        {
            if (pos + cast<int>(size) >= end)
            {
                ThrowUnexpectedEnd("void*");
            }
            cmemcpy(buf, pos, size, 1, false);
            pos = pos + cast<int>(size);
        }
        private void ThrowUnexpectedEnd(const string& type)
        {
            throw Exception("unexpected end of file '" + fileName + "' while reading " + type);
        }
        private string fileName;
        private FileMapping file;
        private const char* begin;
        private const char* end;
        private const char* pos;
    }
}
