/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Ast
{
    public abstract class NodeCreator
    {
        public virtual ~NodeCreator()
        {
        }
        public abstract nothrow Node* CreateNode(const Span& span);
    }
    
    public class Creator<T> : NodeCreator where T is AstNode
    {
        public override nothrow Node* CreateNode(const Span& span)
        {
            return new T(span);
        }
    }
    
    public class Factory
    {
        static Factory(): instance(new Factory())
        {
        }
        private Factory()
        {
            creators.Resize(int(NodeType.maxNode));
            Register(NodeType.boolNode, new Creator<BoolNode>());
            Register(NodeType.sbyteNode, new Creator<SByteNode>());
            Register(NodeType.byteNode, new Creator<ByteNode>());
            Register(NodeType.shortNode, new Creator<ShortNode>());
            Register(NodeType.ushortNode, new Creator<UShortNode>());
            Register(NodeType.intNode, new Creator<IntNode>());
            Register(NodeType.uintNode, new Creator<UIntNode>());
            Register(NodeType.longNode, new Creator<LongNode>());
            Register(NodeType.ulongNode, new Creator<ULongNode>());
            Register(NodeType.floatNode, new Creator<FloatNode>());
            Register(NodeType.doubleNode, new Creator<DoubleNode>());
            Register(NodeType.charNode, new Creator<CharNode>());
            Register(NodeType.voidNode, new Creator<VoidNode>());
            Register(NodeType.identifierNode, new Creator<IdentifierNode>());
            Register(NodeType.booleanLiteralNode, new Creator<BooleanLiteralNode>());
            Register(NodeType.sbyteLiteralNode, new Creator<SByteLiteralNode>());
            Register(NodeType.byteLiteralNode, new Creator<ByteLiteralNode>());
            Register(NodeType.shortLiteralNode, new Creator<ShortLiteralNode>());
            Register(NodeType.ushortLiteralNode, new Creator<UShortLiteralNode>());
            Register(NodeType.intLiteralNode, new Creator<IntLiteralNode>());
            Register(NodeType.uintLiteralNode, new Creator<UIntLiteralNode>());
            Register(NodeType.longLiteralNode, new Creator<LongLiteralNode>());
            Register(NodeType.ulongLiteralNode, new Creator<ULongLiteralNode>());
            Register(NodeType.floatLiteralNode, new Creator<FloatLiteralNode>());
            Register(NodeType.doubleLiteralNode, new Creator<DoubleLiteralNode>());
            Register(NodeType.charLiteralNode, new Creator<CharLiteralNode>());
            Register(NodeType.stringLiteralNode, new Creator<StringLiteralNode>());
            Register(NodeType.nullLiteralNode, new Creator<NullLiteralNode>());
            // todo derivedTypeExprNode
            Register(NodeType.equivalenceNode, new Creator<EquivalenceNode>());
            Register(NodeType.implicationNode, new Creator<ImplicationNode>());
            Register(NodeType.disjunctionNode, new Creator<DisjunctionNode>());
            Register(NodeType.conjunctionNode, new Creator<ConjunctionNode>());
            Register(NodeType.bitOrNode, new Creator<BitOrNode>());
            Register(NodeType.bitXorNode, new Creator<BitXorNode>());
            Register(NodeType.bitAndNode, new Creator<BitAndNode>());
            Register(NodeType.equalNode, new Creator<EqualNode>());
            Register(NodeType.notEqualNode, new Creator<NotEqualNode>());
            Register(NodeType.lessNode, new Creator<LessNode>());
            Register(NodeType.greaterNode, new Creator<GreaterNode>());
            Register(NodeType.lessOrEqualNode, new Creator<LessOrEqualNode>());
            Register(NodeType.greaterOrEqualNode, new Creator<GreaterOrEqualNode>());
            Register(NodeType.shiftLeftNode, new Creator<ShiftLeftNode>());
            Register(NodeType.shiftRightNode, new Creator<ShiftRightNode>());
            Register(NodeType.addNode, new Creator<AddNode>());
            Register(NodeType.subNode, new Creator<SubNode>());
            Register(NodeType.mulNode, new Creator<MulNode>());
            Register(NodeType.divNode, new Creator<DivNode>());
            Register(NodeType.remNode, new Creator<RemNode>());
            Register(NodeType.invokeNode, new Creator<InvokeNode>());
            Register(NodeType.indexNode, new Creator<IndexNode>());
            Register(NodeType.dotNode, new Creator<DotNode>());
            Register(NodeType.arrowNode, new Creator<ArrowNode>());
            Register(NodeType.postfixIncNode, new Creator<PostfixIncNode>());
            Register(NodeType.postfixDecNode, new Creator<PostfixDecNode>());
            Register(NodeType.derefNode, new Creator<DerefNode>());
            Register(NodeType.addrOfNode, new Creator<AddrOfNode>());
            Register(NodeType.notNode, new Creator<NotNode>());
            Register(NodeType.unaryPlusNode, new Creator<UnaryPlusNode>());
            Register(NodeType.unaryMinusNode, new Creator<UnaryMinusNode>());
            Register(NodeType.complementNode, new Creator<ComplementNode>());
            Register(NodeType.prefixIncNode, new Creator<PrefixIncNode>());
            Register(NodeType.prefixDecNode, new Creator<PrefixDecNode>());
            Register(NodeType.sizeOfNode, new Creator<SizeOfNode>());
            Register(NodeType.typeNameNode, new Creator<TypeNameNode>());
            Register(NodeType.castNode, new Creator<CastNode>());
            Register(NodeType.newNode, new Creator<NewNode>());
            Register(NodeType.constructNode, new Creator<ConstructNode>());
            Register(NodeType.thisNode, new Creator<ThisNode>());
            Register(NodeType.baseNode, new Creator<BaseNode>());
            Register(NodeType.identifierNode, new Creator<IdentifierNode>());
            Register(NodeType.templateIdNode, new Creator<TemplateIdNode>());
            Register(NodeType.enumTypeNode, new Creator<EnumTypeNode>());
            Register(NodeType.enumConstantNode, new Creator<EnumConstantNode>());
            Register(NodeType.constantNode, new Creator<ConstantNode>());
            Register(NodeType.parameterNode, new Creator<ParameterNode>());
            Register(NodeType.delegateNode, new Creator<DelegateNode>());
            Register(NodeType.classDelegateNode, new Creator<ClassDelegateNode>());
            Register(NodeType.typedefNode, new Creator<TypedefNode>());
            Register(NodeType.labelNode, new Creator<LabelNode>());
            Register(NodeType.simpleStatementNode, new Creator<SimpleStatementNode>());
            Register(NodeType.returnStatementNode, new Creator<ReturnStatementNode>());
            Register(NodeType.conditionalStatementNode, new Creator<ConditionalStatementNode>());
            Register(NodeType.switchStatementNode, new Creator<SwitchStatementNode>());
            Register(NodeType.caseStatementNode, new Creator<CaseStatementNode>());
            Register(NodeType.defaultStatementNode, new Creator<DefaultStatementNode>());
            Register(NodeType.gotoCaseStatementNode, new Creator<GotoCaseStatementNode>());
            Register(NodeType.gotoDefaultStatementNode, new Creator<GotoDefaultStatementNode>());
            Register(NodeType.whileStatementNode, new Creator<WhileStatementNode>());
            Register(NodeType.doStatementNode, new Creator<DoStatementNode>());
            Register(NodeType.forStatementNode, new Creator<ForStatementNode>());
            Register(NodeType.rangeForStatementNode, new Creator<RangeForStatementNode>());
            Register(NodeType.compoundStatementNode, new Creator<CompoundStatementNode>());
            Register(NodeType.breakStatementNode, new Creator<BreakStatementNode>());
            Register(NodeType.continueStatementNode, new Creator<ContinueStatementNode>());
            Register(NodeType.gotoStatementNode, new Creator<GotoStatementNode>());
            Register(NodeType.typedefStatementNode, new Creator<TypedefStatementNode>());
            Register(NodeType.assignmentStatementNode, new Creator<AssignmentStatementNode>());
            Register(NodeType.constructionStatementNode, new Creator<ConstructionStatementNode>());
            Register(NodeType.deleteStatementNode, new Creator<DeleteStatementNode>());
            Register(NodeType.destroyStatementNode, new Creator<DestroyStatementNode>());
            Register(NodeType.throwStatementNode, new Creator<ThrowStatementNode>());
            Register(NodeType.tryStatementNode, new Creator<TryStatementNode>());
            Register(NodeType.catchNode, new Creator<CatchNode>());
            Register(NodeType.assertStatementNode, new Creator<AssertStatementNode>());
            Register(NodeType.condCompSymbolNode, new Creator<CondCompSymbolNode>());
            Register(NodeType.condCompDisjunctionNode, new Creator<CondCompDisjunctionNode>());
            Register(NodeType.condCompConjunctionNode, new Creator<CondCompConjunctionNode>());
            Register(NodeType.condCompNotNode, new Creator<CondCompNotNode>());
            Register(NodeType.condCompPrimaryNode, new Creator<CondCompPrimaryNode>());
            Register(NodeType.condCompPartNode, new Creator<CondCompPartNode>());
            Register(NodeType.condCompStatementNode, new Creator<CondCompStatementNode>());
            Register(NodeType.disjunctiveConstraintNode, new Creator<DisjunctiveConstraintNode>());
            Register(NodeType.conjunctiveConstraintNode, new Creator<ConjunctiveConstraintNode>());
            Register(NodeType.whereConstraintNode, new Creator<WhereConstraintNode>());
            Register(NodeType.isConstraintNode, new Creator<IsConstraintNode>());
            Register(NodeType.multiParamConstraintNode,  new Creator<MultiParamConstraintNode>());
            Register(NodeType.typeNameConstraintNode, new Creator<TypeNameConstraintNode>());
            Register(NodeType.constructorConstraintNode, new Creator<ConstructorConstraintNode>());
            Register(NodeType.destructorConstraintNode, new Creator<DestructorConstraintNode>());
            Register(NodeType.memberFunctionConstraintNode, new Creator<MemberFunctionConstraintNode>());
            Register(NodeType.functionConstraintNode, new Creator<FunctionConstraintNode>());
            Register(NodeType.axiomStatementNode, new Creator<AxiomStatementNode>());
            Register(NodeType.axiomNode, new Creator<AxiomNode>());
            Register(NodeType.conceptIdNode, new Creator<ConceptIdNode>());
            Register(NodeType.conceptNode, new Creator<ConceptNode>());
            // todo
        }    
        public static nothrow Factory& Instance()
        {
            return *instance;
        }
        public nothrow Node* CreateNode(NodeType nodeType, const Span& span)
        {
            return creators[int(nodeType)]->CreateNode(span);
        }
        private void Register(NodeType nodeType, NodeCreator* creator)
        {
            creators[int(nodeType)] = UniquePtr<NodeCreator>(creator);
        }
        private static UniquePtr<Factory> instance;
        private List<UniquePtr<NodeCreator>> creators;
    }
}
