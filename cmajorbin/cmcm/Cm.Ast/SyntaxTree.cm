/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.Ast
{
    public class SyntaxTree
    {
        public nothrow SyntaxTree()
        {
        }
        public nothrow SyntaxTree(SyntaxTree&& that) : compileUnits(Rvalue(compileUnits))
        {
        }
        public void AddCompileUnit(CompileUnitNode* compileUnit)
        {
            compileUnits.Add(UniquePtr<CompileUnitNode>(compileUnit));
        }
        public nothrow inline const List<UniquePtr<CompileUnitNode>>& CompileUnits() const
        {
            return compileUnits;
        }
        public void Write(Writer& writer)
        {
            ushort numCompileUnits = cast<ushort>(compileUnits.Count());
            writer.GetBinaryWriter().Write(numCompileUnits);
            for (const UniquePtr<CompileUnitNode>& compileUnit : compileUnits)
            {
                writer.Write(compileUnit.GetPtr());
            }
        }
        private List<UniquePtr<CompileUnitNode>> compileUnits;
    }
}
