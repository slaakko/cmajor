/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using Span = System.Text.Parsing.Span;

namespace Cm.Ast
{
    public abstract class ConstraintNode : Node
    {
        public nothrow ConstraintNode(const Span& span_) : base(span_)
        {
        }
        public override nothrow bool IsConstraintNode() const 
        {
            return true;
        }
    }
    
    public class WhereConstraintNode : ConstraintNode
    {
        public nothrow WhereConstraintNode(const Span& span_) : base(span_)
        {
        }
        public nothrow WhereConstraintNode(const Span& span_, ConstraintNode* constraint_)
        {
        }
        public override nothrow NodeType GetNodeType() const
        {
            return NodeType.whereConstraintNode;
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            return new WhereConstraintNode(GetSpan(), cast<ConstraintNode*>(constraint->Clone(cloneContext)));
        }
        public override void Read(Reader& reader)
        {
            constraint.Reset(reader.ReadConstraintNode());
            constraint->SetParent(this);
        }
        public override void Write(Writer& writer)
        {
            writer.Write(constraint.GetPtr());
        }
        private UniquePtr<ConstraintNode> constraint;
    }
}
