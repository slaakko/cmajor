/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;

namespace Cm.Ast
{
    public enum Specifiers : uint
    {
        none = 0u,
        public_ = 1u << 0u,
        protected_ = 1u << 1u,
        private_ = 1u << 2u,
        internal_ = 1u << 3u,
        access = public_ | protected_ | private_ | internal_,
        static_ = 1u << 4u,
        virtual_ = 1u << 5u,
        override_ = 1u << 6u,
        abstract_ = 1u << 7u,
        virtuality = virtual_ | override_ | abstract_,
        explicit_ = 1u << 8u,
        external = 1u << 9u,
        suppress_ = 1u << 10u,
        default_ = 1u << 11u,
        inline_  = 1u << 12u,
        cdecl_ = 1u << 13u,
        nothrow_ = 1u << 14u,
        throw_ = 1u << 15u,
        new_ = 1u << 16u,
        unit_test = 1u << 17u,
        non_access_specifiers = static_ | virtuality | explicit_ | external | suppress_ | default_ | inline_ | cdecl_ | nothrow_ | throw_ | unit_test | new_
    }
    
    public bool HasStaticSpecifier(Specifiers s)
    {
        return (s & Specifiers.static_) != Specifiers.none;
    }
    
    public nothrow string SpecifierStr(Specifiers s)
    {
        string str;
        if ((s & Specifiers.external) != Specifiers.none)
        {
            str.Append("extern");
        }
        Specifiers access = cast<Specifiers>(s & Specifiers.access);
        if ((access & Specifiers.public_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("public");
        }
        if ((access & Specifiers.protected_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("protected");
        }
        if ((access & Specifiers.internal_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("internal");
        }
        if ((access & Specifiers.private_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("private");
        }
        if ((s & Specifiers.cdecl_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("cdecl");
        }
        if ((s & Specifiers.nothrow_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("nothrow");
        }
        if ((s & Specifiers.throw_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("throw");
        }
        if ((s & Specifiers.static_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("static");
        }
        if ((s & Specifiers.virtual_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("virtual");
        }
        if ((s & Specifiers.abstract_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("abstract");
        }
        if ((s & Specifiers.override_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("override");
        }
        if ((s & Specifiers.suppress_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("suppress");
        }
        if ((s & Specifiers.default_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("default");
        }
        if ((s & Specifiers.explicit_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("explicit");
        }
        if ((s & Specifiers.inline_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("inline");
        }
        if ((s & Specifiers.new_) != Specifiers.none)
        {
            if (!str.IsEmpty())
            {
                str.Append(' ');
            }
            str.Append("new");
        }
        return str;
    }
}
