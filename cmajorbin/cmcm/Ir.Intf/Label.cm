/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Ir.Intf
{
    public abstract class LabelObject : Object
    {
        public nothrow LabelObject(Type* labelType_) : base("", labelType_), label()
        {
        }
        public nothrow LabelObject(Type* labelType_, const string& label_, const string& objectName_) : base(objectName_, labelType_), label(label_)
        {
        }
        public abstract nothrow string Target() const;
        public abstract nothrow void Set(LabelObject* from);
        public inline nothrow void SetLabelName(const string& label_)
        {
            label = label_;
        }
        public inline nothrow const string& GetLabelName() const
        {
            return label;
        }
        private string label;
    }
    
    public void Add(List<LabelObject*>& to, LabelObject* label)
    {
        for (LabelObject* t : to)
        {
            if (t == label)
            {
                return;
            }
        }
        to.Add(label);
    }
    
    public void Merge(List<LabelObject*>& to, const List<LabelObject*>& labels)
    {
        for (LabelObject* label : labels)
        {
            Add(to, label);
        }
    }
    
    public void Backpatch(List<LabelObject*>& targets, LabelObject* from)
    {
        for (LabelObject* target : targets)
        {
            target->Set(from);
        }
    }
}
