/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.Bind
{
    internal void BindParameter(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, 
        Cm.Core.ClassTemplateRepository& classTemplateRepository, Cm.Ast.ParameterNode* parameterNode, int parameterIndex)
    {
        Cm.Sym.Symbol* symbol = null;
        if (parameterNode->Id() != null)
        {
            symbol = containerScope->Lookup(parameterNode->Id()->Str(), Cm.Sym.SymbolTypeSetId.lookupParameter);
        }
        else
        {
            symbol = containerScope->Lookup("__parameter" + ToString(parameterIndex), Cm.Sym.SymbolTypeSetId.lookupParameter);
        }
        if (symbol != null)
        {
            if (symbol is Cm.Sym.ParameterSymbol*)
            {
                Cm.Sym.ParameterSymbol* parameterSymbol = cast<Cm.Sym.ParameterSymbol*>(symbol);
                if (parameterSymbol->IsBound()) return;
                Cm.Sym.TypeSymbol* parameterType = ResolveType(symbolTable, containerScope, fileScopes, classTemplateRepository, parameterNode->TypeExpr());
                parameterSymbol->SetType(parameterType);
                parameterSymbol->SetBound();
            }
            else
            {
                throw Cm.Core.Error("symbol '" + symbol->FullName() + "' does not denote a parameter", symbol->GetSpan());
            }
        }
        else
        {
            if (parameterNode->Id() != null)
            {
                throw Cm.Core.Error("parameter symbol '" + parameterNode->Id()->Str() + "' not found", parameterNode->GetSpan());
            }            
            else
            {
                throw Cm.Core.Error("parameter symbol '__parameter" + ToString(parameterIndex) + "' not found", parameterNode->GetSpan());
            }        
        }
    }
    
    public void GenerateReceives(Cm.Sym.ContainerScope* containerScope, Cm.BoundTree.BoundCompileUnit& boundCompileUnit, Cm.BoundTree.BoundFunction* boundFunction)
    {
        Cm.Sym.FunctionSymbol* functionSymbol = boundFunction->FunctionSymbol();
        if (functionSymbol->IsExternal()) return;
        int index = 0;
        for (Cm.Sym.ParameterSymbol* parameterSymbol : functionSymbol->Parameters())
        {
            Cm.BoundTree.BoundReceiveStatement* boundReceiveStatement = new Cm.BoundTree.BoundReceiveStatement(parameterSymbol);
            Cm.Sym.TypeSymbol* parameterType = parameterSymbol->GetType();
            List<Cm.Core.Argument> resolutionArguments;
            Cm.Core.Argument targetArgument(Cm.Core.ArgumentCategory.lvalue, boundCompileUnit.SymbolTable().GetTypeRepository().MakePointerType(parameterType, parameterSymbol->GetSpan()));
            resolutionArguments.Add(targetArgument);
            if (parameterType->IsNonConstReferenceType())
            {
                Cm.Core.Argument sourceArgument = Cm.Core.Argument(Cm.Core.ArgumentCategory.lvalue, parameterType);
                resolutionArguments.Add(sourceArgument);
            }
            else if (parameterType->IsRvalueRefType())
            {
                Cm.Core.Argument sourceArgument = Cm.Core.Argument(Cm.Core.ArgumentCategory.rvalue, parameterType);
                resolutionArguments.Add(sourceArgument);
            }
            else
            {
                Cm.Core.Argument sourceArgument = Cm.Core.Argument(Cm.Core.ArgumentCategory.rvalue, boundCompileUnit.SymbolTable().GetTypeRepository().MakeConstReferenceType(parameterType, 
                    parameterSymbol->GetSpan()));
                resolutionArguments.Add(sourceArgument);
            }
            Cm.Sym.FunctionLookupSet functionLookups;
            functionLookups.Add(Cm.Sym.FunctionLookup(Cm.Sym.ScopeLookup.this_, parameterType->GetContainerScope()->ClassInterfaceOrNsScope()));
            List<Cm.Sym.FunctionSymbol*> conversions;
            Cm.Sym.FunctionSymbol* ctor = ResolveOverload(containerScope, boundCompileUnit, "@constructor", resolutionArguments, functionLookups, parameterSymbol->GetSpan(), conversions);
            boundReceiveStatement->SetConstructor(ctor);
            boundFunction->Body()->InsertStatement(index, boundReceiveStatement);
            ++index;
        }
        boundFunction->SetClassObjectLayoutFunIndex(index);
    }
}
