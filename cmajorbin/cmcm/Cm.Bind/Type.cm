/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.Bind
{
    internal void BindType(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, Cm.Core.ClassTemplateRepository& classTemplateRepository,
        Cm.Sym.TypeSymbol* type)
    {
        if (type->IsBound()) return;
        if (type is Cm.Sym.DerivedTypeSymbol*) return;
        if (type is Cm.Sym.TemplateTypeSymbol*) return;
        Cm.Ast.Node* node = symbolTable.GetNode(type);
        if (type is Cm.Sym.ClassTypeSymbol*)
        {
            Cm.Ast.ClassNode* classNode = null;
            if (node is Cm.Ast.ClassNode*)
            {
                classNode = cast<Cm.Ast.ClassNode*>(node);
            }
            else
            {
                throw Cm.Core.Error("class node expected", node->GetSpan(), type->GetSpan());
            }
            BindClass(symbolTable, containerScope, fileScopes, classTemplateRepository, classNode, cast<Cm.Sym.ClassTypeSymbol*>(type));
        }
        else if (type is Cm.Sym.EnumTypeSymbol*)
        {
            Cm.Ast.EnumTypeNode* enumTypeNode = null;
            if (node is Cm.Ast.EnumTypeNode*)
            {
                enumTypeNode = cast<Cm.Ast.EnumTypeNode*>(node);
            }
            else
            {
                throw Cm.Core.Error("enum type node expected", node->GetSpan(), type->GetSpan());
            }
            BindEnumType(symbolTable, containerScope, fileScopes, classTemplateRepository, enumTypeNode, cast<Cm.Sym.EnumTypeSymbol*>(type));
        }
        else if (type is Cm.Sym.DelegateTypeSymbol*)
        {
            Cm.Ast.DelegateNode* delegateTypeNode = null;
            if (node is Cm.Ast.DelegateNode*)
            {
                delegateTypeNode = cast<Cm.Ast.DelegateNode*>(node);
            }
            else
            {
                throw Cm.Core.Error("delegate type node expected", node->GetSpan(), type->GetSpan());
            }
            BindDelegate(symbolTable, containerScope, fileScopes, classTemplateRepository, delegateTypeNode, cast<Cm.Sym.DelegateTypeSymbol*>(type));
        }
        else if (type is Cm.Sym.ClassDelegateTypeSymbol*)
        {
            Cm.Ast.ClassDelegateNode* classDelegateTypeNode = null;
            if (node is Cm.Ast.ClassDelegateNode*)
            {
                classDelegateTypeNode = cast<Cm.Ast.ClassDelegateNode*>(node);
            }
            else
            {
                throw Cm.Core.Error("class delegate type node expected", node->GetSpan(), type->GetSpan());
            }
            BindClassDelegate(symbolTable, containerScope, fileScopes, classTemplateRepository, classDelegateTypeNode, cast<Cm.Sym.ClassDelegateTypeSymbol*>(type));
        }
    }
}
