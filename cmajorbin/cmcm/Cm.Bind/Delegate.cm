/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.Bind
{
    internal Cm.Sym.DelegateTypeSymbol* BindDelegate(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, 
        Cm.Core.ClassTemplateRepository& classTemplateRepository, Cm.Ast.DelegateNode* delegateNode)
    {
        Cm.Sym.Symbol* symbol = containerScope->Lookup(delegateNode->Id()->Str(), Cm.Sym.SymbolTypeSetId.lookupDelegate);
        if (symbol is Cm.Sym.DelegateTypeSymbol*)
        {
            Cm.Sym.DelegateTypeSymbol* delegateTypeSymbol = cast<Cm.Sym.DelegateTypeSymbol*>(symbol);
            BindDelegate(symbolTable, containerScope, fileScopes, classTemplateRepository, delegateNode, delegateTypeSymbol);
            return delegateTypeSymbol;
        }
        else
        {
            throw Cm.Core.Error("symbol '" + symbol->FullName() + "' does not denote a delegate type", symbol->GetSpan());
        }
    }

    internal void BindDelegate(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, 
        Cm.Core.ClassTemplateRepository& classTemplateRepository, Cm.Ast.DelegateNode* delegateNode, Cm.Sym.DelegateTypeSymbol* delegateTypeSymbol)
    {
        Cm.Ast.Specifiers specifiers = delegateNode->GetSpecifiers();
        #assert(delegateNode->Parent() != null);
        bool isClassMember = delegateNode->Parent() is Cm.Ast.ClassNode*;
        SetAccess(delegateTypeSymbol, specifiers, isClassMember);
        if ((specifiers & Cm.Ast.Specifiers.abstract_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("delegate cannot be abstract", delegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.virtual_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("delegate cannot be virtual", delegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.override_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("delegate cannot be override", delegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.static_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("delegate cannot be static", delegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.explicit_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("delegate cannot be explicit", delegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.external) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("delegate cannot be external", delegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.suppress_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("delegate cannot be suppressed", delegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.default_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("delegate cannot be default", delegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.inline_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("delegate cannot be inline", delegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.constexpr_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("delegate cannot be constexpr", delegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.cdecl_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("delegate cannot be cdecl", delegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.new_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("delegate cannot be new", delegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.nothrow_) != Cm.Ast.Specifiers.none)
        {
            delegateTypeSymbol->SetNothrow();
        }
        if ((specifiers & Cm.Ast.Specifiers.throw_) != Cm.Ast.Specifiers.none)
        {
            delegateTypeSymbol->SetThrow();
        }
    }
    
    internal void CompleteBindDelegate(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, 
        Cm.Core.ClassTemplateRepository& classTemplateRepository, Cm.Sym.DelegateTypeSymbol* delegateTypeSymbol, Cm.Ast.DelegateNode* delegateNode)
    {
        Cm.Sym.TypeSymbol* returnType = ResolveType(symbolTable, containerScope, fileScopes, classTemplateRepository, delegateNode->ReturnTypeExpr());
        delegateTypeSymbol->SetReturnType(returnType);
        delegateTypeSymbol->MakeIrType();
        delegateTypeSymbol->SetBound();
    }
        
    internal Cm.Sym.ClassDelegateTypeSymbol* BindClassDelegate(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, 
        Cm.Core.ClassTemplateRepository& classTemplateRepository, Cm.Ast.ClassDelegateNode* classDelegateNode)
    {
        Cm.Sym.Symbol* symbol = containerScope->Lookup(classDelegateNode->Id()->Str(), Cm.Sym.SymbolTypeSetId.lookupClassDelegate);
        if (symbol is Cm.Sym.ClassDelegateTypeSymbol*)
        {
            Cm.Sym.ClassDelegateTypeSymbol* classDelegateTypeSymbol = cast<Cm.Sym.ClassDelegateTypeSymbol*>(symbol);
            BindClassDelegate(symbolTable, containerScope, fileScopes, classTemplateRepository, classDelegateNode, classDelegateTypeSymbol);
            return classDelegateTypeSymbol;
        }
        else
        {
            throw Cm.Core.Error("symbol '" + symbol->FullName() + "' does not denote a class delegate type", symbol->GetSpan());
        }
    }

    internal void BindClassDelegate(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, 
        Cm.Core.ClassTemplateRepository& classTemplateRepository, Cm.Ast.ClassDelegateNode* classDelegateNode, Cm.Sym.ClassDelegateTypeSymbol* classDelegateTypeSymbol)
    {
        Cm.Ast.Specifiers specifiers = classDelegateNode->GetSpecifiers();
        #assert(classDelegateNode->Parent() != null);
        bool isClassMember = classDelegateNode->Parent() is Cm.Ast.ClassNode*;
        SetAccess(classDelegateTypeSymbol, specifiers, isClassMember);
        if ((specifiers & Cm.Ast.Specifiers.abstract_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("class delegate cannot be abstract", classDelegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.virtual_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("class delegate cannot be virtual", classDelegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.override_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("class delegate cannot be override", classDelegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.static_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("class delegate cannot be static", classDelegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.explicit_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("class delegate cannot be explicit", classDelegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.external) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("class delegate cannot be external", classDelegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.suppress_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("class delegate cannot be suppressed", classDelegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.default_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("class delegate cannot be default", classDelegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.inline_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("class delegate cannot be inline", classDelegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.constexpr_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("class delegate cannot be constexpr", classDelegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.cdecl_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("class delegate cannot be cdecl", classDelegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.new_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("class delegate cannot be new", classDelegateTypeSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.nothrow_) != Cm.Ast.Specifiers.none)
        {
            classDelegateTypeSymbol->SetNothrow();
        }
        if ((specifiers & Cm.Ast.Specifiers.throw_) != Cm.Ast.Specifiers.none)
        {
            classDelegateTypeSymbol->SetThrow();
        }
    }

    internal void CompleteBindClassDelegate(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, 
        Cm.Core.ClassTemplateRepository& classTemplateRepository, Cm.Sym.ClassDelegateTypeSymbol* classDelegateTypeSymbol, Cm.Ast.ClassDelegateNode* classDelegateNode)
    {
        Cm.Sym.TypeSymbol* returnType = ResolveType(symbolTable, containerScope, fileScopes, classTemplateRepository, classDelegateNode->ReturnTypeExpr());
        classDelegateTypeSymbol->SetReturnType(returnType);
        Cm.Sym.MemberVariableSymbol* obj = new Cm.Sym.MemberVariableSymbol(classDelegateNode->GetSpan(), "obj");
        symbolTable.SetSidAndAddSymbol(obj);
        obj->SetType(symbolTable.GetTypeRepository().MakeGenericPtrType(classDelegateNode->GetSpan()));
        classDelegateTypeSymbol->AddSymbol(obj);
        Cm.Sym.MemberVariableSymbol* dlg = new Cm.Sym.MemberVariableSymbol(classDelegateNode->GetSpan(), "dlg");
        symbolTable.SetSidAndAddSymbol(dlg);
        Cm.Sym.DelegateTypeSymbol* dlgType = new Cm.Sym.DelegateTypeSymbol(classDelegateNode->GetSpan(), "dlgType");
        symbolTable.SetSidAndAddSymbol(dlgType);
        dlgType->SetReturnType(returnType);
        Cm.Sym.ParameterSymbol* dlgTypeObjParam = new Cm.Sym.ParameterSymbol(classDelegateNode->GetSpan(), "obj");
        symbolTable.SetSidAndAddSymbol(dlgTypeObjParam);
        dlgTypeObjParam->SetType(symbolTable.GetTypeRepository().MakeGenericPtrType(classDelegateNode->GetSpan()));
        dlgType->AddSymbol(dlgTypeObjParam);
        for (Cm.Sym.ParameterSymbol* classDelegateParam : classDelegateTypeSymbol->Parameters())
        {
            Cm.Sym.ParameterSymbol* dlgTypeParam = new Cm.Sym.ParameterSymbol(classDelegateNode->GetSpan(), classDelegateParam->Name());
            symbolTable.SetSidAndAddSymbol(dlgTypeParam);
            dlgTypeParam->SetType(classDelegateParam->GetType());
            dlgType->AddSymbol(dlgTypeParam);
        }
        dlgType->MakeIrType();
        classDelegateTypeSymbol->AddSymbol(dlgType);
        dlg->SetType(dlgType);
        classDelegateTypeSymbol->AddSymbol(dlg);
        classDelegateTypeSymbol->MakeIrType();
        classDelegateTypeSymbol->SetBound();
    }
}
