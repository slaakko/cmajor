/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.Bind
{
    internal void BindMemberVariable(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, 
        Cm.Core.ClassTemplateRepository& classTemplateRepository, Cm.Ast.MemberVariableNode* memberVariableNode)
    {
        Cm.Sym.Symbol* symbol = containerScope->Lookup(memberVariableNode->Id()->Str(), Cm.Sym.SymbolTypeSetId.lookupMemberVariable);
        if (symbol != null)
        {
            if (symbol is Cm.Sym.MemberVariableSymbol*)
            {
                Cm.Sym.MemberVariableSymbol* memberVariableSymbol = cast<Cm.Sym.MemberVariableSymbol*>(symbol);
                BindMemberVariable(symbolTable, containerScope, fileScopes, classTemplateRepository, memberVariableNode, memberVariableSymbol);
            }
            else
            {
                throw Cm.Core.Error("symbol '" + symbol->FullName() + "' does not denote a member variable", symbol->GetSpan());
            }
        }
        else
        {
            throw Cm.Core.Error("member variable symbol '" + memberVariableNode->Id()->Str() + "' not found", memberVariableNode->GetSpan());
        }
    }
    
    internal void BindMemberVariable(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, 
        Cm.Core.ClassTemplateRepository& classTemplateRepository, Cm.Ast.MemberVariableNode* memberVariableNode, Cm.Sym.MemberVariableSymbol* memberVariableSymbol)
    {
        if (memberVariableSymbol->IsBound()) return;
        Cm.Ast.Specifiers specifiers = memberVariableNode->GetSpecifiers();
        SetAccess(memberVariableSymbol, specifiers, true);
        if ((specifiers & Cm.Ast.Specifiers.abstract_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("member variable cannot be abstract", memberVariableSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.virtual_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("member variable cannot be virtual", memberVariableSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.override_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("member variable cannot be override", memberVariableSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.explicit_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("member variable cannot be explicit", memberVariableSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.external) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("member variable cannot be external", memberVariableSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.suppress_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("member variable cannot be suppressed", memberVariableSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.default_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("member variable cannot be default", memberVariableSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.inline_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("member variable cannot be inline", memberVariableSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.constexpr_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("member variable cannot be constexpr", memberVariableSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.cdecl_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("member variable cannot be cdecl", memberVariableSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.nothrow_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("member variable cannot be nothrow", memberVariableSymbol->GetSpan());
        }
        if ((specifiers & Cm.Ast.Specifiers.throw_) != Cm.Ast.Specifiers.none)
        {
            throw Cm.Core.Error("member variable cannot be throw", memberVariableSymbol->GetSpan());
        }
        #assert(memberVariableSymbol->Parent() != null);
        if (memberVariableSymbol->Parent()->IsClassTemplateSymbol())
        {
            memberVariableSymbol->SetBound();
            return;
        }
        Cm.Sym.TypeSymbol* type = ResolveType(symbolTable, containerScope, fileScopes, classTemplateRepository, memberVariableNode->TypeExpr());
        if (!Cm.Sym.GetGlobalFlag(Cm.Sym.GlobalFlags.generate_docs))
        {
            BindType(symbolTable, containerScope, fileScopes, classTemplateRepository, type);
            if (type->Access() < memberVariableSymbol->Access())
            {
                throw Cm.Core.Error("type of member variable must be at least as accessible as the member variable itself", type->GetSpan(), memberVariableSymbol->GetSpan());
            }
        }
        memberVariableSymbol->SetType(type);
        memberVariableSymbol->SetBound();
    }
}
 