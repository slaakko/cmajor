using System;
using System.Collections;
using System.Text.Parsing;

public class DcGrammar: System.Text.Parsing.Grammar
{
    public static DcGrammar* Create()
    {
        return Create(new ParsingDomain());
    }
    public static DcGrammar* Create(ParsingDomain* parsingDomain)
    {
        RegisterParsingDomain(parsingDomain);
        DcGrammar* grammar = new DcGrammar(parsingDomain);
        parsingDomain->AddGrammar(grammar);
        grammar->CreateRules();
        grammar->Link();
        return grammar;
    }
    private DcGrammar(ParsingDomain* parsingDomain): base("DcGrammar", parsingDomain->GetNamespaceScope(""), parsingDomain)
    {
        SetOwner(0);
    }
    public double Parse(const char* start, const char* end, int fileIndex, const string& fileName)
    {
        Scanner scanner(start, end, fileIndex, fileName, SkipRule());
        System.IO.OutputStream* log = Log();
        UniquePtr<XmlLog> xmlLog;
        if (log != null)
        {
            xmlLog.Reset(new XmlLog(*log, MaxLogLineLength()));
            scanner.SetLog(xmlLog.GetPtr());
            xmlLog->WriteBeginRule("parse");
        }
        Stack<UniquePtr<Object>> stack;
        Match match = Parse(scanner, stack);
        Span stop = scanner.GetSpan();
        if (log != null)
        {
            xmlLog->WriteEndRule("parse");
        }
        if (!match.Hit() || stop.Start() != int(end - start))
        {
            Rule* startRule = StartRule();
            if (startRule != null)
            {
                throw ExpectationFailure(startRule->Info(), fileName, stop, start, end);
            }
            else
            {
                throw ParsingException("grammar '" + Name() + "' has no start rule", fileName, stop, start, end);
            }
        }
        UniquePtr<Object> value = stack.Pop();
        double result = *cast<ValueObject<double>*>(value.GetPtr());
        return result;
    }
    private class exprRule: System.Text.Parsing.Rule
    {
        public exprRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
            base(name_, enclosingScope_, definition_), contextStack(), context()
        {
            SetValueTypeName("double");
        }
        public override void Enter(Stack<UniquePtr<Object>>& stack)
        {
            contextStack.Push(Rvalue(context));
            context = Context();
        }
        public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<double>(context.value)));
            }
            context = contextStack.Pop();
        }
        public override void Link()
        {
            ActionParser* a0ActionParser = GetAction("A0");
            a0ActionParser->SetAction(ParsingAction(A0Action));
            ActionParser* a1ActionParser = GetAction("A1");
            a1ActionParser->SetAction(ParsingAction(A1Action));
            ActionParser* a2ActionParser = GetAction("A2");
            a2ActionParser->SetAction(ParsingAction(A2Action));
            NonterminalParser* tNonterminalParser = GetNonterminal("t");
            tNonterminalParser->SetPostCall(PostCall(Postt));
            NonterminalParser* ptNonterminalParser = GetNonterminal("pt");
            ptNonterminalParser->SetPostCall(PostCall(Postpt));
            NonterminalParser* mtNonterminalParser = GetNonterminal("mt");
            mtNonterminalParser->SetPostCall(PostCall(Postmt));
        }
        public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
        {
            context.value = context.fromt;
        }
        public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
        {
            context.value = context.value + context.frompt;
        }
        public throw void A2Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
        {
            context.value = context.value - context.frommt;
        }
        public throw void Postt(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                UniquePtr<Object> fromt_value = stack.Pop();
                context.fromt = *cast<ValueObject<double>*>(fromt_value.GetPtr());
            }
        }
        public throw void Postpt(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                UniquePtr<Object> frompt_value = stack.Pop();
                context.frompt = *cast<ValueObject<double>*>(frompt_value.GetPtr());
            }
        }
        public throw void Postmt(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                UniquePtr<Object> frommt_value = stack.Pop();
                context.frommt = *cast<ValueObject<double>*>(frommt_value.GetPtr());
            }
        }
        private class Context
        {
            public double value;
            public double fromt;
            public double frompt;
            public double frommt;
        }
        private Stack<Context> contextStack;
        private Context context;
    }
    private class termRule: System.Text.Parsing.Rule
    {
        public termRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
            base(name_, enclosingScope_, definition_), contextStack(), context()
        {
            SetValueTypeName("double");
        }
        public override void Enter(Stack<UniquePtr<Object>>& stack)
        {
            contextStack.Push(Rvalue(context));
            context = Context();
        }
        public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<double>(context.value)));
            }
            context = contextStack.Pop();
        }
        public override void Link()
        {
            ActionParser* a0ActionParser = GetAction("A0");
            a0ActionParser->SetAction(ParsingAction(A0Action));
            ActionParser* a1ActionParser = GetAction("A1");
            a1ActionParser->SetAction(ParsingAction(A1Action));
            ActionParser* a2ActionParser = GetAction("A2");
            a2ActionParser->SetAction(ParsingAction(A2Action));
            NonterminalParser* fNonterminalParser = GetNonterminal("f");
            fNonterminalParser->SetPostCall(PostCall(Postf));
            NonterminalParser* tfNonterminalParser = GetNonterminal("tf");
            tfNonterminalParser->SetPostCall(PostCall(Posttf));
            NonterminalParser* dfNonterminalParser = GetNonterminal("df");
            dfNonterminalParser->SetPostCall(PostCall(Postdf));
        }
        public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
        {
            context.value = context.fromf;
        }
        public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
        {
            context.value = context.value * context.fromtf;
        }
        public throw void A2Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
        {
            context.value = context.value / context.fromdf;
        }
        public throw void Postf(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                UniquePtr<Object> fromf_value = stack.Pop();
                context.fromf = *cast<ValueObject<double>*>(fromf_value.GetPtr());
            }
        }
        public throw void Posttf(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                UniquePtr<Object> fromtf_value = stack.Pop();
                context.fromtf = *cast<ValueObject<double>*>(fromtf_value.GetPtr());
            }
        }
        public throw void Postdf(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                UniquePtr<Object> fromdf_value = stack.Pop();
                context.fromdf = *cast<ValueObject<double>*>(fromdf_value.GetPtr());
            }
        }
        private class Context
        {
            public double value;
            public double fromf;
            public double fromtf;
            public double fromdf;
        }
        private Stack<Context> contextStack;
        private Context context;
    }
    private class factorRule: System.Text.Parsing.Rule
    {
        public factorRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
            base(name_, enclosingScope_, definition_), contextStack(), context()
        {
            SetValueTypeName("double");
        }
        public override void Enter(Stack<UniquePtr<Object>>& stack)
        {
            contextStack.Push(Rvalue(context));
            context = Context();
        }
        public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<double>(context.value)));
            }
            context = contextStack.Pop();
        }
        public override void Link()
        {
            ActionParser* a0ActionParser = GetAction("A0");
            a0ActionParser->SetAction(ParsingAction(A0Action));
            ActionParser* a1ActionParser = GetAction("A1");
            a1ActionParser->SetAction(ParsingAction(A1Action));
            NonterminalParser* mpNonterminalParser = GetNonterminal("mp");
            mpNonterminalParser->SetPostCall(PostCall(Postmp));
            NonterminalParser* pNonterminalParser = GetNonterminal("p");
            pNonterminalParser->SetPostCall(PostCall(Postp));
        }
        public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
        {
            context.value = -context.frommp;
        }
        public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
        {
            context.value = context.fromp;
        }
        public throw void Postmp(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                UniquePtr<Object> frommp_value = stack.Pop();
                context.frommp = *cast<ValueObject<double>*>(frommp_value.GetPtr());
            }
        }
        public throw void Postp(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                UniquePtr<Object> fromp_value = stack.Pop();
                context.fromp = *cast<ValueObject<double>*>(fromp_value.GetPtr());
            }
        }
        private class Context
        {
            public double value;
            public double frommp;
            public double fromp;
        }
        private Stack<Context> contextStack;
        private Context context;
    }
    private class primaryRule: System.Text.Parsing.Rule
    {
        public primaryRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
            base(name_, enclosingScope_, definition_), contextStack(), context()
        {
            SetValueTypeName("double");
        }
        public override void Enter(Stack<UniquePtr<Object>>& stack)
        {
            contextStack.Push(Rvalue(context));
            context = Context();
        }
        public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<double>(context.value)));
            }
            context = contextStack.Pop();
        }
        public override void Link()
        {
            ActionParser* a0ActionParser = GetAction("A0");
            a0ActionParser->SetAction(ParsingAction(A0Action));
            ActionParser* a1ActionParser = GetAction("A1");
            a1ActionParser->SetAction(ParsingAction(A1Action));
            NonterminalParser* eNonterminalParser = GetNonterminal("e");
            eNonterminalParser->SetPostCall(PostCall(Poste));
            NonterminalParser* nNonterminalParser = GetNonterminal("n");
            nNonterminalParser->SetPostCall(PostCall(Postn));
        }
        public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
        {
            context.value = context.frome;
        }
        public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
        {
            context.value = context.fromn;
        }
        public throw void Poste(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                UniquePtr<Object> frome_value = stack.Pop();
                context.frome = *cast<ValueObject<double>*>(frome_value.GetPtr());
            }
        }
        public throw void Postn(Stack<UniquePtr<Object>>& stack, bool matched)
        {
            if (matched)
            {
                UniquePtr<Object> fromn_value = stack.Pop();
                context.fromn = *cast<ValueObject<double>*>(fromn_value.GetPtr());
            }
        }
        private class Context
        {
            public double value;
            public double frome;
            public double fromn;
        }
        private Stack<Context> contextStack;
        private Context context;
    }
    public override void GetReferencedGrammars()
    {
        ParsingDomain* parsingDomain = GetParsingDomain();
        Grammar* grammar0 = parsingDomain->GetGrammar("System.Text.Parsing.stdlib");
        if (grammar0 == null)
        {
            grammar0 = System.Text.Parsing.stdlib.Create(parsingDomain);
        }
        AddGrammarReference(grammar0);
    }
    public override void CreateRules()
    {
        AddRuleLink(new RuleLink("number", this, "System.Text.Parsing.stdlib.number"));
        AddRuleLink(new RuleLink("spaces", this, "System.Text.Parsing.stdlib.spaces"));
        AddRule(new exprRule("expr", GetScope(),
            new SequenceParser(
                new ActionParser("A0",
                    new NonterminalParser("t", "term", 0)),
                new KleeneStarParser(
                    new AlternativeParser(
                        new SequenceParser(
                            new CharParser('+'),
                            new ActionParser("A1",
                                new NonterminalParser("pt", "term", 0))),
                        new SequenceParser(
                            new CharParser('-'),
                            new ActionParser("A2",
                                new NonterminalParser("mt", "term", 0))))))));
        AddRule(new termRule("term", GetScope(),
            new SequenceParser(
                new ActionParser("A0",
                    new NonterminalParser("f", "factor", 0)),
                new KleeneStarParser(
                    new AlternativeParser(
                        new SequenceParser(
                            new CharParser('*'),
                            new ActionParser("A1",
                                new NonterminalParser("tf", "factor", 0))),
                        new SequenceParser(
                            new CharParser('/'),
                            new ActionParser("A2",
                                new NonterminalParser("df", "factor", 0))))))));
        AddRule(new factorRule("factor", GetScope(),
            new AlternativeParser(
                new ActionParser("A0",
                    new SequenceParser(
                        new CharParser('-'),
                        new NonterminalParser("mp", "primary", 0))),
                new ActionParser("A1",
                    new NonterminalParser("p", "primary", 0)))));
        AddRule(new primaryRule("primary", GetScope(),
            new AlternativeParser(
                new SequenceParser(
                    new SequenceParser(
                        new CharParser('('),
                        new ActionParser("A0",
                            new NonterminalParser("e", "expr", 0))),
                    new CharParser(')')),
                new ActionParser("A1",
                    new NonterminalParser("n", "number", 0)))));
        SetSkipRuleName("spaces");
    }
}
