using System;
using System.Collections;
using System.Text.Parsing;
using Cm;

namespace Syntax
{
    public typedef GrammarGrammar* GrammarGrammarPtr;

    public class GrammarGrammar: System.Text.Parsing.Grammar
    {
        public static GrammarGrammarPtr Create()
        {
            return Create(new ParsingDomain());
        }
        public static GrammarGrammarPtr Create(ParsingDomain* parsingDomain)
        {
            RegisterParsingDomain(parsingDomain);
            GrammarGrammarPtr grammar(new GrammarGrammar(parsingDomain));
            parsingDomain->AddGrammar(grammar);
            grammar->CreateRules();
            grammar->Link();
            return grammar;
        }
        private GrammarGrammar(ParsingDomain* parsingDomain): base("GrammarGrammar", parsingDomain->GetNamespaceScope("Syntax"), parsingDomain)
        {
            SetOwner(0);
        }
        public Grammar* Parse(const string& content, int fileIndex, const string& fileName, Scope* enclosingScope, ParsingContext* ctx)
        {
            Scanner scanner(content, fileIndex, fileName, Skip());
            System.IO.OutputStream* log = Log();
            UniquePtr<XmlLog> xmlLog;
            if (log != null)
            {
                xmlLog.Reset(new XmlLog(*log, MaxLogLineLength()));
                scanner.SetLog(xmlLog.GetPtr());
                xmlLog->WriteBeginRule("parse");
            }
            Stack<UniquePtr<Object>> stack;
            stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(enclosingScope)));
            stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(ctx)));
            Match match = Parse(scanner, stack);
            Position stop = scanner.GetPosition();
            if (log != null)
            {
                xmlLog->WriteEndRule("parse");
            }
            if (!match.Hit() || stop.Index() != content.Length())
            {
                Rule* start = Start();
                if (start != null)
                {
                    throw ExpectationFailure(start->Info(), content, scanner.GetPosition(), fileName);
                }
                else
                {
                    throw ParsingException("grammar '" + Name() + "' has no start rule", content, scanner.GetPosition(), fileName);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            Grammar* result = *cast<ValueObject<Grammar*>*>(value.GetPtr());
            return result;
        }
        private class GrammarRule: System.Text.Parsing.Rule
        {
            public GrammarRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Scope*", "enclosingScope"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("Grammar*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> enclosingScope_value = stack.Pop();
                context.enclosingScope = *cast<ValueObject<Scope*>*>(enclosingScope_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Grammar*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* nameNonterminalParser = GetNonterminal("name");
                nameNonterminalParser->SetPostCall(PostCall(Postname));
                NonterminalParser* grammarContentNonterminalParser = GetNonterminal("GrammarContent");
                grammarContentNonterminalParser->SetPreCall(PreCall(PreGrammarContent));
            }
            public throw void A0Action(const string& match, const string& content, const Position& position, const string& fileName, bool& pass)
            {
                context.value = new Grammar(context.fromname, context.enclosingScope);
                context.value->SetPosition(position);
                context.value->SetNs(context.enclosingScope->Ns());
            }
            public throw void Postname(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromname_value = stack.Pop();
                    context.fromname = *cast<ValueObject<string>*>(fromname_value.GetPtr());
                }
            }
            public throw void PreGrammarContent(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Grammar*>(context.value)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            private class Context
            {
                public Scope* enclosingScope;
                public ParsingContext* ctx;
                public Grammar* value;
                public string fromname;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class GrammarContentRule: System.Text.Parsing.Rule
        {
            public GrammarContentRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Grammar*", "grammar"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> grammar_value = stack.Pop();
                context.grammar = *cast<ValueObject<Grammar*>*>(grammar_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* startClauseNonterminalParser = GetNonterminal("StartClause");
                startClauseNonterminalParser->SetPreCall(PreCall(PreStartClause));
                NonterminalParser* skipClauseNonterminalParser = GetNonterminal("SkipClause");
                skipClauseNonterminalParser->SetPreCall(PreCall(PreSkipClause));
                NonterminalParser* ruleLinkNonterminalParser = GetNonterminal("RuleLink");
                ruleLinkNonterminalParser->SetPreCall(PreCall(PreRuleLink));
                NonterminalParser* ruleNonterminalParser = GetNonterminal("Rule");
                ruleNonterminalParser->SetPreCall(PreCall(PreRule));
                ruleNonterminalParser->SetPostCall(PostCall(PostRule));
            }
            public throw void A0Action(const string& match, const string& content, const Position& position, const string& fileName, bool& pass)
            {
                context.grammar->AddRule(context.fromRule);
            }
            public throw void PreStartClause(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Grammar*>(context.grammar)));
            }
            public throw void PreSkipClause(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Grammar*>(context.grammar)));
            }
            public throw void PreRuleLink(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Grammar*>(context.grammar)));
            }
            public throw void PreRule(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.grammar->GetScope())));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void PostRule(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromRule_value = stack.Pop();
                    context.fromRule = *cast<ValueObject<Rule*>*>(fromRule_value.GetPtr());
                }
            }
            private class Context
            {
                public Grammar* grammar;
                public ParsingContext* ctx;
                public Rule* fromRule;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class StartClauseRule: System.Text.Parsing.Rule
        {
            public StartClauseRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Grammar*", "grammar"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> grammar_value = stack.Pop();
                context.grammar = *cast<ValueObject<Grammar*>*>(grammar_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* strtNonterminalParser = GetNonterminal("strt");
                strtNonterminalParser->SetPostCall(PostCall(Poststrt));
            }
            public throw void A0Action(const string& match, const string& content, const Position& position, const string& fileName, bool& pass)
            {
                context.grammar->SetStartRuleName(context.fromstrt);
            }
            public throw void Poststrt(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromstrt_value = stack.Pop();
                    context.fromstrt = *cast<ValueObject<string>*>(fromstrt_value.GetPtr());
                }
            }
            private class Context
            {
                public Grammar* grammar;
                public string fromstrt;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class SkipClauseRule: System.Text.Parsing.Rule
        {
            public SkipClauseRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Grammar*", "grammar"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> grammar_value = stack.Pop();
                context.grammar = *cast<ValueObject<Grammar*>*>(grammar_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* skpNonterminalParser = GetNonterminal("skp");
                skpNonterminalParser->SetPostCall(PostCall(Postskp));
            }
            public throw void A0Action(const string& match, const string& content, const Position& position, const string& fileName, bool& pass)
            {
                context.grammar->SetSkipRuleName(context.fromskp);
            }
            public throw void Postskp(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromskp_value = stack.Pop();
                    context.fromskp = *cast<ValueObject<string>*>(fromskp_value.GetPtr());
                }
            }
            private class Context
            {
                public Grammar* grammar;
                public string fromskp;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain* parsingDomain = GetParsingDomain();
            Grammar* grammar0 = parsingDomain->GetGrammar("Syntax.ElementGrammar");
            if (grammar0 == null)
            {
                grammar0 = Syntax.ElementGrammar.Create(parsingDomain);
            }
            AddGrammarReference(grammar0);
            Grammar* grammar1 = parsingDomain->GetGrammar("Syntax.RuleGrammar");
            if (grammar1 == null)
            {
                grammar1 = Syntax.RuleGrammar.Create(parsingDomain);
            }
            AddGrammarReference(grammar1);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("Identifier", this, "ElementGrammar.Identifier"));
            AddRuleLink(new RuleLink("QualifiedId", this, "ElementGrammar.QualifiedId"));
            AddRuleLink(new RuleLink("RuleLink", this, "ElementGrammar.RuleLink"));
            AddRuleLink(new RuleLink("Rule", this, "RuleGrammar.Rule"));
            AddRule(new GrammarRule("Grammar", GetScope(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new KeywordParser("grammar"),
                                new ActionParser("A0",
                                    new ExpectationParser(
                                        new NonterminalParser("name", "Identifier", 0)))),
                            new ExpectationParser(
                                new CharParser('{'))),
                        new NonterminalParser("GrammarContent", "GrammarContent", 2)),
                    new ExpectationParser(
                        new CharParser('}')))));
            AddRule(new GrammarContentRule("GrammarContent", GetScope(),
                new KleeneStarParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new NonterminalParser("StartClause", "StartClause", 1),
                                new NonterminalParser("SkipClause", "SkipClause", 1)),
                            new NonterminalParser("RuleLink", "RuleLink", 1)),
                        new ActionParser("A0",
                            new NonterminalParser("Rule", "Rule", 2))))));
            AddRule(new StartClauseRule("StartClause", GetScope(),
                new SequenceParser(
                    new SequenceParser(
                        new KeywordParser("start"),
                        new ExpectationParser(
                            new NonterminalParser("strt", "Identifier", 0))),
                    new ActionParser("A0",
                        new CharParser(';')))));
            AddRule(new SkipClauseRule("SkipClause", GetScope(),
                new SequenceParser(
                    new SequenceParser(
                        new KeywordParser("skip"),
                        new ExpectationParser(
                            new NonterminalParser("skp", "QualifiedId", 0))),
                    new ActionParser("A0",
                        new CharParser(';')))));
        }
    }
}
