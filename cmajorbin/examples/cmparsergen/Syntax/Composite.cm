using System;
using System.Collections;
using System.Text.Parsing;
using Cm;

namespace Syntax
{
    public class CompositeGrammar: System.Text.Parsing.Grammar
    {
        public static CompositeGrammar* Create()
        {
            return Create(new ParsingDomain());
        }
        public static CompositeGrammar* Create(ParsingDomain* parsingDomain)
        {
            RegisterParsingDomain(parsingDomain);
            CompositeGrammar* grammar = new CompositeGrammar(parsingDomain);
            parsingDomain->AddGrammar(grammar);
            grammar->CreateRules();
            grammar->Link();
            return grammar;
        }
        private CompositeGrammar(ParsingDomain* parsingDomain): base("CompositeGrammar", parsingDomain->GetNamespaceScope("Syntax"), parsingDomain)
        {
            SetOwner(0);
        }
        public Parser* Parse(const char* start, const char* end, int fileIndex, const string& fileName, Scope* enclosingScope, ParsingContext* ctx)
        {
            Scanner scanner(start, end, fileIndex, fileName, SkipRule());
            System.IO.OutputStream* log = Log();
            UniquePtr<XmlLog> xmlLog;
            if (log != null)
            {
                xmlLog.Reset(new XmlLog(*log, MaxLogLineLength()));
                scanner.SetLog(xmlLog.GetPtr());
                xmlLog->WriteBeginRule("parse");
            }
            Stack<UniquePtr<Object>> stack;
            stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(enclosingScope)));
            stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(ctx)));
            Match match = Parse(scanner, stack);
            Span stop = scanner.GetSpan();
            if (log != null)
            {
                xmlLog->WriteEndRule("parse");
            }
            if (!match.Hit() || stop.Start() != int(end - start))
            {
                Rule* startRule = StartRule();
                if (startRule != null)
                {
                    throw ExpectationFailure(startRule->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + Name() + "' has no start rule", fileName, stop, start, end);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            Parser* result = *cast<ValueObject<Parser*>*>(value.GetPtr());
            return result;
        }
        private class AlternativeRule: System.Text.Parsing.Rule
        {
            public AlternativeRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Scope*", "enclosingScope"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("Parser*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> enclosingScope_value = stack.Pop();
                context.enclosingScope = *cast<ValueObject<Scope*>*>(enclosingScope_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Parser*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                NonterminalParser* leftNonterminalParser = GetNonterminal("left");
                leftNonterminalParser->SetPreCall(PreCall(Preleft));
                leftNonterminalParser->SetPostCall(PostCall(Postleft));
                NonterminalParser* rightNonterminalParser = GetNonterminal("right");
                rightNonterminalParser->SetPreCall(PreCall(Preright));
                rightNonterminalParser->SetPostCall(PostCall(Postright));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromleft;
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new AlternativeParser(context.value, context.fromright);
            }
            public throw void Preleft(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void Postleft(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromleft_value = stack.Pop();
                    context.fromleft = *cast<ValueObject<Parser*>*>(fromleft_value.GetPtr());
                }
            }
            public throw void Preright(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void Postright(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromright_value = stack.Pop();
                    context.fromright = *cast<ValueObject<Parser*>*>(fromright_value.GetPtr());
                }
            }
            private class Context
            {
                public Scope* enclosingScope;
                public ParsingContext* ctx;
                public Parser* value;
                public Parser* fromleft;
                public Parser* fromright;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class SequenceRule: System.Text.Parsing.Rule
        {
            public SequenceRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Scope*", "enclosingScope"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("Parser*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> enclosingScope_value = stack.Pop();
                context.enclosingScope = *cast<ValueObject<Scope*>*>(enclosingScope_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Parser*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                NonterminalParser* leftNonterminalParser = GetNonterminal("left");
                leftNonterminalParser->SetPreCall(PreCall(Preleft));
                leftNonterminalParser->SetPostCall(PostCall(Postleft));
                NonterminalParser* rightNonterminalParser = GetNonterminal("right");
                rightNonterminalParser->SetPreCall(PreCall(Preright));
                rightNonterminalParser->SetPostCall(PostCall(Postright));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromleft;
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new SequenceParser(context.value, context.fromright);
            }
            public throw void Preleft(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void Postleft(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromleft_value = stack.Pop();
                    context.fromleft = *cast<ValueObject<Parser*>*>(fromleft_value.GetPtr());
                }
            }
            public throw void Preright(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void Postright(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromright_value = stack.Pop();
                    context.fromright = *cast<ValueObject<Parser*>*>(fromright_value.GetPtr());
                }
            }
            private class Context
            {
                public Scope* enclosingScope;
                public ParsingContext* ctx;
                public Parser* value;
                public Parser* fromleft;
                public Parser* fromright;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class DifferenceRule: System.Text.Parsing.Rule
        {
            public DifferenceRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Scope*", "enclosingScope"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("Parser*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> enclosingScope_value = stack.Pop();
                context.enclosingScope = *cast<ValueObject<Scope*>*>(enclosingScope_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Parser*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                NonterminalParser* leftNonterminalParser = GetNonterminal("left");
                leftNonterminalParser->SetPreCall(PreCall(Preleft));
                leftNonterminalParser->SetPostCall(PostCall(Postleft));
                NonterminalParser* rightNonterminalParser = GetNonterminal("right");
                rightNonterminalParser->SetPreCall(PreCall(Preright));
                rightNonterminalParser->SetPostCall(PostCall(Postright));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromleft;
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new DifferenceParser(context.value, context.fromright);
            }
            public throw void Preleft(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void Postleft(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromleft_value = stack.Pop();
                    context.fromleft = *cast<ValueObject<Parser*>*>(fromleft_value.GetPtr());
                }
            }
            public throw void Preright(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void Postright(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromright_value = stack.Pop();
                    context.fromright = *cast<ValueObject<Parser*>*>(fromright_value.GetPtr());
                }
            }
            private class Context
            {
                public Scope* enclosingScope;
                public ParsingContext* ctx;
                public Parser* value;
                public Parser* fromleft;
                public Parser* fromright;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class ExclusiveOrRule: System.Text.Parsing.Rule
        {
            public ExclusiveOrRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Scope*", "enclosingScope"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("Parser*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> enclosingScope_value = stack.Pop();
                context.enclosingScope = *cast<ValueObject<Scope*>*>(enclosingScope_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Parser*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                NonterminalParser* leftNonterminalParser = GetNonterminal("left");
                leftNonterminalParser->SetPreCall(PreCall(Preleft));
                leftNonterminalParser->SetPostCall(PostCall(Postleft));
                NonterminalParser* rightNonterminalParser = GetNonterminal("right");
                rightNonterminalParser->SetPreCall(PreCall(Preright));
                rightNonterminalParser->SetPostCall(PostCall(Postright));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromleft;
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new ExclusiveOrParser(context.value, context.fromright);
            }
            public throw void Preleft(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void Postleft(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromleft_value = stack.Pop();
                    context.fromleft = *cast<ValueObject<Parser*>*>(fromleft_value.GetPtr());
                }
            }
            public throw void Preright(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void Postright(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromright_value = stack.Pop();
                    context.fromright = *cast<ValueObject<Parser*>*>(fromright_value.GetPtr());
                }
            }
            private class Context
            {
                public Scope* enclosingScope;
                public ParsingContext* ctx;
                public Parser* value;
                public Parser* fromleft;
                public Parser* fromright;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class IntersectionRule: System.Text.Parsing.Rule
        {
            public IntersectionRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Scope*", "enclosingScope"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("Parser*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> enclosingScope_value = stack.Pop();
                context.enclosingScope = *cast<ValueObject<Scope*>*>(enclosingScope_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Parser*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                NonterminalParser* leftNonterminalParser = GetNonterminal("left");
                leftNonterminalParser->SetPreCall(PreCall(Preleft));
                leftNonterminalParser->SetPostCall(PostCall(Postleft));
                NonterminalParser* rightNonterminalParser = GetNonterminal("right");
                rightNonterminalParser->SetPreCall(PreCall(Preright));
                rightNonterminalParser->SetPostCall(PostCall(Postright));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromleft;
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new IntersectionParser(context.value, context.fromright);
            }
            public throw void Preleft(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void Postleft(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromleft_value = stack.Pop();
                    context.fromleft = *cast<ValueObject<Parser*>*>(fromleft_value.GetPtr());
                }
            }
            public throw void Preright(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void Postright(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromright_value = stack.Pop();
                    context.fromright = *cast<ValueObject<Parser*>*>(fromright_value.GetPtr());
                }
            }
            private class Context
            {
                public Scope* enclosingScope;
                public ParsingContext* ctx;
                public Parser* value;
                public Parser* fromleft;
                public Parser* fromright;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class ListRule: System.Text.Parsing.Rule
        {
            public ListRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Scope*", "enclosingScope"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("Parser*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> enclosingScope_value = stack.Pop();
                context.enclosingScope = *cast<ValueObject<Scope*>*>(enclosingScope_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Parser*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                NonterminalParser* leftNonterminalParser = GetNonterminal("left");
                leftNonterminalParser->SetPreCall(PreCall(Preleft));
                leftNonterminalParser->SetPostCall(PostCall(Postleft));
                NonterminalParser* rightNonterminalParser = GetNonterminal("right");
                rightNonterminalParser->SetPreCall(PreCall(Preright));
                rightNonterminalParser->SetPostCall(PostCall(Postright));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromleft;
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new ListParser(context.value, context.fromright);
            }
            public throw void Preleft(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void Postleft(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromleft_value = stack.Pop();
                    context.fromleft = *cast<ValueObject<Parser*>*>(fromleft_value.GetPtr());
                }
            }
            public throw void Preright(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void Postright(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromright_value = stack.Pop();
                    context.fromright = *cast<ValueObject<Parser*>*>(fromright_value.GetPtr());
                }
            }
            private class Context
            {
                public Scope* enclosingScope;
                public ParsingContext* ctx;
                public Parser* value;
                public Parser* fromleft;
                public Parser* fromright;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class PostfixRule: System.Text.Parsing.Rule
        {
            public PostfixRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Scope*", "enclosingScope"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("Parser*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> enclosingScope_value = stack.Pop();
                context.enclosingScope = *cast<ValueObject<Scope*>*>(enclosingScope_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Parser*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                ActionParser* a2ActionParser = GetAction("A2");
                a2ActionParser->SetAction(ParsingAction(A2Action));
                ActionParser* a3ActionParser = GetAction("A3");
                a3ActionParser->SetAction(ParsingAction(A3Action));
                NonterminalParser* primaryNonterminalParser = GetNonterminal("Primary");
                primaryNonterminalParser->SetPreCall(PreCall(PrePrimary));
                primaryNonterminalParser->SetPostCall(PostCall(PostPrimary));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromPrimary;
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new KleeneStarParser(context.value);
            }
            public throw void A2Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new PositiveParser(context.value);
            }
            public throw void A3Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new OptionalParser(context.value);
            }
            public throw void PrePrimary(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.enclosingScope)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void PostPrimary(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromPrimary_value = stack.Pop();
                    context.fromPrimary = *cast<ValueObject<Parser*>*>(fromPrimary_value.GetPtr());
                }
            }
            private class Context
            {
                public Scope* enclosingScope;
                public ParsingContext* ctx;
                public Parser* value;
                public Parser* fromPrimary;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain* parsingDomain = GetParsingDomain();
            Grammar* grammar0 = parsingDomain->GetGrammar("Syntax.PrimaryGrammar");
            if (grammar0 == null)
            {
                grammar0 = Syntax.PrimaryGrammar.Create(parsingDomain);
            }
            AddGrammarReference(grammar0);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("Primary", this, "PrimaryGrammar.Primary"));
            AddRule(new AlternativeRule("Alternative", GetScope(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("left", "Sequence", 2)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser('|'),
                            new ActionParser("A1",
                                new ExpectationParser(
                                    new NonterminalParser("right", "Sequence", 2))))))));
            AddRule(new SequenceRule("Sequence", GetScope(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("left", "Difference", 2)),
                    new KleeneStarParser(
                        new ActionParser("A1",
                            new NonterminalParser("right", "Difference", 2))))));
            AddRule(new DifferenceRule("Difference", GetScope(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("left", "ExclusiveOr", 2)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser('-'),
                            new ActionParser("A1",
                                new ExpectationParser(
                                    new NonterminalParser("right", "ExclusiveOr", 2))))))));
            AddRule(new ExclusiveOrRule("ExclusiveOr", GetScope(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("left", "Intersection", 2)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser('^'),
                            new ActionParser("A1",
                                new ExpectationParser(
                                    new NonterminalParser("right", "Intersection", 2))))))));
            AddRule(new IntersectionRule("Intersection", GetScope(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("left", "List", 2)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser('&'),
                            new ActionParser("A1",
                                new NonterminalParser("right", "List", 2)))))));
            AddRule(new ListRule("List", GetScope(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("left", "Postfix", 2)),
                    new OptionalParser(
                        new SequenceParser(
                            new CharParser('%'),
                            new ActionParser("A1",
                                new NonterminalParser("right", "Postfix", 2)))))));
            AddRule(new PostfixRule("Postfix", GetScope(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("Primary", "Primary", 2)),
                    new OptionalParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new ActionParser("A1",
                                    new CharParser('*')),
                                new ActionParser("A2",
                                    new CharParser('+'))),
                            new ActionParser("A3",
                                new CharParser('?')))))));
        }
    }
}
