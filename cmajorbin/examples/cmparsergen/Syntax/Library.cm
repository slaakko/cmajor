/*========================================================================
    Copyright (c) 2012-2014 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;
using System.Collections;
using System.IO;
using System.Text;
using System.Text.Parsing;

namespace Syntax
{
    internal class LibraryFileGeneratorVisitor: Visitor
    {
        public LibraryFileGeneratorVisitor(CodeFormatter& formatter_): formatter(formatter_)
        {
        }
        public override void BeginVisit(Grammar& grammar)
        {
            if (!grammar.IsExternal())
            {
                List<Grammar*>& grammars = nsGrammarMap[grammar.Ns()];
                grammars.Add(&grammar);
            }
        }
        public void GenerateLibraryFile()
        {
            NamespaceGrammarMapIt e = nsGrammarMap.CEnd();
            for (NamespaceGrammarMapIt i = nsGrammarMap.CBegin(); i != e; ++i)
            {
                Namespace* ns = i->first;
                const List<Grammar*>& grammars = i->second;
                if (!ns->FullName().IsEmpty())
                {
                    formatter.WriteLine("namespace " + ns->FullName());
                    formatter.WriteLine("{");
                    formatter.IncIndent();
                }
                for (Grammar* grammar : grammars)
                {
                    formatter.WriteLine("grammar " + grammar->Name());
                    formatter.WriteLine("{");
                    formatter.IncIndent();
                    for (Rule* rule : grammar->GetRules())
                    {
                        string ruleLine = rule->Name();
                        if (!rule->InheritedAttributes().IsEmpty() || !rule->LocalVariables().IsEmpty())
                        {
                            ruleLine.Append('(');
                            bool first = true;
                            for (const AttrOrVariable& attr : rule->InheritedAttributes())
                            {
                                if (first)
                                {
                                    first = false;
                                }
                                else
                                {
                                    ruleLine.Append(", ");
                                }
                                ruleLine.Append(attr.TypeName() + " " + attr.Name());
                            }
                            for (const AttrOrVariable& var : rule->LocalVariables())
                            {
                                if (first)
                                {
                                    first = false;
                                }
                                else
                                {
                                    ruleLine.Append(", ");
                                }
                                ruleLine.Append("var " + var.TypeName() + " " + var.Name());
                            }
                            ruleLine.Append(')');
                        }
                        if (!rule->ValueTypeName().IsEmpty())
                        {
                            ruleLine.Append(": " + rule->ValueTypeName());
                        }
                        ruleLine.Append(";");
                        formatter.WriteLine(ruleLine);
                    }
                    formatter.DecIndent();
                    formatter.WriteLine("}");
                }
                if (!ns->FullName().IsEmpty())
                {
                    formatter.DecIndent();
                    formatter.WriteLine("}");
                }
            }
        }
        private CodeFormatter& formatter;
        private typedef Map<Namespace*, List<Grammar*>> NamespaceGrammarMap;
        private typedef NamespaceGrammarMap.ConstIterator NamespaceGrammarMapIt;
        private NamespaceGrammarMap nsGrammarMap;
    }
    
    internal void GenerateLibraryFile(const UniquePtr<Project>& project, ParsingDomain* parsingDomain)
    {
        string libraryFilePath = Path.ChangeExtension(project->FilePath(), ".pl");
        OutputFileStream libraryFile(libraryFilePath);
        CodeFormatter formatter(libraryFile);
        LibraryFileGeneratorVisitor visitor(formatter);
        parsingDomain->GlobalNamespace()->Accept(visitor);
        visitor.GenerateLibraryFile();
        Console.Out() << "=> " << libraryFilePath << endl();
    }
}
