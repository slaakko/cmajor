using System;
using System.Collections;
using System.IO;
using System.Text;
using System.Text.Parsing.CmObjectModel;

namespace Test
{
    public unit_test void TestExpression()
    {
        OutputStringStream s;
        CodeFormatter f(s);
        ThisAccess thisAccess;
        thisAccess.Print(f);
        #assert(s.GetStr() == "this");
        s.SetStr(string());

        BaseAccess baseAccess;
        baseAccess.Print(f);
        #assert(s.GetStr() == "base");
        s.SetStr(string());

        NewExpression newBoolExpr(new BoolType(), ExpressionList());
        newBoolExpr.Print(f);
        #assert(s.GetStr() == "new bool()");
        s.SetStr(string());

        ExpressionList intArgs;
        intArgs.Add(new IntLiteral(1u, ' '));
        NewExpression newIntExpr(new IntType(), intArgs);
        newIntExpr.Print(f);
        #assert(s.GetStr() == "new int(1)");
        s.SetStr(string());

        ExpressionList floatArgs;
        floatArgs.Add(new FloatingLiteral(1.0, 'f'));
        ObjectConstructionExpression constructFloatExpr(new FloatType(), floatArgs);
        constructFloatExpr.Print(f);
        #assert(s.GetStr() == "construct<float>(1f)");
        s.SetStr(string());

        SizeofExpression sizeOfExpr(new Identifier("foo"));
        sizeOfExpr.Print(f);
        #assert(s.GetStr() == "sizeof(foo)");
        s.SetStr(string());

        CastExpression castExpr(new IntType(), new FloatingLiteral(3.5, ' '));
        castExpr.Print(f);
        #assert(s.GetStr() == "cast<int>(3.5)");
        s.SetStr(string());

        TypenameExpression typeName(new Identifier("ex"));
        typeName.Print(f);
        #assert(s.GetStr() == "typename(ex)");
        s.SetStr(string());

        PrefixExpression notFoo(Operator.not_, new Identifier("foo"));
        notFoo.Print(f);
        #assert(s.GetStr() == "!foo");
        s.SetStr(string());

        PostfixExpression postfixExpr(new Identifier("foo"));
        List<CmObject*> invokeArgs;
        invokeArgs.Add(new Identifier("bar"));
        postfixExpr.AddOp(new Invoke(invokeArgs));
        postfixExpr.AddOp(new Indexing(new IntLiteral(0u, ' ')));
        postfixExpr.Print(f);
        #assert(s.GetStr() == "foo(bar)[0]");
        s.SetStr(string());

        BinaryExpression addExpr(Operator.plus, new Identifier("a"), new Identifier("b"));
        addExpr.Print(f);
        #assert(s.GetStr() == "a + b");
        s.SetStr(string());
    }
}
