using System;
using System.Collections;
using System.Text.Parsing;

namespace Test
{
    public unit_test void TestComposite()
    {
        Stack<UniquePtr<Object>> s;

        OptionalParser optionalParser(new CharParser('x'));
        string x = "x";
        Scanner s0(x.Chars(), x.Chars() + x.Length(), 0, "", null);
        Match m0 = optionalParser.Parse(s0, s);
        #assert(m0.Hit());
        #assert(m0.Length() == 1);
        string x1 = "";
        Scanner s1(x1.Chars(), x1.Chars() + x1.Length(), 0, "", null);
        Match m1 = optionalParser.Parse(s1, s);
        #assert(m1.Hit());
        #assert(m1.Length() == 0);
        string y = "y";
        Scanner s2(y.Chars(), y.Chars() + y.Length(), 0, "", null);
        Match m2 = optionalParser.Parse(s2, s);
        #assert(m2.Hit());
        #assert(m2.Length() == 0);

        PositiveParser positiveParser(new CharParser('x'));
        Scanner s3(x.Chars(), x.Chars() + x.Length(), 0, "", null);
        Match m3 = positiveParser.Parse(s3, s);
        #assert(m3.Hit());
        #assert(m3.Length() == 1);
        string xxxx = "xxxx";
        Scanner s4(xxxx.Chars(), xxxx.Chars() + xxxx.Length(), 0, "", null);
        Match m4 = positiveParser.Parse(s4, s);
        #assert(m4.Hit());
        #assert(m4.Length() == 4);
        Scanner s5(x1.Chars(), x1.Chars() + x1.Length(), 0, "", null);
        Match m5 = positiveParser.Parse(s5, s);
        #assert(!m5.Hit());
        #assert(m5.Length() == -1);
        string yyy = "yyy";
        Scanner s6(yyy.Chars(), yyy.Chars() + yyy.Length(), 0, "", null);
        Match m6 = positiveParser.Parse(s6, s);
        #assert(!m6.Hit());
        #assert(m6.Length() == -1);

        KleeneStarParser kleeneStarParser(new CharParser('x'));
        Scanner s7(x.Chars(), x.Chars() + x.Length(), 0, "", null);
        Match m7 = kleeneStarParser.Parse(s7, s);
        #assert(m7.Hit());
        #assert(m7.Length() == 1);
        Scanner s8(xxxx.Chars(), xxxx.Chars() + xxxx.Length(), 0, "", null);
        Match m8 = kleeneStarParser.Parse(s8, s);
        #assert(m8.Hit());
        #assert(m8.Length() == 4);
        Scanner s9(x1.Chars(), x1.Chars() + x1.Length(), 0, "", null);
        Match m9 = kleeneStarParser.Parse(s9, s);
        #assert(m9.Hit());
        #assert(m9.Length() == 0);
        Scanner s10(yyy.Chars(), yyy.Chars() + yyy.Length(), 0, "", null);
        Match m10 = kleeneStarParser.Parse(s10, s);
        #assert(m10.Hit());
        #assert(m10.Length() == 0);

        SequenceParser sequenceParser(new CharParser('x'), new CharParser('y'));
        string xy = "xy";
        Scanner s11(xy.Chars(), xy.Chars() + xy.Length(), 0, "", null);
        Match m11 = sequenceParser.Parse(s11, s);
        #assert(m11.Hit());
        #assert(m11.Length() == 2);
        string xyzzy = "xyzzy";
        Scanner s12(xyzzy.Chars(), xyzzy.Chars() + xyzzy.Length(), 0, "", null);
        Match m12 = sequenceParser.Parse(s12, s);
        #assert(m12.Hit());
        #assert(m12.Length() == 2);
        string xx = "xx";
        Scanner s13(xx.Chars(), xx.Chars() + xx.Length(), 0, "", null);
        Match m13 = sequenceParser.Parse(s13, s);
        #assert(!m13.Hit());
        #assert(m13.Length() == -1);

        AlternativeParser alternativeParser(new CharParser('x'), new CharParser('y'));
        Scanner s14(x.Chars(), x.Chars() + x.Length(), 0, "", null);
        Match m14 = alternativeParser.Parse(s14, s);
        #assert(m14.Hit());
        #assert(m14.Length() == 1);
        Scanner s15(y.Chars(), y.Chars() + y.Length(), 0, "", null);
        Match m15 = alternativeParser.Parse(s15, s);
        #assert(m15.Hit());
        #assert(m15.Length() == 1);
        Scanner s16(x1.Chars(), x1.Chars() + x1.Length(), 0, "", null);
        Match m16 = alternativeParser.Parse(s16, s);
        #assert(!m16.Hit());
        #assert(m16.Length() == -1);
        string z = "z";
        Scanner s17(z.Chars(), z.Chars() + z.Length(), 0, "", null);
        Match m17 = alternativeParser.Parse(s17, s);
        #assert(!m17.Hit());
        #assert(m17.Length() == -1);

        DifferenceParser differenceParser(new SequenceParser(new PositiveParser(new CharParser('x')), new CharParser('y')), new StringParser("xy"));
        string xxy = "xxy";
        Scanner s18(xxy.Chars(), xxy.Chars() + xxy.Length(), 0, "", null);
        Match m18 = differenceParser.Parse(s18, s);
        #assert(m18.Hit());
        #assert(m18.Length() == 3);
        Scanner s19(xy.Chars(),xy.Chars() + xy.Length(), 0, "", null);
        Match m19 = differenceParser.Parse(s19, s);
        #assert(!m19.Hit());
        #assert(m19.Length() == -1);

        ExclusiveOrParser exclusiveOrParser(new AlternativeParser(new CharParser('x'), new CharParser('y')), new AlternativeParser(new CharParser('x'), new CharParser('z')));
        Scanner s20(y.Chars(), y.Chars() + y.Length(), 0, "", null);
        Match m20 = exclusiveOrParser.Parse(s20, s);
        #assert(m20.Hit());
        #assert(m20.Length() == 1);
        Scanner s21(z.Chars(), z.Chars() + z.Length(), 0, "", null);
        Match m21 = exclusiveOrParser.Parse(s21, s);
        #assert(m21.Hit());
        #assert(m21.Length() == 1);
        Scanner s22(x.Chars(), x.Chars() + x.Length(), 0, "", null);
        Match m22 = exclusiveOrParser.Parse(s22, s);
        #assert(!m22.Hit());
        #assert(m22.Length() == -1);

        IntersectionParser intersectionParser(new AlternativeParser(new CharParser('x'), new CharParser('y')), new AlternativeParser(new CharParser('x'), new CharParser('z')));
        Scanner s23(y.Chars(), y.Chars() + y.Length(), 0, "", null);
        Match m23 = intersectionParser.Parse(s23, s);
        #assert(!m23.Hit());
        #assert(m23.Length() == -1);
        Scanner s24(z.Chars(), z.Chars() + z.Length(), 0, "", null);
        Match m24 = intersectionParser.Parse(s24, s);
        #assert(!m24.Hit());
        #assert(m24.Length() == -1);
        Scanner s25(x.Chars(), x.Chars() + x.Length(), 0, "", null);
        Match m25 = intersectionParser.Parse(s25, s);
        #assert(m25.Hit());
        #assert(m25.Length() == 1);

        ListParser listParser(new CharParser('x'), new CharParser(','));
        Scanner s26(x.Chars(), x.Chars() + x.Length(), 0, "", null);
        Match m26 = listParser.Parse(s26, s);
        #assert(m26.Hit());
        #assert(m26.Length() == 1);
        string xcx = "x,x";
        Scanner s27(xcx.Chars(), xcx.Chars() + xcx.Length(), 0, "", null);
        Match m27 = listParser.Parse(s27, s);
        #assert(m27.Hit());
        #assert(m27.Length() == 3);
        string xcxcx = "x,x,x";
        Scanner s28(xcxcx.Chars(), xcxcx.Chars() + xcxcx.Length(), 0, "", null);
        Match m28 = listParser.Parse(s28, s);
        #assert(m28.Hit());
        #assert(m28.Length() == 5);
        Scanner s29(y.Chars(), y.Chars() + y.Length(), 0, "", null);
        Match m29 = listParser.Parse(s29, s);
        #assert(!m29.Hit());
        #assert(m29.Length() == -1);

    }
}
