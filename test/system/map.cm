using System;
using System.Collections;

namespace Test.System.Collections.Map
{
    public unit_test void MapIntStringTest()
    {
        Map<int, string> m0;
        #assert(m0.IsEmpty());
        #assert(m0.Count() == 0);
        Map<int, string> m1(m0);
        #assert(m1.IsEmpty());
        #assert(m1.Count() == 0);
        #assert(m0 == m1);
        Swap(m0, m1);
        #assert(m0.IsEmpty());
        #assert(m0.Count() == 0);
        #assert(m1.IsEmpty());
        #assert(m1.Count() == 0);
        #assert(m0 == m1);

        Map<int, string> m2;
        m2.Insert(MakePair(cast<int>(0), string("0")));
        #assert(!m2.IsEmpty());
        #assert(m2.Count() == 1);
        Map<int, string> m3(m2);
        #assert(!m3.IsEmpty());
        #assert(m3.Count() == 1);
        #assert(m2 == m3);
        Swap(m2, m3);
        #assert(!m2.IsEmpty());
        #assert(m2.Count() == 1);
        #assert(!m3.IsEmpty());
        #assert(m3.Count() == 1);
        #assert(m2 == m3);
        Map<int, string>.Iterator i20 = m2.Find(0);
        #assert(i20 != m2.End());
        Map<int, string>.Iterator i21 = m2.Find(1);
        #assert(i21 == m2.End());
        Pair<Map<int, string>.Iterator, bool> p2 = m2.Insert(MakePair(cast<int>(0), string("0")));
        #assert(!p2.second);
        #assert(m2.Remove(0));
        #assert(m2.IsEmpty());
        #assert(m2.Count() == 0);
        Map<int, string>.Iterator i22 = m2.Find(0);
        #assert(i22 == m2.End());

        Map<int, string> m4;
        m4[0] = "0";
        m4[1] = "1";
        #assert(!m4.IsEmpty());
        #assert(m4.Count() == 2);
        Map<int, string> m5(m4);
        #assert(!m5.IsEmpty());
        #assert(m5.Count() == 2);
        #assert(m4 == m5);
        Swap(m4, m5);
        #assert(!m4.IsEmpty());
        #assert(m4.Count() == 2);
        #assert(!m5.IsEmpty());
        #assert(m5.Count() == 2);
        #assert(m4 == m5);
        Map<int, string>.Iterator i40 = m4.Find(0);
        #assert(i40 != m4.End());
        Map<int, string>.Iterator i41 = m4.Find(1);
        #assert(i41 != m4.End());
        Map<int, string>.Iterator i42 = m4.Find(-1);
        #assert(i42 == m4.End());
        Map<int, string>.Iterator i43 = m4.Find(2);
        #assert(i43 == m4.End());
        Pair<Map<int, string>.Iterator, bool> p4 = m4.Insert(MakePair(cast<int>(0), string("0")));
        #assert(!p4.second);
        m4.Remove(m4.Begin());
        #assert(!m4.IsEmpty());
        #assert(m4.Count() == 1);
        Map<int, string>.Iterator i44 = m4.Find(0);
        #assert(i44 == m4.End());
        m4.Remove(1);
        #assert(m4.IsEmpty());
        #assert(m4.Count() == 0);

        Map<int, string> m6;
        m6[0] = "0";
        m6[1] = "1";
        m6[2] = "2";
        #assert(!m6.IsEmpty());
        #assert(m6.Count() == 3);
        Map<int, string> m7(m6);
        #assert(!m7.IsEmpty());
        #assert(m7.Count() == 3);
        #assert(m6 == m7);
        Swap(m6, m7);
        #assert(!m6.IsEmpty());
        #assert(m6.Count() == 3);
        #assert(!m7.IsEmpty());
        #assert(m7.Count() == 3);
        #assert(m6 == m7);
        Map<int, string>.Iterator i60 = m6.Find(0);
        #assert(i60 != m6.End());
        Map<int, string>.Iterator i61 = m6.Find(1);
        #assert(i61 != m6.End());
        Map<int, string>.Iterator i62 = m6.Find(2);
        #assert(i62 != m6.End());
        Map<int, string>.Iterator i63 = m6.Find(-1);
        #assert(i63 == m6.End());
        Map<int, string>.Iterator i64 = m6.Find(3);
        #assert(i64 == m6.End());

        List<int> l100;
        Map<int, string> m100;
        for (int i = 0; i < 100; ++i)
        {
            int x = rand();
            l100.Add(x);
            m100[x] = ToString(x);
        }
        Sort(l100);
        for (int i = 0; i < 100; ++i)
        {
            int x = l100[i];
            Map<int, string>.Iterator i100 = m100.Find(x);
            #assert(i100 != m100.End());
        }
        Map<int, string> n100(m100);
        #assert(n100 == m100);
        Swap(n100, m100);
        #assert(n100 == m100);
    }   
}
