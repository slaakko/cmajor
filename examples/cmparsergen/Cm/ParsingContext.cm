/*========================================================================
    Copyright (c) 2012-2014 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;
using System.Collections;

namespace Cm
{
    public class ParsingContext
    {
        public ParsingContext(): parsingTypeExpr(false), parsingLValue(false), parsingSimpleStatement(false), parsingArguments(false)
        {
        }
        public void BeginParsingTypeExpr()
        {
            parsingTypeExprStack.Push(parsingTypeExpr);
            parsingTypeExpr = true;
        }
        public void EndParsingTypeExpr()
        {
            parsingTypeExpr = parsingTypeExprStack.Pop();
        }
        public void BeginParsingLValue()
        {
            parsingLValueStack.Push(parsingLValue);
            parsingLValue = true;
        }
        public void EndParsingLValue()
        {
            parsingLValue = parsingLValueStack.Pop();
        }
        public inline bool ParsingTypeExpr() const
        {
            return parsingTypeExpr;
        }
        public inline bool ParsingLValue() const
        {
            return parsingLValue;
        }
        public inline bool ParsingTypeExprOrLValue() const
        {
            return parsingTypeExpr || parsingLValue;
        }
        public void BeginParsingSimpleStatement()
        {
            parsingSimpleStatementStack.Push(parsingSimpleStatement);
            parsingSimpleStatement = true;
        }
        public void EndParsingSimpleStatement()
        {
            parsingSimpleStatement = parsingSimpleStatementStack.Pop();
        }
        public inline bool ParsingSimpleStatement() const 
        { 
            return parsingSimpleStatement; 
        }
        public void BeginParsingArguments()
        {
            parsingArgumentsStack.Push(parsingArguments);
            parsingArguments = true;
        }
        public void EndParsingArguments()
        {
            parsingArguments = parsingArgumentsStack.Pop();
        }
        public inline bool ParsingArguments() const 
        { 
            return parsingArguments; 
        }
        private bool parsingTypeExpr;
        private Stack<bool> parsingTypeExprStack;
        private bool parsingLValue;
        private Stack<bool> parsingLValueStack;
        private bool parsingSimpleStatement;
        private Stack<bool> parsingSimpleStatementStack;
        private bool parsingArguments;
        private Stack<bool> parsingArgumentsStack;
    }
}
