/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System.Text.Parsing.CmObjectModel;

namespace Cm
{
    grammar TypeExprGrammar
    {
        using BasicTypeGrammar.BasicType;
        using TemplateGrammar.TemplateId;
        using IdentifierGrammar.Identifier;
        
        TypeExpr(ParsingContext* ctx, var UniquePtr<DerivedTypeExpr> expr) : CmObject*
            ::= empty{ ctx->BeginParsingTypeExpr(); expr.Reset(new DerivedTypeExpr()); }
                PrefixTypeExpr(ctx, expr.GetPtr()){ value = MakeTypeExpr(expr.Release()); ctx->EndParsingTypeExpr(); } / { ctx->EndParsingTypeExpr(); }
            ;
            
        PrefixTypeExpr(ParsingContext* ctx, DerivedTypeExpr* expr)
            ::= keyword("const"){ expr->Add(Derivation.const_); } PostfixTypeExpr(ctx, expr):c
            |   PostfixTypeExpr(ctx, expr)
            ;
            
        PostfixTypeExpr(ParsingContext* ctx, DerivedTypeExpr* expr)
            ::= PrimaryTypeExpr(ctx, expr)
            (   '.' Identifier:dotMemberId!{ expr->SetBaseTypeExpr(new DotExpr(expr->ReleaseBaseTypeExpr(), dotMemberId)); }
            |   "&&"{ expr->Add(Derivation.rvalueRef); }
            |   '&'{ expr->Add(Derivation.reference); }
            |   '*'{ expr->Add(Derivation.pointer); }
            )*
            ;
            
        PrimaryTypeExpr(ParsingContext* ctx, DerivedTypeExpr* expr)
            ::= BasicType{ expr->SetBaseTypeExpr(BasicType); }
            |   TemplateId(ctx){ expr->SetBaseTypeExpr(TemplateId); }
            |   Identifier:id{ expr->SetBaseTypeExpr(new Identifier(id)); }
            |   '('{ expr->Add(Derivation.leftParen); } PrefixTypeExpr(ctx, expr) ')'{ expr->Add(Derivation.rightParen); }
            ;
    }
}
