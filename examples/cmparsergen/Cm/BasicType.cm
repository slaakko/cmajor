using System;
using System.Collections;
using System.Text.Parsing;
using TypePtr = System.Text.Parsing.CmObjectModel.TypePtr;
using BoolType = System.Text.Parsing.CmObjectModel.BoolType;
using SByteType = System.Text.Parsing.CmObjectModel.SByteType;
using ByteType = System.Text.Parsing.CmObjectModel.ByteType;
using UShortType = System.Text.Parsing.CmObjectModel.UShortType;
using ShortType = System.Text.Parsing.CmObjectModel.ShortType;
using UIntType = System.Text.Parsing.CmObjectModel.UIntType;
using IntType = System.Text.Parsing.CmObjectModel.IntType;
using LongType = System.Text.Parsing.CmObjectModel.LongType;
using ULongType = System.Text.Parsing.CmObjectModel.ULongType;
using FloatType = System.Text.Parsing.CmObjectModel.FloatType;
using DoubleType = System.Text.Parsing.CmObjectModel.DoubleType;
using CharType = System.Text.Parsing.CmObjectModel.CharType;
using VoidType = System.Text.Parsing.CmObjectModel.VoidType;

namespace Cm
{
    public class BasicTypeGrammar: System.Text.Parsing.Grammar
    {
        public static BasicTypeGrammar* Create()
        {
            return Create(new ParsingDomain());
        }
        public static BasicTypeGrammar* Create(ParsingDomain* parsingDomain)
        {
            RegisterParsingDomain(parsingDomain);
            BasicTypeGrammar* grammar = new BasicTypeGrammar(parsingDomain);
            parsingDomain->AddGrammar(grammar);
            grammar->CreateRules();
            grammar->Link();
            return grammar;
        }
        private BasicTypeGrammar(ParsingDomain* parsingDomain): base("BasicTypeGrammar", parsingDomain->GetNamespaceScope("Cm"), parsingDomain)
        {
            SetOwner(0);
        }
        public TypePtr Parse(const char* start, const char* end, int fileIndex, const string& fileName)
        {
            Scanner scanner(start, end, fileIndex, fileName, SkipRule());
            System.IO.OutputStream* log = Log();
            UniquePtr<XmlLog> xmlLog;
            if (log != null)
            {
                xmlLog.Reset(new XmlLog(*log, MaxLogLineLength()));
                scanner.SetLog(xmlLog.GetPtr());
                xmlLog->WriteBeginRule("parse");
            }
            Stack<UniquePtr<Object>> stack;
            Match match = Parse(scanner, stack);
            Span stop = scanner.GetSpan();
            if (log != null)
            {
                xmlLog->WriteEndRule("parse");
            }
            if (!match.Hit() || stop.Start() != int(end - start))
            {
                Rule* startRule = StartRule();
                if (startRule != null)
                {
                    throw ExpectationFailure(startRule->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + Name() + "' has no start rule", fileName, stop, start, end);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            TypePtr result = *cast<ValueObject<TypePtr>*>(value.GetPtr());
            return result;
        }
        private class BasicTypeRule: System.Text.Parsing.Rule
        {
            public BasicTypeRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("TypePtr");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<TypePtr>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                ActionParser* a2ActionParser = GetAction("A2");
                a2ActionParser->SetAction(ParsingAction(A2Action));
                ActionParser* a3ActionParser = GetAction("A3");
                a3ActionParser->SetAction(ParsingAction(A3Action));
                ActionParser* a4ActionParser = GetAction("A4");
                a4ActionParser->SetAction(ParsingAction(A4Action));
                ActionParser* a5ActionParser = GetAction("A5");
                a5ActionParser->SetAction(ParsingAction(A5Action));
                ActionParser* a6ActionParser = GetAction("A6");
                a6ActionParser->SetAction(ParsingAction(A6Action));
                ActionParser* a7ActionParser = GetAction("A7");
                a7ActionParser->SetAction(ParsingAction(A7Action));
                ActionParser* a8ActionParser = GetAction("A8");
                a8ActionParser->SetAction(ParsingAction(A8Action));
                ActionParser* a9ActionParser = GetAction("A9");
                a9ActionParser->SetAction(ParsingAction(A9Action));
                ActionParser* a10ActionParser = GetAction("A10");
                a10ActionParser->SetAction(ParsingAction(A10Action));
                ActionParser* a11ActionParser = GetAction("A11");
                a11ActionParser->SetAction(ParsingAction(A11Action));
                ActionParser* a12ActionParser = GetAction("A12");
                a12ActionParser->SetAction(ParsingAction(A12Action));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new BoolType();
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new SByteType();
            }
            public throw void A2Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new ByteType();
            }
            public throw void A3Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new UShortType();
            }
            public throw void A4Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new ShortType();
            }
            public throw void A5Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new UIntType();
            }
            public throw void A6Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new IntType();
            }
            public throw void A7Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new ULongType();
            }
            public throw void A8Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new LongType();
            }
            public throw void A9Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new FloatType();
            }
            public throw void A10Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new DoubleType();
            }
            public throw void A11Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new CharType();
            }
            public throw void A12Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new VoidType();
            }
            private class Context
            {
                public TypePtr value;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRule(new BasicTypeRule("BasicType", GetScope(),
                new AlternativeParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new AlternativeParser(
                                            new AlternativeParser(
                                                new AlternativeParser(
                                                    new AlternativeParser(
                                                        new AlternativeParser(
                                                            new AlternativeParser(
                                                                new ActionParser("A0",
                                                                    new KeywordParser("bool")),
                                                                new ActionParser("A1",
                                                                    new KeywordParser("sbyte"))),
                                                            new ActionParser("A2",
                                                                new KeywordParser("byte"))),
                                                        new ActionParser("A3",
                                                            new KeywordParser("ushort"))),
                                                    new ActionParser("A4",
                                                        new KeywordParser("short"))),
                                                new ActionParser("A5",
                                                    new KeywordParser("uint"))),
                                            new ActionParser("A6",
                                                new KeywordParser("int"))),
                                        new ActionParser("A7",
                                            new KeywordParser("ulong"))),
                                    new ActionParser("A8",
                                        new KeywordParser("long"))),
                                new ActionParser("A9",
                                    new KeywordParser("float"))),
                            new ActionParser("A10",
                                new KeywordParser("double"))),
                        new ActionParser("A11",
                            new KeywordParser("char"))),
                    new ActionParser("A12",
                        new KeywordParser("void")))));
        }
    }
}
