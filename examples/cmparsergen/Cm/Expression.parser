/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System.Text.Parsing.CmObjectModel;

namespace Cm
{
    grammar ExpressionGrammar
    {
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.QualifiedId;
        using LiteralGrammar.Literal;
        using BasicTypeGrammar.BasicType;
        using TemplateGrammar.TemplateId;

        Expression(ParsingContext* ctx): CmObject*
                ::= Disjunction(ctx){ value = Disjunction; }
                ;

        TypeExpr(ParsingContext* ctx): CmObject*
                ::= empty{ ctx->BeginParsingTypeExpr(); }
                    Expression(ctx)
                    {
                        value = Expression;
                        ctx->EndParsingTypeExpr();
                    }
                /   {
                        ctx->EndParsingTypeExpr();
                    }
                ;

        Disjunction(ParsingContext* ctx): CmObject*
                ::= Conjunction(ctx):left{ value = left; }
                (
                    "||"
                    {
                        if (ctx->ParsingTypeExprOrLValue())
                        {
                            pass = false;
                        }
                    }
                    Conjunction(ctx):right!{ value = new BinaryExpression(Operator.or_, value, right); }
                )*
                ;

        Conjunction(ParsingContext* ctx): CmObject*
                ::= BitOr(ctx):left{ value = left; }
                (
                    "&&"
                    {
                        if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                        {
                            pass = false;
                        }
                    }
                    BitOr(ctx):right!{ value = new BinaryExpression(Operator.and_, value, right); }
                )*
                ;

        BitOr(ParsingContext* ctx): CmObject*
                ::= BitXor(ctx):left{ value = left; }
                (
                    ('|' - "||")
                    {
                        if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                        {
                            pass = false;
                        }
                    }
                    BitXor(ctx):right!{ value = new BinaryExpression(Operator.bitOr, value, right); }
                )*
                ;

        BitXor(ParsingContext* ctx): CmObject*
                ::= BitAnd(ctx):left{ value = left; }
                (
                    '^'
                    {
                        if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                        {
                            pass = false;
                        }
                    }
                    BitAnd(ctx):right!{ value = new BinaryExpression(Operator.bitXor, value, right); }
                )*
                ;

        BitAnd(ParsingContext* ctx): CmObject*
                ::= Equality(ctx):left{ value = left; }
                (
                    ('&' - "&&")
                    {
                        if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                        {
                            pass = false;
                        }
                    }
                    Equality(ctx):right!{ value = new BinaryExpression(Operator.bitAnd, value, right); }
                )*
                ;

        Equality(ParsingContext* ctx, var Operator op): CmObject*
                ::= Relational(ctx):left{ value = left; }
                (
                    (   "=="
                    {
                        if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                        {
                            pass = false;
                        }
                        else
                        {
                            op = Operator.eq;
                        }
                    }
                    |   "!="
                    {
                        if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                        {
                            pass = false;
                        }
                        else
                        {
                            op = Operator.neq;
                        }
                    }
                    )
                    Relational(ctx):right!
                    {
                        value = new BinaryExpression(op, value, right);
                    }
                )*
                ;

        Relational(ParsingContext* ctx, var Operator op): CmObject*
                ::= Shift(ctx):left{ value = left; }
                (
                    (   ("<=" - "<=>")
                        {
                            if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                            {
                                pass = false;
                            }
                            else
                            {
                                op = Operator.lessOrEq;
                            }
                        }
                    |   ">="
                        {
                            if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                            {
                                pass = false;
                            }
                            else
                            {
                                op = Operator.greaterOrEq;
                            }
                        }
                    |   ('<' - ("<<" | "<=>"))
                        {
                            if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                            {
                                pass = false;
                            }
                            else
                            {
                                op = Operator.less;
                            }
                        }
                    |   ('>' - ">>")
                        {
                            if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                            {
                                pass = false;
                            }
                            else
                            {
                                op = Operator.greater;
                            }
                        }
                    )
                    Shift(ctx):right
                    {
                        value = new BinaryExpression(op, value, right);
                    }
                )*
                ;

        Shift(ParsingContext* ctx, var Operator op): CmObject*
                ::= Additive(ctx):left{ value = left; }
                (
                    (   "<<"
                        {
                            if (ctx->ParsingTypeExprOrLValue())
                            {
                                pass = false;
                            }
                            else
                            {
                                op = Operator.shiftLeft;
                            }

                        }
                    |   ">>"
                        {
                            if (ctx->ParsingTypeExprOrLValue())
                            {
                                pass = false;
                            }
                            else
                            {
                                op = Operator.shiftRight;
                            }

                        }
                    )
                    (empty{ ctx->BeginParsingArguments(); } Additive(ctx):right!{ ctx->EndParsingArguments(); } / { ctx->EndParsingArguments(); })
                    {
                        value = new BinaryExpression(op, value, right);
                    }
                )*
                ;

        Additive(ParsingContext* ctx, var Operator op): CmObject*
                ::= Multiplicative(ctx):left{ value = left; }
                (
                    (   '+'
                        {
                            if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                            {
                                pass = false;
                            }
                            else
                            {
                                op = Operator.plus;
                            }

                        }
                    |   '-'
                        {
                            if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                            {
                                pass = false;
                            }
                            else
                            {
                                op = Operator.minus;
                            }

                        }
                    )
                    Multiplicative(ctx):right!
                    {
                        value = new BinaryExpression(op, value, right);
                    }
                )*
                ;

        Multiplicative(ParsingContext* ctx, var Operator op): CmObject*
                ::= Prefix(ctx):left{ value = left; }
                (
                    (   '*'
                        {
                            if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                            {
                                pass = false;
                            }
                            else
                            {
                                op = Operator.mul;
                            }
                        }
                    |   '/'
                        {
                            if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                            {
                                pass = false;
                            }
                            else
                            {
                                op = Operator.div;
                            }

                        }
                    |   '%'
                        {
                            if (ctx->ParsingTypeExprOrLValue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments())
                            {
                                pass = false;
                            }
                            else
                            {
                                op = Operator.mod;
                            }

                        }
                    )
                    Prefix(ctx):right
                    {
                        value = new BinaryExpression(op, value, right);
                    }
                )*
                ;

        Prefix(ParsingContext* ctx, var Operator op): CmObject*
                ::= (
                (   "++"{ op = Operator.preInc; }
                |   "--"{ op = Operator.preDec; }
                |   '-'{  if (ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator.minus; }
                |   '+'{ if (ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator.plus; }
                |   ('!' - "!="){ if (ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator.not_; }
                |   keyword("const"){ if (ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator.const_; }
                |   '~'{ if (ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator.complement; }
                |   ('&' - "&&"){ if (ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator.addressOf; }
                |   '*'{ if (ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator.deref; }
                )
                Prefix(ctx):prefix
                {
                    if (op == Operator.const_)
                    {
                        prefix->AddConst();
                    }
                    else
                    {
                        value = new PrefixExpression(op, prefix);
                    }
                }
                )
                |   Postfix(ctx)
                {
                    value = Postfix;
                }
                ;

        Postfix(ParsingContext* ctx, var UniquePtr<PostfixExpression> postfixExpr): CmObject*
                ::= Primary(ctx)
                {
                    value = Primary;
                    bool wasOwned = value->Owned();
                    value->SetOwned();
                    postfixExpr.Reset(new PostfixExpression(value));
                    if (!wasOwned)
                    {
                        value->SetNotOwned();
                    }
                }
                (
                    (
                        (   "++"{ postfixExpr->AddOp(new PostfixInc()); }
                        |   "--"{ postfixExpr->AddOp(new PostfixDec()); }
                        |   '.' Identifier:memberName!{ postfixExpr->AddOp(new Member(memberName)); }
                        |   "->" Identifier:ptrMemberName!{ postfixExpr->AddOp(new PtrMember(ptrMemberName)); }
                        |   ('('{ if (ctx->ParsingTypeExpr()) pass = false; } ArgumentList(ctx)! ')'!)
                            {
                                postfixExpr->AddOp(new Invoke(ArgumentList));
                            }
                        |   '[' Expression(ctx)! ']'!{ postfixExpr->AddOp(new Indexing(Expression)); }
                        |   '*'
                            {
                                pass = ctx->ParsingTypeExprOrLValue();
                                if (pass)
                                {
                                    postfixExpr->AddOp(new Pointer());
                                }
                            }
                        |   ('&' - "&&")
                            {
                                pass = ctx->ParsingTypeExprOrLValue();
                                if (pass)
                                {
                                    postfixExpr->AddOp(new Reference());
                                }
                            }
                        )+
                    )
                    {
                        postfixExpr->OwnSubject();
                        value = postfixExpr.Release();
                    }
                    |   empty
                )
                ;

        Primary(ParsingContext* ctx): CmObject*
                ::= ('(' Expression(ctx) ')'){ value = Expression; }
                |   Literal{ value = Literal; }
                |   BasicType{ value = BasicType; }
                |   SizeOfExpr(ctx){ value = SizeOfExpr; }
                |   CastExpr(ctx){ value = CastExpr; }
                |   ObjectCreationExpr(ctx){ value = ObjectCreationExpr; }
                |   TemplateId(ctx){ value = TemplateId; }
                |   Identifier:id{ value = new Identifier(id); }
                |   keyword("this"){ value = new ThisAccess(); }
                |   keyword("base"){ value = new BaseAccess(); }
                |   (keyword("typename") '(' Expression(ctx):expr ')')
                    {
                        value = new TypenameExpression(expr);
                    }
                ;

        CastExpr(ParsingContext* ctx): CmObject*
                ::= (keyword("cast") '<'! TypeExpr(ctx):typeExpr! '>'! '('! Expression(ctx):sourceExpr! ')'!)
                {
                    value = new CastExpression(typeExpr, sourceExpr);
                }
                ;

        SizeOfExpr(ParsingContext* ctx): CmObject*
                ::= keyword("sizeof") '('! Expression(ctx)! ')'!
                {
                    value = new SizeofExpression(Expression);
                }
                ;

        ObjectCreationExpr(ParsingContext* ctx): CmObject*
                ::= NewExpr(ctx){ value = NewExpr; }
                |   ConstructionExpr(ctx){ value = ConstructionExpr; }
                ;

        NewExpr(ParsingContext* ctx): CmObject*
                ::= (keyword("new") TypeExpr(ctx):type!
                    '('! ArgumentList(ctx):args! ')'!)
                {
                    value = new NewExpression(type, args);
                }
                ;

        ConstructionExpr(ParsingContext* ctx): CmObject*
                ::= (keyword("construct") '<'! TypeExpr(ctx):type! '>'!
                    '('! ExpressionList(ctx):args! ')'!)
                {
                    value = new ObjectConstructionExpression(type, args);
                }
                ;

        ArgumentList(ParsingContext* ctx): ExpressionList
                ::= (ExpressionList(ctx){ value = ExpressionList; })?
                ;

        ExpressionList(ParsingContext* ctx, var ExpressionListHolder exprListHolder): ExpressionList
                ::= empty{ ctx->BeginParsingArguments(); }
                (
                    Expression(ctx){ exprListHolder.Add(Expression); } % ','
                )
                {
                    ctx->EndParsingArguments();
                    value = exprListHolder.Release();
                }
                /
                {
                    ctx->EndParsingArguments();
                }
                ;
    }
}
