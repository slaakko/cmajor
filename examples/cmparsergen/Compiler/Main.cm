/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;
using System.Collections;
using System.IO;

void AddToLibraryDirectories(const string& libraryPath, List<string>& libraryDirectories, bool ext)
{
    List<string> dirs = libraryPath.Split(';');
    for (const string& dir : dirs)
    {
        if (ext)
        {
            string path = GetFullPath(Path.Combine(Path.MakeCanonical(dir), "ext/System.Text.Parsing"));
            libraryDirectories.Add(path);
        }                
        else
        {
            string path = GetFullPath(Path.MakeCanonical(dir));
            libraryDirectories.Add(path);
        }
    }
}

int main(int argc, const char** argv)
{
    try
    {
        const char* version = "1.1";

        Console.Out() << "Cmajor parser generator version " << version << endl();
        if (argc < 2)
        {
            Console.Out() << "Usage: cmparsergen [options] {<file>.pp}" << endl();
            Console.Out() << "Compile cmparsergen project file(s) <file>.pp..." << endl();
            Console.Out() << "options:" << endl();
            Console.Out() << "-F                    : force codegen" << endl();
            Console.Out() << "-L <dir1>;<dir2>;...  : add <dir1>, <dir2>, ... to library directories" << endl();
            Console.Out() << "-debug                : write parsing debug output to stderr" << endl();
            Console.Out() << "-watch_alloc=SERIAL   : watch allocation serial SERIAL (compiled with -debug_heap)" << endl();
            return 1;
        }
        List<string> projectFilePaths;
        List<string> libraryDirectories;
        string cmLibraryPath;
        const char* cmLibraryPathEnv = get_environment_variable("CM_LIBRARY_PATH");
        if (cmLibraryPathEnv != null)
        {
            cmLibraryPath = cmLibraryPathEnv;
        }
        if (cmLibraryPath.IsEmpty())
        {
            Console.Error() << "please set 'CM_LIBRARY_PATH' environment variable to contain (at least) /path/to/cmajor/system directory." << endl();
            return 2;
        }
        AddToLibraryDirectories(cmLibraryPath , libraryDirectories, true);
        bool prevWasL = false;
        bool debug = false;
        for (int i = 1; i < argc; ++i)
        {
            string arg = argv[i];
            if (arg.StartsWith("-"))
            {
                if (arg.Find('=') != -1)
                {
                    List<string> components = arg.Split('=');
                    if (components.Count() == 2)
                    {
                        if (components[0] == "-watch_alloc")
                        {
                            int serial = ParseInt(components[1]);
                            dbgheap_watch(serial);
                        }
                        else
                        {
                            throw Exception("invalid argument '" + arg + "'");
                        }
                    }
                    else
                    {
                        throw Exception("invalid argument '" + arg + "'");
                    }
                }
                else if (arg == "-L")
                {
                    prevWasL = true;
                }
                else if (arg == "-debug")
                {
                    debug = true;
                }
                else if (arg == "-F")
                {
                    Syntax.Flags.SetForceCodeGen();
                }
            }
            else if (prevWasL)
            {
                prevWasL = false;
                AddToLibraryDirectories(arg, libraryDirectories, false);
            }
            else
            {
                projectFilePaths.Add(GetFullPath(Path.MakeCanonical(arg)));
            }
        }
        for (const string& projectFilePath : projectFilePaths)
        {
            Syntax.Compile(projectFilePath, libraryDirectories, debug);
        }
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.Message() << endl();
        try
        {
            OutputFileStream s("error.txt");
            s << ex.ToString() << endl();
        }
        catch (Exception&)
        {
        }
        return 3;
    }
    return 0;
}
