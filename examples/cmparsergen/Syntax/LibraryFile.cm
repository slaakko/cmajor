using System;
using System.Collections;
using System.Text.Parsing;
using Cm;

namespace Syntax
{
    public class LibraryFileGrammar: System.Text.Parsing.Grammar
    {
        public static LibraryFileGrammar* Create()
        {
            return Create(new ParsingDomain());
        }
        public static LibraryFileGrammar* Create(ParsingDomain* parsingDomain)
        {
            RegisterParsingDomain(parsingDomain);
            LibraryFileGrammar* grammar = new LibraryFileGrammar(parsingDomain);
            parsingDomain->AddGrammar(grammar);
            grammar->CreateRules();
            grammar->Link();
            return grammar;
        }
        private LibraryFileGrammar(ParsingDomain* parsingDomain): base("LibraryFileGrammar", parsingDomain->GetNamespaceScope("Syntax"), parsingDomain)
        {
            SetOwner(0);
        }
        public void Parse(const char* start, const char* end, int fileIndex, const string& fileName, ParsingDomain* parsingDomain)
        {
            Scanner scanner(start, end, fileIndex, fileName, SkipRule());
            System.IO.OutputStream* log = Log();
            UniquePtr<XmlLog> xmlLog;
            if (log != null)
            {
                xmlLog.Reset(new XmlLog(*log, MaxLogLineLength()));
                scanner.SetLog(xmlLog.GetPtr());
                xmlLog->WriteBeginRule("parse");
            }
            Stack<UniquePtr<Object>> stack;
            stack.Push(UniquePtr<Object>(new ValueObject<ParsingDomain*>(parsingDomain)));
            Match match = Parse(scanner, stack);
            Span stop = scanner.GetSpan();
            if (log != null)
            {
                xmlLog->WriteEndRule("parse");
            }
            if (!match.Hit() || stop.Start() != int(end - start))
            {
                Rule* startRule = StartRule();
                if (startRule != null)
                {
                    throw ExpectationFailure(startRule->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + Name() + "' has no start rule", fileName, scanner.GetSpan(), start, end);
                }
            }
        }
        private class LibraryFileRule: System.Text.Parsing.Rule
        {
            public LibraryFileRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("ParsingDomain*", "parsingDomain"));
                AddLocalVariable(AttrOrVariable("ParsingContext*", "ctx"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> parsingDomain_value = stack.Pop();
                context.parsingDomain = *cast<ValueObject<ParsingDomain*>*>(parsingDomain_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* namespaceContentNonterminalParser = GetNonterminal("NamespaceContent");
                namespaceContentNonterminalParser->SetPreCall(PreCall(PreNamespaceContent));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.ctx = new ParsingContext();
            }
            public throw void PreNamespaceContent(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingDomain*>(context.parsingDomain)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            private class Context
            {
                public ParsingDomain* parsingDomain;
                public ParsingContext* ctx;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class NamespaceContentRule: System.Text.Parsing.Rule
        {
            public NamespaceContentRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("ParsingDomain*", "parsingDomain"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> parsingDomain_value = stack.Pop();
                context.parsingDomain = *cast<ValueObject<ParsingDomain*>*>(parsingDomain_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* grammarNonterminalParser = GetNonterminal("Grammar");
                grammarNonterminalParser->SetPreCall(PreCall(PreGrammar));
                grammarNonterminalParser->SetPostCall(PostCall(PostGrammar));
                NonterminalParser* namespaceNonterminalParser = GetNonterminal("Namespace");
                namespaceNonterminalParser->SetPreCall(PreCall(PreNamespace));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.parsingDomain->AddGrammar(context.fromGrammar);
            }
            public throw void PreGrammar(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.parsingDomain->CurrentNamespace()->GetScope())));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void PostGrammar(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromGrammar_value = stack.Pop();
                    context.fromGrammar = *cast<ValueObject<Grammar*>*>(fromGrammar_value.GetPtr());
                }
            }
            public throw void PreNamespace(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingDomain*>(context.parsingDomain)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            private class Context
            {
                public ParsingDomain* parsingDomain;
                public ParsingContext* ctx;
                public Grammar* fromGrammar;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class NamespaceRule: System.Text.Parsing.Rule
        {
            public NamespaceRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("ParsingDomain*", "parsingDomain"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> parsingDomain_value = stack.Pop();
                context.parsingDomain = *cast<ValueObject<ParsingDomain*>*>(parsingDomain_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                NonterminalParser* nsNonterminalParser = GetNonterminal("ns");
                nsNonterminalParser->SetPostCall(PostCall(Postns));
                NonterminalParser* namespaceContentNonterminalParser = GetNonterminal("NamespaceContent");
                namespaceContentNonterminalParser->SetPreCall(PreCall(PreNamespaceContent));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.parsingDomain->BeginNamespace(context.fromns);
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.parsingDomain->EndNamespace();
            }
            public throw void Postns(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromns_value = stack.Pop();
                    context.fromns = *cast<ValueObject<string>*>(fromns_value.GetPtr());
                }
            }
            public throw void PreNamespaceContent(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingDomain*>(context.parsingDomain)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            private class Context
            {
                public ParsingDomain* parsingDomain;
                public ParsingContext* ctx;
                public string fromns;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class GrammarRule: System.Text.Parsing.Rule
        {
            public GrammarRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Scope*", "enclosingScope"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("Grammar*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> enclosingScope_value = stack.Pop();
                context.enclosingScope = *cast<ValueObject<Scope*>*>(enclosingScope_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Grammar*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* grammarNameNonterminalParser = GetNonterminal("grammarName");
                grammarNameNonterminalParser->SetPostCall(PostCall(PostgrammarName));
                NonterminalParser* grammarContentNonterminalParser = GetNonterminal("GrammarContent");
                grammarContentNonterminalParser->SetPreCall(PreCall(PreGrammarContent));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new Grammar(context.fromgrammarName, context.enclosingScope);
                context.value->SetNs(context.enclosingScope->Ns());
            }
            public throw void PostgrammarName(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromgrammarName_value = stack.Pop();
                    context.fromgrammarName = *cast<ValueObject<string>*>(fromgrammarName_value.GetPtr());
                }
            }
            public throw void PreGrammarContent(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Grammar*>(context.value)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            private class Context
            {
                public Scope* enclosingScope;
                public ParsingContext* ctx;
                public Grammar* value;
                public string fromgrammarName;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class GrammarContentRule: System.Text.Parsing.Rule
        {
            public GrammarContentRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Grammar*", "grammar"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> grammar_value = stack.Pop();
                context.grammar = *cast<ValueObject<Grammar*>*>(grammar_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* ruleNonterminalParser = GetNonterminal("Rule");
                ruleNonterminalParser->SetPreCall(PreCall(PreRule));
                ruleNonterminalParser->SetPostCall(PostCall(PostRule));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.grammar->AddRule(context.fromRule);
            }
            public throw void PreRule(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Scope*>(context.grammar->GetScope())));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            public throw void PostRule(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromRule_value = stack.Pop();
                    context.fromRule = *cast<ValueObject<Rule*>*>(fromRule_value.GetPtr());
                }
            }
            private class Context
            {
                public Grammar* grammar;
                public ParsingContext* ctx;
                public Rule* fromRule;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class RuleRule: System.Text.Parsing.Rule
        {
            public RuleRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                AddInheritedAttribute(AttrOrVariable("Scope*", "enclosingScope"));
                AddInheritedAttribute(AttrOrVariable("ParsingContext*", "ctx"));
                SetValueTypeName("Rule*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
                UniquePtr<Object> ctx_value = stack.Pop();
                context.ctx = *cast<ValueObject<ParsingContext*>*>(ctx_value.GetPtr());
                UniquePtr<Object> enclosingScope_value = stack.Pop();
                context.enclosingScope = *cast<ValueObject<Scope*>*>(enclosingScope_value.GetPtr());
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Rule*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* ruleNameNonterminalParser = GetNonterminal("ruleName");
                ruleNameNonterminalParser->SetPostCall(PostCall(PostruleName));
                NonterminalParser* signatureNonterminalParser = GetNonterminal("Signature");
                signatureNonterminalParser->SetPreCall(PreCall(PreSignature));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new Rule(context.fromruleName, context.enclosingScope);
            }
            public throw void PostruleName(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromruleName_value = stack.Pop();
                    context.fromruleName = *cast<ValueObject<string>*>(fromruleName_value.GetPtr());
                }
            }
            public throw void PreSignature(Stack<UniquePtr<Object>>& stack)
            {
                stack.Push(UniquePtr<Object>(new ValueObject<Rule*>(context.value)));
                stack.Push(UniquePtr<Object>(new ValueObject<ParsingContext*>(context.ctx)));
            }
            private class Context
            {
                public Scope* enclosingScope;
                public ParsingContext* ctx;
                public Rule* value;
                public string fromruleName;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain* parsingDomain = GetParsingDomain();
            Grammar* grammar0 = parsingDomain->GetGrammar("System.Text.Parsing.stdlib");
            if (grammar0 == null)
            {
                grammar0 = System.Text.Parsing.stdlib.Create(parsingDomain);
            }
            AddGrammarReference(grammar0);
            Grammar* grammar1 = parsingDomain->GetGrammar("Syntax.ElementGrammar");
            if (grammar1 == null)
            {
                grammar1 = Syntax.ElementGrammar.Create(parsingDomain);
            }
            AddGrammarReference(grammar1);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("spaces_and_comments", this, "System.Text.Parsing.stdlib.spaces_and_comments"));
            AddRuleLink(new RuleLink("Identifier", this, "ElementGrammar.Identifier"));
            AddRuleLink(new RuleLink("identifier", this, "System.Text.Parsing.stdlib.identifier"));
            AddRuleLink(new RuleLink("qualified_id", this, "System.Text.Parsing.stdlib.qualified_id"));
            AddRuleLink(new RuleLink("Signature", this, "ElementGrammar.Signature"));
            AddRule(new LibraryFileRule("LibraryFile", GetScope(),
                new SequenceParser(
                    new ActionParser("A0",
                        new EmptyParser()),
                    new NonterminalParser("NamespaceContent", "NamespaceContent", 2))));
            AddRule(new NamespaceContentRule("NamespaceContent", GetScope(),
                new KleeneStarParser(
                    new AlternativeParser(
                        new ActionParser("A0",
                            new NonterminalParser("Grammar", "Grammar", 2)),
                        new NonterminalParser("Namespace", "Namespace", 2)))));
            AddRule(new NamespaceRule("Namespace", GetScope(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new KeywordParser("namespace"),
                                new ActionParser("A0",
                                    new ExpectationParser(
                                        new NonterminalParser("ns", "qualified_id", 0)))),
                            new ExpectationParser(
                                new CharParser('{'))),
                        new NonterminalParser("NamespaceContent", "NamespaceContent", 2)),
                    new ActionParser("A1",
                        new ExpectationParser(
                            new CharParser('}'))))));
            AddRule(new GrammarRule("Grammar", GetScope(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new KeywordParser("grammar"),
                                new ActionParser("A0",
                                    new ExpectationParser(
                                        new NonterminalParser("grammarName", "Identifier", 0)))),
                            new ExpectationParser(
                                new CharParser('{'))),
                        new NonterminalParser("GrammarContent", "GrammarContent", 2)),
                    new ExpectationParser(
                        new CharParser('}')))));
            AddRule(new GrammarContentRule("GrammarContent", GetScope(),
                new KleeneStarParser(
                    new ActionParser("A0",
                        new NonterminalParser("Rule", "Rule", 2)))));
            AddRule(new RuleRule("Rule", GetScope(),
                new SequenceParser(
                    new SequenceParser(
                        new ActionParser("A0",
                            new NonterminalParser("ruleName", "Identifier", 0)),
                        new NonterminalParser("Signature", "Signature", 2)),
                    new CharParser(';'))));
            SetSkipRuleName("spaces_and_comments");
        }
    }
}
