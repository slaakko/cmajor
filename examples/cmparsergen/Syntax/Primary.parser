/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using Cm;
using System.Text.Parsing.CmObjectModel;

namespace Syntax
{
    grammar PrimaryGrammar
    {
        using PrimitiveGrammar.Primitive;
        using ElementGrammar.Identifier;
        using CompositeGrammar.Alternative;
        using Cm.ExpressionGrammar.ExpressionList;
        using Cm.StatementGrammar.CompoundStatement;

        Primary(Scope* enclosingScope, ParsingContext* ctx): Parser*
                    ::=
                    (   RuleCall(ctx){ value = RuleCall; }
                    |   Primitive{ value = Primitive; }
                    |   Grouping(enclosingScope, ctx){ value = Grouping; }
                    |   Token(enclosingScope, ctx){ value = Token; }
                    )
                    (Expectation(value){ value = Expectation; })?
                    (Action(value, ctx){ value = Action; })?
                    ;

        RuleCall(ParsingContext* ctx): Parser*
                    ::= ((token(Nonterminal:ntWithArgs '(') ExpressionList(ctx) ')' | Nonterminal:nt) Alias?)
                    {
                        string ruleName;
                        if (!ntWithArgs.IsEmpty())
                        {
                            ruleName = ntWithArgs;
                        }
                        else
                        {
                            ruleName = nt;
                        }
                        string alias = Alias;
                        string name = alias;
                        if (alias.IsEmpty()) name = ruleName;
                        NonterminalParser* parser(new NonterminalParser(name, ruleName));
                        parser->SetPosition(position);
                        parser->SetArguments(ExpressionList);
                        value = parser;
                    }
                    ;

        Nonterminal: string
                    ::= Identifier{ value = Identifier; }
                    ;

        Alias: string
                    ::= ':' Identifier!{ value = Identifier; }
                    ;

        Grouping(Scope* enclosingScope, ParsingContext* ctx): Parser*
                    ::= '(' Alternative(enclosingScope, ctx)! ')'!{ value = Alternative; }
                    ;

        Token(Scope* enclosingScope, ParsingContext* ctx): Parser*
                    ::= keyword("token") '('! Alternative(enclosingScope, ctx)! ')'!{ value = new TokenParser(Alternative); }
                    ;

        Expectation(Parser* child): Parser* ::= '!'{ value = new ExpectationParser(child); }
                    ;

        Action(Parser* child, ParsingContext* ctx): Parser*
                    ::= (CompoundStatement(ctx):action ('/' CompoundStatement(ctx):failureAction)?)
                    {
                        value = new ActionParser("", action, failureAction, child);
                    }
                    ;
    }
}
