/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using Cm;
using System.Text.Parsing.CmObjectModel;

namespace Syntax
{
    grammar ElementGrammar
    {
        using stdlib.qualified_id;
        using stdlib.identifier;
        using stdlib.string;
        using Declarator = Cm.IdentifierGrammar.Identifier;
        using Cm.TypeExprGrammar.TypeExpr;

        RuleLink(Grammar* grammar)
                            ::= (keyword("using") identifier:aliasName '=' qualified_id:ruleName ';')
                                {
                                    RuleLink* link(new RuleLink(aliasName, grammar, ruleName));
                                    link->SetSpan(span);
                                    grammar->AddRuleLink(link);
                                }
                            |   (keyword("using") qualified_id ';')
                                {
                                    RuleLink* link(new RuleLink(grammar, qualified_id));
                                    link->SetSpan(span);
                                    grammar->AddRuleLink(link);
                                }
                            ;

        Signature(Rule* rule, ParsingContext* ctx)
                            ::= ParameterList(rule, ctx)? ReturnType(rule, ctx)?
                            ;

        ParameterList(Rule* rule, ParsingContext* ctx)
                            ::= '(' ((Variable(rule, ctx) | Parameter(rule, ctx)) % ',') ')'!
                            ;

        Variable(Rule* rule, ParsingContext* ctx)
                            ::= keyword("var") TypeExpr(ctx) Declarator{ rule->AddLocalVariable(AttrOrVariable(TypeExpr->ToString(), Declarator)); delete TypeExpr; }
                            ;

        Parameter(Rule* rule, ParsingContext* ctx)
                            ::= TypeExpr(ctx) Declarator{ rule->AddInheritedAttribute(AttrOrVariable(TypeExpr->ToString(), Declarator)); delete TypeExpr; }
                            ;

        ReturnType(Rule* rule, ParsingContext* ctx)
                            ::= ':' TypeExpr(ctx){ rule->SetValueTypeName(TypeExpr->ToString()); delete TypeExpr; }
                            ;

        Keyword             ::= keyword_list(identifier,
                                ["using", "grammar", "start", "skip", "token", "keyword", "keyword_list", "empty", "space", "anychar", "letter", "digit", "hexdigit", "punctuation", "var"])
                            ;

        Identifier: string
                            ::= (identifier - Keyword){ value = string(matchBegin, matchEnd); }
                            ;

        QualifiedId: string
                            ::= token(Identifier:first('.' Identifier:rest)*){ value = string(matchBegin, matchEnd); }
                            ;

        StringArray(List<string>* array)
                            ::= '[' (string:str{ array->Add(str); } % ',') ']'!
                            ;
    }
}
