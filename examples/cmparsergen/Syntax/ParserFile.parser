/*========================================================================
    Copyright (c) 2012-2014 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using Cm;

namespace Syntax
{
    grammar ParserFileGrammar
    {
        using stdlib.spaces_and_comments;
        using stdlib.newline;
        using stdlib.qualified_id;
        using GrammarGrammar.Grammar;
        using Cm.NamespaceGrammar.NamespaceImport;
        using Cm.NamespaceGrammar.Alias;

        skip spaces_and_comments;

        ParserFile(int id_, ParsingDomain* parsingDomain_, var ParsingContext* ctx): ParserFileContent*
                    ::= empty{ value = new ParserFileContent(id_, parsingDomain_); value->SetFilePath(fileName); ctx = new ParsingContext(); }
                        NamespaceContent(value, ctx)
                    ;

        UsingDeclarations(ParserFileContent* parserFileContent)
                    ::= UsingDeclaration(parserFileContent)+
                    ;

        UsingDeclaration(ParserFileContent* parserFileContent)
                    ::= (   NamespaceImport{ parserFileContent->AddUsingObject(NamespaceImport); }
                        |   Alias{ parserFileContent->AddUsingObject(Alias); }
                        )
                    ;

        NamespaceContent(ParserFileContent* parserFileContent, ParsingContext* ctx)
                    ::= UsingDeclarations(parserFileContent)?
                    (   Grammar(parserFileContent->CurrentScope(), ctx){ parserFileContent->AddGrammar(Grammar); }
                    |   Namespace(parserFileContent, ctx)
                    )*
                    ;

        Namespace(ParserFileContent* parserFileContent, ParsingContext* ctx)
                    ::= keyword("namespace") qualified_id:ns!{ parserFileContent->BeginNamespace(ns); }
                        '{'!
                        NamespaceContent(parserFileContent, ctx)
                        '}'!{ parserFileContent->EndNamespace(); }
                    ;
    }
}
