/*********************************************************
 *  Calculator parser is based on the following grammar: *
 *                                                       *
 *  expr     ::= term ((+ | -) term)*                    *
 *           ;                                           *
 *  term     ::= factor ((* | /) factor)*                *
 *           ;                                           *
 *  factor   ::= (+ | -)? primary                        *
 *           ;                                           *
 *  primary  ::= NUMBER | ( expr )                       *
 *           ;                                           *
 *********************************************************/

using System;

namespace Calculator
{
    public static class Parser
    {
        public static double Parse(const string& input)
        { 
            Scanner scanner(input);
            try
            {
                scanner.NextToken();
                double value = Expr(scanner);
                Token* next = scanner.GetToken();
                if (next is End*)
                {
                    return value;
                }
                else
                {
                    throw ParsingError("invalid expression");
                }
            }
            catch (const ConversionException& ex)
            {
                throw ParsingError(ex.Message() + ":\n" + scanner.GetErrorLines());
            }
            catch (const DivisionByZero& ex)
            {
                throw ParsingError(ex.Message() + ":\n" + scanner.GetErrorLines());
            }
            catch (const ParsingError& ex)
            {
                throw ParsingError(ex.Message() + ":\n" + scanner.GetErrorLines());
            }
            return 0;
        }
        private static double Expr(Scanner& scanner)
        {
            double value = Term(scanner);
            Token* next = scanner.GetToken();
            Operator* op = next as Operator*;
            while (op != null && op->IsAddOp())
            {
                char opChar = op->Ch();
                scanner.NextToken();
                double right = Term(scanner);
                if (opChar == '+')
                {
                    value = value + right;
                }
                else
                {
                    #assert(opChar == '-');
                    value = value - right;
                }
                next = scanner.GetToken();
                op = next as Operator*;
            }
            return value;
        }
        private static double Term(Scanner& scanner)
        {
            double value = Factor(scanner);
            Token* next = scanner.GetToken();
            Operator* op = next as Operator*;
            while (op != null && op->IsMulOp())
            {
                char opChar = op->Ch();
                scanner.NextToken();
                double right = Factor(scanner);
                if (opChar == '*')
                {
                    value = value * right;
                }
                else
                {
                    #assert(opChar == '/');
                    if (right == 0)
                    {
                        throw DivisionByZero("division by zero");
                    }
                    value = value / right;
                }
                next = scanner.GetToken();
                op = next as Operator*;
            }
            return value;
        }
        private static double Factor(Scanner& scanner)
        {
            Token* next = scanner.GetToken();
            Operator* op = next as Operator*;
            bool neg = false;
            if (op != null && op->IsAddOp())
            {
                if (op->Ch() == '-')
                {
                    neg = true;
                }
                scanner.NextToken();
            }
            double value = Primary(scanner);
            if (neg)
            {
                return -value;
            }
            return value;
        }
        private static double Primary(Scanner& scanner)
        {
            Token* next = scanner.GetToken();
            Number* number = next as Number*;
            if (number != null)
            {
                double value = number->Value();
                scanner.NextToken();
                return value;
            }
            else 
            {
                Operator* op = next as Operator*;
                if (op != null && op->IsLeftParen())
                {
                    scanner.NextToken();
                    double value = Expr(scanner);
                    next = scanner.GetToken();
                    op = next as Operator*;
                    if (op != null && op->IsRightParen())
                    {
                        scanner.NextToken();
                        return value;
                    }
                    else
                    {
                        throw ParsingError("')' expected");
                    }
                }
                else
                {
                    throw ParsingError("number or subexpression expected");
                }
            }            
        }
    }
}
