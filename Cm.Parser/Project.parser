/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

 [hpp]#include <Cm.Ast/Project.hpp>
 [cpp]#include <Cm.Parser/LlvmVersion.hpp>

namespace Cm.Parser
{
    using namespace Cm::Ast;

    grammar ProjectGrammar
    {
        using stdlib.identifier;
        using stdlib.qualified_id;
        using stdlib.spaces_and_comments;
        using stdlib.ulong;
        using stdlib.long;
        using VersionNumberParser.VersionNumber;
        skip spaces_and_comments;

        Project(std::string config, std::string backend, std::string os, int bits, Cm::Ast::ProgramVersion llvmVersion): Cm::Ast::Project*
            ::= (keyword("project") qualified_id ';'!){ value = new Project(qualified_id, fileName, config, backend, os, bits, llvmVersion); }
                Declarations(value)
            ;

        Declarations(Cm::Ast::Project* project)
            ::= (Declaration(project){ project->AddDeclaration(Declaration); })*
            ;

        Declaration(Cm::Ast::Project* project): Cm::Ast::ProjectDeclaration*
            ::= SourceFileDeclaration(project){ value = SourceFileDeclaration; }
            |   AsmSourceFileDeclaration(project){ value = AsmSourceFileDeclaration; }
            |   CSourceFileDeclaration(project){ value = CSourceFileDeclaration; }
            |   CppSourceFileDeclaration(project){ value = CppSourceFileDeclaration; }
            |   TextFileDeclaration(project){ value = TextFileDeclaration; }
            |   ReferenceFileDeclaration(project){ value = ReferenceFileDeclaration; }
            |   CLibraryDeclaration{ value = CLibraryDeclaration; }
            |   TargetDeclaration{ value = TargetDeclaration; }
            |   StackSizeDeclaration{ value = StackSizeDeclaration; }
            |   AssemblyFileDeclaration(project){ value = AssemblyFileDeclaration; }
            |   ExecutableFileDeclaration(project){ value = ExecutableFileDeclaration; }
            |   AddLibraryPathDeclaration(project){ value = AddLibraryPathDeclaration; }
            ;

        SourceFileDeclaration(Cm::Ast::Project* project): Cm::Ast::ProjectDeclaration*
            ::= (keyword("source") FilePath! Properties? ';'!){ value = new SourceFileDeclaration(span, SourceFileType::cm, FilePath, project->BasePath(), Properties); }
            ;

        AsmSourceFileDeclaration(Cm::Ast::Project* project): Cm::Ast::ProjectDeclaration*
            ::= (keyword("asmsource") FilePath! Properties? ';'!){ value = new SourceFileDeclaration(span, SourceFileType::asm_, FilePath, project->BasePath(), Properties); }
            ;

        CSourceFileDeclaration(Cm::Ast::Project* project): Cm::Ast::ProjectDeclaration*
            ::= (keyword("csource") FilePath! Properties? ';'!){ value = new SourceFileDeclaration(span, SourceFileType::c, FilePath, project->BasePath(), Properties); }
            ;

        CppSourceFileDeclaration(Cm::Ast::Project* project): Cm::Ast::ProjectDeclaration*
            ::= (keyword("cppsource") FilePath! Properties? ';'!){ value = new SourceFileDeclaration(span, SourceFileType::cpp, FilePath, project->BasePath(), Properties); }
            ;

        TextFileDeclaration(Cm::Ast::Project* project): Cm::Ast::ProjectDeclaration*
            ::= (keyword("text") FilePath! Properties? ';'!){ value = new SourceFileDeclaration(span, SourceFileType::text, FilePath, project->BasePath(), Properties); }
            ;

        ReferenceFileDeclaration(Cm::Ast::Project* project): Cm::Ast::ProjectDeclaration*
            ::= (keyword("reference") FilePath! Properties? ';'!){ value = new ReferenceFileDeclaration(span, FilePath, project->BasePath(), Properties); }
            ;

        AssemblyFileDeclaration(Cm::Ast::Project* project): Cm::Ast::ProjectDeclaration*
            ::= (keyword("assembly") FilePath! Properties? ';'!){ value = new AssemblyFileDeclaration(span, FilePath, project->OutputBasePath(), Properties); }
            ;

        ExecutableFileDeclaration(Cm::Ast::Project* project): Cm::Ast::ProjectDeclaration*
            ::= (keyword("executable") FilePath! ';'!){ value = new ExecutableFileDeclaration(span, FilePath, project->OutputBasePath()); }
            ;

        AddLibraryPathDeclaration(Cm::Ast::Project* project): Cm::Ast::ProjectDeclaration*
            ::= (keyword("addlibrarypath") FilePath! Properties? ';'!){ value = new AddLibraryPathDeclaration(span, FilePath, project->BasePath(), Properties); }
            ;

        CLibraryDeclaration: Cm::Ast::ProjectDeclaration*
            ::= (keyword("clib") FilePath! Properties? ';'!){ value = new CLibraryDeclaration(span, FilePath, Properties); }
            ;

        TargetDeclaration: Cm::Ast::ProjectDeclaration*
            ::= keyword("target") '='! (keyword("program"){ value = new TargetDeclaration(span, Target::program); } | keyword("library"){ value = new TargetDeclaration(span, Target::library); })! ';'!
            ;

        StackSizeDeclaration: Cm::Ast::ProjectDeclaration*
            ::= (keyword("stack") '='! ulong:reserve! (',' ulong:commit)? ';'!){ value = new StackSizeDeclaration(span, reserve, commit); }
            ;

        Properties: Cm::Ast::Properties
            ::= '[' ((identifier:name RelOp:rel PropertyValue:val){ value.AddProperty(name, rel, val); } % ',') ']'!
            ;

        RelOp: Cm::Ast::RelOp
            ::= '='{ value = Cm::Ast::RelOp::equal; }
            |   "!="{ value = Cm::Ast::RelOp::notEq; }
            |   "<="{ value = Cm::Ast::RelOp::lessEq; }
            |   ">="{ value = Cm::Ast::RelOp::greaterEq; }
            |   '<'{ value = Cm::Ast::RelOp::less; }
            |   '>'{ value = Cm::Ast::RelOp::greater; }
            ;

        PropertyValue: std::string
            ::= VersionNumber{ value = std::string(matchBegin, matchEnd); }
            |   identifier:id{ value = id; }
            |   long:num{ value = std::to_string(num); }
            ;

        FilePath: std::string
            ::= token('<' ([^>]+){ value = std::string(matchBegin, matchEnd); } '>'!)
            ;
    }
}
