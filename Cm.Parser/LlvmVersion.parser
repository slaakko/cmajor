/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

[hpp]#include <Cm.Ast/Project.hpp>

namespace Cm.Parser
{
    grammar LlvmVersionParser
    {
        using stdlib.newline;
        using VersionNumberParser.Major;
        using VersionNumberParser.Minor;
        using VersionNumberParser.Revision;
        using VersionNumberParser.Build;

        LlvmVersion(var std::string versionText) : Cm::Ast::ProgramVersion
            ::= ("LLVM" (anychar - newline)* newline
                "  LLVM version " (Major '.' Minor ('.' Revision ('.' Build)?)? (anychar - newline)*){ versionText = std::string(matchBegin, matchEnd); } newline
                anychar*)
                {
                    value = Cm::Ast::ProgramVersion(Major, Minor, Revision, Build, versionText);
                }
            ;

    }

    grammar VersionNumberParser
    {
        using stdlib.int;

        VersionNumber : Cm::Ast::ProgramVersion
            ::= (Major '.' Minor ('.' Revision ('.' Build)?)?){ value = Cm::Ast::ProgramVersion(Major, Minor, Revision, Build, ""); }
            ;

        Major : int
            ::= int:major{ value = major; }
            ;

        Minor : int
            ::= int:minor{ value = minor; }
            ;

        Revision : int
            ::= int:revision{ value = revision; }
            ;

        Build : int
            ::= int:build{ value = build; }
            ;
    }
}
