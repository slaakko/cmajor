/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

 [hpp]#include <Cm.Ast/TypeExpr.hpp>
 [hpp]#include <Cm.Parser/ParsingContext.hpp>
 [cpp]#include <Cm.Ast/Expression.hpp>
 [cpp]#include <Cm.Ast/Typedef.hpp>
 [cpp]#include <Cm.Parser/BasicType.hpp>
 [cpp]#include <Cm.Parser/Identifier.hpp>
 [cpp]#include <Cm.Parser/Template.hpp>
 [cpp]#include <Cm.Parser/Expression.hpp>
 
 namespace Cm.Parser
 {
    [cpp]using namespace Cm::Ast;

    grammar TypeExprGrammar
    {
        using BasicTypeGrammar.BasicType;
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.QualifiedId;
        using TemplateGrammar.TemplateId;
        using ExpressionGrammar.Expression;

        TypeExpr(ParsingContext* ctx, var std::unique_ptr<DerivedTypeExprNode> node): Cm::Ast::Node*
            ::= empty{ ctx->BeginParsingTypeExpr(); node.reset(new DerivedTypeExprNode(span)); }
                PrefixTypeExpr(ctx, node.get()){ node->GetSpan().SetEnd(span.End()); value = MakeTypeExprNode(node.release()); ctx->EndParsingTypeExpr(); } / { ctx->EndParsingTypeExpr(); }
            ;

        PrefixTypeExpr(ParsingContext* ctx, Cm::Ast::DerivedTypeExprNode* node)
            ::= keyword("const"){ node->AddConst(); } PostfixTypeExpr(ctx, node):c
            |   PostfixTypeExpr(ctx, node)
            ;

        PostfixTypeExpr(ParsingContext* ctx, Cm::Ast::DerivedTypeExprNode* node, var Span s)
            ::= PrimaryTypeExpr(ctx, node){ s = span; }
            (   '.' Identifier:dotMemberId!{ s.SetEnd(span.End()); node->SetBaseTypeExpr(new DotNode(s, node->ReleaseBaseTypeExprNode(), dotMemberId)); }
            |   "&&"{ node->AddRvalueRef(); }
            |    '&'{ node->AddReference(); }
            |    '*'{ node->AddPointer(); }
            |   '['{ node->AddArray(); } Expression(ctx):dim{node->AddArrayDimensionNode(dim); } ']'
            )*
            ;

        PrimaryTypeExpr(ParsingContext* ctx, Cm::Ast::DerivedTypeExprNode* node)
            ::= BasicType{ node->SetBaseTypeExpr(BasicType); }
            |   TemplateId(ctx){ node->SetBaseTypeExpr(TemplateId); }
            |   Identifier{ node->SetBaseTypeExpr(Identifier); }
            |   '('{ node->AddLeftParen(); } PrefixTypeExpr(ctx, node)! ')'{ node->AddRightParen(); }
            ;
    }
 }
