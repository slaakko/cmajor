/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

 [hpp]#include <Cm.Parser/ParsingContext.hpp>
 [hpp]#include <Cm.Ast/CompileUnit.hpp>
 [cpp]#include <Cm.Parser/Identifier.hpp>
 [cpp]#include <Cm.Parser/Constant.hpp>
 [cpp]#include <Cm.Parser/Function.hpp>
 [cpp]#include <Cm.Parser/Enumeration.hpp>
 [cpp]#include <Cm.Parser/Typedef.hpp>
 [cpp]#include <Cm.Parser/Class.hpp>
 [cpp]#include <Cm.Parser/Interface.hpp>
 [cpp]#include <Cm.Parser/Delegate.hpp>
 [cpp]#include <Cm.Parser/Concept.hpp>
 [cpp]#include <Cm.Parser/Specifier.hpp>
 [cpp]#include <Cm.Parser/TypeExpr.hpp>
 [cpp]#include <Cm.Ast/Namespace.hpp>
 [cpp]#include <Cm.Ast/Identifier.hpp>
 [cpp]#include <Cm.Ast/Function.hpp>
 [cpp]#include <Cm.Ast/Constant.hpp>
 [cpp]#include <Cm.Ast/Enumeration.hpp>
 [cpp]#include <Cm.Ast/Typedef.hpp>
 [cpp]#include <Cm.Ast/Class.hpp>
 [cpp]#include <Cm.Ast/Delegate.hpp>
 [cpp]#include <Cm.Ast/Concept.hpp>
 [cpp]#include <Cm.Ast/Expression.hpp>
 
namespace Cm.Parser
{
    using namespace Cm::Ast;

    grammar CompileUnitGrammar
    {
        using SpecifierGrammar.Specifiers;
        using TypeExprGrammar.TypeExpr;
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.QualifiedId;
        using FunctionGrammar.Function;
        using ConstantGrammar.Constant;
        using EnumerationGrammar.EnumType;
        using TypedefGrammar.Typedef;
        using ClassGrammar.Class;
        using InterfaceGrammar.Interface;
        using DelegateGrammar.Delegate;
        using DelegateGrammar.ClassDelegate;
        using ConceptGrammar.Concept;
        using stdlib.spaces_and_comments;
        skip spaces_and_comments;
        cc Namespace(start='{', end='}');

        CompileUnit(ParsingContext* ctx): Cm::Ast::CompileUnitNode*
            ::= empty{ value = new CompileUnitNode(span, fileName); }
                NamespaceContent(ctx, value, value->GlobalNs())
            ;

        NamespaceContent(ParsingContext* ctx, Cm::Ast::CompileUnitNode* compileUnit, Cm::Ast::NamespaceNode* ns)
            ::= UsingDirectives(ctx, ns) 
                Definitions(ctx, compileUnit, ns)
            ;

        UsingDirectives(ParsingContext* ctx, Cm::Ast::NamespaceNode* ns)
            ::= UsingDirective(ctx, ns)*
            ;

        UsingDirective(ParsingContext* ctx, Cm::Ast::NamespaceNode* ns)
            ::= UsingAliasDirective{ ns->AddMember(UsingAliasDirective); }
            |   UsingNamespaceDirective{ ns->AddMember(UsingNamespaceDirective); }
            ;

        UsingAliasDirective(var std::unique_ptr<IdentifierNode> id): Cm::Ast::AliasNode*
            ::= (keyword("using") Identifier{ id.reset(Identifier); } '=' QualifiedId! ';'!){ value = new AliasNode(span, id.release(), QualifiedId); }
            ;

        UsingNamespaceDirective: Cm::Ast::NamespaceImportNode*
            ::= (keyword("using") QualifiedId! ';'!){ value = new NamespaceImportNode(span, QualifiedId); }
            ;

        Definitions(ParsingContext* ctx, Cm::Ast::CompileUnitNode* compileUnit, Cm::Ast::NamespaceNode* ns)
            ::= (Definition(ctx, compileUnit, ns){ ns->AddMember(Definition); })*
            ;

        Definition(ParsingContext* ctx, Cm::Ast::CompileUnitNode* compileUnit, Cm::Ast::NamespaceNode* ns): Cm::Ast::Node*
            ::= NamespaceDefinition(ctx, compileUnit, ns){ value = NamespaceDefinition; }
            |   FunctionDefinition(ctx, compileUnit){ value = FunctionDefinition; }
            |   ConstantDefinition(ctx){ value = ConstantDefinition; }
            |   EnumerationDefinition(ctx){ value = EnumerationDefinition; }
            |   TypedefDefinition(ctx){ value = TypedefDefinition; }
            |   ClassDefinition(ctx, compileUnit){ value = ClassDefinition; }
            |   InterfaceDefinition(ctx, compileUnit){ value = InterfaceDefinition; }
            |   DelegateDefinition(ctx){ value = DelegateDefinition; }
            |   ClassDelegateDefinition(ctx){ value = ClassDelegateDefinition; }
            |   ConceptDefinition(ctx){ value = ConceptDefinition; }
            |   (Specifiers:s1 '`'){ value = new Cm::Ast::CCNode(span); }
            |   (Specifiers:s2 TypeExpr(ctx) empty{ pass = ctx->CCNodeParsed(); }){ value = TypeExpr; }
            ;

        NamespaceDefinition(ParsingContext* ctx, Cm::Ast::CompileUnitNode* compileUnit, Cm::Ast::NamespaceNode* ns): Cm::Ast::NamespaceNode*
            ::= (keyword("namespace") QualifiedId!){ value = new NamespaceNode(span, QualifiedId); } '{'! NamespaceContent(ctx, compileUnit, value)! '}'!
            ;

        FunctionDefinition(ParsingContext* ctx, Cm::Ast::CompileUnitNode* compileUnit): Cm::Ast::FunctionNode*
            ::= Function(ctx){ value = Function; value->SetCompileUnit(compileUnit); }
            ;

        ConstantDefinition(ParsingContext* ctx): Cm::Ast::Node*
            ::= Constant(ctx){ value = Constant; }
            ;

        EnumerationDefinition(ParsingContext* ctx): Cm::Ast::Node*
            ::= EnumType(ctx){ value = EnumType; }
            ;

        TypedefDefinition(ParsingContext* ctx): Cm::Ast::Node* 
            ::= Typedef(ctx){ value = Typedef; }
            ;

        ClassDefinition(ParsingContext* ctx, Cm::Ast::CompileUnitNode* compileUnit): Cm::Ast::Node*
            ::= Class(ctx, compileUnit){ value = Class; }
            ;

        InterfaceDefinition(ParsingContext* ctx, Cm::Ast::CompileUnitNode* compileUnit): Cm::Ast::Node*
            ::= Interface(ctx, compileUnit){ value = Interface; }
            ;

        DelegateDefinition(ParsingContext* ctx): Cm::Ast::Node*
            ::= Delegate(ctx){ value = Delegate; }
            ;

        ClassDelegateDefinition(ParsingContext* ctx): Cm::Ast::Node*
            ::= ClassDelegate(ctx){ value = ClassDelegate; }
            ;

        ConceptDefinition(ParsingContext* ctx): Cm::Ast::Node*
            ::= Concept(ctx){ value = Concept; }
            ;
    }
}
