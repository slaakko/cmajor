/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

 [hpp]#include <Cm.Ast/Solution.hpp>

namespace Cm.Parser
{
    using namespace Cm::Ast;

    grammar SolutionGrammar
    {
        using stdlib.qualified_id;
        using stdlib.spaces_and_comments;
        skip spaces_and_comments;

        Solution: Cm::Ast::Solution*
            ::= (keyword("solution") qualified_id! ';'!){ value = new Solution(qualified_id, fileName); }
                Declarations(value)
            ;

        Declarations(Cm::Ast::Solution* solution)
            ::= (Declaration(solution){ solution->AddDeclaration(Declaration); })*
            ;

        Declaration(Cm::Ast::Solution* solution): Cm::Ast::SolutionDeclaration*
            ::= ProjectFileDeclaration(solution){ value = ProjectFileDeclaration; }
            |   ActiveProjectDeclaration{ value = ActiveProjectDeclaration; }
            |   ProjectDependencyDeclaration{ value = ProjectDependencyDeclaration; }
            ;

        ProjectFileDeclaration(Cm::Ast::Solution* solution): Cm::Ast::SolutionDeclaration*
            ::= (keyword("project") FilePath! ';'!){ value = new ProjectFileDeclaration(span, FilePath, solution->BasePath()); }
            ;

        ActiveProjectDeclaration: Cm::Ast::SolutionDeclaration*
            ::= (keyword("activeProject") qualified_id! ';'!){ value = new ActiveProjectDeclaration(qualified_id); }
            ;

        ProjectDependencyDeclaration: Cm::Ast::ProjectDependencyDeclaration*
            ::= keyword("dependency") qualified_id:projectName!{ value = new ProjectDependencyDeclaration(projectName); } '('! (qualified_id:dependsOn{ value->AddDependency(dependsOn); } % ',')? ')'! ';'!
            ;

        FilePath: std::string
            ::= token('<' ([^>]+){ value = std::string(matchBegin, matchEnd); } '>'!)
            ;

    }
}