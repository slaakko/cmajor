/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.Bind
{
    internal void BindTypedef(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, Cm.Core.ClassTemplateRepository& classTemplateRepository,
        Cm.Ast.TypedefNode* typedefNode)
    {
        Cm.Sym.Symbol* symbol = containerScope->Lookup(typedefNode->Id()->Str(), Cm.Sym.SymbolTypeSetId.lookupTypedef);
        if (symbol == null)
        {
            for (const UniquePtr<Cm.Sym.FileScope>& fileScope : fileScopes)
            {
                symbol = fileScope->Lookup(typedefNode->Id()->Str(), Cm.Sym.SymbolTypeSetId.lookupTypedef);
                if (symbol != null) break;
            }
        }
        if (symbol != null)
        {
            if (symbol is Cm.Sym.TypedefSymbol*)
            {
                Cm.Sym.TypedefSymbol* typedefSymbol = cast<Cm.Sym.TypedefSymbol*>(symbol);
                BindTypedef(symbolTable, containerScope, fileScopes, classTemplateRepository, typedefNode, typedefSymbol);
            }
            else
            {
                throw Cm.Core.Error("symbol '" + symbol->FullName() + "' does not denote a typedef", typedefNode->GetSpan(), symbol->GetSpan());
            }
        }
        else
        {
            throw Cm.Core.Error("typedef symbol '" + typedefNode->Id()->Str() + "' not found", typedefNode->GetSpan());
        }
    }
    
    internal void BindTypedef(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, Cm.Core.ClassTemplateRepository& classTemplateRepository,
        Cm.Ast.TypedefStatementNode* typedefStatementNode)
    {
        Cm.Sym.Symbol* symbol = containerScope->Lookup(typedefStatementNode->Id()->Str(), Cm.Sym.SymbolTypeSetId.lookupTypedef);
        if (symbol == null)
        {
            for (const UniquePtr<Cm.Sym.FileScope>& fileScope : fileScopes)
            {
                symbol = fileScope->Lookup(typedefStatementNode->Id()->Str(), Cm.Sym.SymbolTypeSetId.lookupTypedef);
                if (symbol != null) break;
            }
        }
        if (symbol != null)
        {
            if (symbol is Cm.Sym.TypedefSymbol*)
            {
                Cm.Sym.TypedefSymbol* typedefSymbol = cast<Cm.Sym.TypedefSymbol*>(symbol);
                BindTypedef(symbolTable, containerScope, fileScopes, classTemplateRepository, typedefStatementNode, typedefSymbol);
            }
            else
            {
                throw Cm.Core.Error("symbol '" + symbol->FullName() + "' does not denote a typedef", typedefStatementNode->GetSpan(), symbol->GetSpan());
            }
        }
        else
        {
            throw Cm.Core.Error("typedef symbol '" + typedefStatementNode->Id()->Str() + "' not found", typedefStatementNode->GetSpan());
        }
    }
    
    internal void BindTypedef(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, Cm.Core.ClassTemplateRepository& classTemplateRepository,
        Cm.Ast.TypedefNode* typedefNode, Cm.Sym.TypedefSymbol* typedefSymbol)
    {
        // todo
    }

    internal void BindTypedef(Cm.Sym.SymbolTable& symbolTable, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, Cm.Core.ClassTemplateRepository& classTemplateRepository,
        Cm.Ast.TypedefStatementNode* typedefStatementNode, Cm.Sym.TypedefSymbol* typedefSymbol)
    {
        // todo
    }
}