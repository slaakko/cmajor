/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Bind
{
    internal Cm.Ast.NamespaceNode* CreateNamespaces(const Span& span, const string& nsFullName, const Cm.Ast.NodeList<Cm.Ast.Node>& usingNodes, Cm.Ast.NamespaceNode*& currentNs)
    {
        Cm.Ast.NamespaceNode* globalNs = new Cm.Ast.NamespaceNode(span);
        currentNs = globalNs;
        if (!nsFullName.IsEmpty())
        {
            List<string> nsComponents = nsFullName.Split('.');
            for (const string& nsComponent : nsComponents)
            {
                Cm.Ast.NamespaceNode* namespaceNode = new Cm.Ast.NamespaceNode(span, new Cm.Ast.IdentifierNode(span, nsComponent));
                currentNs->AddMember(namespaceNode);
                currentNs = namespaceNode;
            }
        }
        Cm.Ast.CloneContext cloneContext;
        for (const UniquePtr<Cm.Ast.Node>& usingNode : usingNodes)
        {
            currentNs->AddMember(usingNode->Clone(cloneContext));
        }
        return globalNs;
    }
}
