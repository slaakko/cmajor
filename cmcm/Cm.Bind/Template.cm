/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Bind
{
    internal Cm.Ast.NamespaceNode* CreateNamespaces(const Span& span, const string& nsFullName, const Cm.Ast.NodeList<Cm.Ast.Node>& usingNodes, Cm.Ast.NamespaceNode*& currentNs)
    {
        Cm.Ast.NamespaceNode* globalNs = new Cm.Ast.NamespaceNode(span);
        currentNs = globalNs;
        if (!nsFullName.IsEmpty())
        {
            List<string> nsComponents = nsFullName.Split('.');
            for (const string& nsComponent : nsComponents)
            {
                Cm.Ast.NamespaceNode* namespaceNode = new Cm.Ast.NamespaceNode(span, new Cm.Ast.IdentifierNode(span, nsComponent));
                currentNs->AddMember(namespaceNode);
                currentNs = namespaceNode;
            }
        }
        Cm.Ast.CloneContext cloneContext;
        for (const UniquePtr<Cm.Ast.Node>& usingNode : usingNodes)
        {
            currentNs->AddMember(usingNode->Clone(cloneContext));
        }
        return globalNs;
    }
    
    internal Cm.Sym.FunctionSymbol* Instantiate(Cm.Core.FunctionTemplateRepository& functionTemplateRepository, Cm.Sym.ContainerScope* containerScope, Cm.BoundTree.BoundCompileUnit& boundCompileUnit,
        Cm.Sym.FunctionSymbol* functionTemplate, const List<Cm.Sym.TypeSymbol*>& templateArguments)
    {
        Cm.Core.FunctionTemplateKey key(functionTemplate, templateArguments);
        Cm.Sym.FunctionSymbol* functionTemplateInstance = functionTemplateRepository.GetFunctionTemplateInstance(key);
        if (functionTemplateInstance != null)
        {
            return functionTemplateInstance;
        }
        Cm.Ast.Node* node = boundCompileUnit.SymbolTable().GetNode(functionTemplate, false);
        if (node == null)
        {
            functionTemplate->ReadFunctionNode(boundCompileUnit.SymbolTable(), functionTemplate->GetSpan().FileIndex());
            node = boundCompileUnit.SymbolTable().GetNode(functionTemplate);
        }
        if (!(node is Cm.Ast.FunctionNode*))
        {
            throw Exception("function node expected");
        }
        Cm.Ast.FunctionNode* functionNode = cast<Cm.Ast.FunctionNode*>(node);
        Cm.Ast.NamespaceNode* currentNs = null;
        UniquePtr<Cm.Ast.NamespaceNode> globalNs(CreateNamespaces(functionTemplate->GetSpan(), functionTemplate->Ns()->FullName(), functionTemplate->GetUsingNodes(), currentNs));
        Cm.Ast.CloneContext cloneContext;
        cloneContext.SetInstantiateFunctionNode();
        Cm.Ast.FunctionNode* functionInstanceNode = cast<Cm.Ast.FunctionNode*>(functionNode->Clone(cloneContext));
        currentNs->AddMember(functionInstanceNode);
        Cm.Sym.DeclarationVisitor declarationVisitor(boundCompileUnit.SymbolTable());
        declarationVisitor.MarkFunctionSymbolAsTemplateSpecialization();
        globalNs->Accept(declarationVisitor);
        functionTemplateInstance = boundCompileUnit.SymbolTable().GetFunctionSymbol(functionInstanceNode);
        if (functionTemplate->IsConstExpr())
        {
            functionTemplateInstance->SetConstExpr();
        }
        functionTemplateInstance->SetFunctionTemplate(functionTemplate);
        functionTemplateRepository.AddFunctionTemplateInstance(key, functionTemplateInstance);
        functionTemplateInstance->SetReplicated();
        functionTemplateInstance->SetFunctionTemplateSpecialization();
        BindTypeParameters(functionTemplate, functionTemplateInstance, templateArguments);
        Prebinder prebinder(boundCompileUnit.SymbolTable(), boundCompileUnit.ClassTemplateRepository(), boundCompileUnit);
        prebinder.BeginCompileUnit();
        globalNs->Accept(prebinder);
        functionTemplateInstance->SetTypeArguments(templateArguments);
        functionTemplateInstance->ComputeName();
        string constraintStr;
        if (functionNode->Constraint() != null)
        {
            constraintStr = functionNode->Constraint()->ToString();
        }
        if (!constraintStr.IsEmpty())
        {
            functionTemplateInstance->SetName(functionTemplateInstance->Name() + " " + constraintStr);
        }
        prebinder.EndCompileUnit();
        if (Cm.Sym.GetGlobalFlag(Cm.Sym.GlobalFlags.generate_docs))
        {
            if (functionTemplate->HasConstraint())
            {
                //functionTemplateInstance->SetConstraintDocId(functionTemplate->Constraint()->DocId()); // todo: docs
            }
        }
        else
        {
            Cm.Sym.FileScope* fileScope = prebinder.ReleaseFileScope();
            boundCompileUnit.AddFileScope(fileScope);
            Binder binder(boundCompileUnit);
            globalNs->Accept(binder);
            boundCompileUnit.RemoveLastFileScope();
        }
        functionTemplateInstance->SetGlobalNs(globalNs.Release());
        return functionTemplateInstance;
    }
    
    internal void BindTypeParameters(Cm.Sym.FunctionSymbol* functionTemplate, Cm.Sym.FunctionSymbol* functionTemplateInstance, const List<Cm.Sym.TypeSymbol*>& templateArguments)
    {
        int n = functionTemplate->TypeParameters().Count();
        for (int i = 0; i < n; ++i)
        {
            Cm.Sym.TypeParameterSymbol* templateParameter = functionTemplate->TypeParameters()[i];
            Cm.Sym.BoundTypeParameterSymbol* boundTemplateParam = new Cm.Sym.BoundTypeParameterSymbol(templateParameter->GetSpan(), templateParameter->Name());
            boundTemplateParam->SetType(templateArguments[i]);
            functionTemplateInstance->AddSymbol(boundTemplateParam);
        }
    }
}
