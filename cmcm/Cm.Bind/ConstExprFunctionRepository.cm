/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.Bind
{
    public class ConstExprFunctionRepository : Cm.Core.ConstExprFunctionRepository
    {
        public nothrow ConstExprFunctionRepository(Cm.BoundTree.BoundCompileUnit& boundCompileUnit_) : boundCompileUnit(boundCompileUnit_)
        {
        }
        public override void Release()
        {
            for (Cm.Sym.FunctionSymbol* fun : constExprFunctions)
            {
                fun->FreeFunctionNode(boundCompileUnit.SymbolTable());
            }
        }
        public override Cm.Ast.Node* GetNodeFor(Cm.Sym.FunctionSymbol* constExprFunctionSymbol)
        {
            Cm.Ast.Node* node = boundCompileUnit.SymbolTable().GetNode(constExprFunctionSymbol, false);
            if (node == null)
            {
                constExprFunctionSymbol->ReadFunctionNode(boundCompileUnit.SymbolTable(), constExprFunctionSymbol->GetSpan().FileIndex());
                node = boundCompileUnit.SymbolTable().GetNode(constExprFunctionSymbol);
                constExprFunctions.Insert(constExprFunctionSymbol);
            }
            return node;
        }
        private Cm.BoundTree.BoundCompileUnit& boundCompileUnit;
        private HashSet<Cm.Sym.FunctionSymbol*> constExprFunctions;
    }
}
