/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using System.IO;

internal nothrow const char* Version()
{
    return "1.3.0";
}

internal nothrow const char* Mode() 
{
#if (DEBUG)
    return "debug";
#else
    return "release";
#endif
    return "";
}

internal string DurationStr(const Duration& duration)
{
    string durationStr;
    long hours = duration.Hours();
    long minutes = duration.Minutes() % 60;
    long seconds = duration.Seconds() % 60;
    if (hours > 0)
    {
        durationStr = ToString(hours);
        if (hours != 1)
        {
            durationStr.Append(" hours");
        }
        else
        {
            durationStr.Append(" hour");
        }
    }
    if (minutes > 0)
    {
        if (!durationStr.IsEmpty())
        {
            durationStr.Append(' ');
        }
        durationStr.Append(ToString(minutes));
        if (minutes != 1)
        {
            durationStr.Append(" minutes");
        }
        else
        {
            durationStr.Append(" minute");
        }
    }
    if (!durationStr.IsEmpty())
    {
        durationStr.Append(' ');
    }
    durationStr.Append(ToString(seconds));
    if (seconds != 1)
    {
        durationStr.Append(" seconds");
    }
    else
    {
        durationStr.Append(" second");
    }        
    return durationStr;
}

internal string GetTargetTriple()
{
    string targetTriple;
    char* cmTargetTriple = get_environment_variable("CM_TARGET_TRIPLE");
    if (cmTargetTriple != null)
    {
        targetTriple = cmTargetTriple;
    }
    if (targetTriple.IsEmpty())
    {
#if (WINDOWS)
    #if (BITS64)
        targetTriple = "x86_64-w64-windows-gnu";
    #else
        targetTriple = "i686-pc-windows-gnu";
    #endif
#else    
    #if (BITS64)
        targetTriple = "x86_64-pc-linux-gnu";
    #else
        targetTriple = "i686-pc-linux-gnu";
    #endif
#endif
    }
    return targetTriple;
}

internal string GetDataLayout()
{
    string dataLayout;
    char* cmDataLayout = get_environment_variable("CM_TARGET_DATALAYOUT");
    if (cmDataLayout != null)
    {
        dataLayout = cmDataLayout;
    }
    if (dataLayout.IsEmpty())
    {
#if (WINDOWS)
    #if (BITS64)
        dataLayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128";
    #else
        dataLayout = "e-m:w-p:32:32-i64:64-f80:32-n8:16:32-S32";
    #endif
#else
    #if (BITS64)
        dataLayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128";
    #else
        dataLayout = "e-m:w-p:32:32-i64:64-f80:32-n8:16:32-S32";
    #endif
#endif
    }
    return dataLayout;
}

internal void ObtainLlvmVersion()
{
    string llvmVersionFilePath;
    try
    {
        List<string> libraryDirectories;
        Cm.Build.GetLibraryDirectories(libraryDirectories);
        if (libraryDirectories.IsEmpty())
        {
            throw Exception("no library directories");
        }
        string command = "llc --version";
        llvmVersionFilePath = Path.Combine(libraryDirectories[0], "llvmver.txt");
        Execute(command, 1, llvmVersionFilePath, true); // ignore return value
        string versionString = ReadFile(llvmVersionFilePath);
        Cm.Ast.ProgramVersion llvmVersion = Cm.Build.Grammars.Instance().GetLlvmVersionGrammar()->Parse(versionString.Chars(), versionString.Chars() + versionString.Length(), 0, llvmVersionFilePath);
        bool quiet = Cm.Sym.GetGlobalFlag(Cm.Sym.GlobalFlags.quiet);
        if (!quiet)
        {
            Console.Out() << "LLVM version is " << llvmVersion.ToString() << " (" << llvmVersion.VersionText() << ")" << endl();
        }
        Cm.Core.GlobalSettings.Instance().SetLlvmVersion(llvmVersion);
        RemoveFile(llvmVersionFilePath);
    }
    catch (const Exception& ex)
    {
        try
        {
            if (!llvmVersionFilePath.IsEmpty())
            {
                RemoveFile(llvmVersionFilePath);
            }
        }
        catch (const Exception&)
        {
        }
        throw Exception("could not obtain LLVM compiler version (llc --version): " + ex.Message());
    }
}

void PrintHelp()
{    
    Console.Out() << "Cmajor " << Mode() << " mode compiler version " << Version() << "\n" <<
    "Usage: cmcm [options] {file.cms | file.cmp}\n" <<
    "Compile Cmajor solution file.cms or project file.cmp\n" <<
    "options:\n" <<
    "-R              : rebuild project or solution\n" <<
    "-clean          : clean project or solution\n" <<
    "-c FILENAME     : compile only FILENAME, do not link\n" <<
    "-config=debug   : use debug configuration (default)\n" <<
    "-config=release : use release configuration\n" <<
    "-D SYMBOL       : define conditional compilation symbol SYMBOL\n" <<
    "-O=<n> (n=0-3)  : set optimization level to <n> (default: debug:0, release:3)\n" <<
    "-backend=llvm   : use LLVM backend (default)\n" <<
    "-backend=c      : use C backend\n" <<
    "-m TRIPLE       : override LLVM target triple to emit to .ll files\n" << 
    "-emit-no-triple : do not emit any LLVM target triple to .ll files\n" <<
    "-d DATALAYOUT   : override LLVM target datalayout to emit to .ll files\n" <<
    "-emit-no-layout : do not emit any LLVM datalayout to .ll files\n" <<
    "-emit-opt       : generate optimized LLVM code to <file>.opt.ll\n" <<
    "-quiet          : write no output messages for successful compiles\n" <<
    "-trace          : instrument program/library with tracing enabled\n" <<
    "-debug_heap     : instrument program/library with debug heap enabled\n" <<
    "-no_call_stacks : do not generate call stack information for exceptions\n" << 
    "-class_dot=FILE : generate class hierarchy graph to FILE.dot (only full config)\n" <<
    "-tpg_dot=FILE   : generate type propagation graph to FILE.dot (only full config)\n" <<
    "-vcall_dbg      : debug virtual calls (only full config)\n" << 
    "-vcall_txt=FILE : print devirtualized virtual calls to FILE.txt (only full config)\n" << 
    "-stack=SIZE     : set stack size to SIZE in bytes\n" <<
    endl();
    Console.Out() << "If no -m option is given, LLVM target triple is obtained from environment variable CM_TARGET_TRIPLE. " << 
        "If there is no CM_TARGET_TRIPLE environment variable, default target triple is used unless option -emit-no-triple is given." << endl();
    Console.Out() << "If no -d option is given, LLVM target datalayout is obtained from environment variable CM_TARGET_DATALAYOUT. " << 
        "If there is no CM_TARGET_DATALAYOUT environment variable, default datalayout is used unless option -emit-no-layout is given." << endl(); 
}

int main(int argc, const char** argv)
{
    try
    {
        TimePoint start = Now();
        List<string> solutionOrProjectFilePaths;
        List<string> compileFileNames;
        HashSet<string> defines;
        Cm.IrIntf.Backend backend = Cm.IrIntf.Backend.llvm;
        bool rebuild = false;
        bool prevWasCompile = false;
        bool prevWasDefine = false;
        bool prevWasTargetTriple = false;
        bool prevWasDatalayout = false;
        bool emitNoTriple = false;
        bool emitNoLayout = false;
        ulong stackSizeOpt = 0u;
        string targetTriple = GetTargetTriple();
        string datalayout = GetDataLayout();
        if (argc < 2)
        {
            PrintHelp();
        }
        else
        {
            for (int i = 1; i < argc; ++i)
            {
                string arg = argv[i];
                if (!arg.IsEmpty())
                {
                    if (arg[0] == '-')
                    {
                        if (arg.Find('=') != -1)
                        {
                            List<string> v = arg.Split('=');
                            if (v.Count() == 2)
                            {
                                if (v[0] == "-config")
                                {
                                    const string& config = v[1];
                                    if (config != "debug" && config != "release" && config != "profile" && config != "full")
                                    {
                                        throw Exception("unknown configuration '" + config + "'");
                                    }
                                    Cm.Core.GlobalSettings.Instance().SetConfig(config);
                                    if (config == "release")
                                    {
                                        Cm.Sym.SetGlobalFlag(Cm.Sym.GlobalFlags.optimize);
                                    }
                                    if (config == "profile")
                                    {
                                        throw Exception("profile configuration not supported by cmcm yet");
                                    }
                                    if (config == "full")
                                    {
                                        throw Exception("full configuration not supported by cmcm yet");
                                    }
                                }
                                else if (v[0] == "-O")
                                {
                                    string levelStr = v[1];
                                    int level = ParseInt(levelStr);
                                    Cm.Core.GlobalSettings.Instance().SetOptimizationLevel(level);
                                }
                                else if (v[0] == "-backend")
                                {
                                    string backendStr = v[1];
                                    if (backendStr == "llvm")
                                    {
                                        backend = Cm.IrIntf.Backend.llvm;
                                    }
                                    else if (backendStr == "c")
                                    {
                                        backend = Cm.IrIntf.Backend.c;
                                    }
                                    else
                                    {
                                        throw Exception("unknown backend '" + backendStr + "'");
                                    }
                                }
                                else if (v[0] == "-class_dot")
                                {
                                    string dotFileName = v[1];
                                    Cm.Core.GlobalSettings.Instance().SetClassHierarchyDotFileName(dotFileName);
                                }
                                else if (v[0] == "-tpg_dot")
                                {
                                    string dotFileName = v[1];
                                    Cm.Core.GlobalSettings.Instance().SetTpgDotFileName(dotFileName);
                                }
                                else if (v[0] == "-vcall_txt")
                                {
                                    string vCallFileName = v[1];
                                    Cm.Core.GlobalSettings.Instance().SetVirtualCallFileName(vCallFileName);
                                }
                                else if (v[0] == "-stack")
                                {
                                    stackSizeOpt = ParseULong(v[1]);
                                }
                                else
                                {
                                    throw Exception("unknown argument '" + arg + "'");
                                }
                            }
                            else
                            {
                                throw Exception("unknown argument '" + arg + "'");
                            }
                        }
                        else if (arg == "-help" || arg == "--help")
                        {
                            PrintHelp();
                            return 0;
                        }
                        else if (arg == "-R")
                        {
                            rebuild = true;
                        }
                        else if (arg == "-clean")
                        {
                            Cm.Sym.SetGlobalFlag(Cm.Sym.GlobalFlags.clean);
                        }
                        else if (arg == "-c")
                        {
                            prevWasCompile = true;
                        }
                        else if (arg == "-D")
                        {
                            prevWasDefine = true;
                        }
                        else if (arg == "-m")
                        {
                            prevWasTargetTriple = true;
                        }
                        else if (arg == "-d")
                        {
                            prevWasDatalayout = true;
                        }
                        else if (arg == "-emit-opt")
                        {
                            Cm.Sym.SetGlobalFlag(Cm.Sym.GlobalFlags.emitOpt);
                        }
                        else if (arg == "-emit-no-triple")
                        {
                            emitNoTriple = true;
                        }
                        else if (arg == "-emit-no-layout")
                        {
                            emitNoLayout = true;
                        }
                        else if (arg == "-quiet")
                        {
                            Cm.Sym.SetGlobalFlag(Cm.Sym.GlobalFlags.quiet);
                        }
                        else if (arg == "-trace")
                        {
                            Cm.Sym.SetGlobalFlag(Cm.Sym.GlobalFlags.trace);
                        }
                        else if (arg == "-debug_heap")
                        {
                            Cm.Sym.SetGlobalFlag(Cm.Sym.GlobalFlags.debug_heap);
                        }
                        else if (arg == "-no_call_stacks")
                        {
                            Cm.Sym.SetGlobalFlag(Cm.Sym.GlobalFlags.no_call_stacks);
                        }
                        else if (arg == "-ide")
                        {
                            Cm.Sym.SetGlobalFlag(Cm.Sym.GlobalFlags.ide);
                        }
                        else if (arg == "-vcall_dbg")
                        {
                            Cm.Sym.SetGlobalFlag(Cm.Sym.GlobalFlags.debugVCalls);
                        }
                        else
                        {
                            throw Exception("unknown argument '" + arg + "'");
                        }
                    }
                    else
                    {
                        if (prevWasCompile)
                        {
                            compileFileNames.Add(arg);
                            prevWasCompile = false;
                        }
                        else if (prevWasDefine)
                        {
                            defines.Insert(arg);
                            prevWasDefine = false;
                        }
                        else if (prevWasTargetTriple)
                        {
                            targetTriple = arg;
                            prevWasTargetTriple = false;
                        }
                        else if (prevWasDatalayout)
                        {
                            datalayout = arg;
                            prevWasDatalayout = false;
                        }
                        else
                        {
                            string ext = Path.GetExtension(arg);
                            if (ext != ".cms" && ext != ".cmp")
                            {
                                throw Exception(arg + " is not Cmajor solution or project file");
                            }
                            solutionOrProjectFilePaths.Add(arg);
                        }
                    }
                }
            }
            Cm.IrIntf.SetBackend(backend);
            if (Cm.Core.GetConfig() == "debug" && backend == Cm.IrIntf.Backend.c)
            {
                Cm.Sym.SetGlobalFlag(Cm.Sym.GlobalFlags.generate_debug_info);
            }
            bool quiet = Cm.Sym.GetGlobalFlag(Cm.Sym.GlobalFlags.quiet);
            if (!quiet)
            {
                Console.Out() << "Cmajor " << Mode() << " mode compiler version " << Version() << endl();
            }
            if (!compileFileNames.IsEmpty())
            {
                if (solutionOrProjectFilePaths.IsEmpty())
                {
                    throw Exception("solution or project must be specified when compiling single files");
                }
            }
            if (backend == Cm.IrIntf.Backend.llvm)
            {
                ObtainLlvmVersion();
                if (!emitNoTriple)
                {
                    Cm.Core.GlobalSettings.Instance().SetTargetTriple(targetTriple);
                    if (!quiet)
                    {
                        Console.Out() << "using LLVM target triple = \"" << targetTriple << "\"" << endl();
                    }
                }
                else
                {
                    if (!quiet)
                    {
                        Console.Out() << "emitting no LLVM target triple" << endl();
                    }
                }
                if (!emitNoLayout)
                {
                    Cm.Core.GlobalSettings.Instance().SetDatalayout(datalayout);
                    if (!quiet)
                    {
                        Console.Out() << "using LLVM target datalayout = \"" << datalayout << "\"" << endl();
                    }
                }
                else
                {
                    if (!quiet)
                    {
                        Console.Out() << "emitting no LLVM target datalayout" << endl();
                    }
                }
                
            }
            for (const string& solutionOrProjectFilePath : solutionOrProjectFilePaths)
            {
                string ext = Path.GetExtension(solutionOrProjectFilePath);
                if (ext == ".cms")
                {
                    Cm.Build.BuildSolution(solutionOrProjectFilePath, rebuild, compileFileNames, defines, stackSizeOpt);
                }
                else if (ext == ".cmp")
                {
                    Cm.Build.BuildProject(solutionOrProjectFilePath, rebuild, compileFileNames, defines, stackSizeOpt);
                }
                else
                {
                    throw Exception(solutionOrProjectFilePath + " is not Cmajor solution or project file");
                }
            }
            if (!Cm.Sym.CompileWarningCollection.Instance().Warnings().IsEmpty())
            {
                if (Cm.Sym.GetGlobalFlag(Cm.Sym.GlobalFlags.ide))
                {
                    // todo
                }
            }
        }
        bool quiet = Cm.Sym.GetGlobalFlag(Cm.Sym.GlobalFlags.quiet);
        if (!quiet && !solutionOrProjectFilePaths.IsEmpty())
        {
            TimePoint end = Now();
            Duration duration = end - start;
            Console.Out() << DurationStr(duration) << endl();
        }
    }
    catch (const Exception& ex)
    {
        Console.Error() << ex.ToString() << endl();
        return 1;
    }
    return 0;
}
