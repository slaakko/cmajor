/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Ir.Intf
{
    public abstract class Type
    {
        public nothrow Type(const string& name_) : name(name_), owned(false)
        {
        }
        public virtual ~Type() 
        {
        }
        public abstract Type* Clone() const;
        public nothrow inline const string& Name() const
        {
            return name;
        }
        public nothrow inline void SetName(const string& name_)
        {
            name = name_;
        }
        public virtual nothrow bool IsPointerType() const
        {
            return false;
        }
        public virtual nothrow bool IsFunctionPointerType() const
        {
            return false;
        }
        public virtual nothrow bool IsFunctionPtrPtrType() const
        {
            return false;
        }
        public virtual void GetFunctionPtrTypes(HashSet<Type*>& functionPtrTypes)
        {
        }
        public virtual void ReplaceFunctionPtrTypes(const HashMap<Type*, Type*>& tdfMap)
        {
        }
        public virtual nothrow string Prefix() const
        {
            return Name() + " ";
        }
        public virtual nothrow string Suffix() const
        {
            return string();
        }
        public virtual nothrow const string& GetTagName() const
        {
            return name;
        }
        public virtual Object* CreateDefaultValue() const
        {
            throw Exception("member function not implemented");
        }
        public virtual Object* CreateMinusOne() const
        {
            throw Exception("member function not implemented");
        }
        public virtual Object* CreatePlusOne() const
        {
            throw Exception("member function not implemented");
        }
        public virtual nothrow byte NumPointers() const
        {
            return 0u;
        }
        public nothrow inline bool Owned() const
        {
            return owned;
        }
        public nothrow inline void SetOwned()
        {
            owned = true;
        }
        public nothrow virtual const string& BaseName() const
        {
            return name;
        }
        public nothrow virtual Type* GetBaseType() const
        {
            return this;
        }
        private string name;
        private bool owned;
    }
}
