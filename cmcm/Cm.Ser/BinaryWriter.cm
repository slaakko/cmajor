/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.IO;

namespace Cm.Ser
{
    public class BinaryWriter
    {
        public BinaryWriter(const string& fileName_): fileName(fileName_), file(fileName, OpenMode.writeOnly), pos(0u)
        {
        }
        public nothrow inline ulong Pos() const
        {
            return pos;
        }
        public void Seek(ulong pos)
        {
            pos = cast<ulong>(file.Seek(cast<long>(pos), SEEK_SET));
        }
        public void Write(bool x)
        {
            file.Write(x);
            pos = pos + sizeof(bool);
        }
        public void Write(sbyte x)
        {
            file.Write(x);
            pos = pos + sizeof(sbyte);
        }
        public void Write(byte x)
        {
            file.Write(x);
            pos = pos + sizeof(byte);
        }
        public void Write(short x)
        {
            file.Write(x);
            pos = pos + sizeof(short);
        }
        public void Write(ushort x)
        {
            file.Write(x);
            pos = pos + sizeof(ushort);
        }
        public void Write(int x)
        {
            file.Write(x);
            pos = pos + sizeof(int);
        }
        public void Write(uint x)
        {
            file.Write(x);
            pos = pos + sizeof(uint);
        }
        public void Write(long x)
        {
            file.Write(x);
            pos = pos + sizeof(long);
        }
        public void Write(ulong x)
        {
            file.Write(x);
            pos = pos + sizeof(ulong);
        }
        public void Write(float x)
        {
            file.Write(x);
            pos = pos + sizeof(float);
        }
        public void Write(double x)
        {
            file.Write(x);
            pos = pos + sizeof(double);
        }
        public void Write(char x)
        {
            file.Write(x);
            pos = pos + sizeof(char);
        }
        public void Write(const string& x)
        {
            for (char c : x)
            {
                Write(c);
            }
            Write('\0');
        }
        public void Write(const void* buf, ulong size)
        {
            const byte* p = cast<const byte*>(buf);
            while (size > 0u)
            {
                Write(*p++);
                --size;
            }
        }
        private string fileName;
        private BinaryFileStream file;
        private ulong pos;
    }    
}
