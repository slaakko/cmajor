/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using BinaryWriter = Cm.Ser.BinaryWriter;
using AstWriter = Cm.Ast.Writer;

namespace Cm.Sym
{
    public class Writer
    {
        public Writer(const string& fileName_, SymbolTable& symbolTable_) : binaryWriter(fileName_), astWriter(binaryWriter), symbolTable(symbolTable_)
        {
        }
        public nothrow inline BinaryWriter& GetBinaryWriter()
        {
            return binaryWriter;
        }
        public nothrow inline SymbolTable& GetSymbolTable()
        {
            return symbolTable;
        }
        public nothrow inline AstWriter& GetAstWriter()
        {
            return astWriter;
        }
        public void Write(const TypeId& typeId)
        {
            binaryWriter.Write(typeId.Rep(), cast<ulong>(TypeId.count));
        }
        public void Write(Symbol* symbol)
        {
            byte st = symbol->GetSymbolType();
            if (symbol is BasicTypeSymbol*)
            {
                binaryWriter.Write(st);
            }
            else
            {
                binaryWriter.Write(st);
                astWriter.Write(symbol->GetSpan());
                binaryWriter.Write(symbol->Name());
                symbol->Write(*this);
            }            
        }
        public void Write(Value* value)
        {
            ValueType valueType = value->GetValueType();
            binaryWriter.Write(cast<byte>(valueType));
            value->Write(binaryWriter);
        }
        public void PushExportMemberVariablesAndFunctionSymbols(bool export_)
        {
            exportMemberVariablesAndFunctionSymbolsStack.Push(exportMemberVariablesAndFunctionSymbols);
            exportMemberVariablesAndFunctionSymbols = export_;
        }
        public void PopExportMemberVariablesAndFunctionSymbols()
        {
            exportMemberVariablesAndFunctionSymbols = exportMemberVariablesAndFunctionSymbolsStack.Pop();
        }
        public nothrow inline bool ExportMemberVariablesAndFunctionSymbols() const
        {
            return exportMemberVariablesAndFunctionSymbols;
        }
        private BinaryWriter binaryWriter;
        private AstWriter astWriter;
        private SymbolTable& symbolTable;
        private bool exportMemberVariablesAndFunctionSymbols;
        private Stack<bool> exportMemberVariablesAndFunctionSymbolsStack;
    }
}
