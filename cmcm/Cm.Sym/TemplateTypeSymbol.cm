/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public class TemplateTypeSymbol : ClassTypeSymbol
    {
        public nothrow TemplateTypeSymbol(const Span& span_, const string& name_) : base(span_, name_), subjectType(null)
        {
        }
        public nothrow TemplateTypeSymbol(const Span& span_, const string& name_, TypeSymbol* subjectType_, const List<TypeSymbol*>& typeArguments_, const TypeId& id_) : 
            base(span_, name_, id_), subjectType(subjectType_), typeArguments(typeArguments_)
        {
        }    
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.templateTypeSymbol;
        }
        public nothrow override bool IsTemplateTypeSymbol() const
        {
            return true;
        }
        public nothrow override const char* TypeString() const
        {
            return "template type";
        }
        // todo
        private TypeSymbol* subjectType;
        private List<TypeSymbol*> typeArguments;
        private UniquePtr<Cm.Ast.NamespaceNode> globalNs;
        private UniquePtr<FileScope> fileScope;
        private UniquePtr<Cm.Ast.WhereConstraintNode> constraint;
    }
}
