/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public class ParameterSymbol : Symbol
    {
        public nothrow ParameterSymbol(const Span& span_, const string& name_) : base(span_, name_), type(null)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.parameterSymbol;
        }
        public nothrow override const char* TypeString() const
        {
            return "parameter";
        }
        public nothrow override bool IsParameterSymbol() const
        {
            return true;
        }
        public nothrow override bool IsExportSymbol() const
        {
            return true;
        }
        public nothrow override SymbolAccess DeclaredAccess() const
        {
            return SymbolAccess.public_;
        }
        public nothrow inline TypeSymbol* GetType() const
        {
            return type;
        }
        public nothrow inline void SetType(TypeSymbol* type_)
        {
            type = type_;
        }
        public override void SetType(TypeSymbol* type_, int index)
        {
            SetType(type_);
        }
        public override void Read(Reader& reader)
        {
            base->Read(reader);
            bool hasType = reader.GetBinaryReader().ReadBool();
            if (hasType)
            {
                reader.FetchTypeFor(this, 0);
            }
            else
            {
                Cm.Ast.ParameterNode* parameterNode = reader.GetAstReader().ReadParameterNode();
                ownedParameterNode.Reset(parameterNode);
                reader.GetSymbolTable().SetNode(this, parameterNode);
            }
        }
        public override void Write(Writer& writer)
        {
            base->Write(writer);
            bool hasType = type != null;
            writer.GetBinaryWriter().Write(hasType);
            if (!hasType)
            {
                SymbolTable& symbolTable = writer.GetSymbolTable();
                Cm.Ast.Node* parameterNode = symbolTable.GetNode(this);
                writer.GetAstWriter().Write(parameterNode);
            }
            else
            {
                writer.Write(type->Id());
            }
        }
        
        public override void CollectExportedDerivedTypes(HashSet<Symbol*>& collected, HashSet<TypeSymbol*>& exportedDerivedTypes)
        {
            if (type == null) return;
            if (type->IsDerivedTypeSymbol())
            {
                if (collected.CFind(type) == collected.CEnd())
                {
                    collected.Insert(type);
                    type->CollectExportedDerivedTypes(collected, exportedDerivedTypes);
                }
            }
        }
        public override void CollectExportedTemplateTypes(HashSet<Symbol*>& collected, HashMap<TypeId, TemplateTypeSymbol*>& exportedTemplateTypes)
        {
            if (type == null) return;
            if (type->IsTemplateTypeSymbol() || type->IsDerivedTypeSymbol())
            {
                if (collected.CFind(type) == collected.CEnd())
                {
                    collected.Insert(type);
                    type->CollectExportedTemplateTypes(collected, exportedTemplateTypes);
                }
            }
        }
        public nothrow override void ReplaceReplicaTypes()
        {
            if (type->IsReplica() && type->IsTemplateTypeSymbol())
            {
                TemplateTypeSymbol* replica = cast<TemplateTypeSymbol*>(type);
                type = replica->GetPrimaryTemplateTypeSymbol();
            }
        }
        private TypeSymbol* type;
        private UniquePtr<Cm.Ast.ParameterNode> ownedParameterNode;
    }
}
