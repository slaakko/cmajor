/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public abstract class SymbolCreator
    {
        public virtual nothrow ~SymbolCreator()
        {
        }
        public abstract nothrow Symbol* CreateSymbol(const Span& span, const string& name);
        public abstract Symbol* CreateBasicTypeSymbol();
    }
    
    public class ConcreteSymbolCreator<T> : SymbolCreator where T is SymbolClass
    {
        public override nothrow Symbol* CreateSymbol(const Span& span, const string& name)
        {
            return new T(span, name);
        }
        public override Symbol* CreateBasicTypeSymbol()
        {
            return null;
        }
    }

    public class ConcreteBasicTypeSymbolCreator<T> : SymbolCreator where T is SymbolClass
    {
        public override nothrow Symbol* CreateSymbol(const Span& span, const string& name)
        {
            return null;
        }
        public override Symbol* CreateBasicTypeSymbol()
        {
            return new T();
        }
    }
        
    public class SymbolFactory
    {
        static SymbolFactory() : instance(new SymbolFactory())
        {
        }
        private SymbolFactory()
        {
            creators.Resize(int(SymbolType.maxSymbol));
            Register(SymbolType.boolSymbol, new ConcreteBasicTypeSymbolCreator<BoolTypeSymbol>());
            Register(SymbolType.charSymbol, new ConcreteBasicTypeSymbolCreator<CharTypeSymbol>());
            Register(SymbolType.wcharSymbol, new ConcreteBasicTypeSymbolCreator<WCharTypeSymbol>());
            Register(SymbolType.ucharSymbol, new ConcreteBasicTypeSymbolCreator<UCharTypeSymbol>());
            Register(SymbolType.voidSymbol, new ConcreteBasicTypeSymbolCreator<VoidTypeSymbol>());
            Register(SymbolType.sbyteSymbol, new ConcreteBasicTypeSymbolCreator<SByteTypeSymbol>());
            Register(SymbolType.byteSymbol, new ConcreteBasicTypeSymbolCreator<ByteTypeSymbol>());
            Register(SymbolType.shortSymbol, new ConcreteBasicTypeSymbolCreator<ShortTypeSymbol>());
            Register(SymbolType.ushortSymbol, new ConcreteBasicTypeSymbolCreator<UShortTypeSymbol>());
            Register(SymbolType.intSymbol, new ConcreteBasicTypeSymbolCreator<IntTypeSymbol>());
            Register(SymbolType.uintSymbol, new ConcreteBasicTypeSymbolCreator<UIntTypeSymbol>());
            Register(SymbolType.longSymbol, new ConcreteBasicTypeSymbolCreator<LongTypeSymbol>());
            Register(SymbolType.ulongSymbol, new ConcreteBasicTypeSymbolCreator<ULongTypeSymbol>());
            Register(SymbolType.floatSymbol, new ConcreteBasicTypeSymbolCreator<FloatTypeSymbol>());
            Register(SymbolType.doubleSymbol, new ConcreteBasicTypeSymbolCreator<DoubleTypeSymbol>());
            Register(SymbolType.nullptrSymbol, new ConcreteBasicTypeSymbolCreator<NullPtrTypeSymbol>());
            Register(SymbolType.classSymbol, new ConcreteSymbolCreator<ClassTypeSymbol>());
            Register(SymbolType.interfaceTypeSymbol, new ConcreteSymbolCreator<InterfaceTypeSymbol>());
            Register(SymbolType.constantSymbol, new ConcreteSymbolCreator<ConstantSymbol>());
            Register(SymbolType.declarationBlock, new ConcreteSymbolCreator<DeclarationBlock>());
            Register(SymbolType.delegateSymbol, new ConcreteSymbolCreator<DelegateTypeSymbol>());
            Register(SymbolType.classDelegateSymbol, new ConcreteSymbolCreator<ClassDelegateTypeSymbol>());
            Register(SymbolType.enumTypeSymbol, new ConcreteSymbolCreator<EnumTypeSymbol>());
            Register(SymbolType.enumConstantSymbol, new ConcreteSymbolCreator<EnumConstantSymbol>());
            Register(SymbolType.functionSymbol, new ConcreteSymbolCreator<FunctionSymbol>());
            Register(SymbolType.localVariableSymbol, new ConcreteSymbolCreator<LocalVariableSymbol>());
            Register(SymbolType.memberVariableSymbol, new ConcreteSymbolCreator<MemberVariableSymbol>());
            Register(SymbolType.entrySymbol, new ConcreteSymbolCreator<EntrySymbol>());
            Register(SymbolType.returnValueSymbol, new ConcreteSymbolCreator<ReturnValueSymbol>());
            Register(SymbolType.namespaceSymbol, new ConcreteSymbolCreator<NamespaceSymbol>());
            Register(SymbolType.parameterSymbol, new ConcreteSymbolCreator<ParameterSymbol>());
            Register(SymbolType.typeParameterSymbol, new ConcreteSymbolCreator<TypeParameterSymbol>());
            Register(SymbolType.templateTypeSymbol, new ConcreteSymbolCreator<TemplateTypeSymbol>());
            Register(SymbolType.derivedTypeSymbol, new ConcreteSymbolCreator<DerivedTypeSymbol>());
            Register(SymbolType.typedefSymbol, new ConcreteSymbolCreator<TypedefSymbol>());
            Register(SymbolType.boundTypeParameterSymbol, new ConcreteSymbolCreator<BoundTypeParameterSymbol>());
            Register(SymbolType.conceptSymbol, new ConcreteSymbolCreator<ConceptSymbol>());
        }
        public static nothrow SymbolFactory& Instance()
        {
            return *instance;
        }
        public Symbol* CreateSymbol(SymbolType symbolType, const Span& span, const string& name)
        {
            const UniquePtr<SymbolCreator>& creator = creators[int(symbolType)];
            if (creator.IsNull())
            {
                throw Exception("no creator for symbol type '" + string(SymbolTypeStr(symbolType)) + "'");
            }
            Symbol* value = creator->CreateSymbol(span, name);
            if (value != null)
            {
                return value;
            }
            else
            {
                throw Exception("could not create symbol '" + name + "'");
            }
        }
        public Symbol* CreateBasicTypeSymbol(SymbolType basicTypeSymbolType)
        {
            const UniquePtr<SymbolCreator>& creator = creators[int(basicTypeSymbolType)];
            if (creator.IsNull())
            {
                throw Exception("no creator for basic type symbol '" + string(SymbolTypeStr(basicTypeSymbolType)) + "'");
            }
            Symbol* value = creator->CreateBasicTypeSymbol();
            if (value != null)
            {
                return value;
            }
            else
            {
                throw Exception("could not create basic type symbol");
            }        
        }
        private void Register(SymbolType symbolType, SymbolCreator* creator)
        {
            creators[int(symbolType)] = UniquePtr<SymbolCreator>(creator);
        }
        private static UniquePtr<SymbolFactory> instance;
        private List<UniquePtr<SymbolCreator>> creators;
    }
    
    public abstract class ValueCreator
    {
        public virtual nothrow ~ValueCreator()
        {
        }
        public abstract nothrow Value* CreateValue();
    }
    
    public class ConcreteValueCreator<T> : ValueCreator where T is ValueClass
    {
        public override nothrow Value* CreateValue()
        {
            return new T();
        }
    }

    public class ValueFactory
    {
        static ValueFactory() : instance(new ValueFactory())
        {
        }
        private ValueFactory()
        {
            creators.Resize(int(ValueType.max));
            Register(ValueType.boolValue, new ConcreteValueCreator<BoolValue>());
            Register(ValueType.charValue, new ConcreteValueCreator<CharValue>());
            Register(ValueType.sbyteValue, new ConcreteValueCreator<SByteValue>());
            Register(ValueType.byteValue, new ConcreteValueCreator<ByteValue>());
            Register(ValueType.shortValue, new ConcreteValueCreator<ShortValue>());
            Register(ValueType.ushortValue, new ConcreteValueCreator<UShortValue>());
            Register(ValueType.intValue, new ConcreteValueCreator<IntValue>());
            Register(ValueType.uintValue, new ConcreteValueCreator<UIntValue>());
            Register(ValueType.longValue, new ConcreteValueCreator<LongValue>());
            Register(ValueType.ulongValue, new ConcreteValueCreator<ULongValue>());
            Register(ValueType.floatValue, new ConcreteValueCreator<FloatValue>());
            Register(ValueType.doubleValue, new ConcreteValueCreator<DoubleValue>());
            Register(ValueType.nullValue, new ConcreteValueCreator<NullValue>());
            Register(ValueType.stringValue, new ConcreteValueCreator<StringValue>());
        }
        public static ValueFactory& Instance()
        {
            return *instance;
        }
        public Value* CreateValue(ValueType valueType)
        {
            const UniquePtr<ValueCreator>& creator = creators[int(valueType)];
            if (creator.IsNull())
            {
                throw Exception("no creator for value type '" + string(ValueTypeStr(valueType)) + "'");
            }
            return creator->CreateValue();
        }
        private void Register(ValueType valueType, ValueCreator* creator)
        {
            creators[int(valueType)] = UniquePtr<ValueCreator>(creator);
        }
        private static UniquePtr<ValueFactory> instance;
        private List<UniquePtr<ValueCreator>> creators;
    }
}
