/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public class ConceptSymbol : ContainerSymbol
    {
        public nothrow ConceptSymbol(const Span& span_, const string& name_) : base(span_, name_), isIntrinsicConcept(false), refinedConcept(null)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.conceptSymbol;
        }
        public nothrow inline const string& GroupName() const
        {
            return groupName;
        }
        public nothrow void SetGroupName(const string& groupName_)
        {
            groupName = groupName_;
        }
        public nothrow override const char* TypeString() const
        {
            return "concept";
        }
        public nothrow override bool IsExportSymbol() const
        {
            if (isIntrinsicConcept) return false;
            return base->IsExportSymbol();
        }
        public nothrow const List<TypeParameterSymbol*>& TypeParameters() const
        {
            return typeParameters;
        }
        public nothrow inline int Arity() const
        {
            return typeParameters.Count();
        }
        public nothrow inline const TypeId& Id() const
        {
            return id;
        }
        public override void AddSymbol(Symbol* symbol)
        {
            base->AddSymbol(symbol);
            if (symbol is TypeParameterSymbol*)
            {
                TypeParameterSymbol* typeParameterSymbol = cast<TypeParameterSymbol*>(symbol);
                typeParameterSymbol->SetIndex(typeParameters.Count());
                typeParameters.Add(typeParameterSymbol);
            }
        }
        public override void Read(Reader& reader)
        {
            base->Read(reader);
            id = reader.ReadTypeId();
            groupName = reader.GetBinaryReader().ReadString();
            conceptNode.Reset(reader.GetAstReader().ReadConceptNode());
            reader.GetSymbolTable().SetNode(this, conceptNode.GetPtr());
        }
        public override void Write(Writer& writer)
        {
            base->Write(writer);
            writer.Write(id);
            writer.GetBinaryWriter().Write(groupName);
            Cm.Ast.Node* node = writer.GetSymbolTable().GetNode(this);
            if (node is Cm.Ast.ConceptNode*)
            {
                writer.GetAstWriter().Write(node);
            }
            else
            {
                throw Exception("write: concept node expected");
            }
        }
        public nothrow inline ConceptSymbol* RefinedConcept() const
        {
            return refinedConcept;
        }
        public nothrow void SetRefinedConcept(ConceptSymbol* refinedConcept_)
        {
            refinedConcept = refinedConcept_;
        }
        public nothrow inline void SetIntrinsicConcept() 
        {
            isIntrinsicConcept = true;
        }
        public nothrow inline Cm.Ast.ConceptNode* GetConceptNode() const
        {
            return conceptNode.GetPtr();
        }
        private TypeId id;
        private bool isIntrinsicConcept;
        private string groupName;
        private ConceptSymbol* refinedConcept;
        private List<TypeParameterSymbol*> typeParameters;
        private UniquePtr<Cm.Ast.ConceptNode> conceptNode;
    }
    
    public class InstantiatedConceptSymbol : Symbol
    {
        public nothrow InstantiatedConceptSymbol(ConceptSymbol* conceptSymbol_, const List<TypeSymbol*>& typeArguments_) : 
            base(conceptSymbol_->GetSpan(), MakeInstantiatedConceptSymbolName(conceptSymbol_, typeArguments_)), conceptSymbol(conceptSymbol_), typeArguments(typeArguments_), commonType(null)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.instantiatedConceptSymbol;
        }
        public nothrow override bool IsExportSymbol() const
        {
            return false;
        }
        public nothrow inline ConceptSymbol* Concept() const
        {
            return conceptSymbol;
        }
        public nothrow inline const List<TypeSymbol*>& TypeArguments() const
        {
            return typeArguments;
        }
        public nothrow inline void SetCommonType(TypeSymbol* commonType_)
        {
            commonType = commonType_;
        }
        public nothrow inline TypeSymbol* CommonType() const
        {
            return commonType;
        }
        public nothrow inline SymNode* BoundConstraint() const 
        {
            return boundConstraint.GetPtr();
        }
        public nothrow inline void SetBoundConstraint(SymNode* boundConstraint_)
        {
            boundConstraint.Reset(boundConstraint_);
        }
        private ConceptSymbol* conceptSymbol;
        private List<TypeSymbol*> typeArguments;
        private TypeSymbol* commonType;
        private UniquePtr<SymNode> boundConstraint;
    }
    
    public nothrow string MakeInstantiatedConceptSymbolName(ConceptSymbol* conceptSymbol, const List<TypeSymbol*>& typeArguments)
    {
        string s = conceptSymbol->GroupName();
        s.Append('<');
        bool first = true;
        for (TypeSymbol* typeArgument : typeArguments)
        {
            if (first)
            {
                first = false;
            }
            else
            {
                s.Append(", ");
            }
            s.Append(typeArgument->FullName());
        }
        s.Append('>');
        return s;
    }
    
    public TypeId ComputeInstantiatedConceptSymbolTypeId(ConceptSymbol* conceptSymbol, const List<TypeSymbol*>& typeArguments)
    {
        TypeId id = conceptSymbol->Id();
        int n = typeArguments.Count();
        if (n >= TypeId.count)
        {
            throw Error("only " + ToString(TypeId.count - 1) + " type arguments supported", conceptSymbol->GetSpan());
        }
        for (int i = 0; i < n; ++i)
        {
            TypeSymbol* typeArgument = typeArguments[i];
            TypeId argumentId = typeArgument->Id();
            int positionCode = i;
            RandomAccessIter<byte, byte&, byte*> begin(argumentId.Rep());
            RandomAccessIter<byte, byte&, byte*> middle(argumentId.Rep() + positionCode);
            RandomAccessIter<byte, byte&, byte*> end(argumentId.Rep() + TypeId.count);
            Rotate(begin, middle, end);
            for (int k = 0; k < TypeId.count; ++k)
            {
                id.SetByte(k, id[k] ^ argumentId[k]);
            }
        }
        return id;
    }
}
