/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Sym
{
    public enum DelegateSymbolFlags : byte
    {
        none = 0u,
        nothrow_ = 1u << 0u,
        throw_ = 1u << 1u
    }
    
    public class DelegateTypeSymbol : TypeSymbol
    {
        public nothrow DelegateTypeSymbol(const Span& span_, const string& name_) : base(span_, name_), flags(DelegateSymbolFlags.none), returnType(null)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.delegateSymbol;
        }
        public nothrow override const char* TypeString() const
        {
            return "delegate";
        }
        public nothrow override bool IsValueTypeSymbol() const
        {
            return true;
        }
        public nothrow override bool IsExportSymbol() const
        {
            if (Parent()->IsClassTemplateSymbol()) return false;
            if (Parent() is TemplateTypeSymbol*) return false;
            if (Parent() is ClassDelegateTypeSymbol*) return true;
            return base->IsExportSymbol();
        }
        public inline nothrow bool IsNothrow() const
        {
            return GetFlag(DelegateSymbolFlags.nothrow_);
        }
        public inline nothrow void SetNothrow()
        {
            SetFlag(DelegateSymbolFlags.nothrow_);
        }
        public inline nothrow bool IsThrow() const
        {
            return GetFlag(DelegateSymbolFlags.throw_);
        }
        public inline nothrow void SetThrow()
        {
            SetFlag(DelegateSymbolFlags.throw_);
        }
        public nothrow inline TypeSymbol* GetReturnType() const
        {
            return returnType;
        }
        public nothrow inline void SetReturnType(TypeSymbol* returnType_)
        {
            returnType = returnType_;
        }
        public nothrow inline const List<ParameterSymbol*>& Parameters() const
        {
            return parameters;
        }        
        public override void SetType(TypeSymbol* type, int index)
        {
            SetReturnType(type);
        }
        public override void AddSymbol(Symbol* symbol)
        {
            base->AddSymbol(symbol);
            if (symbol is ParameterSymbol*)
            {
                ParameterSymbol* parameterSymbol = cast<ParameterSymbol*>(symbol);
                parameters.Add(parameterSymbol);
            }
        }
        public override void Read(Reader& reader)
        {
            base->Read(reader);
            flags = cast<DelegateSymbolFlags>(reader.GetBinaryReader().ReadByte());
            reader.FetchTypeFor(this, 0);
            reader.EnqueueMakeIrTypeFor(this);
        }
        public override void Write(Writer& writer)
        {
            base->Write(writer);
            writer.GetBinaryWriter().Write(cast<byte>(flags));
            writer.Write(returnType->Id());
        }
        public override void MakeIrType()
        {
            if (IrTypeMade()) return;
            returnType->MakeIrType();
            Ir.Intf.Type* irReturnType = returnType->IrType()->Clone();
            List<Ir.Intf.Type*> irParameterTypes;
            for (ParameterSymbol* parameter : parameters)
            {
                TypeSymbol* parameterType = parameter->GetType();
                parameterType->MakeIrType();
                Ir.Intf.Type* irParameterType = parameterType->IrType()->Clone();
                irParameterTypes.Add(irParameterType);
            }
            if (!IsNothrow())
            {
                Ir.Intf.Type* exceptionCodeParamType = Cm.IrIntf.Pointer(Ir.Intf.Factory.Instance()->GetI32(), 1u);
                irParameterTypes.Add(exceptionCodeParamType);
            }
            Ir.Intf.Type* irFunctionType = Cm.IrIntf.MakeFunctionType(irReturnType, irParameterTypes);
            Ir.Intf.Type* irDelegateType = Cm.IrIntf.Pointer(irFunctionType, 1u);
            SetIrType(irDelegateType);
            SetDefaultIrValue(Cm.IrIntf.MakeNull(irDelegateType));
        }
        public override string GetMangleId() const
        {
            return Cm.IrIntf.MakeAssemblyName(FullName());
        }
        public override void CollectExportedDerivedTypes(HashSet<Symbol*>& collected, HashSet<TypeSymbol*>& exportedDerivedTypes)
        {
            if (returnType != null)
            {
                if (returnType is DerivedTypeSymbol*)
                {
                    if (collected.CFind(returnType) == collected.CEnd())
                    {
                        collected.Insert(returnType);
                        returnType->CollectExportedDerivedTypes(collected, exportedDerivedTypes);
                    }
                }
            }
            for (ParameterSymbol* parameter : parameters)
            {
                parameter->CollectExportedDerivedTypes(collected, exportedDerivedTypes);
            }
        }
        public override void CollectExportedTemplateTypes(HashSet<Symbol*>& collected, HashMap<TypeId, TemplateTypeSymbol*>& exportedTemplateTypes)
        {
            if (returnType != null)
            {
                if (collected.CFind(returnType) == collected.CEnd())
                {
                    collected.Insert(returnType);
                    returnType->CollectExportedTemplateTypes(collected, exportedTemplateTypes);
                }
            }        
            for (ParameterSymbol* parameter : parameters)
            {
                parameter->CollectExportedTemplateTypes(collected, exportedTemplateTypes);
            }
        }
        public nothrow override void ReplaceReplicaTypes()
        {
            base->ReplaceReplicaTypes();
            if (returnType->IsReplica() && (returnType is TemplateTypeSymbol*))
            {
                TemplateTypeSymbol* replica = cast<TemplateTypeSymbol*>(returnType);
                returnType = replica->GetPrimaryTemplateTypeSymbol();
            }
        }
        public nothrow inline bool GetFlag(DelegateSymbolFlags flag) const
        {
            return (flags & flag) != DelegateSymbolFlags.none;
        }
        public nothrow inline void SetFlag(DelegateSymbolFlags flag)
        {
            flags = cast<DelegateSymbolFlags>(flags | flag);
        }
        private DelegateSymbolFlags flags;
        private TypeSymbol* returnType;
        private List<ParameterSymbol*> parameters;
    }

    public enum ClassDelegateSymbolFlags : byte
    {
        none = 0u,
        nothrow_ = 1u << 0u,
        throw_ = 1u << 1u
    }
    
    public class ClassDelegateTypeSymbol : ClassTypeSymbol
    {
        public nothrow ClassDelegateTypeSymbol(const Span& span_, const string& name_) : base(span_, name_), flags(ClassDelegateSymbolFlags.none), returnType(null)
        {
        }
        public nothrow override SymbolType GetSymbolType() const
        {
            return SymbolType.classDelegateSymbol;
        }
        public nothrow override const char* TypeString() const
        {
            return "class delegate";
        }
        public nothrow override bool IsExportSymbol() const
        {
            if (Parent()->IsClassTemplateSymbol()) return false;
            if (Parent() is TemplateTypeSymbol*) return false;
            return base->IsExportSymbol();
        }
        public inline nothrow bool IsNothrow() const
        {
            return GetFlag(ClassDelegateSymbolFlags.nothrow_);
        }
        public inline nothrow void SetNothrow()
        {
            SetFlag(ClassDelegateSymbolFlags.nothrow_);
        }
        public inline nothrow bool IsThrow() const
        {
            return GetFlag(ClassDelegateSymbolFlags.throw_);
        }
        public inline nothrow void SetThrow()
        {
            SetFlag(ClassDelegateSymbolFlags.throw_);
        }
        public nothrow inline TypeSymbol* GetReturnType() const
        {
            return returnType;
        }
        public nothrow inline void SetReturnType(TypeSymbol* returnType_)
        {
            returnType = returnType_;
        }
        public nothrow inline const List<ParameterSymbol*>& Parameters() const
        {
            return parameters;
        }        
        public override void SetType(TypeSymbol* type, int index)
        {
            SetReturnType(type);
        }
        public override void AddSymbol(Symbol* symbol)
        {
            base->AddSymbol(symbol);
            if (symbol is ParameterSymbol*)
            {
                ParameterSymbol* parameterSymbol = cast<ParameterSymbol*>(symbol);
                parameters.Add(parameterSymbol);
            }
        }
        public override void Read(Reader& reader)
        {
            base->Read(reader);
            flags = cast<ClassDelegateSymbolFlags>(reader.GetBinaryReader().ReadByte());
            reader.FetchTypeFor(this, 0);
            reader.EnqueueMakeIrTypeFor(this);
        }
        public override void Write(Writer& writer)
        {
            base->Write(writer);
            writer.GetBinaryWriter().Write(cast<byte>(flags));
            writer.Write(returnType->Id());
        }
        public override string GetMangleId() const
        {
            return Cm.IrIntf.MakeAssemblyName(FullName());
        }
        public override void CollectExportedDerivedTypes(HashSet<Symbol*>& collected, HashSet<TypeSymbol*>& exportedDerivedTypes)
        {
            if (returnType != null)
            {
                if (returnType is DerivedTypeSymbol*)
                {
                    if (collected.CFind(returnType) == collected.CEnd())
                    {
                        collected.Insert(returnType);
                        returnType->CollectExportedDerivedTypes(collected, exportedDerivedTypes);
                    }
                }
            }
            for (ParameterSymbol* parameter : parameters)
            {
                parameter->CollectExportedDerivedTypes(collected, exportedDerivedTypes);
            }
        }
        public override void CollectExportedTemplateTypes(HashSet<Symbol*>& collected, HashMap<TypeId, TemplateTypeSymbol*>& exportedTemplateTypes)
        {
            if (returnType != null)
            {
                if (collected.CFind(returnType) == collected.CEnd())
                {
                    collected.Insert(returnType);
                    returnType->CollectExportedTemplateTypes(collected, exportedTemplateTypes);
                }
            }        
            for (ParameterSymbol* parameter : parameters)
            {
                parameter->CollectExportedTemplateTypes(collected, exportedTemplateTypes);
            }
        }
        public nothrow override void ReplaceReplicaTypes()
        {
            base->ReplaceReplicaTypes();
            if (returnType->IsReplica() && (returnType is TemplateTypeSymbol*))
            {
                TemplateTypeSymbol* replica = cast<TemplateTypeSymbol*>(returnType);
                returnType = replica->GetPrimaryTemplateTypeSymbol();
            }
        }
        public nothrow inline bool GetFlag(ClassDelegateSymbolFlags flag) const
        {
            return (flags & flag) != ClassDelegateSymbolFlags.none;
        }
        public nothrow inline void SetFlag(ClassDelegateSymbolFlags flag)
        {
            flags = cast<ClassDelegateSymbolFlags>(flags | flag);
        }
        private ClassDelegateSymbolFlags flags;
        private TypeSymbol* returnType;
        private List<ParameterSymbol*> parameters;
    }
}
