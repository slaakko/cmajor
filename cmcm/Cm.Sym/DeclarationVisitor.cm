/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.Sym
{
    public class DeclarationVisitor : Cm.Ast.Visitor
    {
        public nothrow DeclarationVisitor(SymbolTable& symbolTable_) : 
            base(true, false), symbolTable(symbolTable_), parameterIndex(0), templateClassNode(null), markFunctionSymbolAsTemplateSpecialization(false), cidMap(null), iidMap(null)
        {
        }
        public nothrow void SetCidMap(HashMap<string, ulong>* cidMap_)
        {
            cidMap = cidMap_;
        }
        public nothrow void SetIidMap(HashMap<string, ulong>* iidMap_)
        {
            iidMap = iidMap_;
        }
        public nothrow void SetTemplateType(Cm.Ast.ClassNode* templateClassNode_, TemplateTypeSymbol* templateType_) 
        {
            templateClassNode = templateClassNode_;
            templateType = templateType_;
        }
        public nothrow void MarkFunctionSymbolAsTemplateSpecialization() 
        { 
            markFunctionSymbolAsTemplateSpecialization = true; 
        }
        public override void BeginVisit(Cm.Ast.NamespaceNode& namespaceNode)
        {
            symbolTable.BeginNamespaceScope(&namespaceNode);
        }
        public override void EndVisit(Cm.Ast.NamespaceNode& namespaceNode)
        {
            symbolTable.EndNamespaceScope();
        }
        public override void BeginVisit(Cm.Ast.ClassNode& classNode)
        {
            if (&classNode == templateClassNode)
            {
                symbolTable.BeginTemplateTypeScope(templateClassNode, templateType);
            }
            else
            {
                symbolTable.BeginClassScope(&classNode, cidMap);
            }
        }
        public override void EndVisit(Cm.Ast.ClassNode& classNode)
        {
            if (&classNode == templateClassNode)
            {
                symbolTable.EndTemplateTypeScope();
            }
            else
            {
                symbolTable.EndClassScope();
            }
        }
        public override void BeginVisit(Cm.Ast.InterfaceNode& interfaceNode)
        {
            symbolTable.BeginInterfaceScope(&interfaceNode, iidMap);
        }
        public override void EndVisit(Cm.Ast.InterfaceNode& interfaceNode)
        {
            symbolTable.EndInterfaceScope();
        }
        public override void BeginVisit(Cm.Ast.ConstructorNode& constructorNode)
        {
            symbolTable.BeginFunctionScope(&constructorNode, cast<FunctionSymbolFlags>(FunctionSymbolFlags.constructorOrDestructorSymbol | FunctionSymbolFlags.memberFunctionSymbol));
            parameterIndex = 0;
            ParameterSymbol* thisParam = new ParameterSymbol(constructorNode.GetSpan(), "this");
            TypeSymbol* thisParamType = symbolTable.GetTypeRepository().MakePointerType(symbolTable.CurrentClass(), constructorNode.GetSpan());
            thisParam->SetType(thisParamType);
            thisParam->SetBound();
            symbolTable.AddParameter(thisParam);
        }
        public override void EndVisit(Cm.Ast.ConstructorNode& constructorNode)
        {
            symbolTable.EndFunctionScope();
        }
        public override void BeginVisit(Cm.Ast.DestructorNode& destructorNode)
        {
            symbolTable.BeginFunctionScope(&destructorNode, cast<FunctionSymbolFlags>(FunctionSymbolFlags.constructorOrDestructorSymbol | FunctionSymbolFlags.memberFunctionSymbol));
            parameterIndex = 0;
            ParameterSymbol* thisParam = new ParameterSymbol(destructorNode.GetSpan(), "this");
            TypeSymbol* thisParamType = symbolTable.GetTypeRepository().MakePointerType(symbolTable.CurrentClass(), destructorNode.GetSpan());
            thisParam->SetType(thisParamType);
            thisParam->SetBound();
            symbolTable.AddParameter(thisParam);
        }
        public override void EndVisit(Cm.Ast.DestructorNode& destructorNode)
        {
            symbolTable.EndFunctionScope();
        }
        public override void BeginVisit(Cm.Ast.MemberFunctionNode& memberFunctionNode)
        {
            if (symbolTable.Container() is InterfaceTypeSymbol*)
            {
                symbolTable.BeginFunctionScope(&memberFunctionNode, FunctionSymbolFlags.memberFunctionSymbol);
                parameterIndex = 0;
                ParameterSymbol* thisParam = new ParameterSymbol(memberFunctionNode.GetSpan(), "this");
                if (memberFunctionNode.IsConst())
                {
                    thisParam->SetType(symbolTable.GetTypeRepository().MakeConstGenericPtrType(memberFunctionNode.GetSpan()));
                }
                else
                {
                    thisParam->SetType(symbolTable.GetTypeRepository().MakeGenericPtrType(memberFunctionNode.GetSpan()));
                }
                thisParam->SetBound();
                symbolTable.AddParameter(thisParam);
                symbolTable.AddReturnValueSymbol(memberFunctionNode.ReturnTypeExpr());
            }
            else
            {
                symbolTable.BeginFunctionScope(&memberFunctionNode, FunctionSymbolFlags.memberFunctionSymbol);
                parameterIndex = 0;
                if ((memberFunctionNode.GetSpecifiers() & Cm.Ast.Specifiers.static_) == Cm.Ast.Specifiers.none)
                {
                    ParameterSymbol* thisParam = new ParameterSymbol(memberFunctionNode.GetSpan(), "this");
                    if (memberFunctionNode.IsConst())
                    {
                        TypeSymbol* thisParamType = symbolTable.GetTypeRepository().MakeConstPointerType(symbolTable.CurrentClass(), memberFunctionNode.GetSpan());
                        thisParam->SetType(thisParamType);
                    }
                    else
                    {
                        TypeSymbol* thisParamType = symbolTable.GetTypeRepository().MakePointerType(symbolTable.CurrentClass(), memberFunctionNode.GetSpan());
                        thisParam->SetType(thisParamType);
                    }
                    thisParam->SetBound();
                    symbolTable.AddParameter(thisParam);
                }
                if (memberFunctionNode.ReturnTypeExpr() != null)
                {
                    symbolTable.AddReturnValueSymbol(memberFunctionNode.ReturnTypeExpr());
                }
            }            
        }
        public override void EndVisit(Cm.Ast.MemberFunctionNode& memberFunctionNode)
        {
            symbolTable.EndFunctionScope();
        }
        public override void BeginVisit(Cm.Ast.ConversionFunctionNode& conversionFunctionNode)
        {
            symbolTable.BeginFunctionScope(&conversionFunctionNode, FunctionSymbolFlags.memberFunctionSymbol);
            parameterIndex = 0;
            ParameterSymbol* thisParam = new ParameterSymbol(conversionFunctionNode.GetSpan(), "this");
            if (conversionFunctionNode.IsConst())
            {
                TypeSymbol* thisParamType = symbolTable.GetTypeRepository().MakeConstPointerType(symbolTable.CurrentClass(), conversionFunctionNode.GetSpan());
                thisParam->SetType(thisParamType);
            }
            else
            {
                TypeSymbol* thisParamType = symbolTable.GetTypeRepository().MakePointerType(symbolTable.CurrentClass(), conversionFunctionNode.GetSpan());
                thisParam->SetType(thisParamType);
            }
            thisParam->SetBound();
            symbolTable.AddParameter(thisParam);
            if (conversionFunctionNode.ReturnTypeExpr() != null)
            {
                symbolTable.AddReturnValueSymbol(conversionFunctionNode.ReturnTypeExpr());
            }
        }
        public override void EndVisit(Cm.Ast.ConversionFunctionNode& conversionFunctionNode)
        {
            symbolTable.EndFunctionScope();
        }
        public override void BeginVisit(Cm.Ast.StaticConstructorNode& staticConstructorNode)
        {
            symbolTable.BeginFunctionScope(&staticConstructorNode, cast<FunctionSymbolFlags>(FunctionSymbolFlags.constructorOrDestructorSymbol | FunctionSymbolFlags.memberFunctionSymbol));
        }
        public override void EndVisit(Cm.Ast.StaticConstructorNode& staticConstructorNode)
        {
            symbolTable.EndFunctionScope();
        }
        public override void BeginVisit(Cm.Ast.EnumTypeNode& enumTypeNode)
        {
            symbolTable.BeginEnumScope(&enumTypeNode);
        }
        public override void EndVisit(Cm.Ast.EnumTypeNode& enumTypeNode)
        {
            symbolTable.EndEnumScope();
        }
        public override void Visit(Cm.Ast.EnumConstantNode& enumConstantNode)
        {
            symbolTable.AddEnumConstant(&enumConstantNode);
        }
        public override void Visit(Cm.Ast.TypedefNode& typedefNode)
        {
            symbolTable.AddTypedef(&typedefNode);
        }
        public override void BeginVisit(Cm.Ast.FunctionNode& functionNode)
        {
            FunctionSymbolFlags flags = FunctionSymbolFlags.none;
            if (markFunctionSymbolAsTemplateSpecialization)
            {
                flags = cast<FunctionSymbolFlags>(flags | FunctionSymbolFlags.templateSpecialization);
            }
            symbolTable.BeginFunctionScope(&functionNode, flags);
            parameterIndex = 0;
            if (functionNode.ReturnTypeExpr() != null)
            {
                symbolTable.AddReturnValueSymbol(functionNode.ReturnTypeExpr());
            }
        }
        public override void EndVisit(Cm.Ast.FunctionNode& functionNode)
        {
            symbolTable.EndFunctionScope();
        }
        public override void BeginVisit(Cm.Ast.DelegateNode& delegateNode)
        {
            symbolTable.BeginDelegateScope(&delegateNode);
            parameterIndex = 0;
        }
        public override void EndVisit(Cm.Ast.DelegateNode& delegateNode)
        {
            symbolTable.EndDelegateScope();
        }
        public override void BeginVisit(Cm.Ast.ClassDelegateNode& classDelegateNode)
        {
            symbolTable.BeginClassDelegateScope(&classDelegateNode);
            parameterIndex = 0;
        }
        public override void EndVisit(Cm.Ast.ClassDelegateNode& classDelegateNode)
        {
            symbolTable.EndClassDelegateScope();
        }
        public override void Visit(Cm.Ast.ConstantNode& constantNode)
        {
            symbolTable.AddConstant(&constantNode);
        }
        public override void Visit(Cm.Ast.TemplateParameterNode& templateParameterNode)
        {
            symbolTable.AddTemplateParameter(&templateParameterNode);
        }
        public override void Visit(Cm.Ast.ParameterNode& parameterNode)
        {
            string parameterName;
            if (parameterNode.Id() != null)
            {
                parameterName = parameterNode.Id()->Str();
            }
            else
            {
                parameterName = "__parameter" + ToString(parameterIndex);
            }
            symbolTable.AddParameter(&parameterNode, parameterName);
            ++parameterIndex;
        }
        public override void Visit(MemberVariableNode& memberVariableNode)
        {
            symbolTable.AddMemberVariable(&memberVariableNode);
        }
        public override void BeginVisit(Cm.Ast.CompoundStatementNode& compoundStatementNode)
        {
            symbolTable.BeginDeclarationScope(&compoundStatementNode);
        }
        public override void EndVisit(Cm.Ast.CompoundStatementNode& compoundStatementNode)
        {
            symbolTable.EndDeclarationScope();
        }
        public override void BeginVisit(Cm.Ast.RangeForStatementNode& rangeForStatementNode)
        {
            symbolTable.BeginDeclarationScope(&rangeForStatementNode);
        }
        public override void EndVisit(Cm.Ast.RangeForStatementNode& rangeForStatementNode)
        {
            symbolTable.EndDeclarationScope();
        }
        public override void BeginVisit(Cm.Ast.ForStatementNode& forStatementNode)
        {
            symbolTable.BeginDeclarationScope(&forStatementNode);
        }
        public override void EndVisit(Cm.Ast.ForStatementNode& forStatementNode)
        {
            symbolTable.EndDeclarationScope();
        }
        public override void BeginVisit(Cm.Ast.ConstructionStatementNode& constructionStatementNode)
        {
            symbolTable.AddLocalVariable(&constructionStatementNode);
        }
        public override void Visit(Cm.Ast.TypedefStatementNode& typedefStatementNode)
        {
            symbolTable.AddTypedef(&typedefStatementNode);
        }
        public override void Visit(Cm.Ast.ConceptNode& conceptNode)
        {
            symbolTable.BeginConceptScope(&conceptNode);
            symbolTable.EndConceptScope();
        }
        private SymbolTable& symbolTable;
        private int parameterIndex;
        private Cm.Ast.ClassNode* templateClassNode;
        private TemplateTypeSymbol* templateType;
        private bool markFunctionSymbolAsTemplateSpecialization;
        private HashMap<string, ulong>* cidMap;
        private HashMap<string, ulong>* iidMap;
    }
}
