/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Ast
{
    public enum Derivation : byte
    {
        none = 0u,
        const_ = 1u,
        reference = 2u,
        rvalueRef = 3u,
        pointer = 4u,
        leftParen = 5u,
        rightParen = 6u,
        array = 7u
    }
    
    public nothrow string DerivationStr(Derivation d)
    {
        switch (d)
        {
            case Derivation.const_: return "const";
            case Derivation.reference: return "&";
            case Derivation.rvalueRef: return "&&";
            case Derivation.pointer: return "*";
            case Derivation.leftParen: return "(";
            case Derivation.rightParen: return ")";
        }
        return "";
    }
    
    public const int maxDerivations = 7;
    
    public class IsReferenceOrRvalueRefDerivation : UnaryPred<Derivation>
    {
        public inline nothrow bool operator()(Derivation d) const
        {
            return d == Derivation.reference || d == Derivation.rvalueRef;
        }
    }
    
    public class DerivationList
    {
        public typedef RandomAccessIter<Derivation, Derivation&, Derivation*> Iterator;
        public typedef RandomAccessIter<Derivation, const Derivation&, const Derivation*> ConstIterator;
        
        public nothrow inline Iterator Begin()
        {
            return Iterator(&derivations[0]);
        }
        public nothrow inline Iterator End()
        {
            return Iterator(&derivations[numDerivations]);
        }
        public nothrow inline ConstIterator Begin() const
        {
            return ConstIterator(&derivations[0]);
        }
        public nothrow inline ConstIterator End() const
        {
            return ConstIterator(&derivations[numDerivations]);
        }
        public nothrow inline ConstIterator CBegin() const
        {
            return ConstIterator(&derivations[0]);
        }
        public nothrow inline ConstIterator CEnd() const
        {
            return ConstIterator(&derivations[numDerivations]);
        }
        public nothrow inline byte Count() const
        {
            return numDerivations;
        }
        public nothrow inline Derivation operator[](int index) const
        {
            #assert(index >= 0 && index < numDerivations);
            return derivations[index];
        }
        public nothrow inline Derivation& operator[](int index)
        {
            #assert(index >= 0 && index < numDerivations);
            return derivations[index];
        }
        public nothrow inline void Add(Derivation derivation)
        {
            #assert(numDerivations < maxDerivations);
            derivations[numDerivations++] = derivation;
        }
        public void InsertFront(Derivation derivation)
        {
            #assert(numDerivations < maxDerivations);
            CopyBackward(Begin(), End(), End() + 1);
            derivations[0] = derivation;
            ++numDerivations;
        }
        public nothrow void RemoveLastPointer()
        {
            for (int i = int(numDerivations) - 1; i >= 0; --i)
            {
                if (derivations[i] == Derivation.pointer)
                {
                    derivations[i] = Derivation.none;
                    --numDerivations;
                    return;
                }
            }
        }
        public nothrow void RemoveReferences()
        {
            Iterator b = Begin();
            Iterator e = End();
            Iterator n = Remove(b, e, Derivation.reference);
            Fill(n, e, Derivation.none);
            numDerivations = cast<byte>(Distance(b, n));
        }
        public nothrow void RemoveRefsAndRvalueRefs()
        {
            Iterator b = Begin();
            Iterator e = End();
            Iterator n = Remove(b, e, IsReferenceOrRvalueRefDerivation());
            Fill(n, e, Derivation.none);
            numDerivations = cast<byte>(Distance(b, n));
        }
        private byte numDerivations;
        private Derivation[maxDerivations] derivations;
    }
    
    public nothrow bool operator==(const DerivationList& left, const DerivationList& right)
    {
        if (left.Count() != right.Count()) return false;
        return Equal(left.CBegin(), left.CEnd(), right.CBegin(), right.CEnd());
    }
    
    public nothrow bool operator<(const DerivationList& left, const DerivationList& right)
    {
        return LexicographicalCompare(left.CBegin(), left.CEnd(), right.CBegin(), right.CEnd());
    }
    
    public nothrow string MakeDerivedTypeName(const DerivationList& derivations, const string& baseTypeFullName, const List<UniquePtr<Node>>& arrayDimensions)
    {
        string s;
        int derivationIndex = 0;
        int n = derivations.Count();
        if (derivationIndex < n)
        {
            Derivation d = derivations[derivationIndex];
            if (d == Derivation.const_)
            {
                s.Append(DerivationStr(d));
                ++derivationIndex;
            }
        }
        if (derivationIndex < n)
        {
            Derivation d = derivations[derivationIndex];
            if (d == Derivation.leftParen)
            {
                if (!s.IsEmpty())
                {
                    s.Append(' ');
                }
                s.Append(DerivationStr(d));
                ++derivationIndex;
                if (derivationIndex < n)
                {
                    Derivation d = derivations[derivationIndex];
                    if (d == Derivation.const_)
                    {
                        s.Append(DerivationStr(d));
                        ++derivationIndex;
                    }
                }
            }
        }
        if (!s.IsEmpty())
        {
            s.Append(' ');
        }
        s.Append(baseTypeFullName);
        int arrayDimIndex = 0;
        for (int i = derivationIndex; i < n; ++i)
        {
            if (derivations[i] == Derivation.array)
            {
                s.Append("[" + arrayDimensions[arrayDimIndex++]->ToString() + "]");
            }
            else
            {
                s.Append(DerivationStr(derivations[i]));
            }
        }
        return s;
    }

    public nothrow string MakeDerivedTypeName(const DerivationList& derivations, const string& baseTypeFullName, const List<int>& arrayDimensions)
    {
        string s;
        int derivationIndex = 0;
        int n = derivations.Count();
        if (derivationIndex < n)
        {
            Derivation d = derivations[derivationIndex];
            if (d == Derivation.const_)
            {
                s.Append(DerivationStr(d));
                ++derivationIndex;
            }
        }
        if (derivationIndex < n)
        {
            Derivation d = derivations[derivationIndex];
            if (d == Derivation.leftParen)
            {
                if (!s.IsEmpty())
                {
                    s.Append(' ');
                }
                s.Append(DerivationStr(d));
                ++derivationIndex;
                if (derivationIndex < n)
                {
                    Derivation d = derivations[derivationIndex];
                    if (d == Derivation.const_)
                    {
                        s.Append(DerivationStr(d));
                        ++derivationIndex;
                    }
                }
            }
        }
        if (!s.IsEmpty())
        {
            s.Append(' ');
        }
        s.Append(baseTypeFullName);
        int arrayDimIndex = 0;
        for (int i = derivationIndex; i < n; ++i)
        {
            if (derivations[i] == Derivation.array)
            {
                s.Append("[" + ToString(arrayDimensions[arrayDimIndex++]) + "]");
            }
            else
            {
                s.Append(DerivationStr(derivations[i]));
            }
        }
        return s;
    }
    
    public class DerivedTypeExprNode : Node
    {
        public nothrow DerivedTypeExprNode(const Span& span_) : base(span_)
        {
        }
        public nothrow DerivedTypeExprNode(const Span& span_, const DerivationList& derivations_, Node* baseTypeExprNode_) : base(span_), derivations(derivations_), baseTypeExprNode(baseTypeExprNode_)
        {
            baseTypeExprNode->SetParent(this);
        }
        public nothrow override NodeType GetNodeType() const
        {
            return NodeType.derivedTypeExprNode;
        }
        public void AddArrayDimensionNode(Node* arrayDimensionNode)
        {
            arrayDimensionNode->SetParent(this);
            arrayDimensionNodes.Add(UniquePtr<Node>(arrayDimensionNode));
        }
        public override Node* Clone(CloneContext& cloneContext) const
        {
            DerivedTypeExprNode* clone = new DerivedTypeExprNode(GetSpan(), derivations, baseTypeExprNode->Clone(cloneContext));
            for (const UniquePtr<Node>& arrayDimensionNode : arrayDimensionNodes)
            {
                clone->AddArrayDimensionNode(arrayDimensionNode->Clone(cloneContext));
            }
            return clone;
        }
        public nothrow inline const DerivationList& Derivations() const
        {
            return derivations;
        }
        public nothrow inline Node* BaseTypeExprNode() const
        {
            return baseTypeExprNode.GetPtr();
        }
        public nothrow inline Node* ReleaseBaseTypeExprNode()
        {
            return baseTypeExprNode.Release();
        }
        public nothrow inline Node* ArrayDimensionNode(int index) const
        {
            return arrayDimensionNodes[index].GetPtr();
        }
        public nothrow inline int NumArrayDimensions() const
        {
            return arrayDimensionNodes.Count();
        }
        public override void Read(Reader& reader)
        {
            derivations = reader.ReadDerivationList();
            baseTypeExprNode.Reset(reader.ReadNode());
            baseTypeExprNode->SetParent(this);
            byte n = reader.GetBinaryReader().ReadByte();
            for (byte i = 0u; i < n; ++i)
            {
                Node* arrayDimensionNode = reader.ReadNode();
                AddArrayDimensionNode(arrayDimensionNode);
            }
        }
        public override void Write(Writer& writer)
        {
            writer.Write(derivations);
            writer.Write(baseTypeExprNode.GetPtr());
            byte n = cast<byte>(arrayDimensionNodes.Count());
            writer.GetBinaryWriter().Write(n);
            for (const UniquePtr<Node>& arrayDimensionNode : arrayDimensionNodes)
            {
                writer.Write(arrayDimensionNode.GetPtr());
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override nothrow string Name() const
        {
            return MakeDerivedTypeName(derivations, baseTypeExprNode->ToString(), arrayDimensionNodes);
        }
        public override nothrow string ToString() const
        {
            return MakeDerivedTypeName(derivations, baseTypeExprNode->ToString(), arrayDimensionNodes);
        }
        public void Add(Derivation derivation)
        {
            derivations.Add(derivation);
        }
        public inline void AddConst()
        {
            Add(Derivation.const_);
        }
        public inline void AddRvalueRef()
        {
            Add(Derivation.rvalueRef);
        }
        public inline void AddReference()
        {
            Add(Derivation.reference);
        }
        public inline void AddPointer()
        {
            Add(Derivation.pointer);
        }
        public inline void AddLeftParen()
        {
            Add(Derivation.leftParen);
        }
        public inline void AddRightParen()
        {
            Add(Derivation.rightParen);
        }
        public inline void AddArray()
        {
            Add(Derivation.array);
        }
        public nothrow void SetBaseTypeExpr(Node* baseTypeExprNode_)
        {
            baseTypeExprNode.Reset(baseTypeExprNode_);
            baseTypeExprNode->SetParent(this);
        }
        private DerivationList derivations;
        private UniquePtr<Node> baseTypeExprNode;
        private List<UniquePtr<Node>> arrayDimensionNodes;
    }
    
    public Node* MakeTypeExprNode(DerivedTypeExprNode* derivedTypeExprNode)
    {
        if (derivedTypeExprNode->Derivations().Count() == 0 && derivedTypeExprNode->NumArrayDimensions() == 0)
        {
            Node* baseTypeExprNode = derivedTypeExprNode->ReleaseBaseTypeExprNode();
            delete derivedTypeExprNode;
            return baseTypeExprNode;
        }
        return derivedTypeExprNode;
    }
}
