/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using Cm.Ser;
using Span = System.Text.Parsing.Span;

namespace Cm.Ast
{
    public class Writer
    {
        public nothrow Writer(BinaryWriter& binaryWriter_): binaryWriter(binaryWriter_)
        {
        }
        public nothrow inline BinaryWriter& GetBinaryWriter()
        {
            return binaryWriter;
        }
        public void Write(Node* node)
        {
            Write(node->GetNodeType());
            Write(node->GetSpan());
            node->Write(*this);
        }
        public void Write(Specifiers specifiers)
        {
            binaryWriter.Write(cast<uint>(specifiers));
        }
        public void Write(const Span& span)
        {
            binaryWriter.Write(&span, sizeof(Span));
        }
        public void Write(Derivation derivation)
        {
            binaryWriter.Write(cast<byte>(derivation));
        }    
        public void Write(const DerivationList& derivationList)
        {
            byte n = cast<byte>(derivationList.Count());
            binaryWriter.Write(n);
            for (Derivation derivation : derivationList)
            {
                Write(derivation);
            }
        }
        private void Write(NodeType nodeType)
        {
            binaryWriter.Write(byte(nodeType));
        }
        private BinaryWriter& binaryWriter;
    }
}
