/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using CodeFormatter = System.Text.CodeFormatter;

namespace C
{
    public abstract class CurrentTempTypedefProvider
    {
        public static nothrow CurrentTempTypedefProvider* Instance()
        {
            #assert(instance != null);
            return instance;
        }
        public static nothrow void SetInstance(CurrentTempTypedefProvider* instance_)
        {
            instance = instance_;
        }
        public abstract nothrow string GetNextTempTypedefName();
        private static CurrentTempTypedefProvider* instance;
    }
    
    public nothrow const char* ExceptionCodeParamName()
    {
        return "_X_ex_p";
    }
    
    public nothrow const char* ClassObjectResultParamName()
    {
        return "_X_result";
    }
    
    public class Function : Ir.Intf.Function
    {
        public Function(const string& name_, Ir.Intf.Type* returnType_, const List<Ir.Intf.Parameter*>& parameters_) : base(name_, returnType_, parameters_), functionPtrTypesReplaced(false)
        {
        }
        public List<UniquePtr<C.Typedef>> Tdfs()
        {
            return Rvalue(tdfs);
        }
        public override void ReplaceFunctionPtrTypes()
        {
            if (functionPtrTypesReplaced) return;
            functionPtrTypesReplaced = true;
            Ir.Intf.Type* returnType = GetReturnType();
            HashSet<Ir.Intf.Type*> functionPtrTypes;
            returnType->GetFunctionPtrTypes(functionPtrTypes);
            for (Ir.Intf.Parameter* parameter : Parameters())
            {
                Ir.Intf.Type* paramType = parameter->GetType();
                paramType->GetFunctionPtrTypes(functionPtrTypes);
            }
            for (Ir.Intf.Object* r : registers)
            {
                Ir.Intf.Type* regType = r->GetType();
                regType->GetFunctionPtrTypes(functionPtrTypes);
            }
            if (!functionPtrTypes.IsEmpty())
            {
                for (Ir.Intf.Type* functionPtrType : functionPtrTypes)
                {
                    UniquePtr<Typedef> tdf(new Typedef(CurrentTempTypedefProvider.Instance()->GetNextTempTypedefName(), functionPtrType->Clone()));
                    tdfMap[functionPtrType] = tdf.GetPtr();
                    tdfs.Add(Rvalue(tdf));
                }
                returnType->ReplaceFunctionPtrTypes(tdfMap);
                for (Ir.Intf.Parameter* parameter : Parameters())
                {
                    Ir.Intf.Type* paramType = parameter->GetType();
                    paramType->ReplaceFunctionPtrTypes(tdfMap);
                }
                for (Ir.Intf.Object* r : registers)
                {
                    Ir.Intf.Type* regType = r->GetType();
                    regType->ReplaceFunctionPtrTypes(tdfMap);
                }
            }
        }
        public override nothrow string ParameterListStr() const
        {
            string parameterListStr('(');
            if (Parameters().IsEmpty())
            {
                parameterListStr.Append("void");
            }
            bool first = true;
            for (Ir.Intf.Parameter* parameter : Parameters())
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    parameterListStr.Append(", ");
                }
                Ir.Intf.Type* paramType = parameter->GetType();
                parameterListStr.Append(paramType->Name()).Append(' ').Append(parameter->Name());
            }
            parameterListStr.Append(')');
            return parameterListStr;
        }
        public override void AddInstruction(Ir.Intf.Instruction* instruction)
        {
            Ir.Intf.Object* result = null;
            if (instruction->ReturnsResult())
            {
                result = instruction->GetResult();
            }
            if (result != null)
            {
                if (result->Name() == "_R_?")
                {
                    result->SetName("_R_" + ToString(GetNextInstNumber()));
                    registers.Add(result);
                    Break.Set();
                }
            }
            DoAddInstruction(instruction);
            Own(instruction);
        }
        public override void WriteDefinition(CodeFormatter& formatter, bool weakOdr, bool inline_)
        {
            ReplaceFunctionPtrTypes();
            formatter.WriteLine();
            const string& comment = Comment();
            if (!comment.IsEmpty())
            {
                formatter.WriteLine("// " + comment);
            }
            string define;
            if (inline_)
            {
                define.Append("inline ");
            }
            define.Append(GetReturnType()->Name()).Append(' ').Append(Name()).Append(ParameterListStr());
            formatter.WriteLine(define);
            formatter.WriteLine("{");
            formatter.IncIndent();
            for (Ir.Intf.Object* r : registers)
            {
                Ir.Intf.Type* regType = r->GetType();
                formatter.WriteLine(regType->Name() + " " + r->Name() + ";");
            }
            Ir.Intf.Instruction* prev = null;
            for (Ir.Intf.Instruction* inst : Instructions())
            {
                if (inst->Removed())
                {
                    continue;
                }
                Ir.Intf.LabelObject* label = inst->GetLabel();
                if (label != null || prev != null && prev->IsTerminator())
                {
                    if (label != null)
                    {
                        if (prev != null && !prev->IsTerminator())
                        {
                            UniquePtr<Ir.Intf.Instruction> br(Br(label));
                            formatter.WriteLine(br->ToString() + ";");
                        }
                    }
                    else
                    {
                        label = CreateNextLocalLabel();
                        Own(label);
                    }
                    formatter.DecIndent();
                    formatter.WriteLine();
                    formatter.WriteLine(label->Target());
                    formatter.IncIndent();
                }
                string s = inst->ToString();
                s.Append(';');
                const string& comment = inst->Comment();
                if (!comment.IsEmpty())
                {
                    s.Append(" // ").Append(comment);
                }
                Ir.Intf.CDebugNode* cDebugNode = inst->GetCDebugNode();
                if (cDebugNode != null)
                {
                    cDebugNode->SetCLine(formatter.Line());
                }
                formatter.WriteLine(s);
                Ir.Intf.CDebugNode* funCallNode = inst->GetFunCallNode();
                if (funCallNode != null)
                {
                    funCallNode->SetCLine(formatter.Line());
                    formatter.WriteLine("_V__X_dummy = true;");
                }
                prev = inst;
            }
            formatter.DecIndent();
            formatter.WriteLine("}");
        }
        public override void WriteDeclaration(CodeFormatter& formatter, bool weakOdr, bool inline_) 
        {
            ReplaceFunctionPtrTypes();
            string declaration;
            if (inline_)
            {
                declaration.Append("inline ");
            }
            declaration.Append(GetReturnType()->Name()).Append(' ').Append(Name()).Append(ParameterListStr()).Append(';');
            formatter.WriteLine(declaration);
        }
        public override nothrow bool ContainsExceptionCodeParam() const
        {
            return !Parameters().IsEmpty() && Parameters().Back()->Name() == string("%") + ExceptionCodeParamName();
        }
        private List<Ir.Intf.Object*> registers;
        private List<UniquePtr<C.Typedef>> tdfs;
        private HashMap<Ir.Intf.Type*, Ir.Intf.Type*> tdfMap;
        private bool functionPtrTypesReplaced;
    }

    public Ir.Intf.Function* CreateMemSetFunction(Ir.Intf.Type* i8Ptr)
    {
        List<Ir.Intf.Parameter*> parameters;
        parameters.Add(new Parameter("dest", i8Ptr));
        parameters.Add(new Parameter("value", Ir.Intf.Factory.Instance()->GetI8()));
        parameters.Add(new Parameter("len", Ir.Intf.Factory.Instance()->GetI64()));
        parameters.Add(new Parameter("align", Ir.Intf.Factory.Instance()->GetI32()));
        parameters.Add(new Parameter("isVolatile", Ir.Intf.Factory.Instance()->GetI1()));
        Function* memSetFun(new Function("cmemset", Ir.Intf.Factory.Instance()->GetVoid(), parameters));
        return memSetFun;
    }
    
    public Ir.Intf.Function* CreateMemCopyFunction(Ir.Intf.Type* i8Ptr)
    {
        List<Ir.Intf.Parameter*> parameters;
        parameters.Add(new Parameter("dest", i8Ptr));
        parameters.Add(new Parameter("source", i8Ptr));
        parameters.Add(new Parameter("len", Ir.Intf.Factory.Instance()->GetI64()));
        parameters.Add(new Parameter("align", Ir.Intf.Factory.Instance()->GetI32()));
        parameters.Add(new Parameter("isVolatile", Ir.Intf.Factory.Instance()->GetI1()));
        Function* memCopyFun(new Function("cmemcpy", Ir.Intf.Factory.Instance()->GetVoid(), parameters));
        return memCopyFun;
    }
}
