/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace C
{
    public class VoidType : Ir.Intf.Type
    {
        public nothrow VoidType() : base("void")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new VoidType();
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeVoidType()
    {
        return new VoidType();
    }
    
    public class LabelType : Ir.Intf.Type
    {
        public nothrow LabelType() : base("label")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new LabelType();
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeLabelType()
    {
        return new LabelType();
    }
    
    public abstract class IntegerType : Ir.Intf.Type
    {
        public nothrow IntegerType(const string& name_) : base(name_)
        {
        }
    }
    
    public class I1Type : IntegerType
    {
        public nothrow I1Type() : base("i1")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new I1Type();
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return False();
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeI1Type()
    {
        return new I1Type();
    }
    
    public class I8Type : IntegerType
    {
        public nothrow I8Type() : base("i8")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new I8Type();
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeI8Constant(0);
        }
        public override Ir.Intf.Object* CreateMinusOne() const
        {
            return MakeI8Constant(-1);
        }
        public override Ir.Intf.Object* CreatePlusOne() const
        {
            return MakeI8Constant(1);
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeI8Type()
    {
        return new I8Type();
    }

    public class UI8Type : IntegerType
    {
        public nothrow UI8Type() : base("ui8")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new UI8Type();
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeUI8Constant(0u);
        }
        public override Ir.Intf.Object* CreateMinusOne() const
        {
            return MakeUI8Constant(cast<byte>(-1));
        }
        public override Ir.Intf.Object* CreatePlusOne() const
        {
            return MakeUI8Constant(1u);
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeUI8Type()
    {
        return new UI8Type();
    }

    public class I16Type : IntegerType
    {
        public nothrow I16Type() : base("i16")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new I16Type();
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeI16Constant(0);
        }
        public override Ir.Intf.Object* CreateMinusOne() const
        {
            return MakeI16Constant(-1);
        }
        public override Ir.Intf.Object* CreatePlusOne() const
        {
            return MakeI16Constant(1);
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeI16Type()
    {
        return new I16Type();
    }

    public class UI16Type : IntegerType
    {
        public nothrow UI16Type() : base("ui16")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new UI16Type();
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeUI16Constant(0u);
        }
        public override Ir.Intf.Object* CreateMinusOne() const
        {
            return MakeUI16Constant(cast<ushort>(-1));
        }
        public override Ir.Intf.Object* CreatePlusOne() const
        {
            return MakeUI16Constant(1u);
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeUI16Type()
    {
        return new UI16Type();
    }

    public class I32Type : IntegerType
    {
        public nothrow I32Type() : base("i32")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new I32Type();
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeI32Constant(0);
        }
        public override Ir.Intf.Object* CreateMinusOne() const
        {
            return MakeI32Constant(-1);
        }
        public override Ir.Intf.Object* CreatePlusOne() const
        {
            return MakeI32Constant(1);
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeI32Type()
    {
        return new I32Type();
    }

    public class UI32Type : IntegerType
    {
        public nothrow UI32Type() : base("ui32")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new UI32Type();
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeUI32Constant(0u);
        }
        public override Ir.Intf.Object* CreateMinusOne() const
        {
            return MakeUI32Constant(cast<uint>(-1));
        }
        public override Ir.Intf.Object* CreatePlusOne() const
        {
            return MakeUI32Constant(1u);
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeUI32Type()
    {
        return new UI32Type();
    }
    
    public class I64Type : IntegerType
    {
        public nothrow I64Type() : base("i64")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new I64Type();
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeI64Constant(0);
        }
        public override Ir.Intf.Object* CreateMinusOne() const
        {
            return MakeI64Constant(-1);
        }
        public override Ir.Intf.Object* CreatePlusOne() const
        {
            return MakeI64Constant(1);
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeI64Type()
    {
        return new I64Type();
    }

    public class UI64Type : IntegerType
    {
        public nothrow UI64Type() : base("ui64")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new UI64Type();
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeUI64Constant(0u);
        }
        public override Ir.Intf.Object* CreateMinusOne() const
        {
            return MakeUI64Constant(cast<ulong>(-1));
        }
        public override Ir.Intf.Object* CreatePlusOne() const
        {
            return MakeUI64Constant(1u);
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeUI64Type()
    {
        return new UI64Type();
    }
    
    public abstract class FloatingPointType : Ir.Intf.Type
    {
        public nothrow FloatingPointType(const string& name_) : base(name_)
        {
        }
    }
    
    public class FloatType : FloatingPointType
    {
        public nothrow FloatType() : base("float")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new FloatType();
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeFloatConstant(0.0f);
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeFloatType()
    {
        return new FloatType();
    }
    
    public class DoubleType : FloatingPointType
    {
        public nothrow DoubleType() : base("double")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new DoubleType();
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeDoubleConstant(0.0);
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeDoubleType()
    {
        return new DoubleType();
    }
    
    public class CharType : Ir.Intf.Type
    {
        public nothrow CharType() : base("usngined char")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new CharType();
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeCharConstant('\0');
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeCharType() 
    {
        return new CharType();
    }
    
    public nothrow string MakeArrayTypeName(Ir.Intf.Type* itemType, int size)
    {
        return itemType->Name();
    }
    
    public class ArrayType : Ir.Intf.Type
    {
        public nothrow ArrayType(Ir.Intf.Type* itemType_, int size_) : base(MakeArrayTypeName(itemType_, size_)), itemType(itemType_), size(size_)
        {
            if (!itemType->Owned())
            {
                itemType->SetOwned();
                ownedItemType.Reset(itemType);
            }
        }
        public override Ir.Intf.Type* Clone() const
        {
            if (!ownedItemType.IsNull())
            {
                return new ArrayType(itemType->Clone(), size);
            }
            else
            {
                return new ArrayType(itemType, size);
            }
        }
        public override void GetFunctionPtrTypes(HashSet<Ir.Intf.Type*>& functionPtrTypes)
        {
            itemType->GetFunctionPtrTypes(functionPtrTypes);
        }
        public override void ReplaceFunctionPtrTypes(const HashMap<Ir.Intf.Type*, Ir.Intf.Type*>& tdfMap)
        {
            itemType->ReplaceFunctionPtrTypes(tdfMap);
        }
        public nothrow inline int Size() const
        {
            return size;
        }
        private Ir.Intf.Type* itemType;
        private UniquePtr<Ir.Intf.Type> ownedItemType;
        private int size;
    }
    
    public nothrow Ir.Intf.Type* MakeArrayType(Ir.Intf.Type* itemType, int size)
    {
        return new ArrayType(itemType, size);
    }
    
    public class StringType : Ir.Intf.Type
    {
        public nothrow StringType() : base("unsigned char*")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new StringType();
        }
    }
    
    public nothrow Ir.Intf.Type* MakeStringType()
    {
        return new StringType();
    }
    
    public class WStringType : Ir.Intf.Type
    {
        public nothrow WStringType() : base("ui16*")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new WStringType();
        }
    }
    
    public nothrow Ir.Intf.Type* MakeWStringType()
    {
        return new WStringType();
    }
    
    public class UStringType : Ir.Intf.Type
    {
        public nothrow UStringType() : base("ui32*")
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new UStringType();
        }
    }
    
    public nothrow Ir.Intf.Type* MakeUStringType()
    {
        return new UStringType();
    }
    
    public class StructureType : Ir.Intf.Type
    {
        public StructureType(const string& tagName_, const List<Ir.Intf.Type*>& elementTypes_, const List<string>& elementNames_) : base("*structure*"), tagName(tagName_), elementNames(elementNames_)
        {
            string name("struct " + tagName + " {");
            int i = 0;
            for (Ir.Intf.Type* elementType : elementTypes_)
            {
                if (elementType->Owned())
                {
                    throw Exception("structure element type already owned");
                }
                elementType->SetOwned();
                elementTypes.Add(UniquePtr<Ir.Intf.Type>(elementType));
                if (elementType->GetBaseType() is FunctionType*)
                {
                    name.Append(elementType->Prefix()).Append(elementNames[i]).Append(elementType->Suffix()).Append(";");
                }
                else
                {
                    name.Append(elementType->Name()).Append(' ').Append(elementNames[i]);
                    if (elementType is ArrayType*)
                    {
                        ArrayType* arrayType = cast<ArrayType*>(elementType);
                        name.Append('[').Append(ToString(arrayType->Size())).Append(']');
                    }
                    name.Append(';');
                }
                ++i;
            }
            name.Append('}');
            SetName(name);
        }
        public nothrow inline int Size() const
        {
            return elementTypes.Count();
        }
        public nothrow inline Ir.Intf.Type* operator[](int index) const
        {
            return elementTypes[index].GetPtr();
        }
        public nothrow inline const List<UniquePtr<Ir.Intf.Type>>& ElementTypes() const
        {
            return elementTypes;
        }
        public override Ir.Intf.Type* Clone() const
        {
            List<Ir.Intf.Type*> clonedElementTypes;
            for (const UniquePtr<Ir.Intf.Type>& elementType : elementTypes)
            {
                clonedElementTypes.Add(elementType->Clone());
            }
            return new StructureType(tagName, clonedElementTypes, elementNames);
        }
        public override void GetFunctionPtrTypes(HashSet<Ir.Intf.Type*>& functionPtrTypes)
        {
            for (const UniquePtr<Ir.Intf.Type>& elementType : elementTypes)
            {
                elementType->GetFunctionPtrTypes(functionPtrTypes);
            }
        }
        public override void ReplaceFunctionPtrTypes(const HashMap<Ir.Intf.Type*, Ir.Intf.Type*>& tdfMap)
        {
            for (const UniquePtr<Ir.Intf.Type>& elementType : elementTypes)
            {
                elementType->ReplaceFunctionPtrTypes(tdfMap);
            }
        }
        private string tagName;
        private List<UniquePtr<Ir.Intf.Type>> elementTypes;
        private List<string> elementNames;
    }
    
    public Ir.Intf.Type* MakeStructureType(const string& tagName, const List<Ir.Intf.Type*>& elementTypes, const List<string>& elementNames)
    {
        return new StructureType(tagName, elementTypes, elementNames);
    }
    
    public class PointerType : Ir.Intf.Type
    {
        public nothrow PointerType(Ir.Intf.Type* baseType_, byte numPointers_) : base(baseType_->Name() + string('*', numPointers_)), baseType(baseType_), numPointers(numPointers_)
        {
            if (!baseType->Owned())
            {
                baseType->SetOwned();
                ownedBaseType.Reset(baseType);
            }
            if (GetBaseType() is FunctionType*)
            {
                SetName(Prefix() + Suffix());
            }
        }
        public nothrow inline Ir.Intf.Type* BaseType() const
        {
            return baseType;
        }
        public nothrow override Ir.Intf.Type* GetBaseType() const
        {
            return baseType;
        }
        public nothrow override bool IsFunctionPointerType() const
        {
            return (baseType is FunctionType*) && numPointers == 1u;
        }
        public nothrow override bool IsFunctionPtrPtrType() const
        {
            return (baseType is FunctionType*) && numPointers == 2u;
        }
        public nothrow override bool IsPointerType() const
        {
            return true;
        }
        public override void GetFunctionPtrTypes(HashSet<Ir.Intf.Type*>& functionPtrTypes)
        {
            if (baseType is FunctionType*)
            {
                functionPtrTypes.Insert(this);
            }
        }
        public override void ReplaceFunctionPtrTypes(const HashMap<Ir.Intf.Type*, Ir.Intf.Type*>& tdfMap)
        {
            HashMap<Ir.Intf.Type*, Ir.Intf.Type*>.ConstIterator i = tdfMap.CFind(this);
            if (i != tdfMap.CEnd())
            {
                SetName(i->second->BaseName());
            }
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new PointerType(baseType->Clone(), numPointers);
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeNull(this);
        }
        public nothrow override byte NumPointers() const
        {
            return numPointers;
        }
        public override nothrow string Prefix() const
        {
            if (GetBaseType() is FunctionType*)
            {
                FunctionType* funType = cast<FunctionType*>(GetBaseType());
                return funType->ReturnType()->Name() + " (" + string('*', numPointers);
            }
            return base->Prefix();
        }
        public override nothrow string Suffix() const
        {
            if (baseType is FunctionType*)
            {
                string parameterList = ")(";
                FunctionType* funType = cast<FunctionType*>(baseType);
                bool first = true;
                for (const UniquePtr<Ir.Intf.Type>& paramType : funType->ParameterTypes())
                {
                    if (first)
                    {
                        first = false;
                    }
                    else
                    {
                        parameterList.Append(", ");
                    }
                    parameterList.Append(paramType->Name());
                }
                parameterList.Append(')');
                return parameterList;
            }
            return base->Suffix();
        }
        private Ir.Intf.Type* baseType;
        private UniquePtr<Ir.Intf.Type> ownedBaseType;
        private byte numPointers;
    }
    
    public inline PointerType* MakePointerType(Ir.Intf.Type* baseType)
    {
        if (baseType is PointerType*)
        {
            PointerType* basePtrType = cast<PointerType*>(baseType);
            return new PointerType(basePtrType->BaseType()->Clone(), basePtrType->NumPointers() + 1u);
        }
        return new PointerType(baseType, 1u);
    }
    
    public inline PointerType* MakePointerType(Ir.Intf.Type* baseType, byte numPointers)
    {
        if (baseType is PointerType*)
        {
            PointerType* basePtrType = cast<PointerType*>(baseType);
            return new PointerType(basePtrType->BaseType()->Clone(), basePtrType->NumPointers() + numPointers);
        }
        return new PointerType(baseType, numPointers);
    }
    
    public class RvalueRefType : PointerType
    {
        public nothrow RvalueRefType(Ir.Intf.Type* baseType_) : base(baseType_, 1u)
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new RvalueRefType(BaseType()->Clone());
        }
        public override Ir.Intf.Object* CreateDefaultValue() const
        {
            return MakeNull(this);
        }
    }
    
    public nothrow inline Ir.Intf.Type* MakeRvalueRefType(Ir.Intf.Type* baseType)
    {
        return new RvalueRefType(baseType);
    }
    
    public class FunctionType : Ir.Intf.Type
    {
        public FunctionType(Ir.Intf.Type* returnType_, const List<Ir.Intf.Type*>& parameterTypes_) : base("*functionType*"), returnType(returnType_)
        {
            if (returnType->Owned())
            {
                throw Exception("function return type already owned");
            }
            returnType->SetOwned();
            string s = returnType->Name();
            s.Append(" (");
            bool first = true;
            for (Ir.Intf.Type* parameterType : parameterTypes_)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    s.Append(", ");
                }
                s.Append(parameterType->Name());
                if (parameterType->Owned())
                {
                    throw Exception("function parameter type already owned");
                }
                parameterType->SetOwned();
                parameterTypes.Add(UniquePtr<Ir.Intf.Type>(parameterType));
            }
            s.Append(')');
            SetName(s);
        }
        public nothrow inline Ir.Intf.Type* ReturnType() const
        {
            return returnType.GetPtr();
        }
        public nothrow inline const List<UniquePtr<Ir.Intf.Type>>& ParameterTypes() const
        {
            return parameterTypes;
        }
        public override Ir.Intf.Type* Clone() const
        {
            List<Ir.Intf.Type*> clonedParameterTypes;
            for (const UniquePtr<Ir.Intf.Type>& parameterType : parameterTypes)
            {
                clonedParameterTypes.Add(parameterType->Clone());
            }
            return new FunctionType(returnType->Clone(), clonedParameterTypes);
        }
        private UniquePtr<Ir.Intf.Type> returnType;
        private List<UniquePtr<Ir.Intf.Type>> parameterTypes;
    }
    
    public inline Ir.Intf.Type* MakeFunctionType(Ir.Intf.Type* returnType, const List<Ir.Intf.Type*>& parameterTypes)
    {
        return new FunctionType(returnType, parameterTypes);
    }
    
    public class TypeNameType : Ir.Intf.Type
    {
        public nothrow TypeNameType(const string& name_) : base(name_)
        {
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new TypeNameType(Name());
        }
    }
    
    public inline nothrow Ir.Intf.Type* MakeTypeNameType(const string& name)
    {
        return new TypeNameType(name);
    }
    
    public class Typedef : Ir.Intf.Type
    {
        public nothrow Typedef(const string& name_, Ir.Intf.Type* type_) : base("typedef " + type_->Prefix() + name_ + type_->Suffix()), baseName(name_), type(type_)
        {
            if (!type->Owned())
            {
                type->SetOwned();
                ownedType.Reset(type);
            }
        }
        public override Ir.Intf.Type* Clone() const
        {
            return new Typedef(baseName, type);
        }
        public override nothrow const string& BaseName() const
        {
            return baseName;
        }
        private string baseName;
        private Ir.Intf.Type* type;
        private UniquePtr<Ir.Intf.Type> ownedType;
    }
    
    public inline nothrow Ir.Intf.Type* MakeTypedef(const string& name, Ir.Intf.Type* type)
    {
        return new Typedef(name, type);
    }
}
