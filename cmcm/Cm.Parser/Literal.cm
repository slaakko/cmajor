using System;
using System.Collections;
using System.Text.Parsing;
using Cm.Ast;

namespace Cm.Parser
{
    public class LiteralGrammar: System.Text.Parsing.Grammar
    {
        public static LiteralGrammar* Create()
        {
            return Create(new ParsingDomain());
        }
        public static LiteralGrammar* Create(ParsingDomain* parsingDomain)
        {
            RegisterParsingDomain(parsingDomain);
            LiteralGrammar* grammar = new LiteralGrammar(parsingDomain);
            parsingDomain->AddGrammar(grammar);
            grammar->CreateRules();
            grammar->Link();
            return grammar;
        }
        private LiteralGrammar(ParsingDomain* parsingDomain): base("LiteralGrammar", parsingDomain->GetNamespaceScope("Cm.Parser"), parsingDomain)
        {
            SetOwner(0);
        }
        public Node* Parse(const char* start, const char* end, int fileIndex, const string& fileName)
        {
            Scanner scanner(start, end, fileIndex, fileName, SkipRule());
            System.IO.OutputStream* log = Log();
            UniquePtr<XmlLog> xmlLog;
            if (log != null)
            {
                xmlLog.Reset(new XmlLog(*log, MaxLogLineLength()));
                scanner.SetLog(xmlLog.GetPtr());
                xmlLog->WriteBeginRule("parse");
            }
            Stack<UniquePtr<Object>> stack;
            Match match = Parse(scanner, stack);
            Span stop = scanner.GetSpan();
            if (log != null)
            {
                xmlLog->WriteEndRule("parse");
            }
            if (!match.Hit() || stop.Start() != int(end - start))
            {
                Rule* startRule = StartRule();
                if (startRule != null)
                {
                    throw ExpectationFailure(startRule->Info(), fileName, stop, start, end);
                }
                else
                {
                    throw ParsingException("grammar '" + Name() + "' has no start rule", fileName, stop, start, end);
                }
            }
            UniquePtr<Object> value = stack.Pop();
            Node* result = *cast<ValueObject<Node*>*>(value.GetPtr());
            return result;
        }
        private class LiteralRule: System.Text.Parsing.Rule
        {
            public LiteralRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("Node*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                ActionParser* a2ActionParser = GetAction("A2");
                a2ActionParser->SetAction(ParsingAction(A2Action));
                ActionParser* a3ActionParser = GetAction("A3");
                a3ActionParser->SetAction(ParsingAction(A3Action));
                ActionParser* a4ActionParser = GetAction("A4");
                a4ActionParser->SetAction(ParsingAction(A4Action));
                ActionParser* a5ActionParser = GetAction("A5");
                a5ActionParser->SetAction(ParsingAction(A5Action));
                NonterminalParser* booleanLiteralNonterminalParser = GetNonterminal("BooleanLiteral");
                booleanLiteralNonterminalParser->SetPostCall(PostCall(PostBooleanLiteral));
                NonterminalParser* floatingLiteralNonterminalParser = GetNonterminal("FloatingLiteral");
                floatingLiteralNonterminalParser->SetPostCall(PostCall(PostFloatingLiteral));
                NonterminalParser* integerLiteralNonterminalParser = GetNonterminal("IntegerLiteral");
                integerLiteralNonterminalParser->SetPostCall(PostCall(PostIntegerLiteral));
                NonterminalParser* charLiteralNonterminalParser = GetNonterminal("CharLiteral");
                charLiteralNonterminalParser->SetPostCall(PostCall(PostCharLiteral));
                NonterminalParser* stringLiteralNonterminalParser = GetNonterminal("StringLiteral");
                stringLiteralNonterminalParser->SetPostCall(PostCall(PostStringLiteral));
                NonterminalParser* nullLiteralNonterminalParser = GetNonterminal("NullLiteral");
                nullLiteralNonterminalParser->SetPostCall(PostCall(PostNullLiteral));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromBooleanLiteral;
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromFloatingLiteral;
            }
            public throw void A2Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromIntegerLiteral;
            }
            public throw void A3Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromCharLiteral;
            }
            public throw void A4Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromStringLiteral;
            }
            public throw void A5Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = context.fromNullLiteral;
            }
            public throw void PostBooleanLiteral(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromBooleanLiteral_value = stack.Pop();
                    context.fromBooleanLiteral = *cast<ValueObject<Node*>*>(fromBooleanLiteral_value.GetPtr());
                }
            }
            public throw void PostFloatingLiteral(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromFloatingLiteral_value = stack.Pop();
                    context.fromFloatingLiteral = *cast<ValueObject<Node*>*>(fromFloatingLiteral_value.GetPtr());
                }
            }
            public throw void PostIntegerLiteral(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromIntegerLiteral_value = stack.Pop();
                    context.fromIntegerLiteral = *cast<ValueObject<Node*>*>(fromIntegerLiteral_value.GetPtr());
                }
            }
            public throw void PostCharLiteral(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromCharLiteral_value = stack.Pop();
                    context.fromCharLiteral = *cast<ValueObject<Node*>*>(fromCharLiteral_value.GetPtr());
                }
            }
            public throw void PostStringLiteral(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromStringLiteral_value = stack.Pop();
                    context.fromStringLiteral = *cast<ValueObject<Node*>*>(fromStringLiteral_value.GetPtr());
                }
            }
            public throw void PostNullLiteral(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromNullLiteral_value = stack.Pop();
                    context.fromNullLiteral = *cast<ValueObject<Node*>*>(fromNullLiteral_value.GetPtr());
                }
            }
            private class Context
            {
                public Node* value;
                public Node* fromBooleanLiteral;
                public Node* fromFloatingLiteral;
                public Node* fromIntegerLiteral;
                public Node* fromCharLiteral;
                public Node* fromStringLiteral;
                public Node* fromNullLiteral;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class BooleanLiteralRule: System.Text.Parsing.Rule
        {
            public BooleanLiteralRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("Node*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* bNonterminalParser = GetNonterminal("b");
                bNonterminalParser->SetPostCall(PostCall(Postb));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new BooleanLiteralNode(span, context.fromb);
            }
            public throw void Postb(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromb_value = stack.Pop();
                    context.fromb = *cast<ValueObject<bool>*>(fromb_value.GetPtr());
                }
            }
            private class Context
            {
                public Node* value;
                public bool fromb;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class IntegerLiteralRule: System.Text.Parsing.Rule
        {
            public IntegerLiteralRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("Node*");
                AddLocalVariable(AttrOrVariable("int", "start"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                ActionParser* a2ActionParser = GetAction("A2");
                a2ActionParser->SetAction(ParsingAction(A2Action));
                ActionParser* a3ActionParser = GetAction("A3");
                a3ActionParser->SetAction(ParsingAction(A3Action));
                ActionParser* a4ActionParser = GetAction("A4");
                a4ActionParser->SetAction(ParsingAction(A4Action));
                ActionParser* a5ActionParser = GetAction("A5");
                a5ActionParser->SetAction(ParsingAction(A5Action));
                NonterminalParser* hex_literalNonterminalParser = GetNonterminal("hex_literal");
                hex_literalNonterminalParser->SetPostCall(PostCall(Posthex_literal));
                NonterminalParser* uNonterminalParser = GetNonterminal("u");
                uNonterminalParser->SetPostCall(PostCall(Postu));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.start = span.Start();
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = CreateIntegerLiteralNode(Span(span.FileIndex(), span.LineNumber(), context.start, span.End()), context.fromhex_literal, true);
            }
            public throw void A2Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = CreateIntegerLiteralNode(Span(span.FileIndex(), span.LineNumber(), context.start, span.End()), context.fromhex_literal, false);
            }
            public throw void A3Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.start = span.Start();
            }
            public throw void A4Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = CreateIntegerLiteralNode(Span(span.FileIndex(), span.LineNumber(), context.start, span.End()), context.fromu, true);
            }
            public throw void A5Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = CreateIntegerLiteralNode(Span(span.FileIndex(), span.LineNumber(), context.start, span.End()), context.fromu, false);
            }
            public throw void Posthex_literal(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromhex_literal_value = stack.Pop();
                    context.fromhex_literal = *cast<ValueObject<ulong>*>(fromhex_literal_value.GetPtr());
                }
            }
            public throw void Postu(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromu_value = stack.Pop();
                    context.fromu = *cast<ValueObject<ulong>*>(fromu_value.GetPtr());
                }
            }
            private class Context
            {
                public Node* value;
                public int start;
                public ulong fromhex_literal;
                public ulong fromu;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class FloatingLiteralRule: System.Text.Parsing.Rule
        {
            public FloatingLiteralRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("Node*");
                AddLocalVariable(AttrOrVariable("int", "start"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                ActionParser* a2ActionParser = GetAction("A2");
                a2ActionParser->SetAction(ParsingAction(A2Action));
                NonterminalParser* urealNonterminalParser = GetNonterminal("ureal");
                urealNonterminalParser->SetPostCall(PostCall(Postureal));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.start = span.Start();
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = CreateFloatingLiteralNode(Span(span.FileIndex(), span.LineNumber(), context.start, span.End()), context.fromureal, true);
            }
            public throw void A2Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = CreateFloatingLiteralNode(Span(span.FileIndex(), span.LineNumber(), context.start, span.End()), context.fromureal, false);
            }
            public throw void Postureal(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromureal_value = stack.Pop();
                    context.fromureal = *cast<ValueObject<double>*>(fromureal_value.GetPtr());
                }
            }
            private class Context
            {
                public Node* value;
                public int start;
                public double fromureal;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class CharLiteralRule: System.Text.Parsing.Rule
        {
            public CharLiteralRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("Node*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                NonterminalParser* cNonterminalParser = GetNonterminal("c");
                cNonterminalParser->SetPostCall(PostCall(Postc));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new CharLiteralNode(span, context.fromc);
            }
            public throw void Postc(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> fromc_value = stack.Pop();
                    context.fromc = *cast<ValueObject<char>*>(fromc_value.GetPtr());
                }
            }
            private class Context
            {
                public Node* value;
                public char fromc;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class StringLiteralRule: System.Text.Parsing.Rule
        {
            public StringLiteralRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("Node*");
                AddLocalVariable(AttrOrVariable("string", "r"));
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
                ActionParser* a1ActionParser = GetAction("A1");
                a1ActionParser->SetAction(ParsingAction(A1Action));
                ActionParser* a2ActionParser = GetAction("A2");
                a2ActionParser->SetAction(ParsingAction(A2Action));
                NonterminalParser* sNonterminalParser = GetNonterminal("s");
                sNonterminalParser->SetPostCall(PostCall(Posts));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new StringLiteralNode(span, context.froms);
            }
            public throw void A1Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new StringLiteralNode(span, context.r);
            }
            public throw void A2Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.r = string(matchBegin, matchEnd);
            }
            public throw void Posts(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    UniquePtr<Object> froms_value = stack.Pop();
                    context.froms = *cast<ValueObject<string>*>(froms_value.GetPtr());
                }
            }
            private class Context
            {
                public Node* value;
                public string r;
                public string froms;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        private class NullLiteralRule: System.Text.Parsing.Rule
        {
            public NullLiteralRule(const string& name_, Scope* enclosingScope_, Parser* definition_):
                base(name_, enclosingScope_, definition_), contextStack(), context()
            {
                SetValueTypeName("Node*");
            }
            public override void Enter(Stack<UniquePtr<Object>>& stack)
            {
                contextStack.Push(Rvalue(context));
                context = Context();
            }
            public override void Leave(Stack<UniquePtr<Object>>& stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(UniquePtr<Object>(new ValueObject<Node*>(context.value)));
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser* a0ActionParser = GetAction("A0");
                a0ActionParser->SetAction(ParsingAction(A0Action));
            }
            public throw void A0Action(const char* matchBegin, const char* matchEnd, const Span& span, const string& fileName, bool& pass)
            {
                context.value = new NullLiteralNode(span);
            }
            private class Context
            {
                public Node* value;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain* parsingDomain = GetParsingDomain();
            Grammar* grammar0 = parsingDomain->GetGrammar("System.Text.Parsing.stdlib");
            if (grammar0 == null)
            {
                grammar0 = System.Text.Parsing.stdlib.Create(parsingDomain);
            }
            AddGrammarReference(grammar0);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("ulong", this, "System.Text.Parsing.stdlib.ulong"));
            AddRuleLink(new RuleLink("hex_literal", this, "System.Text.Parsing.stdlib.hex_literal"));
            AddRuleLink(new RuleLink("string", this, "System.Text.Parsing.stdlib.string"));
            AddRuleLink(new RuleLink("ureal", this, "System.Text.Parsing.stdlib.ureal"));
            AddRuleLink(new RuleLink("bool", this, "System.Text.Parsing.stdlib.bool"));
            AddRuleLink(new RuleLink("char", this, "System.Text.Parsing.stdlib.char"));
            AddRule(new LiteralRule("Literal", GetScope(),
                new AlternativeParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new ActionParser("A0",
                                        new NonterminalParser("BooleanLiteral", "BooleanLiteral", 0)),
                                    new ActionParser("A1",
                                        new NonterminalParser("FloatingLiteral", "FloatingLiteral", 0))),
                                new ActionParser("A2",
                                    new NonterminalParser("IntegerLiteral", "IntegerLiteral", 0))),
                            new ActionParser("A3",
                                new NonterminalParser("CharLiteral", "CharLiteral", 0))),
                        new ActionParser("A4",
                            new NonterminalParser("StringLiteral", "StringLiteral", 0))),
                    new ActionParser("A5",
                        new NonterminalParser("NullLiteral", "NullLiteral", 0)))));
            AddRule(new BooleanLiteralRule("BooleanLiteral", GetScope(),
                new ActionParser("A0",
                    new NonterminalParser("b", "bool", 0))));
            AddRule(new IntegerLiteralRule("IntegerLiteral", GetScope(),
                new AlternativeParser(
                    new TokenParser(
                        new SequenceParser(
                            new ActionParser("A0",
                                new NonterminalParser("hex_literal", "hex_literal", 0)),
                            new AlternativeParser(
                                new ActionParser("A1",
                                    new AlternativeParser(
                                        new CharParser('u'),
                                        new CharParser('U'))),
                                new ActionParser("A2",
                                    new EmptyParser())))),
                    new TokenParser(
                        new SequenceParser(
                            new ActionParser("A3",
                                new NonterminalParser("u", "ulong", 0)),
                            new AlternativeParser(
                                new ActionParser("A4",
                                    new AlternativeParser(
                                        new CharParser('u'),
                                        new CharParser('U'))),
                                new ActionParser("A5",
                                    new EmptyParser())))))));
            AddRule(new FloatingLiteralRule("FloatingLiteral", GetScope(),
                new TokenParser(
                    new SequenceParser(
                        new ActionParser("A0",
                            new NonterminalParser("ureal", "ureal", 0)),
                        new AlternativeParser(
                            new ActionParser("A1",
                                new AlternativeParser(
                                    new CharParser('f'),
                                    new CharParser('F'))),
                            new ActionParser("A2",
                                new EmptyParser()))))));
            AddRule(new CharLiteralRule("CharLiteral", GetScope(),
                new ActionParser("A0",
                    new NonterminalParser("c", "char", 0))));
            AddRule(new StringLiteralRule("StringLiteral", GetScope(),
                new AlternativeParser(
                    new ActionParser("A0",
                        new NonterminalParser("s", "string", 0)),
                    new ActionParser("A1",
                        new SequenceParser(
                            new CharParser('@'),
                            new TokenParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new CharParser('"'),
                                        new ActionParser("A2",
                                            new KleeneStarParser(
                                                new CharSetParser("\"", true)))),
                                    new CharParser('"'))))))));
            AddRule(new NullLiteralRule("NullLiteral", GetScope(),
                new ActionParser("A0",
                    new KeywordParser("null"))));
        }
    }
}
