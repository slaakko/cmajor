/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using Cm.Ast;

namespace Cm.Parser
{
    grammar ConstantGrammar
    {
        using ExpressionGrammar.Expression;
        using IdentifierGrammar.Identifier;
        using SpecifierGrammar.Specifiers;
        using TypeExprGrammar.TypeExpr;
        using stdlib.spaces_and_comments;
        skip spaces_and_comments;
        
        Constant(ParsingContext* ctx, var UniquePtr<Node> typeExpr, var UniquePtr<IdentifierNode> id) : Node*
            ::= (Specifiers keyword("const") TypeExpr(ctx){ typeExpr.Reset(TypeExpr); } Identifier{ id.Reset(Identifier); } '=' Expression(ctx)! ';'!)
            {
                value = new ConstantNode(span, Specifiers, typeExpr.Release(), id.Release(), Expression);
            }
            ;
    }
}
