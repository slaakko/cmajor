/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using Cm.Ast;

namespace Cm.Parser
{
    grammar ProjectGrammar
    {
        using stdlib.identifier;
        using stdlib.qualified_id;
        using stdlib.spaces_and_comments;
        using stdlib.ulong;
        using stdlib.long;
        using VersionNumberGrammar.VersionNumber;
        
        skip spaces_and_comments;

        Project(string config, string backend, string os, int bits, ProgramVersion llvmVersion) : Project*
            ::= (keyword("project") qualified_id ';'!){ value = new Project(qualified_id, fileName, config, backend, os, bits, llvmVersion); } Declarations(value)
            ;

        Declarations(Project* project)
            ::= (Declaration(project){ project->AddDeclaration(Declaration); })*
            ;

        Declaration(Project* project) : ProjectDeclaration*
            ::= SourceFileDeclaration(project){ value = SourceFileDeclaration; }
            |   AsmSourceFileDeclaration(project){ value = AsmSourceFileDeclaration; }
            |   CSourceFileDeclaration(project){ value = CSourceFileDeclaration; }
            |   CppSourceFileDeclaration(project){ value = CppSourceFileDeclaration; }
            |   TextFileDeclaration(project){ value = TextFileDeclaration; }
            |   ReferenceFileDeclaration(project){ value = ReferenceFileDeclaration; }
            |   CLibraryDeclaration(project){ value = CLibraryDeclaration; }
            |   TargetDeclaration{ value = TargetDeclaration; }
            |   StackSizeDeclaration{ value = StackSizeDeclaration; }
            |   AssemblyFileDeclaration(project){ value = AssemblyFileDeclaration; }
            |   ExecutableFileDeclaration(project){ value = ExecutableFileDeclaration; }
            |   AddLibraryPathDeclaration(project){ value = AddLibraryPathDeclaration; }
            ;

        SourceFileDeclaration(Project* project) : ProjectDeclaration*
            ::= (keyword("source") FilePath! Properties? ';'!){ value = new SourceFileDeclaration(span, SourceFileType.cm, FilePath, project->BasePath(), Properties); }
            ;

        AsmSourceFileDeclaration(Project* project) : ProjectDeclaration*
            ::= (keyword("asmsource") FilePath! Properties? ';'!){ value = new SourceFileDeclaration(span, SourceFileType.asm, FilePath, project->BasePath(), Properties); }
            ;

        CSourceFileDeclaration(Project* project) : ProjectDeclaration*
            ::= (keyword("csource") FilePath! Properties? ';'!){ value = new SourceFileDeclaration(span, SourceFileType.c, FilePath, project->BasePath(), Properties); }
            ;

        CppSourceFileDeclaration(Project* project) : ProjectDeclaration*
            ::= (keyword("cppsource") FilePath! Properties? ';'!){ value = new SourceFileDeclaration(span, SourceFileType.cpp, FilePath, project->BasePath(), Properties); }
            ;

        TextFileDeclaration(Project* project) : ProjectDeclaration*
            ::= (keyword("text") FilePath! Properties? ';'!){ value = new SourceFileDeclaration(span, SourceFileType.text, FilePath, project->BasePath(), Properties); }
            ;

        ReferenceFileDeclaration(Project* project) : ProjectDeclaration*
            ::= (keyword("reference") FilePath! Properties? ';'!){ value = new ReferenceFileDeclaration(span, FilePath, project->BasePath(), Properties); }
            ;

        CLibraryDeclaration(Project* project) : ProjectDeclaration*
            ::= (keyword("clib") FilePath! Properties? ';'!){ value = new CLibraryDeclaration(span, FilePath, Properties); }
            ;

        TargetDeclaration : ProjectDeclaration*
            ::= keyword("target") '='! (keyword("program"){ value = new TargetDeclaration(span, Target.program); } | keyword("library"){ value = new TargetDeclaration(span, Target.library); })! ';'!
            ;
            
        StackSizeDeclaration : ProjectDeclaration*
            ::= (keyword("stack") '='! ulong:stackSize! ';'!){ value = new StackSizeDeclaration(span, stackSize); }
            ;

        AssemblyFileDeclaration(Project* project) : ProjectDeclaration*
            ::= (keyword("assembly") FilePath! Properties? ';'!){ value = new AssemblyFileDeclaration(span, FilePath, project->BasePath(), Properties); }
            ;

        ExecutableFileDeclaration(Project* project) : ProjectDeclaration*
            ::= (keyword("executable") FilePath! ';'){ value = new ExecutableFileDeclaration(span, FilePath, project->OutputBasePath()); }
            ;
            
        AddLibraryPathDeclaration(Project* project) : ProjectDeclaration*
            ::= (keyword("addlibrarypath") FilePath! Properties? ';'){ value = new AddLibraryPathDeclaration(span, FilePath, project->BasePath(), Properties); }
            ;

        Properties : Properties
            ::= '[' ((identifier:name RelOp:op PropertyValue:val){ value.AddProperty(name, op, val); } % ',') ']'!
            ;
            
        RelOp : RelOp
            ::= '='{ value = RelOp.equal; }
            |   "!="{ value = RelOp.notEq; }
            |   "<="{ value = RelOp.lessEq; }
            |   ">="{ value = RelOp.greaterEq; }
            |   '<'{ value = RelOp.less; }
            |   '>'{ value = RelOp.greater; }
            ;
            
        PropertyValue : string
            ::= VersionNumber{ value = string(matchBegin, matchEnd); }
            |   identifier{ value = identifier; }
            |   long:val{ value = ToString(val); }
            ;

        FilePath: string
            ::= token('<' ([^>]+){ value = string(matchBegin, matchEnd); } '>'!)
            ;
    }
}
