/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using Cm.Ast;

namespace Cm.Parser
{
    grammar DelegateGrammar
    {
        using SpecifierGrammar.Specifiers;
        using TypeExprGrammar.TypeExpr;
        using IdentifierGrammar.Identifier;
        using ParameterGrammar.ParameterList;
        using stdlib.spaces_and_comments;
        skip spaces_and_comments;
        
        Delegate(ParsingContext* ctx) : Node*
            ::= (Specifiers keyword("delegate") TypeExpr(ctx)! Identifier!){ value = new DelegateNode(span, Specifiers, TypeExpr, Identifier); } 
                ParameterList(ctx, value)! ';'!{ value->GetSpan().SetEnd(span.End()); }
            ;

        ClassDelegate(ParsingContext* ctx) : Node*
            ::= (Specifiers keyword("class") keyword("delegate") TypeExpr(ctx)! Identifier!){ value = new ClassDelegateNode(span, Specifiers, TypeExpr, Identifier); } 
                ParameterList(ctx, value)! ';'!{ value->GetSpan().SetEnd(span.End()); }
            ;
        }
}
