/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using Cm.Ast;

namespace Cm.Parser
{
    grammar TemplateGrammar
    {
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.QualifiedId;
        using TypeExprGrammar.TypeExpr;
        
        TemplateId(ParsingContext* ctx, var UniquePtr<TemplateIdNode> templateId) : Node*
            ::= empty{ ctx->BeginParsingTemplateId(); }
            (   QualifiedId:subject{ templateId.Reset(new TemplateIdNode(span, subject)); }
                '<' (TypeExpr(ctx):templateArg{ templateId->AddTemplateArgument(templateArg); } % ',') '>'
            )
            {
                ctx->EndParsingTemplateId();
                value = templateId.Release();
                value->GetSpan().SetEnd(span.End());
            }
            /
            {
                ctx->EndParsingTemplateId();
            }
            ;
            
        TemplateParameter(ParsingContext* ctx) : TemplateParameterNode*
            ::= (Identifier ('=' TypeExpr(ctx))?){ value = new TemplateParameterNode(span, Identifier, TypeExpr); }
            ;
            
        TemplateParameterList(ParsingContext* ctx, Node* owner)
            ::= '<' (TemplateParameter(ctx){ owner->AddTemplateParameter(TemplateParameter); } % ',') '>'
            ;
    }
}
