/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using System.IO;
using CodeFormatter = System.Text.CodeFormatter;

namespace Cm.Emit
{
    public class LlvmFunctionEmitter : FunctionEmitter
    {
        public nothrow LlvmFunctionEmitter(CodeFormatter& codeFormatter_, Cm.Sym.TypeRepository& typeRepository_, Cm.Core.IrFunctionRepository& irFunctionRepository_, 
            Cm.Core.IrClassTypeRepository& irClassTypeRepository_, Cm.Core.StringRepository& stringRepository_, Cm.BoundTree.BoundClass* currentClass_, HashSet<string>& internalFunctionNames_, 
            HashSet<Ir.Intf.Function*>& externalFunctions_, Cm.Core.StaticMemberVariableRepository& staticMemberVariableRepository_, Cm.Core.ExternalConstantRepository& externalConstantRepository_,
            Cm.Ast.CompileUnitNode* currentCompileUnit_, Cm.Sym.FunctionSymbol* enterFrameFun_, Cm.Sym.FunctionSymbol* leaveFrameFun_, Cm.Sym.FunctionSymbol* enterTracedCallFun_, 
            Cm.Sym.FunctionSymbol* leaveTracedCallFun_, bool profile_) :
            base(codeFormatter_, typeRepository_, irFunctionRepository_, irClassTypeRepository_, stringRepository_, currentClass_, internalFunctionNames_, externalFunctions_, staticMemberVariableRepository_,
            externalConstantRepository_, currentCompileUnit_, enterFrameFun_, leaveFrameFun_, enterTracedCallFun_, leaveTracedCallFun_, false, profile_)
        {
        }
        public override void SetStringLiteralResult(Cm.Core.Emitter* emitter, Ir.Intf.Object* resultObject, Ir.Intf.Object* stringConstant, Ir.Intf.Object* stringObject)
        {
            Ir.Intf.Object* zero = Cm.IrIntf.MakeI32Constant(0);
            emitter->Own(zero);
            Ir.Intf.Type* s = Cm.IrIntf.Pointer(stringConstant->GetType(), 1u);
            emitter->Own(s);
            emitter->Emit(Cm.IrIntf.GetElementPtr(s, resultObject, stringObject, zero, zero));
        }
        public override Ir.Intf.Object* MakeLocalVarIrObject(Cm.Sym.TypeSymbol* type, Ir.Intf.Object* source)
        {
            return source;
        }
        public override void GenVirtualCall(Cm.Sym.FunctionSymbol* fun, Cm.Core.GenResult& memberFunctionResult)
        {
            // todo
        }
        public override void SetCallDebugInfoInfo(Ir.Intf.Instruction* callInst, Ir.Intf.Function* fun)
        {
            // todo
        }
        public override void DoNothing(Cm.Core.GenResult& genResult)
        {
            // todo
        }    
    }
}
