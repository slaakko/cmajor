/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;

namespace Cm.BoundTree
{
    public enum BoundNodeFlags : ushort
    {
        none = 0u,
        argByRef = 1u << 0u,
        lvalue = 1u << 1u,
        refByValue = 1u << 2u,
        constructVariable = 1u << 3u,
        genJumpingBoolCode = 1u << 4u,
        classObjectArg = 1u << 5u,
        genVirtualCall = 1u << 6u,
        argIsThisOrBase = 1u << 7u,
        argIsTemporary = 1u << 8u,
        addrArg = 1u << 9u,
        indexArray = 1u << 10u,
        newCall = 1u << 11u,
        scopeQualified = 1u << 12u
    }
    
    public abstract class BoundNode 
    {
        public virtual ~BoundNode()
        {
        }
        public nothrow BoundNode() : flags(BoundNodeFlags.none), syntaxNode(null)
        {
        }
        public nothrow BoundNode(Cm.Ast.Node* syntaxNode_) : flags(BoundNodeFlags.none), syntaxNode(syntaxNode_)
        {
        }
        public nothrow inline Cm.Ast.Node* SyntaxNode() const
        {
            return syntaxNode;
        }
        public abstract void Accept(Visitor& visitor);
        public virtual nothrow void SetCompoundTargetStatement(void* targetStatement) // todo: move to BcuItem
        {
        }
        public virtual nothrow void SetLabeledStatement(void* labeledStatement) // todo: move to BcuItem
        {
        }
        public nothrow inline void SetFlag(BoundNodeFlags flag)
        {
            flags = cast<BoundNodeFlags>(flags | flag);
        }
        public nothrow inline bool GetFlag(BoundNodeFlags flag) const
        {
            return (flags & flag) != BoundNodeFlags.none;
        }
        public nothrow inline void ResetFlag(BoundNodeFlags flag)
        {
            flags = cast<BoundNodeFlags>(flags & ~flag);
        }
        private BoundNodeFlags flags;
        private Cm.Ast.Node* syntaxNode;
    }
}
