/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.BoundTree
{
    public abstract class BoundConstraint : BoundNode
    {
        public nothrow BoundConstraint() : base(null)
        {
        }
        public nothrow BoundConstraint(Cm.Ast.Node* syntaxNode_) : base(syntaxNode_)
        {
        }
        public abstract bool Subsume(BoundConstraint* that) const;
        public abstract BoundConstraint* Clone() const;
    }
    
    public class BoundAtomicConstraint : BoundConstraint
    {
        public nothrow BoundAtomicConstraint(bool satisfied_) : base(), satisfied(satisfied_), conceptSymbol(null)
        {
        }
        public override bool Subsume(BoundConstraint* that) const
        {
            if (that is BoundBinaryConstraint*)
            {
                BoundBinaryConstraint* thatBinaryConstraint = cast<BoundBinaryConstraint*>(that);
                BoundConstraint* thatLeft = thatBinaryConstraint->Left();
                BoundConstraint* thatRight = thatBinaryConstraint->Right();
                bool subsumeLeft = Subsume(thatLeft);
                bool subsumeRight = Subsume(thatRight);
                if (that is BoundConjunctiveConstraint*)
                {
                    return subsumeLeft && subsumeRight;
                }
                else if (that is BoundDisjunctiveConstraint*)
                {
                    return subsumeLeft || subsumeRight;
                }
                else
                {
                    #assert(false);
                }
            }
            else if (that is BoundAtomicConstraint*)
            {
                BoundAtomicConstraint* thatAtomic = cast<BoundAtomicConstraint*>(that);
                if (satisfied && !thatAtomic->satisfied)
                {
                    return true;
                }
                else if (!satisfied && thatAtomic->satisfied)
                {
                    return false;
                }
                else
                {
                    if (conceptSymbol != null && thatAtomic->conceptSymbol == null)
                    {
                        return true;
                    }
                    else if (conceptSymbol == null && thatAtomic->conceptSymbol != null)
                    {
                        return false;
                    }
                    else if (conceptSymbol == null && thatAtomic->conceptSymbol == null)
                    {
                        return true;
                    }
                    else
                    {
                        if (conceptSymbol == thatAtomic->conceptSymbol)
                        {
                            return true;
                        }
                        Cm.Sym.ConceptSymbol* refinedConcept = conceptSymbol->RefinedConcept();
                        while (refinedConcept != null)
                        {
                            if (refinedConcept == thatAtomic->conceptSymbol)
                            {
                                return true;
                            }
                            else
                            {
                                refinedConcept = refinedConcept->RefinedConcept();
                            }
                        }
                        return false;
                    }
                }
            }
            return false;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public override BoundConstraint* Clone() const
        {
            BoundAtomicConstraint* clone = new BoundAtomicConstraint(satisfied);
            clone->SetConcept(conceptSymbol);
            return clone;
        }
        public nothrow inline bool Satisfied() const
        {
            return satisfied;
        }
        public nothrow inline void SetConcept(Cm.Sym.ConceptSymbol* conceptSymbol_)
        {
            conceptSymbol = conceptSymbol_;
        }
        private bool satisfied;
        private Cm.Sym.ConceptSymbol* conceptSymbol;
    }
    
    public abstract class BoundBinaryConstraint : BoundConstraint
    {
        public nothrow BoundBinaryConstraint(BoundConstraint* left_, BoundConstraint* right_) : base(), left(left_), right(right_)
        {
        }
        public nothrow inline BoundConstraint* Left() const
        {
            return left.GetPtr();
        }
        public nothrow inline BoundConstraint* Right() const
        {
            return right.GetPtr();
        }
        private UniquePtr<BoundConstraint> left;
        private UniquePtr<BoundConstraint> right;
    }
    
    public class BoundDisjunctiveConstraint : BoundBinaryConstraint
    {
        public nothrow BoundDisjunctiveConstraint(BoundConstraint* left_, BoundConstraint* right_) : base(left_, right_)
        {
        }
        public override bool Subsume(BoundConstraint* that) const
        {
            BoundConstraint* left = Left();
            BoundConstraint* right = Right();
            if (that is BoundBinaryConstraint*)
            {
                BoundBinaryConstraint* thatBinaryConstraint = cast<BoundBinaryConstraint*>(that);
                BoundConstraint* thatLeft = thatBinaryConstraint->Left();
                BoundConstraint* thatRight = thatBinaryConstraint->Right();
                bool leftSubsumeThatLeft = left->Subsume(thatLeft);
                bool leftSubsumeThatRight = left->Subsume(thatRight);
                bool rightSubsumeThatLeft = right->Subsume(thatLeft);
                bool rightSubsumeThatRight = right->Subsume(thatRight);
                bool leftSubsumeThatLeftOrThatRight = leftSubsumeThatLeft || leftSubsumeThatRight;
                bool rightSubsumeThatLeftOrThatRight = rightSubsumeThatLeft || rightSubsumeThatRight;
                if (that is BoundConjunctiveConstraint*)
                {
                    return leftSubsumeThatLeftOrThatRight && rightSubsumeThatLeftOrThatRight;
                }
                else if (that is BoundDisjunctiveConstraint*)
                {
                    return leftSubsumeThatLeftOrThatRight || rightSubsumeThatLeftOrThatRight;
                }
                else 
                {
                    #assert(false);
                    return false;
                }
            }
            else
            {
                bool leftSubsumeThat = left->Subsume(that);
                bool rightSubsumeThat = right->Subsume(that);
                return leftSubsumeThat && rightSubsumeThat;
            }
        }
        public override void Accept(Visitor& visitor)
        {
            Left()->Accept(visitor);
            Right()->Accept(visitor);
            visitor.Visit(*this);
        }
        public override BoundConstraint* Clone() const
        {
            return new BoundDisjunctiveConstraint(Left()->Clone(), Right()->Clone());
        }
    }
    
    public class BoundConjunctiveConstraint : BoundBinaryConstraint
    {
        public nothrow BoundConjunctiveConstraint (BoundConstraint* left_, BoundConstraint* right_) : base(left_, right_)
        {
        }
        public override bool Subsume(BoundConstraint* that) const
        {
            BoundConstraint* left = Left();
            BoundConstraint* right = Right();
            if (that is BoundBinaryConstraint*)
            {
                BoundBinaryConstraint* thatBinaryConstraint = cast<BoundBinaryConstraint*>(that);
                BoundConstraint* thatLeft = thatBinaryConstraint->Left();
                BoundConstraint* thatRight = thatBinaryConstraint->Right();
                bool leftSubsumeThatLeft = left->Subsume(thatLeft);
                bool rightSubsumeThatLeft = right->Subsume(thatLeft);
                bool leftSubsumeThatRight = left->Subsume(thatRight);
                bool rightSubsumeThatRight = right->Subsume(thatRight);
                bool leftOrRightSubsumeThatLeft = leftSubsumeThatLeft || rightSubsumeThatLeft;
                bool leftOrRightSubsumeThatRight = leftSubsumeThatRight || rightSubsumeThatRight;
                if (that is BoundConjunctiveConstraint*)
                {
                    return leftOrRightSubsumeThatLeft && leftOrRightSubsumeThatRight;
                }
                else if (that is BoundDisjunctiveConstraint*)
                {
                    return leftOrRightSubsumeThatLeft || leftOrRightSubsumeThatRight;
                }
                else 
                {
                    #assert(false);
                    return false;
                }
            }
            else
            {
                bool leftSubsumeThat = left->Subsume(that);
                bool rightSubsumeThat = right->Subsume(that);
                return leftSubsumeThat || rightSubsumeThat;
            }
        }
        public override void Accept(Visitor& visitor)
        {
            Left()->Accept(visitor);
            Right()->Accept(visitor);
            visitor.Visit(*this);
        }
        public override BoundConstraint* Clone() const
        {
            return new BoundConjunctiveConstraint(Left()->Clone(), Right()->Clone());
        }
    }
}
