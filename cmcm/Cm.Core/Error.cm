/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Expand = Cm.Parser.Expand;
using Span = System.Text.Parsing.Span;

namespace Cm.Core
{
    public List<Span> MakeReferences(const Span& referenced1_, const Span& referenced2_)
    {
        List<Span> references;
        references.Add(referenced1_);
        references.Add(referenced2_);
        return references;
    }
    
    public class Error : Cm.Ast.Error
    {
        public Error(const string& message_) : base(message_), message(message_), defined(), references()
        {
        }
        public Error(const string& message_, const Span& defined_) : base(Expand(message_, defined_)), message(message_), defined(defined_), references()
        {
        }
        public Error(const string& message_, const Span& defined_, const Span& referenced_) : base(Expand(message_, defined_, referenced_)), message(message_), defined(defined_)
        {
            references.Add(referenced_);
        }
        public Error(const string& message_, const Span& defined_, const Span& referenced1_, const Span& referenced2_) : 
            base(Expand(message_, defined_, MakeReferences(referenced1_, referenced2_))), message(message_), defined(defined_)
        {
            references.Add(referenced1_);
            references.Add(referenced2_);
        }
        public Error(const string& message_, const Span& defined_, const List<Span>& references_) : base(Expand(message_, defined_, references_)), message(message_), defined(defined_), references(references_)
        {
        }
        public nothrow const string& Message() const
        {
            return message;
        }
        public nothrow const Span& Defined() const
        {
            return defined;
        }
        public nothrow const List<Span>& References() const
        {
            return references;
        }
        public override void AddReference(const Span& reference)
        {
            references.Add(reference);
        }
        private string message;
        private Span defined;
        private List<Span> references;
    }
    
    public class ConceptCheckError : Error
    {
        public ConceptCheckError(const string& message_) : base(message_)
        {
        }
        public ConceptCheckError(const string& message_, const Span& defined_) : base(message_, defined_)
        {
        }
    }
}
