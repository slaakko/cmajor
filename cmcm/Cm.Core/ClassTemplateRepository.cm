/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;
using Span = System.Text.Parsing.Span;

namespace Cm.Core
{
    public abstract class ClassTemplateRepository
    {
        public virtual ~ClassTemplateRepository()
        {
        }
        public abstract void CollectViableFunctions(const string& groupName, int arity, const List<Cm.Core.Argument>& arguments, const Span& span, Cm.Sym.ContainerScope* containerScope, 
            HashSet<Cm.Sym.FunctionSymbol*>& viableFunctions);
        public abstract void Instantiate(Cm.Sym.ContainerScope* containerScope, Cm.Sym.FunctionSymbol* memberFunctionSymbol);
        public abstract void BindTemplateTypeSymbol(Cm.Sym.TemplateTypeSymbol* templateTypeSymbol, Cm.Sym.ContainerScope* containerScope, const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes);
        public abstract void InstantiateVirtualFunctionsFor(Cm.Sym.ContainerScope* containerScope, Cm.Sym.ClassTypeSymbol* templateTypeSymbol);
        public abstract void ResolveDefaultTypeArguments(List<Cm.Sym.TypeSymbol*>& typeArguments, Cm.Sym.ClassTypeSymbol* subjectClassTypeSymbol, Cm.Sym.ContainerScope* containerScope, 
            const List<UniquePtr<Cm.Sym.FileScope>>& fileScopes, const Span& span);
    }
}
