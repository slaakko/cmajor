/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

========================================================================*/

using System;
using System.Collections;

namespace Cm.Core
{
    public class FunctionTemplateKey
    {
        public nothrow FunctionTemplateKey(Cm.Sym.FunctionSymbol* subject_, const List<Cm.Sym.TypeSymbol*>& templateArguments_) : 
            subject(subject_), templateArguments(templateArguments_), hashCodeValid(false), hashCode(0u)
        {
        }
        public nothrow inline ulong GetHashCode() const
        {
            if (!hashCodeValid)
            {
                ComputeHashCode();
            }
            return hashCode;
        }
        public nothrow inline Cm.Sym.FunctionSymbol* Subject() const
        {
            return subject;
        }
        public nothrow inline const List<Cm.Sym.TypeSymbol*>& TemplateArguments() const
        {
            return templateArguments;
        }
        private Cm.Sym.FunctionSymbol* subject;
        private List<Cm.Sym.TypeSymbol*> templateArguments;
        private bool hashCodeValid;
        private ulong hashCode;
        private nothrow void ComputeHashCode()
        {
            hashCode = GetHashCode(subject);
            for (Cm.Sym.TypeSymbol* templateArgument : templateArguments)
            {
                ulong templateArgHashCode = templateArgument->Id().GetHashCode();
                hashCode = hashCode ^ templateArgHashCode;
            }
            hashCodeValid = true;
        }
    }
    
    public nothrow inline bool operator==(const FunctionTemplateKey& left, const FunctionTemplateKey& right)
    {
        return left.Subject() == right.Subject() && left.TemplateArguments() == right.TemplateArguments();
    }
    
    public nothrow inline ulong GetHashCode(const FunctionTemplateKey& key)
    {
        return key.GetHashCode();
    }
    
    public class FunctionTemplateRepository
    {
        public nothrow FunctionTemplateRepository(Cm.Sym.SymbolTable& symbolTable_) : symbolTable(symbolTable_)
        {
        }
        public ~FunctionTemplateRepository()
        {
            for (HashMap<FunctionTemplateKey, Cm.Sym.FunctionSymbol*>.Iterator i = functionTemplateMap.Begin(); i != functionTemplateMap.End(); ++i)
            {
                i->first.Subject()->FreeFunctionNode(symbolTable);
            }
        }
        public Cm.Sym.FunctionSymbol* GetFunctionTemplateInstance(const FunctionTemplateKey& key) const
        {
            HashMap<FunctionTemplateKey, Cm.Sym.FunctionSymbol*>.ConstIterator i = functionTemplateMap.CFind(key);
            if (i != functionTemplateMap.CEnd())
            {
                return i->second;
            }
            return null;
        }
        public void AddFunctionTemplateInstance(const FunctionTemplateKey& key, Cm.Sym.FunctionSymbol* functionTemplateInstance)
        {
            functionTemplateMap[key] = functionTemplateInstance;
        }
        private Cm.Sym.SymbolTable& symbolTable;
        private HashMap<FunctionTemplateKey, Cm.Sym.FunctionSymbol*> functionTemplateMap;
        private List<UniquePtr<Cm.Sym.FunctionSymbol>> functionSymbols;
    }
}
