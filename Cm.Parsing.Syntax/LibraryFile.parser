/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

[hpp]#include <Cm.Parsing/ParsingDomain.hpp>
[cpp]#include <Cm.Parsing.Syntax/Element.hpp>
[cpp]#include <Cm.Parsing/Rule.hpp>
[cpp]#include <Cm.Parsing/Namespace.hpp>

namespace Cm.Parsing.Syntax
{
    grammar LibraryFileGrammar
    {
        using stdlib.identifier;
        using stdlib.qualified_id;
        using stdlib.spaces_and_comments;
        using ElementGrammar.Identifier;
        using ElementGrammar.Signature;

        skip spaces_and_comments;

        LibraryFile(Cm::Parsing::ParsingDomain* parsingDomain)
                        ::= NamespaceContent(parsingDomain)
                        ;

        NamespaceContent(Cm::Parsing::ParsingDomain* parsingDomain)
                        ::= 
                        (   Grammar(parsingDomain->CurrentNamespace()->GetScope()){ parsingDomain->AddGrammar(Grammar); }
                        |   Namespace(parsingDomain)
                        )*
                        ;

        Namespace(Cm::Parsing::ParsingDomain* parsingDomain)
                        ::= keyword("namespace") qualified_id:ns!{ parsingDomain->BeginNamespace(ns); } '{'! NamespaceContent(parsingDomain) '}'!{ parsingDomain->EndNamespace(); }
                        ;

        Grammar(Cm::Parsing::Scope* enclosingScope): Cm::Parsing::Grammar*
                        ::= keyword("grammar") 
                            Identifier:grammarName!{ value = new Grammar(grammarName, enclosingScope); value->SetNs(enclosingScope->Ns()); }
                            '{'! GrammarContent(value) '}'!
                        ;

        GrammarContent(Cm::Parsing::Grammar* grammar)
                        ::= (Rule(grammar->GetScope()){ grammar->AddRule(Rule); })*
                        ;

        Rule(Cm::Parsing::Scope* enclosingScope): Cm::Parsing::Rule*
                        ::= Identifier:ruleName{ value = new Cm::Parsing::Rule(ruleName, enclosingScope); } Signature(value) ';'
                        ;
    }
}
