/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;
using System.Concepts;

namespace System.Collections
{
    public class Stack<T> where T is Semiregular
    {
        public typedef T ValueType;

        public nothrow inline bool IsEmpty() const
        {
            return items.IsEmpty();
        }
        public nothrow inline int Count() const
        {
            return items.Count();
        }
        public inline void Push(const ValueType& item) where T is Copyable
        {
            items.Add(item);
        }
        public inline void Push(ValueType&& item) where T is Movable
        {
            items.Add(item);
        }
        public inline ValueType Pop() where T is Movable
        {
            return items.RemoveLast();
        }
        public nothrow inline const ValueType& Top() const
        {
            return items.Back();
        }
        public nothrow inline ValueType& Top()
        {
            return items.Back();
        }
        public nothrow void Clear()
        {
            items.Clear();
        }
        private List<ValueType> items;
    }
}
