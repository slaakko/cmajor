/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;
using System.Collections;

namespace System.Text.Parsing
{
    public class Scope: ParsingObject
    {
        public Scope(const string& name_, Scope* enclosingScope_): base(name_, enclosingScope_), fullNameComputed(false)
        {
        }
        public override void Accept(Visitor& visitor)
        {
            for (const Pair<string, ParsingObject*>& p : fullNameMap)
            {
                ParsingObject* object = p.second;
                object->Accept(visitor);
            }
        }
        public override string FullName()
        {
            if (!fullNameComputed)
            {
                Scope* parentScope = EnclosingScope();
                string parentScopeFullName;
                if (parentScope != null)
                {
                    parentScopeFullName = parentScope->FullName();
                }
                if (parentScopeFullName.IsEmpty())
                {
                    fullName = Name();
                }
                else 
                {
                    fullName = parentScopeFullName + "." + Name();
                }
                fullNameComputed = true;
            }
            return fullName;
        }
        public void SetNs(Namespace* ns_)
        {
            ns = ns_;
            Own(ns);
        }
        public nothrow inline Namespace* Ns() const
        {
            return ns;
        }
        public void Add(ParsingObject* object)
        {
            Own(object);
            string objectFullName = object->FullName();
            Pair<string, ParsingObject*> full = MakePair(objectFullName, object);
            if (!fullNameMap.Insert(full).second)
            {
                string msg = "object '" + objectFullName + "' already exists (detected in scope '" + FullName() + "')";
                throw Exception(msg);
            }
            Pair<string, ParsingObject*> short_ = MakePair(object->Name(), object);
            if (!shortNameMap.Insert(short_).second)
            {
                string msg = "object '" + objectFullName + "' already exists (detected in scope '" + FullName() + "')";
                throw Exception(msg);
            }
        }
        public ParsingObject* Get(const string& objectName) const
        {
            if (objectName.Find('.') != -1)
            {
                NameMapIt i = fullNameMap.Find(objectName);
                if (i != fullNameMap.End())
                {
                    return i->second;
                }
                else
                {
                    ParsingObject* object = GetQualifiedObject(objectName);
                    if (object != null)
                    {
                        return object;
                    }
                }
            }
            else
            {
                NameMapIt i = shortNameMap.Find(objectName);
                if (i != shortNameMap.End())
                {
                    return i->second;
                }
            }
            return null;
        }
        public void AddNamespace(Namespace* ns)
        {
            Own(ns);
            Namespace* parent = GetGlobalScope()->Ns();
            List<string> nameComponents = ns->FullName().Split('.');
            #assert(!nameComponents.IsEmpty());
            int n = nameComponents.Count();
            for (int i = 0; i < n - 1; ++i)
            {
                string namespaceName = nameComponents[i];
                Scope* enclosingScope = parent->GetScope();
                ParsingObject* object = enclosingScope->Get(namespaceName);
                if (object != null)
                {
                    if (object is Namespace*)
                    {
                        parent = cast<Namespace*>(object);
                    }
                    else
                    {
                        throw Exception("object '" + namespaceName + "' is not a namespace");
                    }
                }
                else
                {
                    parent = new Namespace(namespaceName, enclosingScope);
                    Own(parent);
                    parent->GetScope()->SetName(namespaceName);
                    parent->GetScope()->SetNs(parent);
                    enclosingScope->Add(parent);
                }
            }
            string name = nameComponents[n - 1];
            ns->SetName(name);
            ns->GetScope()->SetName(name);
            ns->SetEnclosingScope(parent->GetScope());
            ns->GetScope()->SetEnclosingScope(parent->GetScope());
            parent->GetScope()->Add(ns);
        }
        public Namespace* GetNamespace(const string& fullNamespaceName) const
        {
            ParsingObject* object = GetQualifiedObject(fullNamespaceName);
            if (object != null)
            {
                if (object is Namespace*)
                {
                    return cast<Namespace*>(object);
                }
                else
                {
                    throw Exception("object '" + fullNamespaceName + "' is not a namespace");
                }
            }
            return null;
        }
        private nothrow Scope* GetGlobalScope() const
        {
            Scope* globalScope = this;
            while (globalScope->EnclosingScope() != null)
            {
                globalScope = globalScope->EnclosingScope();
            }
            return globalScope;
        }
        private ParsingObject* GetQualifiedObject(const string& qualifiedObjectName) const
        {
            List<string> components = qualifiedObjectName.Split('.');
            int n = components.Count();
            Scope* scope = this;
            while (scope != null)
            {
                Scope* subScope = scope;
                int i = 0;
                NameMapIt it = subScope->shortNameMap.Find(components[i]);
                while (it != subScope->shortNameMap.End())
                {
                    ParsingObject* object = it->second;
                    if (i == n - 1)
                    {
                        return object;
                    }
                    ++i;
                    subScope = object->GetScope();
                    it = subScope->shortNameMap.Find(components[i]);
                }
                scope = scope->EnclosingScope();
            }
            return null;
        }
        private Namespace* ns;
        private bool fullNameComputed;
        private string fullName;
        private typedef Map<string, ParsingObject*> NameMap;
        private typedef NameMap.Iterator NameMapIt;
        private NameMap fullNameMap;
        private NameMap shortNameMap;
    }
}
