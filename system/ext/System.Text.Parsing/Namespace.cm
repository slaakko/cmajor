/*========================================================================
    Copyright (c) 2012-2014 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;

namespace System.Text.Parsing
{
    public class Namespace: ParsingObject
    {
        public Namespace(const string& qualifiedName_, Scope* enclosingScope_):
            base(qualifiedName_, enclosingScope_)
        {
            SetScope(new Scope(Name(), EnclosingScope()));
        }
        public override bool IsNamespace() const
        {
            return true;
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.BeginVisit(*this);
            GetScope()->Accept(visitor);
            visitor.EndVisit(*this);
        }
    }
    
    public class UsingObject: ParsingObject
    {
        public UsingObject(System.Text.Parsing.CmObjectModel.UsingObject* subject_, Scope* enclosingScope_):
            base(subject_->Name(), enclosingScope_), subject(subject_)
        {
            if (!subject->Owned())
            {
                subject->SetOwned();
                ownedSubject.Reset(subject);
            }
        }
        public override void Accept(Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        public System.Text.Parsing.CmObjectModel.UsingObject* Subject() const
        {
            return subject;
        }
        private System.Text.Parsing.CmObjectModel.UsingObject* subject;
        private UniquePtr<System.Text.Parsing.CmObjectModel.UsingObject> ownedSubject;
    }
}
