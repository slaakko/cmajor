/*========================================================================
    Copyright (c) 2012-2014 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;
using System.Collections;

namespace System.Text.Parsing
{
    public abstract class ParsingObject
    {
        public nothrow ParsingObject(const string& name_): owned(false), name(name_), enclosingScope(null), owner(external)
        {
        }
        public nothrow ParsingObject(const string& name_, Scope* enclosingScope_): owned(false), name(name_), enclosingScope(enclosingScope_), owner(external)
        {
        }
        public virtual ~ParsingObject()
        {
        }
        public virtual bool IsGrammar() const
        {
            return false;
        }
        public nothrow inline bool IsExternal() const
        {
            return owner == external;
        }
        public nothrow inline void SetExternal()
        {
            owner = external;
        }
        public abstract void Accept(Visitor& visitor);
        public nothrow inline const string& Name() const
        {
            return name;
        }
        public nothrow inline void SetName(const string& name_)
        {
            name = name_;
        }
        public virtual string FullName()
        {
            Scope* s = enclosingScope;
            string scopeName = "";
            if (s != null)
            {
                scopeName = s->FullName();
            }
            if (!scopeName.IsEmpty())
            {
                return scopeName + "." + name;
            }
            return name;
        }
        public nothrow inline Scope* EnclosingScope() const
        {
            return enclosingScope;
        }
        public nothrow inline void SetEnclosingScope(Scope* enclosingScope_)
        {
            enclosingScope = enclosingScope_;
        }
        public virtual void AddToScope()
        {
            Scope* es = EnclosingScope();
            if (es != null)
            {
                try
                {
                    es->Add(this);
                }
                catch (const Exception& ex)
                {
                    ThrowException(ex.Message(), GetPosition());
                }
                if (scope != null)
                {
                    scope->SetEnclosingScope(es);
                }
            }
        }
        public nothrow Scope* GetScope() const
        {
            if (scope == null)
            {
                return EnclosingScope();
            }
            return scope;
        }
        public void SetScope(Scope* scope_)
        {
            scope = scope_;
            Own(scope);
        }
        public virtual bool IsActionParser() const
        {
            return false;
        }
        public virtual bool IsNonterminalParser() const
        {
            return false;
        }
        public virtual bool IsRule() const
        {
            return false;
        }
        public virtual bool IsRuleLink() const
        {
            return false;
        }
        public virtual bool IsNamespace() const
        {
            return false;
        }
        public nothrow inline void SetOwner(int owner_)
        {
            owner = owner_;
        }
        public nothrow inline int Owner() const
        {
            return owner;
        }
        public nothrow inline void SetPosition(const Position& position_)
        {
            position = position_;
        }
        public nothrow inline const Position& GetPosition() const
        {
            return position;
        }
        public nothrow inline bool Owned() const
        {
            return owned;
        }
        public nothrow inline void SetOwned()
        {
            owned = true;
        }
        public void Own(ParsingObject* object)
        {
            if (object != null)
            {
                if (!object->Owned())
                {
                    object->SetOwned();
                    ownedObjects.Add(UniquePtr<ParsingObject>(object));
                }
            }
        }
        public const int external = -1;
        private bool owned;
        private string name;
        private Scope* enclosingScope;
        private Scope* scope;
        private int owner;
        private Position position;
        private List<UniquePtr<ParsingObject>> ownedObjects;
    }

    public class ParsingDomain: ParsingObject
    {
        public ParsingDomain(): base("parsing_domain"), globalNamespace(new Namespace("", null)), globalScope(globalNamespace->GetScope()), currentNamespace(globalNamespace)
        {
            Own(globalNamespace);
            globalScope->SetNs(globalNamespace);
            namespaceMap[currentNamespace->FullName()] = currentNamespace;
        }
        public Scope* GetNamespaceScope(const string& fullNamespaceName)
        {
            if (fullNamespaceName.IsEmpty())
            {
                return globalScope;
            }
            Namespace* ns = globalScope->GetNamespace(fullNamespaceName);
            if (ns == null)
            {
                ns = new Namespace(fullNamespaceName, globalScope);
                Own(ns);
                globalScope->AddNamespace(ns);
            }
            return ns->GetScope();
        }
        public nothrow Grammar* GetGrammar(const string& grammarName)
        {
            GrammarMapIt i = grammarMap.Find(grammarName);
            if (i != grammarMap.End())
            {
                return i->second;
            }
            return null;
        }
        public void AddGrammar(Grammar* grammar)
        {
            Own(grammar);
            string grammarFullName = grammar->FullName();
            GrammarMapIt i = grammarMap.Find(grammarFullName);
            if (i == grammarMap.End())
            {
                grammarMap[grammarFullName] = grammar;
                grammar->SetNs(currentNamespace);
                grammar->AddToScope();
            }
        }
        public void BeginNamespace(const string& ns)
        {
            string fullNamespaceName = ns;
            if (!currentNamespace->FullName().IsEmpty())
            {
                fullNamespaceName = currentNamespace->FullName() + "." + ns;
            }
            namespaceStack.Push(currentNamespace);
            NamespaceMapIt i = namespaceMap.Find(fullNamespaceName);
            if (i != namespaceMap.End())
            {
                currentNamespace = i->second;
            }
            else
            {
                Namespace* newNs(new Namespace(fullNamespaceName, globalScope));
                Own(newNs);
                newNs->GetScope()->SetNs(newNs);
                namespaceMap[newNs->FullName()] = newNs;
                currentNamespace = newNs;
                globalScope->AddNamespace(newNs);
            }
        }
        public void EndNamespace()
        {
            currentNamespace = namespaceStack.Pop();
        }
        public nothrow inline Namespace* GlobalNamespace() const
        {
            return globalNamespace;
        }
        public nothrow inline Namespace* CurrentNamespace() const
        {
            return currentNamespace;
        }
        public nothrow inline Scope* CurrentScope() const
        {
            return currentNamespace->GetScope();
        }
        private typedef Map<string, Grammar*> GrammarMap;
        private typedef GrammarMap.Iterator GrammarMapIt;
        private GrammarMap grammarMap;
        private Namespace* globalNamespace;
        private Scope* globalScope;
        private Namespace* currentNamespace;
        private typedef Map<string, Namespace*> NamespaceMap;
        private typedef NamespaceMap.Iterator NamespaceMapIt;
        private NamespaceMap namespaceMap;
        private Stack<Namespace*> namespaceStack;
    }

    internal class ParsingDomainRepository
    {
        static nothrow ParsingDomainRepository(): instance(new ParsingDomainRepository())
        {
        }
        public static ParsingDomainRepository& Instance()
        {
            return *instance;
        }
        private nothrow ParsingDomainRepository()
        {
        }
        public void Register(ParsingDomain* parsingDomain)
        {
            if (!parsingDomain->Owned())
            {
                parsingDomain->SetOwned();
                parsingDomains.Add(UniquePtr<ParsingDomain>(parsingDomain));
            }
        }
        private static UniquePtr<ParsingDomainRepository> instance;
        private List<UniquePtr<ParsingDomain>> parsingDomains;
    }

    public void RegisterParsingDomain(ParsingDomain* parsingDomain)
    {
        ParsingDomainRepository.Instance().Register(parsingDomain);
    }

    public abstract class Parser: ParsingObject
    {
        public nothrow Parser(const string& name_, const string& info_): base(name_), info(info_)
        {
        }
        public nothrow inline const string& Info() const
        {
            return info;
        }
        public abstract Match Parse(Scanner& scanner, Stack<UniquePtr<Object>>& stack);
        private string info;
    }
}
