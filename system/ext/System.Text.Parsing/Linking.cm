/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

// Copyright (c) 1994
// Hewlett-Packard Company
// Copyright (c) 1996
// Silicon Graphics Computer Systems, Inc.
// Copyright (c) 2009 Alexander Stepanov and Paul McJones

using System;

namespace System.Text.Parsing
{
    public class LinkerVisitor: Visitor
    {
        public nothrow LinkerVisitor(): currentGrammar(null), currentRule(null), actionNumber(0)
        {
        }
        public override void BeginVisit(Grammar& grammar)
        {
            if (!grammar.IsExternal())
            {
                currentGrammar = &grammar;
            }
            else
            {
                currentGrammar = null;
            }
        }
        public override void EndVisit(Grammar& grammar)
        {
            if (currentGrammar != null)
            {
                currentGrammar->ResolveStartRule();
                currentGrammar->ResolveSkipRule();
            }
        }
        public override void Visit(RuleLink& link)
        {
            if (currentGrammar != null)
            {
                ParsingObject* object = currentGrammar->GetScope()->Get(link.LinkedRuleName());
                if (object != null)
                {
                    if (object->IsRule())
                    {
                        Rule* rule = cast<Rule*>(object);
                        link.SetRule(rule);
                        currentGrammar->AddGrammarReference(rule->GetGrammar());
                        link.AddToScope();
                    }
                    else
                    {
                        ThrowException("'" + link.LinkedRuleName() + "' is not a rule", link.GetSpan());
                    }
                }
                else
                {
                    ThrowException("rule '" + link.LinkedRuleName() + "' not found", link.GetSpan());
                }
            }
        }
        public override void BeginVisit(Rule& parser)
        {
            if (currentGrammar != null)
            {
                currentRule = &parser;
                actionNumber = 0;
            }
        }
        public override void EndVisit(Rule& parser)
        {
            if (currentGrammar != null)
            {
                parser.Link();
            }
        }
        public override void BeginVisit(ActionParser& parser)
        {
            if (currentGrammar != null)
            {
                if (parser.Name().IsEmpty())
                {
                    parser.SetName("A" + ToString(actionNumber));
                    ++actionNumber;
                }
                currentRule->AddAction(&parser);
            }
        }
        public override void Visit(NonterminalParser& parser)
        {
            if (currentGrammar != null)
            {
                try
                {
                    Rule* rule = currentGrammar->GetRule(parser.RuleName());
                    parser.SetRule(rule);
                    if (parser.IsSpecialized())
                    {
                        currentRule->AddNonterminal(cast<NonterminalParser*>(&parser));
                    }
                }
                catch (const ParsingException& ex)
                {
                    ThrowException(ex.Message(), parser.GetSpan());
                }
                catch (const Exception& ex)
                {
                    ThrowException(ex.Message(), parser.GetSpan());
                }
                if (parser.NumberOfArguments() != parser.GetRule()->NumberOfParameters())
                {
                    ThrowException("rule '" + parser.RuleName() + "' takes " + ToString(parser.GetRule()->NumberOfParameters()) + " parameters (" + ToString(parser.NumberOfArguments()) + " arguments supplied)",
                        parser.GetSpan());
                }
            }
        }
        public override void Visit(KeywordParser& parser)
        {
            if (currentGrammar != null)
            {
                if (!parser.ContinuationRuleName().IsEmpty())
                {
                    parser.SetContinuationRule(currentGrammar->GetRule(parser.ContinuationRuleName()));
                }
            }
        }
        public override void Visit(KeywordListParser& parser)
        {
            if (currentGrammar != null)
            {
                parser.SetSelectorRule(currentGrammar->GetRule(parser.SelectorRuleName()));
            }
        }
        private Grammar* currentGrammar;
        private Rule* currentRule;
        private int actionNumber;
    }
    
    public void Link(ParsingDomain* parsingDomain)
    {
        LinkerVisitor visitor;
        parsingDomain->GlobalNamespace()->Accept(visitor);
    }
    
    public class ExpandCodeVisitor: Visitor
    {
        public override void BeginVisit(Grammar& grammar)
        {
            if (!grammar.IsExternal())
            {
                for (Rule* rule : grammar.GetRules())
                {
                    rule->ExpandCode();
                }
            }
        }
    }

    public void ExpandCode(ParsingDomain* parsingDomain)
    {
        ExpandCodeVisitor visitor;
        parsingDomain->GlobalNamespace()->Accept(visitor);
    }
}
