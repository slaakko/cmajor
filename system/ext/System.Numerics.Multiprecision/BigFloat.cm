/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

using System;
using System.IO;

namespace System.Numerics.Multiprecision
{
    public static class BigFloatDefaultPrecisionSetter
    {
        static nothrow BigFloatDefaultPrecisionSetter()
        {
            set_default_prec_mpf(256u);
        }
        public static nothrow void Init()
        {
        }
    }
    
    public uint GetBigFloatDefaultPrecision()
    {
        return get_default_prec_mpf();
    }
    
    public class Precision
    {
        public nothrow Precision() : prec(256u)
        {
        }
        public explicit nothrow Precision(uint prec_) : prec(prec_)
        {
        }
        public nothrow operator uint() const
        {
            return prec;
        }
        private uint prec;
    }   
    
    public class BigFloat
    {
        public nothrow BigFloat() : mpf(null)
        {
            BigFloatDefaultPrecisionSetter.Init();
            mpf = create_mpf();
        }
        public explicit nothrow BigFloat(const Precision& prec) : mpf(create_mpf_prec(prec))
        {
        }
        public nothrow BigFloat(const BigFloat& that) : mpf(create_mpf())
        {
            set_mpf(mpf, that.mpf);
        }
        public nothrow BigFloat(BigFloat&& that) : mpf(that.mpf)
        {
            that.mpf = null;
        }
        public nothrow BigFloat(int that) : mpf(create_mpf())
        {
            set_mpf_si(mpf, that);
        }
        public nothrow BigFloat(uint that) : mpf(create_mpf())
        {
            set_mpf_ui(mpf, that);
        }
        public nothrow BigFloat(double that) : mpf(create_mpf())
        {
            set_mpf_d(mpf, that);
        }
        public nothrow BigFloat(const BigInt& that) : mpf(create_mpf())
        {
            set_mpf_z(mpf, that.Handle());
        }
        public nothrow BigFloat(const BigRational& that) : mpf(create_mpf())
        {
            set_mpf_q(mpf, that.Handle());
        }
        public BigFloat(const string& str) : this(str, 10)
        {
        }
        public BigFloat(const string& str, int base_) : mpf(create_mpf())
        {
            int result = set_mpf_str(mpf, str.Chars(), base_);
            if (result != 0)
            {
                ThrowConversionException("invalid string for initializing BigFloat");
            }
        }
        public nothrow ~BigFloat()
        {
            if (mpf != null)
            {
                destroy_mpf(mpf);
            }        
        }
        public nothrow void operator=(const BigFloat& that) 
        {
            if (mpf != null)
            {
                destroy_mpf(mpf);
            }
            mpf = create_mpf();
            set_mpf(mpf, that.Handle());
        }
        public nothrow void operator=(int that)
        {
            if (mpf != null)
            {
                destroy_mpf(mpf);
            }
            mpf = create_mpf();
            set_mpf_si(mpf, that);
        }
        public nothrow void operator=(uint that)
        {
            if (mpf != null)
            {
                destroy_mpf(mpf);
            }
            mpf = create_mpf();
            set_mpf_ui(mpf, that);
        }
        public nothrow void operator=(double that)
        {
            if (mpf != null)
            {
                destroy_mpf(mpf);
            }
            mpf = create_mpf();
            set_mpf_d(mpf, that);
        }
        public nothrow void operator=(const BigInt& that)
        {
            if (mpf != null)
            {
                destroy_mpf(mpf);
            }
            mpf = create_mpf();
            set_mpf_z(mpf, that.Handle());
        }
        public nothrow void operator=(const BigRational& that)
        {
            if (mpf != null)
            {
                destroy_mpf(mpf);
            }
            mpf = create_mpf();
            set_mpf_q(mpf, that.Handle());
        }
        public default nothrow void operator=(BigFloat&&);
        public nothrow string ToString() const
        {
            return this->ToString(10);
        }
        public nothrow string ToString(int base_) const
        {
            return this->ToString(base_, 0u);
        }
        public nothrow string ToString(int base_, uint numDigits) const
        {
            int exponent = 0;
            char* str = get_mpf_str(mpf, base_, numDigits, &exponent);
            string s(str);
            free(str);
            return s.Substring(0, exponent) + "." + s.Substring(exponent);
        }
        public nothrow inline void* Handle() const
        {
            return mpf;
        }
        private void* mpf;
    }
    
    public nothrow BigFloat operator-(const BigFloat& x)
    {
        BigFloat result;
        neg_mpf(result.Handle(), x.Handle());
        return result;
    }
    
    public nothrow BigFloat Abs(const BigFloat& x)
    {
        BigFloat result;
        abs_mpf(result.Handle(), x.Handle());
        return result;
    }
    
    public nothrow BigFloat operator+(const BigFloat& left, const BigFloat& right)
    {
        BigFloat result;
        add_mpf(result.Handle(), left.Handle(), right.Handle());
        return result;
    }
    
    public nothrow BigFloat operator-(const BigFloat& left, const BigFloat& right)
    {
        BigFloat result;
        sub_mpf(result.Handle(), left.Handle(), right.Handle());
        return result;
    }
    
    public nothrow BigFloat operator*(const BigFloat& left, const BigFloat& right)
    {
        BigFloat result;
        mul_mpf(result.Handle(), left.Handle(), right.Handle());
        return result;
    }
    
    public nothrow BigFloat operator/(const BigFloat& left, const BigFloat& right)
    {
        BigFloat result;
        div_mpf(result.Handle(), left.Handle(), right.Handle());
        return result;
    }
    
    public nothrow bool operator==(const BigFloat& left, const BigFloat& right)
    {
        return cmp_mpf(left.Handle(), right.Handle()) == 0;
    }

    public nothrow bool operator<(const BigFloat& left, const BigFloat& right)
    {
        return cmp_mpf(left.Handle(), right.Handle()) < 0;
    }
    
    public nothrow BigFloat Ceil(const BigFloat& x)
    {
        BigFloat target;
        ceil_mpf(target.Handle(), x.Handle());
        return target;
    }
    
    public nothrow BigFloat Floor(const BigFloat& x)
    {
        BigFloat target;
        floor_mpf(target.Handle(), x.Handle());
        return target;
    }

    public nothrow BigFloat Trunc(const BigFloat& x)
    {
        BigFloat target;
        trunc_mpf(target.Handle(), x.Handle());
        return target;
    }
    
    public nothrow BigFloat Sqrt(const BigFloat& x)
    {
        BigFloat target;
        sqrt_mpf(target.Handle(), x.Handle());
        return target;
    }
}
