/*========================================================================
    Copyright (c) 2012-2015 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

[cpp]#include <Cm.Parsing.Cpp/Expression.hpp>
[cpp]#include <Cm.Parsing.Cpp/Declaration.hpp>
[cpp]#include <Cm.Parsing.Cpp/Declarator.hpp>
[cpp]#include <Cm.Parsing.Cpp/Identifier.hpp>
[hpp]#include <Cm.Parsing.CppObjectModel/Statement.hpp>
[cpp]#include <Cm.Parsing.CppObjectModel/Type.hpp>

namespace Cm.Parsing.Cpp
{
    [cpp]using namespace Cm::Parsing::CppObjectModel;
    
    grammar StatementGrammar
    {
        using ExpressionGrammar.Expression;
        using ExpressionGrammar.ConstantExpression;
        using ExpressionGrammar.AssignmentExpression;
        using DeclaratorGrammar.TypeId;
        using DeclaratorGrammar.Declarator;
        using DeclaratorGrammar.TypeSpecifierSeq;
        using DeclaratorGrammar.AbstractDeclarator;
        using IdentifierGrammar.Identifier;
        using DeclarationGrammar.SimpleDeclaration;
        using DeclarationGrammar.BlockDeclaration;
        
        Statement: Cm::Parsing::CppObjectModel::Statement*
                    ::= LabeledStatement{ value = LabeledStatement; }
                    |   EmptyStatement{ value = EmptyStatement; }
                    |   CompoundStatement{ value = CompoundStatement; }
                    |   SelectionStatement{ value = SelectionStatement; }
                    |   IterationStatement{ value = IterationStatement; }
                    |   JumpStatement{ value = JumpStatement; }
                    |   DeclarationStatement{ value = DeclarationStatement; }
                    |   TryStatement{ value = TryStatement; }
                    |   ExpressionStatement{ value = ExpressionStatement; }
                    ;
        
        LabeledStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= (Label (':' - "::") Statement:s1!){ value = new LabeledStatement(Label, s1); }
                    |   (keyword("case") ConstantExpression! ':'! Statement:s2!){ value = new CaseStatement(ConstantExpression, s2); }
                    |   (keyword("default") ':'! Statement:s3!){ value = new DefaultStatement(s3); }
                    ;
                    
        Label: std::string
                    ::= Identifier{ value = Identifier; }
                    ;
                    
        EmptyStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= ';'{ value = new EmptyStatement(); }
                    ;
                    
        ExpressionStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= (Expression ';'!){ value = new ExpressionStatement(Expression); }
                    ;
                    
        CompoundStatement: Cm::Parsing::CppObjectModel::CompoundStatement*
                    ::= '{'{ value = new CompoundStatement(); } 
                        (Statement{ value->Add(Statement); })* 
                        '}'!
                    ;
                    
        SelectionStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= IfStatement{ value = IfStatement; }
                    |   SwitchStatement{ value = SwitchStatement; }
                    ;
                    
        IfStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= (keyword("if") '('! Condition! ')'! Statement:thenStatement! (keyword("else") Statement:elseStatement!)?)
                    {
                        value = new IfStatement(Condition, thenStatement, elseStatement);
                    }
                    ;
                    
        SwitchStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= keyword("switch") '('! Condition! ')'! Statement!
                    {
                        value = new SwitchStatement(Condition, Statement);
                    }
                    ;
                    
        IterationStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= WhileStatement{ value = WhileStatement; }
                    |   DoStatement{ value = DoStatement; }
                    |   ForStatement{ value = ForStatement; }
                    ;
                    
        WhileStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= keyword("while") '('! Condition! ')'! Statement!
                    {
                        value = new WhileStatement(Condition, Statement);
                    }
                    ;
                    
        DoStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= keyword("do") Statement! keyword("while")! '('! Expression! ')'! ';'!
                    {
                        value = new DoStatement(Statement, Expression);
                    }
                    ;
                    
        ForStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= keyword("for") '('! ForInitStatement! Condition? ';'! Expression? ')'! Statement!
                    {
                        value = new ForStatement(ForInitStatement, Condition, Expression, Statement);
                    }
                    ;
                    
        ForInitStatement: Cm::Parsing::CppObjectModel::CppObject*
                    ::= EmptyStatement{ value = EmptyStatement; }
                    |   ExpressionStatement{ value = ExpressionStatement; }
                    |   SimpleDeclaration{ value = SimpleDeclaration; }
                    ;
                    
        JumpStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= BreakStatement{ value = BreakStatement; }
                    |   ContinueStatement{ value = ContinueStatement; }
                    |   ReturnStatement{ value = ReturnStatement; }
                    |   GotoStatement{ value = GotoStatement; }
                    ;
                    
        BreakStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= keyword("break") ';'!
                    {
                        value = new BreakStatement(); 
                    }
                    ;
                    
        ContinueStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= keyword("continue") ';'!
                    {
                        value = new ContinueStatement();
                    }
                    ;
                    
        ReturnStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= keyword("return") Expression? ';'!
                    {
                        value = new ReturnStatement(Expression);
                    }
                    ;
                    
        GotoStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= keyword("goto") GotoTarget! ';'!
                    {
                        value = new GotoStatement(GotoTarget);
                    }
                    ;
                    
        GotoTarget: std::string
                    ::= Identifier{ value = Identifier; }
                    ;
                    
        DeclarationStatement: Cm::Parsing::CppObjectModel::Statement*
                    ::= BlockDeclaration{ value = new DeclarationStatement(BlockDeclaration); }
                    ;
                    
        Condition: Cm::Parsing::CppObjectModel::CppObject*
                    ::= TypeId Declarator '=' AssignmentExpression{ value = new ConditionWithDeclarator(TypeId, Declarator, AssignmentExpression); }
                    |   Expression{ value = Expression; }
                    ;
                    
        TryStatement: Cm::Parsing::CppObjectModel::TryStatement*
                    ::= keyword("try") CompoundStatement! { value = new TryStatement(CompoundStatement); }
                    HandlerSeq(value)!
                    ;
        
        HandlerSeq(TryStatement* st)
                    ::= Handler!{ st->Add(Handler); } HandlerSeq(st)?
                    ;
        
        Handler: Cm::Parsing::CppObjectModel::Handler*
                    ::= keyword("catch") '('! ExceptionDeclaration! ')'! CompoundStatement!
                    {
                        value = new Handler(ExceptionDeclaration, CompoundStatement);
                    }
                    ;
                    
        ExceptionDeclaration: Cm::Parsing::CppObjectModel::ExceptionDeclaration*
                    ::= empty{ value = new ExceptionDeclaration(); }
                    (
                        TypeSpecifierSeq(value->GetTypeId())
                        (   Declarator{ value->GetTypeId()->Declarator() = Declarator; }
                        |   AbstractDeclarator{ value->GetTypeId()->Declarator() = AbstractDeclarator; }
                        |   empty
                        )
                    |   "..."{ value->CatchAll() = true; }
                    )
                    ;
    }
}
